
ADC.elf:     file format elf32-littlenios2
ADC.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010748 memsz 0x00010a34 flags rwx
    LOAD off    0x00012000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  00012000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e2dc  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d4  0000e490  0000e490  0000f490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f04  0000e864  0000e864  0000f864  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00010768  00010768  00011768  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00012000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf0  00000000  00000000  00012028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000160f  00000000  00000000  00012d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024815  00000000  00000000  00014327  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008085  00000000  00000000  00038b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014bd0  00000000  00000000  00040bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c00  00000000  00000000  00055794  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002327  00000000  00000000  00057394  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c287  00000000  00000000  000596bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00065944  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009c0  00000000  00000000  00065958  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000696a5  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000696a8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000696b4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000696b5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000696b6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000696c1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000696cc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  000696d7  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000003  00000000  00000000  000696df  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000e0f1e  00000000  00000000  000696e2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000e490 l    d  .rodata	00000000 .rodata
0000e864 l    d  .rwdata	00000000 .rwdata
00010768 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 adc_spi_read.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000390 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000016e4 l     F .text	00000058 __sprint_r
0000e61a l     O .rodata	00000010 blanks.3452
0000e60a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003760 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005188 l     F .text	00000058 std
00005294 l     F .text	00000008 __fp_lock
0000529c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000e864 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001072c l     O .rwdata	00000004 charset
0000e650 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000e798 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009b34 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009e48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009ea8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009fac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a0d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a224 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a454 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010750 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a70c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f220 l     O .rwdata	000000c8 epcs_flash_controller_0
0000f2e8 l     O .rwdata	00001060 jtag_uart_0
00010348 l     O .rwdata	000000c4 New_UltraSound0
0001040c l     O .rwdata	000000c4 New_UltraSound1
000104d0 l     O .rwdata	000000c4 New_UltraSound2
00010594 l     O .rwdata	000000c4 New_UltraSound3
00010658 l     O .rwdata	000000c4 uart_0
0000a8b8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0000a97c l     F .text	00000288 alt_epcs_flash_query
0000a944 l     F .text	00000038 alt_flash_device_register
0000ac04 l     F .text	00000108 alt_epcs_flash_memcmp
0000b08c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b4dc l     F .text	00000228 altera_avalon_jtag_uart_irq
0000b704 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000bd80 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000c040 l     F .text	0000009c altera_avalon_uart_irq
0000c0dc l     F .text	000000e0 altera_avalon_uart_rxirq
0000c1bc l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000c5a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000c7d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0000c988 l     F .text	00000038 epcs_await_wip_released
0000c9c0 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d10c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d5d0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000d720 l     F .text	000000f8 alt_file_locked
0000d9a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e278 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000e42c l     F .text	00000040 alt_sim_halt
00006f78 g     F .text	00000094 _mprec_log10
0000af8c g     F .text	00000090 alt_epcs_flash_get_info
00007064 g     F .text	00000088 __any_on
00008890 g     F .text	00000070 _isatty_r
0000e770 g     O .rodata	00000028 __mprec_tinytens
0000a284 g     F .text	0000006c alt_main
000107c4 g     O .bss	00000100 alt_irq
00008900 g     F .text	00000078 _lseek_r
000096bc g     F .text	00000088 __eqdf2
00010a54 g       *ABS*	00000000 __alt_heap_start
0000166c g     F .text	00000044 printf
000082d4 g     F .text	00000068 __sseek
000051f0 g     F .text	000000a4 __sinit
00005efc g     F .text	00000084 _setlocale_r
000052f0 g     F .text	0000009c __sfmoreglue
0000a310 g     F .text	00000020 __malloc_unlock
000069f4 g     F .text	000000e0 memmove
000052e0 g     F .text	00000010 _cleanup
000070ec g     F .text	000000bc _Balloc
000097cc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000c890 g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
0000881c g     F .text	00000074 _fstat_r
00010780 g     O .bss	00000004 errno
00010788 g     O .bss	00000004 alt_argv
0001871c g       *ABS*	00000000 _gp
0000f0a0 g     O .rwdata	00000180 alt_fd_list
0000cb94 g     F .text	00000064 epcs_write_status_register
0000de00 g     F .text	00000094 alt_find_dev
00006954 g     F .text	000000a0 memcpy
000052d4 g     F .text	0000000c _cleanup_r
00009964 g     F .text	000000f8 __floatsidf
0000d6a8 g     F .text	00000078 alt_io_redirect
000098dc g     F .text	00000088 __ltdf2
0000e490 g       *ABS*	00000000 __DTOR_END__
0001071c g     O .rwdata	00000002 adc_channel
0000b120 g     F .text	0000011c alt_epcs_flash_write_block
00006ec8 g     F .text	000000b0 __ratio
0000b91c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000016b0 g     F .text	00000034 _printf_r
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00009c70 g     F .text	00000008 __udivsi3
0000a00c g     F .text	000000c4 isatty
0000e680 g     O .rodata	000000c8 __mprec_tens
00005ed8 g     F .text	00000008 __locale_charset
00010774 g     O .bss	00000004 __malloc_top_pad
00010728 g     O .rwdata	00000004 __mb_cur_max
00005ee0 g     F .text	0000000c _localeconv_r
00007850 g     F .text	0000003c __i2b
000058bc g     F .text	0000049c __sfvwrite_r
0000825c g     F .text	00000070 _sbrk_r
00008978 g     F .text	00000078 _read_r
0000ec64 g     O .rwdata	0000000c __lc_ctype
00010748 g     O .rwdata	00000004 alt_max_fd
000014fc g     F .text	00000138 __unpack_d
000086f8 g     F .text	00000110 _fclose_r
00005154 g     F .text	00000034 fflush
00010778 g     O .bss	00000004 __malloc_max_sbrked_mem
000001ec g     F .text	000000f4 ADC_Read
00000820 g     F .text	00000074 __adddf3
0000b01c g     F .text	00000070 alt_epcs_flash_erase_block
00006da8 g     F .text	00000120 __b2d
0000905c g     F .text	00000660 __umoddi3
0000a130 g     F .text	000000f4 lseek
00010724 g     O .rwdata	00000004 _global_impure_ptr
0000ceac g     F .text	00000058 epcs_exit_4_bytes_mode
00007bf8 g     F .text	000005f4 _realloc_r
00010a54 g       *ABS*	00000000 __bss_end
0000d4d8 g     F .text	000000f8 alt_iic_isr_register
0000da9c g     F .text	0000010c alt_tick
000089f0 g     F .text	0000066c __udivdi3
0000e748 g     O .rodata	00000028 __mprec_bigtens
00007ad8 g     F .text	00000120 __s2b
00000eb0 g     F .text	00000194 __floatunsidf
00006cc8 g     F .text	00000060 __mcmp
0000bf78 g     F .text	000000c8 altera_avalon_uart_init
000052bc g     F .text	00000018 __fp_lock_all
0000d490 g     F .text	00000048 alt_ic_irq_enabled
0000da04 g     F .text	00000098 alt_alarm_stop
00010790 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000f078 g     O .rwdata	00000028 alt_dev_null
00006b94 g     F .text	00000070 __hi0bits
00009a5c g     F .text	000000d8 __fixdfsi
00010740 g     O .rwdata	00000008 alt_dev_list
0000a5e8 g     F .text	00000124 write
00009ed4 g     F .text	000000d8 fstat
000079b8 g     F .text	00000120 __pow5mult
00010768 g     O .bss	00000004 __nlocale_changed
00009c78 g     F .text	00000008 __umodsi3
0000cd68 g     F .text	0000006c epcs_read_electronic_signature
00010a54 g       *ABS*	00000000 end
0000c608 g     F .text	000001c8 altera_avalon_uart_write
0000b41c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000e48c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000bdf0 g     F .text	00000090 alt_avalon_timer_sc_init
0000bed8 g     F .text	00000058 altera_avalon_uart_write_fd
00001168 g     F .text	00000080 __clzsi2
0000bf30 g     F .text	00000048 altera_avalon_uart_close_fd
0000bb40 g     F .text	00000240 altera_avalon_jtag_uart_write
000051e0 g     F .text	00000004 __sfp_lock_acquire
00006870 g     F .text	000000e4 memchr
0000173c g     F .text	00001ec4 ___vfprintf_internal_r
000055a8 g     F .text	00000314 _free_r
0000e27c g     F .text	000001b0 __call_exitprocs
0001076c g     O .bss	00000004 __mlocale_changed
00010734 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	00000038 _start
00010794 g     O .bss	00000004 _alt_tick_rate
000074b0 g     F .text	0000014c __lshift
0000dbc8 g     F .text	00000238 alt_avalon_spi_command
00010798 g     O .bss	00000004 _alt_nticks
0000a330 g     F .text	00000124 read
0000a7a0 g     F .text	00000118 alt_sys_init
0000e144 g     F .text	00000134 __register_exitproc
000075fc g     F .text	00000254 __multiply
0000b7b4 g     F .text	00000074 altera_avalon_jtag_uart_close
00001634 g     F .text	00000038 __mulsi3
0001079c g     O .bss	00000028 __malloc_current_mallinfo
000071a8 g     F .text	0000017c __d2b
0000c830 g     F .text	00000060 epcs_read_status_register
0000b2d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000dfb4 g     F .text	000000d0 alt_get_fd
00009c80 g     F .text	000000c8 __fpcmp_parts_d
00008688 g     F .text	00000070 _close_r
0000cdd4 g     F .text	00000080 epcs_read_device_id
0000e0d0 g     F .text	00000074 memcmp
0000b384 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010a54 g       *ABS*	00000000 __alt_stack_base
0000b3cc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00003624 g     F .text	0000013c __swsetup_r
00000c58 g     F .text	00000258 __divdf3
0000538c g     F .text	000000f0 __sfp
0000700c g     F .text	00000058 __copybits
0000ec70 g     O .rwdata	00000408 __malloc_av_
000051ec g     F .text	00000004 __sinit_lock_release
00000894 g     F .text	000003c4 __muldf3
000083b8 g     F .text	00000060 __sread
0000de94 g     F .text	00000120 alt_find_file
0000d058 g     F .text	000000b4 alt_dev_llist_insert
0000a2f0 g     F .text	00000020 __malloc_lock
0000a52c g     F .text	000000bc sbrk
00004f58 g     F .text	000001fc _fflush_r
000085c0 g     F .text	000000c8 _calloc_r
00010754 g     O .rwdata	00000008 alt_flash_dev_list
00010768 g       *ABS*	00000000 __bss_start
00006ad4 g     F .text	00000098 memset
000002e0 g     F .text	000000b0 main
0001078c g     O .bss	00000004 alt_envp
0001077c g     O .bss	00000004 __malloc_max_total_mem
0000b32c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000082cc g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00008808 g     F .text	00000014 fclose
000108c4 g     O .bss	00000190 _atexit0
000039a4 g     F .text	000015b4 _dtoa_r
00006130 g     F .text	00000740 _malloc_r
0001074c g     O .rwdata	00000004 alt_errno
00005e20 g     F .text	000000b8 _fwalk
00009bb0 g     F .text	00000060 __divsi3
0000e498 g     O .rodata	00000014 __thenan_df
0000547c g     F .text	0000012c _malloc_trim_r
0000e490 g       *ABS*	00000000 __CTOR_END__
0000ad0c g     F .text	00000280 alt_epcs_flash_write
00008418 g     F .text	000000bc strcmp
0000e490 g       *ABS*	00000000 __DTOR_LIST__
00009744 g     F .text	00000088 __nedf2
0000a76c g     F .text	00000034 alt_irq_init
0000a4b4 g     F .text	00000078 alt_release_fd
0000e4ac g     O .rodata	00000100 __clz_tab
00010770 g     O .bss	00000004 _PathLocale
0000e084 g     F .text	00000014 atexit
00008548 g     F .text	00000078 _write_r
00005f80 g     F .text	0000001c setlocale
00010720 g     O .rwdata	00000004 _impure_ptr
00010784 g     O .bss	00000004 alt_argc
0000d1d0 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00006d28 g     F .text	00000080 __ulp
000081ec g     F .text	00000040 __isinfd
000052a4 g     F .text	00000018 __fp_unlock_all
00010738 g     O .rwdata	00000008 alt_fs_list
00005eec g     F .text	00000010 localeconv
0000c9f8 g     F .text	0000014c epcs_read_buffer
0000a8f0 g     F .text	00000054 alt_epcs_flash_init
0000d304 g     F .text	00000050 alt_ic_isr_register
00010768 g       *ABS*	00000000 _edata
0000be80 g     F .text	00000058 altera_avalon_uart_read_fd
00010a54 g       *ABS*	00000000 _end
0000d234 g     F .text	0000007c alt_flash_open_dev
0000b828 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000d3f0 g     F .text	000000a0 alt_ic_irq_disable
0000ce54 g     F .text	00000058 epcs_enter_4_bytes_mode
0000833c g     F .text	0000007c __swrite
00010730 g     O .rwdata	00000004 __malloc_trim_threshold
0000dba8 g     F .text	00000020 altera_nios2_qsys_irq_init
0000e098 g     F .text	00000038 exit
00005d58 g     F .text	000000c8 _fwalk_reent
00007324 g     F .text	0000018c __mdiff
0000d2b0 g     F .text	00000054 alt_flash_close_dev
00009c10 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000051e4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000c318 g     F .text	00000060 altera_avalon_uart_close
0000e46c g     F .text	00000020 _exit
0000822c g     F .text	00000030 __isnand
0000cf04 g     F .text	00000154 alt_alarm_start
00001044 g     F .text	00000124 __muldi3
00005f9c g     F .text	00000194 __smakebuf_r
000084d4 g     F .text	00000074 strlen
0000cb44 g     F .text	00000050 epcs_write_enable
0000d818 g     F .text	0000018c open
00009854 g     F .text	00000088 __gedf2
0001075c g     O .rwdata	00000004 alt_priority_mask
0000d354 g     F .text	0000009c alt_ic_irq_enable
00003600 g     F .text	00000024 __vfprintf_internal
0000c378 g     F .text	00000230 altera_avalon_uart_read
000007a0 g     F .text	00000080 __subdf3
0000b23c g     F .text	00000098 alt_epcs_flash_read
00006c04 g     F .text	000000c4 __lo0bits
00010760 g     O .rwdata	00000008 alt_alarm_list
0000d16c g     F .text	00000064 _do_ctors
00009d48 g     F .text	00000100 close
000011e8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000051e8 g     F .text	00000004 __sinit_lock_acquire
0000cbf8 g     F .text	00000170 epcs_write_buffer
0000788c g     F .text	0000012c __multadd
00006b6c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c1f104 	addi	r3,r3,1988
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c1f104 	addi	r3,r3,1988
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6a1c714 	ori	gp,gp,34588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	1081da14 	ori	r2,r2,1896

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c29514 	ori	r3,r3,2644

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e4:	000a2840 	call	a284 <alt_main>

000001e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1e8:	003fff06 	br	1e8 <alt_after_alt_main>

000001ec <ADC_Read>:
#include <unistd.h>

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

double ADC_Read(alt_u8 Channel) {
     1ec:	defffb04 	addi	sp,sp,-20
     1f0:	dfc00415 	stw	ra,16(sp)
     1f4:	df000315 	stw	fp,12(sp)
     1f8:	df000304 	addi	fp,sp,12
     1fc:	e13fff05 	stb	r4,-4(fp)
	IOWR(ADC_SPI_READ_BASE, 0, Channel);
     200:	e0ffff03 	ldbu	r3,-4(fp)
     204:	00808074 	movhi	r2,513
     208:	10a8f604 	addi	r2,r2,-23592
     20c:	10c00035 	stwio	r3,0(r2)
	IOWR(ADC_SPI_READ_BASE, 0, Channel|START_FLAG);
     210:	e0bfff03 	ldbu	r2,-4(fp)
     214:	10e00014 	ori	r3,r2,32768
     218:	00808074 	movhi	r2,513
     21c:	10a8f604 	addi	r2,r2,-23592
     220:	10c00035 	stwio	r3,0(r2)

	int done = 0;
     224:	e03ffe15 	stw	zero,-8(fp)
	uint16_t spi_response;
	while (!done) {
     228:	00000706 	br	248 <ADC_Read+0x5c>
		spi_response = IORD(ADC_SPI_READ_BASE, 0);
     22c:	00808074 	movhi	r2,513
     230:	10a8f604 	addi	r2,r2,-23592
     234:	10800037 	ldwio	r2,0(r2)
     238:	e0bffd8d 	sth	r2,-10(fp)
		done = (spi_response & DONE_FLAG);
     23c:	e0bffd8b 	ldhu	r2,-10(fp)
     240:	10a0000c 	andi	r2,r2,32768
     244:	e0bffe15 	stw	r2,-8(fp)
	IOWR(ADC_SPI_READ_BASE, 0, Channel);
	IOWR(ADC_SPI_READ_BASE, 0, Channel|START_FLAG);

	int done = 0;
	uint16_t spi_response;
	while (!done) {
     248:	e0bffe17 	ldw	r2,-8(fp)
     24c:	1005003a 	cmpeq	r2,r2,zero
     250:	103ff61e 	bne	r2,zero,22c <ADC_Read+0x40>
		spi_response = IORD(ADC_SPI_READ_BASE, 0);
		done = (spi_response & DONE_FLAG);
	}
	uint16_t adc_value = spi_response & 0xFFF;
     254:	e0bffd8b 	ldhu	r2,-10(fp)
     258:	1083ffcc 	andi	r2,r2,4095
     25c:	e0bffd0d 	sth	r2,-12(fp)
	return (double) adc_value * 3.3f / 4096.0f;
     260:	e13ffd0b 	ldhu	r4,-12(fp)
     264:	0000eb00 	call	eb0 <__floatunsidf>
     268:	100b883a 	mov	r5,r2
     26c:	180d883a 	mov	r6,r3
     270:	2809883a 	mov	r4,r5
     274:	300b883a 	mov	r5,r6
     278:	01980034 	movhi	r6,24576
     27c:	01d002b4 	movhi	r7,16394
     280:	39d99984 	addi	r7,r7,26214
     284:	00008940 	call	894 <__muldf3>
     288:	1009883a 	mov	r4,r2
     28c:	180b883a 	mov	r5,r3
     290:	2005883a 	mov	r2,r4
     294:	2807883a 	mov	r3,r5
     298:	1009883a 	mov	r4,r2
     29c:	180b883a 	mov	r5,r3
     2a0:	000d883a 	mov	r6,zero
     2a4:	01d02c34 	movhi	r7,16560
     2a8:	0000c580 	call	c58 <__divdf3>
     2ac:	1009883a 	mov	r4,r2
     2b0:	180b883a 	mov	r5,r3
     2b4:	200d883a 	mov	r6,r4
     2b8:	280f883a 	mov	r7,r5
     2bc:	3007883a 	mov	r3,r6
     2c0:	3809883a 	mov	r4,r7
}
     2c4:	1805883a 	mov	r2,r3
     2c8:	2007883a 	mov	r3,r4
     2cc:	e037883a 	mov	sp,fp
     2d0:	dfc00117 	ldw	ra,4(sp)
     2d4:	df000017 	ldw	fp,0(sp)
     2d8:	dec00204 	addi	sp,sp,8
     2dc:	f800283a 	ret

000002e0 <main>:

const uint16_t adc_channel = 2;

int main() {
     2e0:	defffb04 	addi	sp,sp,-20
     2e4:	dfc00415 	stw	ra,16(sp)
     2e8:	df000315 	stw	fp,12(sp)
     2ec:	df000304 	addi	fp,sp,12
	while (1) {
//		int key = IORD(KEY_BASE,0);
//		if (key != 3) {
		double ave = 0;
     2f0:	e03ffe15 	stw	zero,-8(fp)
     2f4:	e03fff15 	stw	zero,-4(fp)
		int i = 5;
     2f8:	00800144 	movi	r2,5
     2fc:	e0bffd15 	stw	r2,-12(fp)
		while (i--)
     300:	00000e06 	br	33c <main+0x5c>
			ave += ADC_Read(adc_channel);
     304:	d0a0000b 	ldhu	r2,-32768(gp)
     308:	11003fcc 	andi	r4,r2,255
     30c:	00001ec0 	call	1ec <ADC_Read>
     310:	100f883a 	mov	r7,r2
     314:	1811883a 	mov	r8,r3
     318:	e13ffe17 	ldw	r4,-8(fp)
     31c:	e17fff17 	ldw	r5,-4(fp)
     320:	380d883a 	mov	r6,r7
     324:	400f883a 	mov	r7,r8
     328:	00008200 	call	820 <__adddf3>
     32c:	1009883a 	mov	r4,r2
     330:	180b883a 	mov	r5,r3
     334:	e13ffe15 	stw	r4,-8(fp)
     338:	e17fff15 	stw	r5,-4(fp)
	while (1) {
//		int key = IORD(KEY_BASE,0);
//		if (key != 3) {
		double ave = 0;
		int i = 5;
		while (i--)
     33c:	e0bffd17 	ldw	r2,-12(fp)
     340:	10bfffc4 	addi	r2,r2,-1
     344:	e0bffd15 	stw	r2,-12(fp)
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	10bfffd8 	cmpnei	r2,r2,-1
     350:	103fec1e 	bne	r2,zero,304 <main+0x24>
			ave += ADC_Read(adc_channel);

		printf("***%lf\n", ave / 5);
     354:	e13ffe17 	ldw	r4,-8(fp)
     358:	e17fff17 	ldw	r5,-4(fp)
     35c:	000d883a 	mov	r6,zero
     360:	01d00534 	movhi	r7,16404
     364:	0000c580 	call	c58 <__divdf3>
     368:	1009883a 	mov	r4,r2
     36c:	180b883a 	mov	r5,r3
     370:	2005883a 	mov	r2,r4
     374:	2807883a 	mov	r3,r5
     378:	01000074 	movhi	r4,1
     37c:	21392404 	addi	r4,r4,-7024
     380:	100b883a 	mov	r5,r2
     384:	180d883a 	mov	r6,r3
     388:	000166c0 	call	166c <printf>
		//while (IORD(KEY_BASE,0) != 3);
//		}
//		usleep(500000);
	}
     38c:	003fd806 	br	2f0 <main+0x10>

00000390 <_fpadd_parts>:
     390:	defff804 	addi	sp,sp,-32
     394:	dcc00315 	stw	r19,12(sp)
     398:	2027883a 	mov	r19,r4
     39c:	21000017 	ldw	r4,0(r4)
     3a0:	00c00044 	movi	r3,1
     3a4:	dd400515 	stw	r21,20(sp)
     3a8:	dd000415 	stw	r20,16(sp)
     3ac:	ddc00715 	stw	r23,28(sp)
     3b0:	dd800615 	stw	r22,24(sp)
     3b4:	dc800215 	stw	r18,8(sp)
     3b8:	dc400115 	stw	r17,4(sp)
     3bc:	dc000015 	stw	r16,0(sp)
     3c0:	282b883a 	mov	r21,r5
     3c4:	3029883a 	mov	r20,r6
     3c8:	1900632e 	bgeu	r3,r4,558 <_fpadd_parts+0x1c8>
     3cc:	28800017 	ldw	r2,0(r5)
     3d0:	1880812e 	bgeu	r3,r2,5d8 <_fpadd_parts+0x248>
     3d4:	00c00104 	movi	r3,4
     3d8:	20c0dc26 	beq	r4,r3,74c <_fpadd_parts+0x3bc>
     3dc:	10c07e26 	beq	r2,r3,5d8 <_fpadd_parts+0x248>
     3e0:	00c00084 	movi	r3,2
     3e4:	10c06726 	beq	r2,r3,584 <_fpadd_parts+0x1f4>
     3e8:	20c07b26 	beq	r4,r3,5d8 <_fpadd_parts+0x248>
     3ec:	9dc00217 	ldw	r23,8(r19)
     3f0:	28c00217 	ldw	r3,8(r5)
     3f4:	9c400317 	ldw	r17,12(r19)
     3f8:	2bc00317 	ldw	r15,12(r5)
     3fc:	b8cdc83a 	sub	r6,r23,r3
     400:	9c800417 	ldw	r18,16(r19)
     404:	2c000417 	ldw	r16,16(r5)
     408:	3009883a 	mov	r4,r6
     40c:	30009716 	blt	r6,zero,66c <_fpadd_parts+0x2dc>
     410:	00800fc4 	movi	r2,63
     414:	11806b16 	blt	r2,r6,5c4 <_fpadd_parts+0x234>
     418:	0100a40e 	bge	zero,r4,6ac <_fpadd_parts+0x31c>
     41c:	35bff804 	addi	r22,r6,-32
     420:	b000bc16 	blt	r22,zero,714 <_fpadd_parts+0x384>
     424:	8596d83a 	srl	r11,r16,r22
     428:	0019883a 	mov	r12,zero
     42c:	0013883a 	mov	r9,zero
     430:	01000044 	movi	r4,1
     434:	0015883a 	mov	r10,zero
     438:	b000be16 	blt	r22,zero,734 <_fpadd_parts+0x3a4>
     43c:	2590983a 	sll	r8,r4,r22
     440:	000f883a 	mov	r7,zero
     444:	00bfffc4 	movi	r2,-1
     448:	3889883a 	add	r4,r7,r2
     44c:	408b883a 	add	r5,r8,r2
     450:	21cd803a 	cmpltu	r6,r4,r7
     454:	314b883a 	add	r5,r6,r5
     458:	7904703a 	and	r2,r15,r4
     45c:	8146703a 	and	r3,r16,r5
     460:	10c4b03a 	or	r2,r2,r3
     464:	10000226 	beq	r2,zero,470 <_fpadd_parts+0xe0>
     468:	02400044 	movi	r9,1
     46c:	0015883a 	mov	r10,zero
     470:	5a5eb03a 	or	r15,r11,r9
     474:	62a0b03a 	or	r16,r12,r10
     478:	99400117 	ldw	r5,4(r19)
     47c:	a8800117 	ldw	r2,4(r21)
     480:	28806e26 	beq	r5,r2,63c <_fpadd_parts+0x2ac>
     484:	28006626 	beq	r5,zero,620 <_fpadd_parts+0x290>
     488:	7c45c83a 	sub	r2,r15,r17
     48c:	7889803a 	cmpltu	r4,r15,r2
     490:	8487c83a 	sub	r3,r16,r18
     494:	1909c83a 	sub	r4,r3,r4
     498:	100d883a 	mov	r6,r2
     49c:	200f883a 	mov	r7,r4
     4a0:	38007716 	blt	r7,zero,680 <_fpadd_parts+0x2f0>
     4a4:	a5c00215 	stw	r23,8(r20)
     4a8:	a1c00415 	stw	r7,16(r20)
     4ac:	a0000115 	stw	zero,4(r20)
     4b0:	a1800315 	stw	r6,12(r20)
     4b4:	a2000317 	ldw	r8,12(r20)
     4b8:	a2400417 	ldw	r9,16(r20)
     4bc:	00bfffc4 	movi	r2,-1
     4c0:	408b883a 	add	r5,r8,r2
     4c4:	2a09803a 	cmpltu	r4,r5,r8
     4c8:	488d883a 	add	r6,r9,r2
     4cc:	01c40034 	movhi	r7,4096
     4d0:	39ffffc4 	addi	r7,r7,-1
     4d4:	218d883a 	add	r6,r4,r6
     4d8:	39801736 	bltu	r7,r6,538 <_fpadd_parts+0x1a8>
     4dc:	31c06526 	beq	r6,r7,674 <_fpadd_parts+0x2e4>
     4e0:	a3000217 	ldw	r12,8(r20)
     4e4:	4209883a 	add	r4,r8,r8
     4e8:	00bfffc4 	movi	r2,-1
     4ec:	220f803a 	cmpltu	r7,r4,r8
     4f0:	4a4b883a 	add	r5,r9,r9
     4f4:	394f883a 	add	r7,r7,r5
     4f8:	2095883a 	add	r10,r4,r2
     4fc:	3897883a 	add	r11,r7,r2
     500:	510d803a 	cmpltu	r6,r10,r4
     504:	6099883a 	add	r12,r12,r2
     508:	32d7883a 	add	r11,r6,r11
     50c:	00840034 	movhi	r2,4096
     510:	10bfffc4 	addi	r2,r2,-1
     514:	2011883a 	mov	r8,r4
     518:	3813883a 	mov	r9,r7
     51c:	a1000315 	stw	r4,12(r20)
     520:	a1c00415 	stw	r7,16(r20)
     524:	a3000215 	stw	r12,8(r20)
     528:	12c00336 	bltu	r2,r11,538 <_fpadd_parts+0x1a8>
     52c:	58bfed1e 	bne	r11,r2,4e4 <_fpadd_parts+0x154>
     530:	00bfff84 	movi	r2,-2
     534:	12bfeb2e 	bgeu	r2,r10,4e4 <_fpadd_parts+0x154>
     538:	a2800417 	ldw	r10,16(r20)
     53c:	008000c4 	movi	r2,3
     540:	00c80034 	movhi	r3,8192
     544:	18ffffc4 	addi	r3,r3,-1
     548:	a2400317 	ldw	r9,12(r20)
     54c:	a0800015 	stw	r2,0(r20)
     550:	1a802336 	bltu	r3,r10,5e0 <_fpadd_parts+0x250>
     554:	a027883a 	mov	r19,r20
     558:	9805883a 	mov	r2,r19
     55c:	ddc00717 	ldw	r23,28(sp)
     560:	dd800617 	ldw	r22,24(sp)
     564:	dd400517 	ldw	r21,20(sp)
     568:	dd000417 	ldw	r20,16(sp)
     56c:	dcc00317 	ldw	r19,12(sp)
     570:	dc800217 	ldw	r18,8(sp)
     574:	dc400117 	ldw	r17,4(sp)
     578:	dc000017 	ldw	r16,0(sp)
     57c:	dec00804 	addi	sp,sp,32
     580:	f800283a 	ret
     584:	20fff41e 	bne	r4,r3,558 <_fpadd_parts+0x1c8>
     588:	31000015 	stw	r4,0(r6)
     58c:	98800117 	ldw	r2,4(r19)
     590:	30800115 	stw	r2,4(r6)
     594:	98c00217 	ldw	r3,8(r19)
     598:	30c00215 	stw	r3,8(r6)
     59c:	98800317 	ldw	r2,12(r19)
     5a0:	30800315 	stw	r2,12(r6)
     5a4:	98c00417 	ldw	r3,16(r19)
     5a8:	30c00415 	stw	r3,16(r6)
     5ac:	98800117 	ldw	r2,4(r19)
     5b0:	28c00117 	ldw	r3,4(r5)
     5b4:	3027883a 	mov	r19,r6
     5b8:	10c4703a 	and	r2,r2,r3
     5bc:	30800115 	stw	r2,4(r6)
     5c0:	003fe506 	br	558 <_fpadd_parts+0x1c8>
     5c4:	1dc02616 	blt	r3,r23,660 <_fpadd_parts+0x2d0>
     5c8:	0023883a 	mov	r17,zero
     5cc:	182f883a 	mov	r23,r3
     5d0:	0025883a 	mov	r18,zero
     5d4:	003fa806 	br	478 <_fpadd_parts+0xe8>
     5d8:	a827883a 	mov	r19,r21
     5dc:	003fde06 	br	558 <_fpadd_parts+0x1c8>
     5e0:	01800044 	movi	r6,1
     5e4:	500497fa 	slli	r2,r10,31
     5e8:	4808d07a 	srli	r4,r9,1
     5ec:	518ad83a 	srl	r5,r10,r6
     5f0:	a2000217 	ldw	r8,8(r20)
     5f4:	1108b03a 	or	r4,r2,r4
     5f8:	0007883a 	mov	r3,zero
     5fc:	4984703a 	and	r2,r9,r6
     600:	208cb03a 	or	r6,r4,r2
     604:	28ceb03a 	or	r7,r5,r3
     608:	42000044 	addi	r8,r8,1
     60c:	a027883a 	mov	r19,r20
     610:	a1c00415 	stw	r7,16(r20)
     614:	a2000215 	stw	r8,8(r20)
     618:	a1800315 	stw	r6,12(r20)
     61c:	003fce06 	br	558 <_fpadd_parts+0x1c8>
     620:	8bc5c83a 	sub	r2,r17,r15
     624:	8889803a 	cmpltu	r4,r17,r2
     628:	9407c83a 	sub	r3,r18,r16
     62c:	1909c83a 	sub	r4,r3,r4
     630:	100d883a 	mov	r6,r2
     634:	200f883a 	mov	r7,r4
     638:	003f9906 	br	4a0 <_fpadd_parts+0x110>
     63c:	7c45883a 	add	r2,r15,r17
     640:	13c9803a 	cmpltu	r4,r2,r15
     644:	8487883a 	add	r3,r16,r18
     648:	20c9883a 	add	r4,r4,r3
     64c:	a1400115 	stw	r5,4(r20)
     650:	a5c00215 	stw	r23,8(r20)
     654:	a0800315 	stw	r2,12(r20)
     658:	a1000415 	stw	r4,16(r20)
     65c:	003fb606 	br	538 <_fpadd_parts+0x1a8>
     660:	001f883a 	mov	r15,zero
     664:	0021883a 	mov	r16,zero
     668:	003f8306 	br	478 <_fpadd_parts+0xe8>
     66c:	018dc83a 	sub	r6,zero,r6
     670:	003f6706 	br	410 <_fpadd_parts+0x80>
     674:	00bfff84 	movi	r2,-2
     678:	117faf36 	bltu	r2,r5,538 <_fpadd_parts+0x1a8>
     67c:	003f9806 	br	4e0 <_fpadd_parts+0x150>
     680:	0005883a 	mov	r2,zero
     684:	1189c83a 	sub	r4,r2,r6
     688:	1105803a 	cmpltu	r2,r2,r4
     68c:	01cbc83a 	sub	r5,zero,r7
     690:	2885c83a 	sub	r2,r5,r2
     694:	01800044 	movi	r6,1
     698:	a1800115 	stw	r6,4(r20)
     69c:	a5c00215 	stw	r23,8(r20)
     6a0:	a1000315 	stw	r4,12(r20)
     6a4:	a0800415 	stw	r2,16(r20)
     6a8:	003f8206 	br	4b4 <_fpadd_parts+0x124>
     6ac:	203f7226 	beq	r4,zero,478 <_fpadd_parts+0xe8>
     6b0:	35bff804 	addi	r22,r6,-32
     6b4:	b9af883a 	add	r23,r23,r6
     6b8:	b0003116 	blt	r22,zero,780 <_fpadd_parts+0x3f0>
     6bc:	959ad83a 	srl	r13,r18,r22
     6c0:	001d883a 	mov	r14,zero
     6c4:	000f883a 	mov	r7,zero
     6c8:	01000044 	movi	r4,1
     6cc:	0011883a 	mov	r8,zero
     6d0:	b0002516 	blt	r22,zero,768 <_fpadd_parts+0x3d8>
     6d4:	2594983a 	sll	r10,r4,r22
     6d8:	0013883a 	mov	r9,zero
     6dc:	00bfffc4 	movi	r2,-1
     6e0:	4889883a 	add	r4,r9,r2
     6e4:	508b883a 	add	r5,r10,r2
     6e8:	224d803a 	cmpltu	r6,r4,r9
     6ec:	314b883a 	add	r5,r6,r5
     6f0:	8904703a 	and	r2,r17,r4
     6f4:	9146703a 	and	r3,r18,r5
     6f8:	10c4b03a 	or	r2,r2,r3
     6fc:	10000226 	beq	r2,zero,708 <_fpadd_parts+0x378>
     700:	01c00044 	movi	r7,1
     704:	0011883a 	mov	r8,zero
     708:	69e2b03a 	or	r17,r13,r7
     70c:	7224b03a 	or	r18,r14,r8
     710:	003f5906 	br	478 <_fpadd_parts+0xe8>
     714:	8407883a 	add	r3,r16,r16
     718:	008007c4 	movi	r2,31
     71c:	1185c83a 	sub	r2,r2,r6
     720:	1886983a 	sll	r3,r3,r2
     724:	7996d83a 	srl	r11,r15,r6
     728:	8198d83a 	srl	r12,r16,r6
     72c:	1ad6b03a 	or	r11,r3,r11
     730:	003f3e06 	br	42c <_fpadd_parts+0x9c>
     734:	2006d07a 	srli	r3,r4,1
     738:	008007c4 	movi	r2,31
     73c:	1185c83a 	sub	r2,r2,r6
     740:	1890d83a 	srl	r8,r3,r2
     744:	218e983a 	sll	r7,r4,r6
     748:	003f3e06 	br	444 <_fpadd_parts+0xb4>
     74c:	113f821e 	bne	r2,r4,558 <_fpadd_parts+0x1c8>
     750:	28c00117 	ldw	r3,4(r5)
     754:	98800117 	ldw	r2,4(r19)
     758:	10ff7f26 	beq	r2,r3,558 <_fpadd_parts+0x1c8>
     75c:	04c00074 	movhi	r19,1
     760:	9cf92604 	addi	r19,r19,-7016
     764:	003f7c06 	br	558 <_fpadd_parts+0x1c8>
     768:	2006d07a 	srli	r3,r4,1
     76c:	008007c4 	movi	r2,31
     770:	1185c83a 	sub	r2,r2,r6
     774:	1894d83a 	srl	r10,r3,r2
     778:	2192983a 	sll	r9,r4,r6
     77c:	003fd706 	br	6dc <_fpadd_parts+0x34c>
     780:	9487883a 	add	r3,r18,r18
     784:	008007c4 	movi	r2,31
     788:	1185c83a 	sub	r2,r2,r6
     78c:	1886983a 	sll	r3,r3,r2
     790:	899ad83a 	srl	r13,r17,r6
     794:	919cd83a 	srl	r14,r18,r6
     798:	1b5ab03a 	or	r13,r3,r13
     79c:	003fc906 	br	6c4 <_fpadd_parts+0x334>

000007a0 <__subdf3>:
     7a0:	deffea04 	addi	sp,sp,-88
     7a4:	dcc01415 	stw	r19,80(sp)
     7a8:	dcc00404 	addi	r19,sp,16
     7ac:	2011883a 	mov	r8,r4
     7b0:	2813883a 	mov	r9,r5
     7b4:	dc401315 	stw	r17,76(sp)
     7b8:	d809883a 	mov	r4,sp
     7bc:	980b883a 	mov	r5,r19
     7c0:	dc400904 	addi	r17,sp,36
     7c4:	dfc01515 	stw	ra,84(sp)
     7c8:	da400115 	stw	r9,4(sp)
     7cc:	d9c00315 	stw	r7,12(sp)
     7d0:	da000015 	stw	r8,0(sp)
     7d4:	d9800215 	stw	r6,8(sp)
     7d8:	00014fc0 	call	14fc <__unpack_d>
     7dc:	d9000204 	addi	r4,sp,8
     7e0:	880b883a 	mov	r5,r17
     7e4:	00014fc0 	call	14fc <__unpack_d>
     7e8:	d8800a17 	ldw	r2,40(sp)
     7ec:	880b883a 	mov	r5,r17
     7f0:	9809883a 	mov	r4,r19
     7f4:	d9800e04 	addi	r6,sp,56
     7f8:	1080005c 	xori	r2,r2,1
     7fc:	d8800a15 	stw	r2,40(sp)
     800:	00003900 	call	390 <_fpadd_parts>
     804:	1009883a 	mov	r4,r2
     808:	00011e80 	call	11e8 <__pack_d>
     80c:	dfc01517 	ldw	ra,84(sp)
     810:	dcc01417 	ldw	r19,80(sp)
     814:	dc401317 	ldw	r17,76(sp)
     818:	dec01604 	addi	sp,sp,88
     81c:	f800283a 	ret

00000820 <__adddf3>:
     820:	deffea04 	addi	sp,sp,-88
     824:	dcc01415 	stw	r19,80(sp)
     828:	dcc00404 	addi	r19,sp,16
     82c:	2011883a 	mov	r8,r4
     830:	2813883a 	mov	r9,r5
     834:	dc401315 	stw	r17,76(sp)
     838:	d809883a 	mov	r4,sp
     83c:	980b883a 	mov	r5,r19
     840:	dc400904 	addi	r17,sp,36
     844:	dfc01515 	stw	ra,84(sp)
     848:	da400115 	stw	r9,4(sp)
     84c:	d9c00315 	stw	r7,12(sp)
     850:	da000015 	stw	r8,0(sp)
     854:	d9800215 	stw	r6,8(sp)
     858:	00014fc0 	call	14fc <__unpack_d>
     85c:	d9000204 	addi	r4,sp,8
     860:	880b883a 	mov	r5,r17
     864:	00014fc0 	call	14fc <__unpack_d>
     868:	d9800e04 	addi	r6,sp,56
     86c:	9809883a 	mov	r4,r19
     870:	880b883a 	mov	r5,r17
     874:	00003900 	call	390 <_fpadd_parts>
     878:	1009883a 	mov	r4,r2
     87c:	00011e80 	call	11e8 <__pack_d>
     880:	dfc01517 	ldw	ra,84(sp)
     884:	dcc01417 	ldw	r19,80(sp)
     888:	dc401317 	ldw	r17,76(sp)
     88c:	dec01604 	addi	sp,sp,88
     890:	f800283a 	ret

00000894 <__muldf3>:
     894:	deffe004 	addi	sp,sp,-128
     898:	dc401815 	stw	r17,96(sp)
     89c:	dc400404 	addi	r17,sp,16
     8a0:	2011883a 	mov	r8,r4
     8a4:	2813883a 	mov	r9,r5
     8a8:	dc001715 	stw	r16,92(sp)
     8ac:	d809883a 	mov	r4,sp
     8b0:	880b883a 	mov	r5,r17
     8b4:	dc000904 	addi	r16,sp,36
     8b8:	dfc01f15 	stw	ra,124(sp)
     8bc:	da400115 	stw	r9,4(sp)
     8c0:	d9c00315 	stw	r7,12(sp)
     8c4:	da000015 	stw	r8,0(sp)
     8c8:	d9800215 	stw	r6,8(sp)
     8cc:	ddc01e15 	stw	r23,120(sp)
     8d0:	dd801d15 	stw	r22,116(sp)
     8d4:	dd401c15 	stw	r21,112(sp)
     8d8:	dd001b15 	stw	r20,108(sp)
     8dc:	dcc01a15 	stw	r19,104(sp)
     8e0:	dc801915 	stw	r18,100(sp)
     8e4:	00014fc0 	call	14fc <__unpack_d>
     8e8:	d9000204 	addi	r4,sp,8
     8ec:	800b883a 	mov	r5,r16
     8f0:	00014fc0 	call	14fc <__unpack_d>
     8f4:	d9000417 	ldw	r4,16(sp)
     8f8:	00800044 	movi	r2,1
     8fc:	1100102e 	bgeu	r2,r4,940 <__muldf3+0xac>
     900:	d8c00917 	ldw	r3,36(sp)
     904:	10c0062e 	bgeu	r2,r3,920 <__muldf3+0x8c>
     908:	00800104 	movi	r2,4
     90c:	20800a26 	beq	r4,r2,938 <__muldf3+0xa4>
     910:	1880cc26 	beq	r3,r2,c44 <__muldf3+0x3b0>
     914:	00800084 	movi	r2,2
     918:	20800926 	beq	r4,r2,940 <__muldf3+0xac>
     91c:	1880191e 	bne	r3,r2,984 <__muldf3+0xf0>
     920:	d8c00a17 	ldw	r3,40(sp)
     924:	d8800517 	ldw	r2,20(sp)
     928:	8009883a 	mov	r4,r16
     92c:	10c4c03a 	cmpne	r2,r2,r3
     930:	d8800a15 	stw	r2,40(sp)
     934:	00000706 	br	954 <__muldf3+0xc0>
     938:	00800084 	movi	r2,2
     93c:	1880c326 	beq	r3,r2,c4c <__muldf3+0x3b8>
     940:	d8800517 	ldw	r2,20(sp)
     944:	d8c00a17 	ldw	r3,40(sp)
     948:	8809883a 	mov	r4,r17
     94c:	10c4c03a 	cmpne	r2,r2,r3
     950:	d8800515 	stw	r2,20(sp)
     954:	00011e80 	call	11e8 <__pack_d>
     958:	dfc01f17 	ldw	ra,124(sp)
     95c:	ddc01e17 	ldw	r23,120(sp)
     960:	dd801d17 	ldw	r22,116(sp)
     964:	dd401c17 	ldw	r21,112(sp)
     968:	dd001b17 	ldw	r20,108(sp)
     96c:	dcc01a17 	ldw	r19,104(sp)
     970:	dc801917 	ldw	r18,100(sp)
     974:	dc401817 	ldw	r17,96(sp)
     978:	dc001717 	ldw	r16,92(sp)
     97c:	dec02004 	addi	sp,sp,128
     980:	f800283a 	ret
     984:	dd800717 	ldw	r22,28(sp)
     988:	dc800c17 	ldw	r18,48(sp)
     98c:	002b883a 	mov	r21,zero
     990:	0023883a 	mov	r17,zero
     994:	a80b883a 	mov	r5,r21
     998:	b00d883a 	mov	r6,r22
     99c:	880f883a 	mov	r7,r17
     9a0:	ddc00817 	ldw	r23,32(sp)
     9a4:	dcc00d17 	ldw	r19,52(sp)
     9a8:	9009883a 	mov	r4,r18
     9ac:	00010440 	call	1044 <__muldi3>
     9b0:	001b883a 	mov	r13,zero
     9b4:	680f883a 	mov	r7,r13
     9b8:	b009883a 	mov	r4,r22
     9bc:	000b883a 	mov	r5,zero
     9c0:	980d883a 	mov	r6,r19
     9c4:	b82d883a 	mov	r22,r23
     9c8:	002f883a 	mov	r23,zero
     9cc:	db401615 	stw	r13,88(sp)
     9d0:	d8801315 	stw	r2,76(sp)
     9d4:	d8c01415 	stw	r3,80(sp)
     9d8:	dcc01515 	stw	r19,84(sp)
     9dc:	00010440 	call	1044 <__muldi3>
     9e0:	b00d883a 	mov	r6,r22
     9e4:	000b883a 	mov	r5,zero
     9e8:	9009883a 	mov	r4,r18
     9ec:	b80f883a 	mov	r7,r23
     9f0:	1021883a 	mov	r16,r2
     9f4:	1823883a 	mov	r17,r3
     9f8:	00010440 	call	1044 <__muldi3>
     9fc:	8085883a 	add	r2,r16,r2
     a00:	140d803a 	cmpltu	r6,r2,r16
     a04:	88c7883a 	add	r3,r17,r3
     a08:	30cd883a 	add	r6,r6,r3
     a0c:	1029883a 	mov	r20,r2
     a10:	302b883a 	mov	r21,r6
     a14:	da801317 	ldw	r10,76(sp)
     a18:	dac01417 	ldw	r11,80(sp)
     a1c:	db001517 	ldw	r12,84(sp)
     a20:	db401617 	ldw	r13,88(sp)
     a24:	3440612e 	bgeu	r6,r17,bac <__muldf3+0x318>
     a28:	0009883a 	mov	r4,zero
     a2c:	5105883a 	add	r2,r10,r4
     a30:	128d803a 	cmpltu	r6,r2,r10
     a34:	5d07883a 	add	r3,r11,r20
     a38:	30cd883a 	add	r6,r6,r3
     a3c:	0021883a 	mov	r16,zero
     a40:	04400044 	movi	r17,1
     a44:	1025883a 	mov	r18,r2
     a48:	3027883a 	mov	r19,r6
     a4c:	32c06236 	bltu	r6,r11,bd8 <__muldf3+0x344>
     a50:	59807a26 	beq	r11,r6,c3c <__muldf3+0x3a8>
     a54:	680b883a 	mov	r5,r13
     a58:	b80f883a 	mov	r7,r23
     a5c:	6009883a 	mov	r4,r12
     a60:	b00d883a 	mov	r6,r22
     a64:	00010440 	call	1044 <__muldi3>
     a68:	1009883a 	mov	r4,r2
     a6c:	000f883a 	mov	r7,zero
     a70:	1545883a 	add	r2,r2,r21
     a74:	1111803a 	cmpltu	r8,r2,r4
     a78:	19c7883a 	add	r3,r3,r7
     a7c:	40c7883a 	add	r3,r8,r3
     a80:	88cb883a 	add	r5,r17,r3
     a84:	d8c00617 	ldw	r3,24(sp)
     a88:	8089883a 	add	r4,r16,r2
     a8c:	d8800b17 	ldw	r2,44(sp)
     a90:	18c00104 	addi	r3,r3,4
     a94:	240d803a 	cmpltu	r6,r4,r16
     a98:	10c7883a 	add	r3,r2,r3
     a9c:	2013883a 	mov	r9,r4
     aa0:	d8800a17 	ldw	r2,40(sp)
     aa4:	d9000517 	ldw	r4,20(sp)
     aa8:	314d883a 	add	r6,r6,r5
     aac:	3015883a 	mov	r10,r6
     ab0:	2088c03a 	cmpne	r4,r4,r2
     ab4:	00880034 	movhi	r2,8192
     ab8:	10bfffc4 	addi	r2,r2,-1
     abc:	d9000f15 	stw	r4,60(sp)
     ac0:	d8c01015 	stw	r3,64(sp)
     ac4:	1180162e 	bgeu	r2,r6,b20 <__muldf3+0x28c>
     ac8:	1811883a 	mov	r8,r3
     acc:	101f883a 	mov	r15,r2
     ad0:	980497fa 	slli	r2,r19,31
     ad4:	9016d07a 	srli	r11,r18,1
     ad8:	500697fa 	slli	r3,r10,31
     adc:	480cd07a 	srli	r6,r9,1
     ae0:	500ed07a 	srli	r7,r10,1
     ae4:	12d6b03a 	or	r11,r2,r11
     ae8:	00800044 	movi	r2,1
     aec:	198cb03a 	or	r6,r3,r6
     af0:	4888703a 	and	r4,r9,r2
     af4:	9818d07a 	srli	r12,r19,1
     af8:	001b883a 	mov	r13,zero
     afc:	03a00034 	movhi	r14,32768
     b00:	3013883a 	mov	r9,r6
     b04:	3815883a 	mov	r10,r7
     b08:	4091883a 	add	r8,r8,r2
     b0c:	20000226 	beq	r4,zero,b18 <__muldf3+0x284>
     b10:	5b64b03a 	or	r18,r11,r13
     b14:	63a6b03a 	or	r19,r12,r14
     b18:	7abfed36 	bltu	r15,r10,ad0 <__muldf3+0x23c>
     b1c:	da001015 	stw	r8,64(sp)
     b20:	00840034 	movhi	r2,4096
     b24:	10bfffc4 	addi	r2,r2,-1
     b28:	12801436 	bltu	r2,r10,b7c <__muldf3+0x2e8>
     b2c:	da001017 	ldw	r8,64(sp)
     b30:	101f883a 	mov	r15,r2
     b34:	4a45883a 	add	r2,r9,r9
     b38:	124d803a 	cmpltu	r6,r2,r9
     b3c:	5287883a 	add	r3,r10,r10
     b40:	9497883a 	add	r11,r18,r18
     b44:	5c8f803a 	cmpltu	r7,r11,r18
     b48:	9cd9883a 	add	r12,r19,r19
     b4c:	01000044 	movi	r4,1
     b50:	30cd883a 	add	r6,r6,r3
     b54:	3b0f883a 	add	r7,r7,r12
     b58:	423fffc4 	addi	r8,r8,-1
     b5c:	1013883a 	mov	r9,r2
     b60:	3015883a 	mov	r10,r6
     b64:	111ab03a 	or	r13,r2,r4
     b68:	98003016 	blt	r19,zero,c2c <__muldf3+0x398>
     b6c:	5825883a 	mov	r18,r11
     b70:	3827883a 	mov	r19,r7
     b74:	7abfef2e 	bgeu	r15,r10,b34 <__muldf3+0x2a0>
     b78:	da001015 	stw	r8,64(sp)
     b7c:	00803fc4 	movi	r2,255
     b80:	488e703a 	and	r7,r9,r2
     b84:	00802004 	movi	r2,128
     b88:	0007883a 	mov	r3,zero
     b8c:	0011883a 	mov	r8,zero
     b90:	38801826 	beq	r7,r2,bf4 <__muldf3+0x360>
     b94:	008000c4 	movi	r2,3
     b98:	d9000e04 	addi	r4,sp,56
     b9c:	da801215 	stw	r10,72(sp)
     ba0:	d8800e15 	stw	r2,56(sp)
     ba4:	da401115 	stw	r9,68(sp)
     ba8:	003f6a06 	br	954 <__muldf3+0xc0>
     bac:	89802126 	beq	r17,r6,c34 <__muldf3+0x3a0>
     bb0:	0009883a 	mov	r4,zero
     bb4:	5105883a 	add	r2,r10,r4
     bb8:	128d803a 	cmpltu	r6,r2,r10
     bbc:	5d07883a 	add	r3,r11,r20
     bc0:	30cd883a 	add	r6,r6,r3
     bc4:	0021883a 	mov	r16,zero
     bc8:	0023883a 	mov	r17,zero
     bcc:	1025883a 	mov	r18,r2
     bd0:	3027883a 	mov	r19,r6
     bd4:	32ff9e2e 	bgeu	r6,r11,a50 <__muldf3+0x1bc>
     bd8:	00800044 	movi	r2,1
     bdc:	8089883a 	add	r4,r16,r2
     be0:	240d803a 	cmpltu	r6,r4,r16
     be4:	344d883a 	add	r6,r6,r17
     be8:	2021883a 	mov	r16,r4
     bec:	3023883a 	mov	r17,r6
     bf0:	003f9806 	br	a54 <__muldf3+0x1c0>
     bf4:	403fe71e 	bne	r8,zero,b94 <__muldf3+0x300>
     bf8:	01004004 	movi	r4,256
     bfc:	4904703a 	and	r2,r9,r4
     c00:	10c4b03a 	or	r2,r2,r3
     c04:	103fe31e 	bne	r2,zero,b94 <__muldf3+0x300>
     c08:	94c4b03a 	or	r2,r18,r19
     c0c:	103fe126 	beq	r2,zero,b94 <__muldf3+0x300>
     c10:	49c5883a 	add	r2,r9,r7
     c14:	1251803a 	cmpltu	r8,r2,r9
     c18:	4291883a 	add	r8,r8,r10
     c1c:	013fc004 	movi	r4,-256
     c20:	1112703a 	and	r9,r2,r4
     c24:	4015883a 	mov	r10,r8
     c28:	003fda06 	br	b94 <__muldf3+0x300>
     c2c:	6813883a 	mov	r9,r13
     c30:	003fce06 	br	b6c <__muldf3+0x2d8>
     c34:	143f7c36 	bltu	r2,r16,a28 <__muldf3+0x194>
     c38:	003fdd06 	br	bb0 <__muldf3+0x31c>
     c3c:	12bf852e 	bgeu	r2,r10,a54 <__muldf3+0x1c0>
     c40:	003fe506 	br	bd8 <__muldf3+0x344>
     c44:	00800084 	movi	r2,2
     c48:	20bf351e 	bne	r4,r2,920 <__muldf3+0x8c>
     c4c:	01000074 	movhi	r4,1
     c50:	21392604 	addi	r4,r4,-7016
     c54:	003f3f06 	br	954 <__muldf3+0xc0>

00000c58 <__divdf3>:
     c58:	deffed04 	addi	sp,sp,-76
     c5c:	dcc01115 	stw	r19,68(sp)
     c60:	dcc00404 	addi	r19,sp,16
     c64:	2011883a 	mov	r8,r4
     c68:	2813883a 	mov	r9,r5
     c6c:	dc000e15 	stw	r16,56(sp)
     c70:	d809883a 	mov	r4,sp
     c74:	980b883a 	mov	r5,r19
     c78:	dc000904 	addi	r16,sp,36
     c7c:	dfc01215 	stw	ra,72(sp)
     c80:	da400115 	stw	r9,4(sp)
     c84:	d9c00315 	stw	r7,12(sp)
     c88:	da000015 	stw	r8,0(sp)
     c8c:	d9800215 	stw	r6,8(sp)
     c90:	dc801015 	stw	r18,64(sp)
     c94:	dc400f15 	stw	r17,60(sp)
     c98:	00014fc0 	call	14fc <__unpack_d>
     c9c:	d9000204 	addi	r4,sp,8
     ca0:	800b883a 	mov	r5,r16
     ca4:	00014fc0 	call	14fc <__unpack_d>
     ca8:	d9000417 	ldw	r4,16(sp)
     cac:	00800044 	movi	r2,1
     cb0:	11000b2e 	bgeu	r2,r4,ce0 <__divdf3+0x88>
     cb4:	d9400917 	ldw	r5,36(sp)
     cb8:	1140762e 	bgeu	r2,r5,e94 <__divdf3+0x23c>
     cbc:	d8800517 	ldw	r2,20(sp)
     cc0:	d8c00a17 	ldw	r3,40(sp)
     cc4:	01800104 	movi	r6,4
     cc8:	10c4f03a 	xor	r2,r2,r3
     ccc:	d8800515 	stw	r2,20(sp)
     cd0:	21800226 	beq	r4,r6,cdc <__divdf3+0x84>
     cd4:	00800084 	movi	r2,2
     cd8:	2080141e 	bne	r4,r2,d2c <__divdf3+0xd4>
     cdc:	29000926 	beq	r5,r4,d04 <__divdf3+0xac>
     ce0:	9809883a 	mov	r4,r19
     ce4:	00011e80 	call	11e8 <__pack_d>
     ce8:	dfc01217 	ldw	ra,72(sp)
     cec:	dcc01117 	ldw	r19,68(sp)
     cf0:	dc801017 	ldw	r18,64(sp)
     cf4:	dc400f17 	ldw	r17,60(sp)
     cf8:	dc000e17 	ldw	r16,56(sp)
     cfc:	dec01304 	addi	sp,sp,76
     d00:	f800283a 	ret
     d04:	01000074 	movhi	r4,1
     d08:	21392604 	addi	r4,r4,-7016
     d0c:	00011e80 	call	11e8 <__pack_d>
     d10:	dfc01217 	ldw	ra,72(sp)
     d14:	dcc01117 	ldw	r19,68(sp)
     d18:	dc801017 	ldw	r18,64(sp)
     d1c:	dc400f17 	ldw	r17,60(sp)
     d20:	dc000e17 	ldw	r16,56(sp)
     d24:	dec01304 	addi	sp,sp,76
     d28:	f800283a 	ret
     d2c:	29805b26 	beq	r5,r6,e9c <__divdf3+0x244>
     d30:	28802d26 	beq	r5,r2,de8 <__divdf3+0x190>
     d34:	d8c00617 	ldw	r3,24(sp)
     d38:	d8800b17 	ldw	r2,44(sp)
     d3c:	d9c00817 	ldw	r7,32(sp)
     d40:	dc400d17 	ldw	r17,52(sp)
     d44:	188bc83a 	sub	r5,r3,r2
     d48:	d9800717 	ldw	r6,28(sp)
     d4c:	dc000c17 	ldw	r16,48(sp)
     d50:	d9400615 	stw	r5,24(sp)
     d54:	3c403836 	bltu	r7,r17,e38 <__divdf3+0x1e0>
     d58:	89c03626 	beq	r17,r7,e34 <__divdf3+0x1dc>
     d5c:	0015883a 	mov	r10,zero
     d60:	001d883a 	mov	r14,zero
     d64:	02c40034 	movhi	r11,4096
     d68:	001f883a 	mov	r15,zero
     d6c:	003f883a 	mov	ra,zero
     d70:	04800f44 	movi	r18,61
     d74:	00000f06 	br	db4 <__divdf3+0x15c>
     d78:	601d883a 	mov	r14,r12
     d7c:	681f883a 	mov	r15,r13
     d80:	400d883a 	mov	r6,r8
     d84:	100f883a 	mov	r7,r2
     d88:	3191883a 	add	r8,r6,r6
     d8c:	5808d07a 	srli	r4,r11,1
     d90:	4185803a 	cmpltu	r2,r8,r6
     d94:	39d3883a 	add	r9,r7,r7
     d98:	28c6b03a 	or	r3,r5,r3
     d9c:	1245883a 	add	r2,r2,r9
     da0:	1815883a 	mov	r10,r3
     da4:	2017883a 	mov	r11,r4
     da8:	400d883a 	mov	r6,r8
     dac:	100f883a 	mov	r7,r2
     db0:	fc801726 	beq	ra,r18,e10 <__divdf3+0x1b8>
     db4:	580a97fa 	slli	r5,r11,31
     db8:	5006d07a 	srli	r3,r10,1
     dbc:	ffc00044 	addi	ra,ra,1
     dc0:	3c7ff136 	bltu	r7,r17,d88 <__divdf3+0x130>
     dc4:	3411c83a 	sub	r8,r6,r16
     dc8:	3205803a 	cmpltu	r2,r6,r8
     dcc:	3c53c83a 	sub	r9,r7,r17
     dd0:	7298b03a 	or	r12,r14,r10
     dd4:	7adab03a 	or	r13,r15,r11
     dd8:	4885c83a 	sub	r2,r9,r2
     ddc:	89ffe61e 	bne	r17,r7,d78 <__divdf3+0x120>
     de0:	343fe936 	bltu	r6,r16,d88 <__divdf3+0x130>
     de4:	003fe406 	br	d78 <__divdf3+0x120>
     de8:	9809883a 	mov	r4,r19
     dec:	d9800415 	stw	r6,16(sp)
     df0:	00011e80 	call	11e8 <__pack_d>
     df4:	dfc01217 	ldw	ra,72(sp)
     df8:	dcc01117 	ldw	r19,68(sp)
     dfc:	dc801017 	ldw	r18,64(sp)
     e00:	dc400f17 	ldw	r17,60(sp)
     e04:	dc000e17 	ldw	r16,56(sp)
     e08:	dec01304 	addi	sp,sp,76
     e0c:	f800283a 	ret
     e10:	00803fc4 	movi	r2,255
     e14:	7090703a 	and	r8,r14,r2
     e18:	00802004 	movi	r2,128
     e1c:	0007883a 	mov	r3,zero
     e20:	0013883a 	mov	r9,zero
     e24:	40800d26 	beq	r8,r2,e5c <__divdf3+0x204>
     e28:	dbc00815 	stw	r15,32(sp)
     e2c:	db800715 	stw	r14,28(sp)
     e30:	003fab06 	br	ce0 <__divdf3+0x88>
     e34:	343fc92e 	bgeu	r6,r16,d5c <__divdf3+0x104>
     e38:	3185883a 	add	r2,r6,r6
     e3c:	1189803a 	cmpltu	r4,r2,r6
     e40:	39c7883a 	add	r3,r7,r7
     e44:	20c9883a 	add	r4,r4,r3
     e48:	297fffc4 	addi	r5,r5,-1
     e4c:	100d883a 	mov	r6,r2
     e50:	200f883a 	mov	r7,r4
     e54:	d9400615 	stw	r5,24(sp)
     e58:	003fc006 	br	d5c <__divdf3+0x104>
     e5c:	483ff21e 	bne	r9,zero,e28 <__divdf3+0x1d0>
     e60:	01004004 	movi	r4,256
     e64:	7104703a 	and	r2,r14,r4
     e68:	10c4b03a 	or	r2,r2,r3
     e6c:	103fee1e 	bne	r2,zero,e28 <__divdf3+0x1d0>
     e70:	31c4b03a 	or	r2,r6,r7
     e74:	103fec26 	beq	r2,zero,e28 <__divdf3+0x1d0>
     e78:	7205883a 	add	r2,r14,r8
     e7c:	1391803a 	cmpltu	r8,r2,r14
     e80:	43d1883a 	add	r8,r8,r15
     e84:	013fc004 	movi	r4,-256
     e88:	111c703a 	and	r14,r2,r4
     e8c:	401f883a 	mov	r15,r8
     e90:	003fe506 	br	e28 <__divdf3+0x1d0>
     e94:	8009883a 	mov	r4,r16
     e98:	003f9206 	br	ce4 <__divdf3+0x8c>
     e9c:	9809883a 	mov	r4,r19
     ea0:	d8000715 	stw	zero,28(sp)
     ea4:	d8000815 	stw	zero,32(sp)
     ea8:	d8000615 	stw	zero,24(sp)
     eac:	003f8d06 	br	ce4 <__divdf3+0x8c>

00000eb0 <__floatunsidf>:
     eb0:	defff204 	addi	sp,sp,-56
     eb4:	dfc00d15 	stw	ra,52(sp)
     eb8:	ddc00c15 	stw	r23,48(sp)
     ebc:	dd800b15 	stw	r22,44(sp)
     ec0:	dd400a15 	stw	r21,40(sp)
     ec4:	dd000915 	stw	r20,36(sp)
     ec8:	dcc00815 	stw	r19,32(sp)
     ecc:	dc800715 	stw	r18,28(sp)
     ed0:	dc400615 	stw	r17,24(sp)
     ed4:	dc000515 	stw	r16,20(sp)
     ed8:	d8000115 	stw	zero,4(sp)
     edc:	20000f1e 	bne	r4,zero,f1c <__floatunsidf+0x6c>
     ee0:	00800084 	movi	r2,2
     ee4:	d8800015 	stw	r2,0(sp)
     ee8:	d809883a 	mov	r4,sp
     eec:	00011e80 	call	11e8 <__pack_d>
     ef0:	dfc00d17 	ldw	ra,52(sp)
     ef4:	ddc00c17 	ldw	r23,48(sp)
     ef8:	dd800b17 	ldw	r22,44(sp)
     efc:	dd400a17 	ldw	r21,40(sp)
     f00:	dd000917 	ldw	r20,36(sp)
     f04:	dcc00817 	ldw	r19,32(sp)
     f08:	dc800717 	ldw	r18,28(sp)
     f0c:	dc400617 	ldw	r17,24(sp)
     f10:	dc000517 	ldw	r16,20(sp)
     f14:	dec00e04 	addi	sp,sp,56
     f18:	f800283a 	ret
     f1c:	008000c4 	movi	r2,3
     f20:	00c00f04 	movi	r3,60
     f24:	002f883a 	mov	r23,zero
     f28:	202d883a 	mov	r22,r4
     f2c:	d8800015 	stw	r2,0(sp)
     f30:	d8c00215 	stw	r3,8(sp)
     f34:	d9000315 	stw	r4,12(sp)
     f38:	ddc00415 	stw	r23,16(sp)
     f3c:	00011680 	call	1168 <__clzsi2>
     f40:	12400744 	addi	r9,r2,29
     f44:	48000b16 	blt	r9,zero,f74 <__floatunsidf+0xc4>
     f48:	483fe726 	beq	r9,zero,ee8 <__floatunsidf+0x38>
     f4c:	10bfff44 	addi	r2,r2,-3
     f50:	10002e16 	blt	r2,zero,100c <__floatunsidf+0x15c>
     f54:	b0a2983a 	sll	r17,r22,r2
     f58:	0021883a 	mov	r16,zero
     f5c:	d8800217 	ldw	r2,8(sp)
     f60:	dc400415 	stw	r17,16(sp)
     f64:	dc000315 	stw	r16,12(sp)
     f68:	1245c83a 	sub	r2,r2,r9
     f6c:	d8800215 	stw	r2,8(sp)
     f70:	003fdd06 	br	ee8 <__floatunsidf+0x38>
     f74:	0255c83a 	sub	r10,zero,r9
     f78:	51bff804 	addi	r6,r10,-32
     f7c:	30001b16 	blt	r6,zero,fec <__floatunsidf+0x13c>
     f80:	b9a8d83a 	srl	r20,r23,r6
     f84:	002b883a 	mov	r21,zero
     f88:	000f883a 	mov	r7,zero
     f8c:	01000044 	movi	r4,1
     f90:	0011883a 	mov	r8,zero
     f94:	30002516 	blt	r6,zero,102c <__floatunsidf+0x17c>
     f98:	21a6983a 	sll	r19,r4,r6
     f9c:	0025883a 	mov	r18,zero
     fa0:	00bfffc4 	movi	r2,-1
     fa4:	9089883a 	add	r4,r18,r2
     fa8:	988b883a 	add	r5,r19,r2
     fac:	248d803a 	cmpltu	r6,r4,r18
     fb0:	314b883a 	add	r5,r6,r5
     fb4:	b104703a 	and	r2,r22,r4
     fb8:	b946703a 	and	r3,r23,r5
     fbc:	10c4b03a 	or	r2,r2,r3
     fc0:	10000226 	beq	r2,zero,fcc <__floatunsidf+0x11c>
     fc4:	01c00044 	movi	r7,1
     fc8:	0011883a 	mov	r8,zero
     fcc:	d9000217 	ldw	r4,8(sp)
     fd0:	a1c4b03a 	or	r2,r20,r7
     fd4:	aa06b03a 	or	r3,r21,r8
     fd8:	2249c83a 	sub	r4,r4,r9
     fdc:	d8c00415 	stw	r3,16(sp)
     fe0:	d9000215 	stw	r4,8(sp)
     fe4:	d8800315 	stw	r2,12(sp)
     fe8:	003fbf06 	br	ee8 <__floatunsidf+0x38>
     fec:	bdc7883a 	add	r3,r23,r23
     ff0:	008007c4 	movi	r2,31
     ff4:	1285c83a 	sub	r2,r2,r10
     ff8:	1886983a 	sll	r3,r3,r2
     ffc:	b2a8d83a 	srl	r20,r22,r10
    1000:	baaad83a 	srl	r21,r23,r10
    1004:	1d28b03a 	or	r20,r3,r20
    1008:	003fdf06 	br	f88 <__floatunsidf+0xd8>
    100c:	b006d07a 	srli	r3,r22,1
    1010:	008007c4 	movi	r2,31
    1014:	1245c83a 	sub	r2,r2,r9
    1018:	1886d83a 	srl	r3,r3,r2
    101c:	ba62983a 	sll	r17,r23,r9
    1020:	b260983a 	sll	r16,r22,r9
    1024:	1c62b03a 	or	r17,r3,r17
    1028:	003fcc06 	br	f5c <__floatunsidf+0xac>
    102c:	2006d07a 	srli	r3,r4,1
    1030:	008007c4 	movi	r2,31
    1034:	1285c83a 	sub	r2,r2,r10
    1038:	18a6d83a 	srl	r19,r3,r2
    103c:	22a4983a 	sll	r18,r4,r10
    1040:	003fd706 	br	fa0 <__floatunsidf+0xf0>

00001044 <__muldi3>:
    1044:	defff204 	addi	sp,sp,-56
    1048:	df000c15 	stw	fp,48(sp)
    104c:	3038d43a 	srli	fp,r6,16
    1050:	dd000815 	stw	r20,32(sp)
    1054:	dc400515 	stw	r17,20(sp)
    1058:	2028d43a 	srli	r20,r4,16
    105c:	247fffcc 	andi	r17,r4,65535
    1060:	dc000415 	stw	r16,16(sp)
    1064:	343fffcc 	andi	r16,r6,65535
    1068:	dcc00715 	stw	r19,28(sp)
    106c:	d9000015 	stw	r4,0(sp)
    1070:	2827883a 	mov	r19,r5
    1074:	8809883a 	mov	r4,r17
    1078:	d9400115 	stw	r5,4(sp)
    107c:	800b883a 	mov	r5,r16
    1080:	d9800215 	stw	r6,8(sp)
    1084:	dfc00d15 	stw	ra,52(sp)
    1088:	d9c00315 	stw	r7,12(sp)
    108c:	dd800a15 	stw	r22,40(sp)
    1090:	dd400915 	stw	r21,36(sp)
    1094:	302d883a 	mov	r22,r6
    1098:	ddc00b15 	stw	r23,44(sp)
    109c:	dc800615 	stw	r18,24(sp)
    10a0:	00016340 	call	1634 <__mulsi3>
    10a4:	8809883a 	mov	r4,r17
    10a8:	e00b883a 	mov	r5,fp
    10ac:	102b883a 	mov	r21,r2
    10b0:	00016340 	call	1634 <__mulsi3>
    10b4:	800b883a 	mov	r5,r16
    10b8:	a009883a 	mov	r4,r20
    10bc:	1023883a 	mov	r17,r2
    10c0:	00016340 	call	1634 <__mulsi3>
    10c4:	a009883a 	mov	r4,r20
    10c8:	e00b883a 	mov	r5,fp
    10cc:	1021883a 	mov	r16,r2
    10d0:	00016340 	call	1634 <__mulsi3>
    10d4:	a8ffffcc 	andi	r3,r21,65535
    10d8:	a82ad43a 	srli	r21,r21,16
    10dc:	8c23883a 	add	r17,r17,r16
    10e0:	1011883a 	mov	r8,r2
    10e4:	ac6b883a 	add	r21,r21,r17
    10e8:	a804943a 	slli	r2,r21,16
    10ec:	b009883a 	mov	r4,r22
    10f0:	980b883a 	mov	r5,r19
    10f4:	10c7883a 	add	r3,r2,r3
    10f8:	a812d43a 	srli	r9,r21,16
    10fc:	180d883a 	mov	r6,r3
    1100:	ac00022e 	bgeu	r21,r16,110c <__muldi3+0xc8>
    1104:	00800074 	movhi	r2,1
    1108:	4091883a 	add	r8,r8,r2
    110c:	4267883a 	add	r19,r8,r9
    1110:	302d883a 	mov	r22,r6
    1114:	00016340 	call	1634 <__mulsi3>
    1118:	d9400317 	ldw	r5,12(sp)
    111c:	d9000017 	ldw	r4,0(sp)
    1120:	1023883a 	mov	r17,r2
    1124:	00016340 	call	1634 <__mulsi3>
    1128:	14cb883a 	add	r5,r2,r19
    112c:	894b883a 	add	r5,r17,r5
    1130:	b005883a 	mov	r2,r22
    1134:	2807883a 	mov	r3,r5
    1138:	dfc00d17 	ldw	ra,52(sp)
    113c:	df000c17 	ldw	fp,48(sp)
    1140:	ddc00b17 	ldw	r23,44(sp)
    1144:	dd800a17 	ldw	r22,40(sp)
    1148:	dd400917 	ldw	r21,36(sp)
    114c:	dd000817 	ldw	r20,32(sp)
    1150:	dcc00717 	ldw	r19,28(sp)
    1154:	dc800617 	ldw	r18,24(sp)
    1158:	dc400517 	ldw	r17,20(sp)
    115c:	dc000417 	ldw	r16,16(sp)
    1160:	dec00e04 	addi	sp,sp,56
    1164:	f800283a 	ret

00001168 <__clzsi2>:
    1168:	00bfffd4 	movui	r2,65535
    116c:	11000e36 	bltu	r2,r4,11a8 <__clzsi2+0x40>
    1170:	00803fc4 	movi	r2,255
    1174:	01400204 	movi	r5,8
    1178:	0007883a 	mov	r3,zero
    117c:	11001036 	bltu	r2,r4,11c0 <__clzsi2+0x58>
    1180:	000b883a 	mov	r5,zero
    1184:	20c6d83a 	srl	r3,r4,r3
    1188:	00800074 	movhi	r2,1
    118c:	10b92b04 	addi	r2,r2,-6996
    1190:	1887883a 	add	r3,r3,r2
    1194:	18800003 	ldbu	r2,0(r3)
    1198:	00c00804 	movi	r3,32
    119c:	2885883a 	add	r2,r5,r2
    11a0:	1885c83a 	sub	r2,r3,r2
    11a4:	f800283a 	ret
    11a8:	01400404 	movi	r5,16
    11ac:	00804034 	movhi	r2,256
    11b0:	10bfffc4 	addi	r2,r2,-1
    11b4:	2807883a 	mov	r3,r5
    11b8:	113ff22e 	bgeu	r2,r4,1184 <__clzsi2+0x1c>
    11bc:	01400604 	movi	r5,24
    11c0:	2807883a 	mov	r3,r5
    11c4:	20c6d83a 	srl	r3,r4,r3
    11c8:	00800074 	movhi	r2,1
    11cc:	10b92b04 	addi	r2,r2,-6996
    11d0:	1887883a 	add	r3,r3,r2
    11d4:	18800003 	ldbu	r2,0(r3)
    11d8:	00c00804 	movi	r3,32
    11dc:	2885883a 	add	r2,r5,r2
    11e0:	1885c83a 	sub	r2,r3,r2
    11e4:	f800283a 	ret

000011e8 <__pack_d>:
    11e8:	20c00017 	ldw	r3,0(r4)
    11ec:	defffd04 	addi	sp,sp,-12
    11f0:	dc000015 	stw	r16,0(sp)
    11f4:	dc800215 	stw	r18,8(sp)
    11f8:	dc400115 	stw	r17,4(sp)
    11fc:	00800044 	movi	r2,1
    1200:	22000317 	ldw	r8,12(r4)
    1204:	001f883a 	mov	r15,zero
    1208:	22400417 	ldw	r9,16(r4)
    120c:	24000117 	ldw	r16,4(r4)
    1210:	10c0552e 	bgeu	r2,r3,1368 <__pack_d+0x180>
    1214:	00800104 	movi	r2,4
    1218:	18804f26 	beq	r3,r2,1358 <__pack_d+0x170>
    121c:	00800084 	movi	r2,2
    1220:	18800226 	beq	r3,r2,122c <__pack_d+0x44>
    1224:	4244b03a 	or	r2,r8,r9
    1228:	10001a1e 	bne	r2,zero,1294 <__pack_d+0xac>
    122c:	000d883a 	mov	r6,zero
    1230:	000f883a 	mov	r7,zero
    1234:	0011883a 	mov	r8,zero
    1238:	00800434 	movhi	r2,16
    123c:	10bfffc4 	addi	r2,r2,-1
    1240:	301d883a 	mov	r14,r6
    1244:	3884703a 	and	r2,r7,r2
    1248:	400a953a 	slli	r5,r8,20
    124c:	79bffc2c 	andhi	r6,r15,65520
    1250:	308cb03a 	or	r6,r6,r2
    1254:	00e00434 	movhi	r3,32784
    1258:	18ffffc4 	addi	r3,r3,-1
    125c:	800497fa 	slli	r2,r16,31
    1260:	30c6703a 	and	r3,r6,r3
    1264:	1946b03a 	or	r3,r3,r5
    1268:	01600034 	movhi	r5,32768
    126c:	297fffc4 	addi	r5,r5,-1
    1270:	194a703a 	and	r5,r3,r5
    1274:	288ab03a 	or	r5,r5,r2
    1278:	2807883a 	mov	r3,r5
    127c:	7005883a 	mov	r2,r14
    1280:	dc800217 	ldw	r18,8(sp)
    1284:	dc400117 	ldw	r17,4(sp)
    1288:	dc000017 	ldw	r16,0(sp)
    128c:	dec00304 	addi	sp,sp,12
    1290:	f800283a 	ret
    1294:	21000217 	ldw	r4,8(r4)
    1298:	00bf0084 	movi	r2,-1022
    129c:	20803f16 	blt	r4,r2,139c <__pack_d+0x1b4>
    12a0:	0080ffc4 	movi	r2,1023
    12a4:	11002c16 	blt	r2,r4,1358 <__pack_d+0x170>
    12a8:	00803fc4 	movi	r2,255
    12ac:	408c703a 	and	r6,r8,r2
    12b0:	00802004 	movi	r2,128
    12b4:	0007883a 	mov	r3,zero
    12b8:	000f883a 	mov	r7,zero
    12bc:	2280ffc4 	addi	r10,r4,1023
    12c0:	30801e26 	beq	r6,r2,133c <__pack_d+0x154>
    12c4:	00801fc4 	movi	r2,127
    12c8:	4089883a 	add	r4,r8,r2
    12cc:	220d803a 	cmpltu	r6,r4,r8
    12d0:	324d883a 	add	r6,r6,r9
    12d4:	2011883a 	mov	r8,r4
    12d8:	3013883a 	mov	r9,r6
    12dc:	00880034 	movhi	r2,8192
    12e0:	10bfffc4 	addi	r2,r2,-1
    12e4:	12400d36 	bltu	r2,r9,131c <__pack_d+0x134>
    12e8:	4804963a 	slli	r2,r9,24
    12ec:	400cd23a 	srli	r6,r8,8
    12f0:	480ed23a 	srli	r7,r9,8
    12f4:	013fffc4 	movi	r4,-1
    12f8:	118cb03a 	or	r6,r2,r6
    12fc:	01400434 	movhi	r5,16
    1300:	297fffc4 	addi	r5,r5,-1
    1304:	3104703a 	and	r2,r6,r4
    1308:	3946703a 	and	r3,r7,r5
    130c:	5201ffcc 	andi	r8,r10,2047
    1310:	100d883a 	mov	r6,r2
    1314:	180f883a 	mov	r7,r3
    1318:	003fc706 	br	1238 <__pack_d+0x50>
    131c:	480897fa 	slli	r4,r9,31
    1320:	4004d07a 	srli	r2,r8,1
    1324:	4806d07a 	srli	r3,r9,1
    1328:	52800044 	addi	r10,r10,1
    132c:	2084b03a 	or	r2,r4,r2
    1330:	1011883a 	mov	r8,r2
    1334:	1813883a 	mov	r9,r3
    1338:	003feb06 	br	12e8 <__pack_d+0x100>
    133c:	383fe11e 	bne	r7,zero,12c4 <__pack_d+0xdc>
    1340:	01004004 	movi	r4,256
    1344:	4104703a 	and	r2,r8,r4
    1348:	10c4b03a 	or	r2,r2,r3
    134c:	103fe326 	beq	r2,zero,12dc <__pack_d+0xf4>
    1350:	3005883a 	mov	r2,r6
    1354:	003fdc06 	br	12c8 <__pack_d+0xe0>
    1358:	000d883a 	mov	r6,zero
    135c:	000f883a 	mov	r7,zero
    1360:	0201ffc4 	movi	r8,2047
    1364:	003fb406 	br	1238 <__pack_d+0x50>
    1368:	0005883a 	mov	r2,zero
    136c:	00c00234 	movhi	r3,8
    1370:	408cb03a 	or	r6,r8,r2
    1374:	48ceb03a 	or	r7,r9,r3
    1378:	013fffc4 	movi	r4,-1
    137c:	01400434 	movhi	r5,16
    1380:	297fffc4 	addi	r5,r5,-1
    1384:	3104703a 	and	r2,r6,r4
    1388:	3946703a 	and	r3,r7,r5
    138c:	100d883a 	mov	r6,r2
    1390:	180f883a 	mov	r7,r3
    1394:	0201ffc4 	movi	r8,2047
    1398:	003fa706 	br	1238 <__pack_d+0x50>
    139c:	1109c83a 	sub	r4,r2,r4
    13a0:	00800e04 	movi	r2,56
    13a4:	11004316 	blt	r2,r4,14b4 <__pack_d+0x2cc>
    13a8:	21fff804 	addi	r7,r4,-32
    13ac:	38004516 	blt	r7,zero,14c4 <__pack_d+0x2dc>
    13b0:	49d8d83a 	srl	r12,r9,r7
    13b4:	001b883a 	mov	r13,zero
    13b8:	0023883a 	mov	r17,zero
    13bc:	01400044 	movi	r5,1
    13c0:	0025883a 	mov	r18,zero
    13c4:	38004716 	blt	r7,zero,14e4 <__pack_d+0x2fc>
    13c8:	29d6983a 	sll	r11,r5,r7
    13cc:	0015883a 	mov	r10,zero
    13d0:	00bfffc4 	movi	r2,-1
    13d4:	5089883a 	add	r4,r10,r2
    13d8:	588b883a 	add	r5,r11,r2
    13dc:	228d803a 	cmpltu	r6,r4,r10
    13e0:	314b883a 	add	r5,r6,r5
    13e4:	4104703a 	and	r2,r8,r4
    13e8:	4946703a 	and	r3,r9,r5
    13ec:	10c4b03a 	or	r2,r2,r3
    13f0:	10000226 	beq	r2,zero,13fc <__pack_d+0x214>
    13f4:	04400044 	movi	r17,1
    13f8:	0025883a 	mov	r18,zero
    13fc:	00803fc4 	movi	r2,255
    1400:	644eb03a 	or	r7,r12,r17
    1404:	3892703a 	and	r9,r7,r2
    1408:	00802004 	movi	r2,128
    140c:	6c90b03a 	or	r8,r13,r18
    1410:	0015883a 	mov	r10,zero
    1414:	48801626 	beq	r9,r2,1470 <__pack_d+0x288>
    1418:	01001fc4 	movi	r4,127
    141c:	3905883a 	add	r2,r7,r4
    1420:	11cd803a 	cmpltu	r6,r2,r7
    1424:	320d883a 	add	r6,r6,r8
    1428:	100f883a 	mov	r7,r2
    142c:	00840034 	movhi	r2,4096
    1430:	10bfffc4 	addi	r2,r2,-1
    1434:	3011883a 	mov	r8,r6
    1438:	0007883a 	mov	r3,zero
    143c:	11801b36 	bltu	r2,r6,14ac <__pack_d+0x2c4>
    1440:	4004963a 	slli	r2,r8,24
    1444:	3808d23a 	srli	r4,r7,8
    1448:	400ad23a 	srli	r5,r8,8
    144c:	1813883a 	mov	r9,r3
    1450:	1108b03a 	or	r4,r2,r4
    1454:	00bfffc4 	movi	r2,-1
    1458:	00c00434 	movhi	r3,16
    145c:	18ffffc4 	addi	r3,r3,-1
    1460:	208c703a 	and	r6,r4,r2
    1464:	28ce703a 	and	r7,r5,r3
    1468:	4a01ffcc 	andi	r8,r9,2047
    146c:	003f7206 	br	1238 <__pack_d+0x50>
    1470:	503fe91e 	bne	r10,zero,1418 <__pack_d+0x230>
    1474:	01004004 	movi	r4,256
    1478:	3904703a 	and	r2,r7,r4
    147c:	0007883a 	mov	r3,zero
    1480:	10c4b03a 	or	r2,r2,r3
    1484:	10000626 	beq	r2,zero,14a0 <__pack_d+0x2b8>
    1488:	3a45883a 	add	r2,r7,r9
    148c:	11cd803a 	cmpltu	r6,r2,r7
    1490:	320d883a 	add	r6,r6,r8
    1494:	100f883a 	mov	r7,r2
    1498:	3011883a 	mov	r8,r6
    149c:	0007883a 	mov	r3,zero
    14a0:	00840034 	movhi	r2,4096
    14a4:	10bfffc4 	addi	r2,r2,-1
    14a8:	123fe52e 	bgeu	r2,r8,1440 <__pack_d+0x258>
    14ac:	00c00044 	movi	r3,1
    14b0:	003fe306 	br	1440 <__pack_d+0x258>
    14b4:	0009883a 	mov	r4,zero
    14b8:	0013883a 	mov	r9,zero
    14bc:	000b883a 	mov	r5,zero
    14c0:	003fe406 	br	1454 <__pack_d+0x26c>
    14c4:	4a47883a 	add	r3,r9,r9
    14c8:	008007c4 	movi	r2,31
    14cc:	1105c83a 	sub	r2,r2,r4
    14d0:	1886983a 	sll	r3,r3,r2
    14d4:	4118d83a 	srl	r12,r8,r4
    14d8:	491ad83a 	srl	r13,r9,r4
    14dc:	1b18b03a 	or	r12,r3,r12
    14e0:	003fb506 	br	13b8 <__pack_d+0x1d0>
    14e4:	2806d07a 	srli	r3,r5,1
    14e8:	008007c4 	movi	r2,31
    14ec:	1105c83a 	sub	r2,r2,r4
    14f0:	1896d83a 	srl	r11,r3,r2
    14f4:	2914983a 	sll	r10,r5,r4
    14f8:	003fb506 	br	13d0 <__pack_d+0x1e8>

000014fc <__unpack_d>:
    14fc:	20c00117 	ldw	r3,4(r4)
    1500:	22400017 	ldw	r9,0(r4)
    1504:	00800434 	movhi	r2,16
    1508:	10bfffc4 	addi	r2,r2,-1
    150c:	1808d53a 	srli	r4,r3,20
    1510:	180cd7fa 	srli	r6,r3,31
    1514:	1894703a 	and	r10,r3,r2
    1518:	2201ffcc 	andi	r8,r4,2047
    151c:	281b883a 	mov	r13,r5
    1520:	4817883a 	mov	r11,r9
    1524:	29800115 	stw	r6,4(r5)
    1528:	5019883a 	mov	r12,r10
    152c:	40001e1e 	bne	r8,zero,15a8 <__unpack_d+0xac>
    1530:	4a84b03a 	or	r2,r9,r10
    1534:	10001926 	beq	r2,zero,159c <__unpack_d+0xa0>
    1538:	4804d63a 	srli	r2,r9,24
    153c:	500c923a 	slli	r6,r10,8
    1540:	013f0084 	movi	r4,-1022
    1544:	00c40034 	movhi	r3,4096
    1548:	18ffffc4 	addi	r3,r3,-1
    154c:	118cb03a 	or	r6,r2,r6
    1550:	008000c4 	movi	r2,3
    1554:	480a923a 	slli	r5,r9,8
    1558:	68800015 	stw	r2,0(r13)
    155c:	69000215 	stw	r4,8(r13)
    1560:	19800b36 	bltu	r3,r6,1590 <__unpack_d+0x94>
    1564:	200f883a 	mov	r7,r4
    1568:	1811883a 	mov	r8,r3
    156c:	2945883a 	add	r2,r5,r5
    1570:	1149803a 	cmpltu	r4,r2,r5
    1574:	3187883a 	add	r3,r6,r6
    1578:	20c9883a 	add	r4,r4,r3
    157c:	100b883a 	mov	r5,r2
    1580:	200d883a 	mov	r6,r4
    1584:	39ffffc4 	addi	r7,r7,-1
    1588:	413ff82e 	bgeu	r8,r4,156c <__unpack_d+0x70>
    158c:	69c00215 	stw	r7,8(r13)
    1590:	69800415 	stw	r6,16(r13)
    1594:	69400315 	stw	r5,12(r13)
    1598:	f800283a 	ret
    159c:	00800084 	movi	r2,2
    15a0:	28800015 	stw	r2,0(r5)
    15a4:	f800283a 	ret
    15a8:	0081ffc4 	movi	r2,2047
    15ac:	40800f26 	beq	r8,r2,15ec <__unpack_d+0xf0>
    15b0:	480cd63a 	srli	r6,r9,24
    15b4:	5006923a 	slli	r3,r10,8
    15b8:	4804923a 	slli	r2,r9,8
    15bc:	0009883a 	mov	r4,zero
    15c0:	30c6b03a 	or	r3,r6,r3
    15c4:	01440034 	movhi	r5,4096
    15c8:	110cb03a 	or	r6,r2,r4
    15cc:	423f0044 	addi	r8,r8,-1023
    15d0:	194eb03a 	or	r7,r3,r5
    15d4:	008000c4 	movi	r2,3
    15d8:	69c00415 	stw	r7,16(r13)
    15dc:	6a000215 	stw	r8,8(r13)
    15e0:	68800015 	stw	r2,0(r13)
    15e4:	69800315 	stw	r6,12(r13)
    15e8:	f800283a 	ret
    15ec:	4a84b03a 	or	r2,r9,r10
    15f0:	1000031e 	bne	r2,zero,1600 <__unpack_d+0x104>
    15f4:	00800104 	movi	r2,4
    15f8:	28800015 	stw	r2,0(r5)
    15fc:	f800283a 	ret
    1600:	0009883a 	mov	r4,zero
    1604:	01400234 	movhi	r5,8
    1608:	4904703a 	and	r2,r9,r4
    160c:	5146703a 	and	r3,r10,r5
    1610:	10c4b03a 	or	r2,r2,r3
    1614:	10000526 	beq	r2,zero,162c <__unpack_d+0x130>
    1618:	00800044 	movi	r2,1
    161c:	68800015 	stw	r2,0(r13)
    1620:	6b000415 	stw	r12,16(r13)
    1624:	6ac00315 	stw	r11,12(r13)
    1628:	f800283a 	ret
    162c:	68000015 	stw	zero,0(r13)
    1630:	003ffb06 	br	1620 <__unpack_d+0x124>

00001634 <__mulsi3>:
    1634:	20000a26 	beq	r4,zero,1660 <__mulsi3+0x2c>
    1638:	0007883a 	mov	r3,zero
    163c:	2080004c 	andi	r2,r4,1
    1640:	1005003a 	cmpeq	r2,r2,zero
    1644:	2008d07a 	srli	r4,r4,1
    1648:	1000011e 	bne	r2,zero,1650 <__mulsi3+0x1c>
    164c:	1947883a 	add	r3,r3,r5
    1650:	294b883a 	add	r5,r5,r5
    1654:	203ff91e 	bne	r4,zero,163c <__mulsi3+0x8>
    1658:	1805883a 	mov	r2,r3
    165c:	f800283a 	ret
    1660:	0007883a 	mov	r3,zero
    1664:	1805883a 	mov	r2,r3
    1668:	f800283a 	ret

0000166c <printf>:
    166c:	defffb04 	addi	sp,sp,-20
    1670:	dfc00115 	stw	ra,4(sp)
    1674:	d9400215 	stw	r5,8(sp)
    1678:	d9800315 	stw	r6,12(sp)
    167c:	d9c00415 	stw	r7,16(sp)
    1680:	00800074 	movhi	r2,1
    1684:	1081c804 	addi	r2,r2,1824
    1688:	10c00017 	ldw	r3,0(r2)
    168c:	200b883a 	mov	r5,r4
    1690:	d8800204 	addi	r2,sp,8
    1694:	19000217 	ldw	r4,8(r3)
    1698:	100d883a 	mov	r6,r2
    169c:	d8800015 	stw	r2,0(sp)
    16a0:	00036000 	call	3600 <__vfprintf_internal>
    16a4:	dfc00117 	ldw	ra,4(sp)
    16a8:	dec00504 	addi	sp,sp,20
    16ac:	f800283a 	ret

000016b0 <_printf_r>:
    16b0:	defffc04 	addi	sp,sp,-16
    16b4:	dfc00115 	stw	ra,4(sp)
    16b8:	d9800215 	stw	r6,8(sp)
    16bc:	d9c00315 	stw	r7,12(sp)
    16c0:	280d883a 	mov	r6,r5
    16c4:	21400217 	ldw	r5,8(r4)
    16c8:	d8c00204 	addi	r3,sp,8
    16cc:	180f883a 	mov	r7,r3
    16d0:	d8c00015 	stw	r3,0(sp)
    16d4:	000173c0 	call	173c <___vfprintf_internal_r>
    16d8:	dfc00117 	ldw	ra,4(sp)
    16dc:	dec00404 	addi	sp,sp,16
    16e0:	f800283a 	ret

000016e4 <__sprint_r>:
    16e4:	30800217 	ldw	r2,8(r6)
    16e8:	defffe04 	addi	sp,sp,-8
    16ec:	dc000015 	stw	r16,0(sp)
    16f0:	dfc00115 	stw	ra,4(sp)
    16f4:	3021883a 	mov	r16,r6
    16f8:	0007883a 	mov	r3,zero
    16fc:	1000061e 	bne	r2,zero,1718 <__sprint_r+0x34>
    1700:	1805883a 	mov	r2,r3
    1704:	30000115 	stw	zero,4(r6)
    1708:	dfc00117 	ldw	ra,4(sp)
    170c:	dc000017 	ldw	r16,0(sp)
    1710:	dec00204 	addi	sp,sp,8
    1714:	f800283a 	ret
    1718:	00058bc0 	call	58bc <__sfvwrite_r>
    171c:	1007883a 	mov	r3,r2
    1720:	1805883a 	mov	r2,r3
    1724:	80000115 	stw	zero,4(r16)
    1728:	80000215 	stw	zero,8(r16)
    172c:	dfc00117 	ldw	ra,4(sp)
    1730:	dc000017 	ldw	r16,0(sp)
    1734:	dec00204 	addi	sp,sp,8
    1738:	f800283a 	ret

0000173c <___vfprintf_internal_r>:
    173c:	defea404 	addi	sp,sp,-1392
    1740:	dd815815 	stw	r22,1376(sp)
    1744:	dc015215 	stw	r16,1352(sp)
    1748:	d9c15115 	stw	r7,1348(sp)
    174c:	dfc15b15 	stw	ra,1388(sp)
    1750:	df015a15 	stw	fp,1384(sp)
    1754:	ddc15915 	stw	r23,1380(sp)
    1758:	dd415715 	stw	r21,1372(sp)
    175c:	dd015615 	stw	r20,1368(sp)
    1760:	dcc15515 	stw	r19,1364(sp)
    1764:	dc815415 	stw	r18,1360(sp)
    1768:	dc415315 	stw	r17,1356(sp)
    176c:	282d883a 	mov	r22,r5
    1770:	3021883a 	mov	r16,r6
    1774:	d9014f15 	stw	r4,1340(sp)
    1778:	0005ee00 	call	5ee0 <_localeconv_r>
    177c:	10800017 	ldw	r2,0(r2)
    1780:	d9c15117 	ldw	r7,1348(sp)
    1784:	d8814915 	stw	r2,1316(sp)
    1788:	d8814f17 	ldw	r2,1340(sp)
    178c:	10000226 	beq	r2,zero,1798 <___vfprintf_internal_r+0x5c>
    1790:	10800e17 	ldw	r2,56(r2)
    1794:	10020d26 	beq	r2,zero,1fcc <___vfprintf_internal_r+0x890>
    1798:	b080030b 	ldhu	r2,12(r22)
    179c:	1080020c 	andi	r2,r2,8
    17a0:	10020e26 	beq	r2,zero,1fdc <___vfprintf_internal_r+0x8a0>
    17a4:	b0800417 	ldw	r2,16(r22)
    17a8:	10020c26 	beq	r2,zero,1fdc <___vfprintf_internal_r+0x8a0>
    17ac:	b200030b 	ldhu	r8,12(r22)
    17b0:	00800284 	movi	r2,10
    17b4:	40c0068c 	andi	r3,r8,26
    17b8:	18802f1e 	bne	r3,r2,1878 <___vfprintf_internal_r+0x13c>
    17bc:	b080038f 	ldh	r2,14(r22)
    17c0:	10002d16 	blt	r2,zero,1878 <___vfprintf_internal_r+0x13c>
    17c4:	b240038b 	ldhu	r9,14(r22)
    17c8:	b2800717 	ldw	r10,28(r22)
    17cc:	b2c00917 	ldw	r11,36(r22)
    17d0:	d9014f17 	ldw	r4,1340(sp)
    17d4:	dc402904 	addi	r17,sp,164
    17d8:	d8804004 	addi	r2,sp,256
    17dc:	00c10004 	movi	r3,1024
    17e0:	423fff4c 	andi	r8,r8,65533
    17e4:	800d883a 	mov	r6,r16
    17e8:	880b883a 	mov	r5,r17
    17ec:	da002c0d 	sth	r8,176(sp)
    17f0:	da402c8d 	sth	r9,178(sp)
    17f4:	da803015 	stw	r10,192(sp)
    17f8:	dac03215 	stw	r11,200(sp)
    17fc:	d8802d15 	stw	r2,180(sp)
    1800:	d8c02e15 	stw	r3,184(sp)
    1804:	d8802915 	stw	r2,164(sp)
    1808:	d8c02b15 	stw	r3,172(sp)
    180c:	d8002f15 	stw	zero,188(sp)
    1810:	000173c0 	call	173c <___vfprintf_internal_r>
    1814:	d8814b15 	stw	r2,1324(sp)
    1818:	10000416 	blt	r2,zero,182c <___vfprintf_internal_r+0xf0>
    181c:	d9014f17 	ldw	r4,1340(sp)
    1820:	880b883a 	mov	r5,r17
    1824:	0004f580 	call	4f58 <_fflush_r>
    1828:	1002321e 	bne	r2,zero,20f4 <___vfprintf_internal_r+0x9b8>
    182c:	d8802c0b 	ldhu	r2,176(sp)
    1830:	1080100c 	andi	r2,r2,64
    1834:	10000326 	beq	r2,zero,1844 <___vfprintf_internal_r+0x108>
    1838:	b080030b 	ldhu	r2,12(r22)
    183c:	10801014 	ori	r2,r2,64
    1840:	b080030d 	sth	r2,12(r22)
    1844:	d8814b17 	ldw	r2,1324(sp)
    1848:	dfc15b17 	ldw	ra,1388(sp)
    184c:	df015a17 	ldw	fp,1384(sp)
    1850:	ddc15917 	ldw	r23,1380(sp)
    1854:	dd815817 	ldw	r22,1376(sp)
    1858:	dd415717 	ldw	r21,1372(sp)
    185c:	dd015617 	ldw	r20,1368(sp)
    1860:	dcc15517 	ldw	r19,1364(sp)
    1864:	dc815417 	ldw	r18,1360(sp)
    1868:	dc415317 	ldw	r17,1356(sp)
    186c:	dc015217 	ldw	r16,1352(sp)
    1870:	dec15c04 	addi	sp,sp,1392
    1874:	f800283a 	ret
    1878:	0005883a 	mov	r2,zero
    187c:	0007883a 	mov	r3,zero
    1880:	dd401904 	addi	r21,sp,100
    1884:	d8814215 	stw	r2,1288(sp)
    1888:	802f883a 	mov	r23,r16
    188c:	d8c14315 	stw	r3,1292(sp)
    1890:	d8014b15 	stw	zero,1324(sp)
    1894:	d8014815 	stw	zero,1312(sp)
    1898:	d8014415 	stw	zero,1296(sp)
    189c:	d8014715 	stw	zero,1308(sp)
    18a0:	dd400c15 	stw	r21,48(sp)
    18a4:	d8000e15 	stw	zero,56(sp)
    18a8:	d8000d15 	stw	zero,52(sp)
    18ac:	b8800007 	ldb	r2,0(r23)
    18b0:	10001926 	beq	r2,zero,1918 <___vfprintf_internal_r+0x1dc>
    18b4:	00c00944 	movi	r3,37
    18b8:	10c01726 	beq	r2,r3,1918 <___vfprintf_internal_r+0x1dc>
    18bc:	b821883a 	mov	r16,r23
    18c0:	00000106 	br	18c8 <___vfprintf_internal_r+0x18c>
    18c4:	10c00326 	beq	r2,r3,18d4 <___vfprintf_internal_r+0x198>
    18c8:	84000044 	addi	r16,r16,1
    18cc:	80800007 	ldb	r2,0(r16)
    18d0:	103ffc1e 	bne	r2,zero,18c4 <___vfprintf_internal_r+0x188>
    18d4:	85e7c83a 	sub	r19,r16,r23
    18d8:	98000e26 	beq	r19,zero,1914 <___vfprintf_internal_r+0x1d8>
    18dc:	dc800e17 	ldw	r18,56(sp)
    18e0:	dc400d17 	ldw	r17,52(sp)
    18e4:	008001c4 	movi	r2,7
    18e8:	94e5883a 	add	r18,r18,r19
    18ec:	8c400044 	addi	r17,r17,1
    18f0:	adc00015 	stw	r23,0(r21)
    18f4:	dc800e15 	stw	r18,56(sp)
    18f8:	acc00115 	stw	r19,4(r21)
    18fc:	dc400d15 	stw	r17,52(sp)
    1900:	14428b16 	blt	r2,r17,2330 <___vfprintf_internal_r+0xbf4>
    1904:	ad400204 	addi	r21,r21,8
    1908:	d9014b17 	ldw	r4,1324(sp)
    190c:	24c9883a 	add	r4,r4,r19
    1910:	d9014b15 	stw	r4,1324(sp)
    1914:	802f883a 	mov	r23,r16
    1918:	b8800007 	ldb	r2,0(r23)
    191c:	10013c26 	beq	r2,zero,1e10 <___vfprintf_internal_r+0x6d4>
    1920:	bdc00044 	addi	r23,r23,1
    1924:	d8000405 	stb	zero,16(sp)
    1928:	b8c00007 	ldb	r3,0(r23)
    192c:	04ffffc4 	movi	r19,-1
    1930:	d8014c15 	stw	zero,1328(sp)
    1934:	d8014a15 	stw	zero,1320(sp)
    1938:	d8c14d15 	stw	r3,1332(sp)
    193c:	bdc00044 	addi	r23,r23,1
    1940:	d9414d17 	ldw	r5,1332(sp)
    1944:	00801604 	movi	r2,88
    1948:	28fff804 	addi	r3,r5,-32
    194c:	10c06036 	bltu	r2,r3,1ad0 <___vfprintf_internal_r+0x394>
    1950:	18c5883a 	add	r2,r3,r3
    1954:	1085883a 	add	r2,r2,r2
    1958:	00c00034 	movhi	r3,0
    195c:	18c65b04 	addi	r3,r3,6508
    1960:	10c5883a 	add	r2,r2,r3
    1964:	11000017 	ldw	r4,0(r2)
    1968:	2000683a 	jmp	r4
    196c:	000028e0 	cmpeqi	zero,zero,163
    1970:	00001ad0 	cmplti	zero,zero,107
    1974:	00001ad0 	cmplti	zero,zero,107
    1978:	000028cc 	andi	zero,zero,163
    197c:	00001ad0 	cmplti	zero,zero,107
    1980:	00001ad0 	cmplti	zero,zero,107
    1984:	00001ad0 	cmplti	zero,zero,107
    1988:	00001ad0 	cmplti	zero,zero,107
    198c:	00001ad0 	cmplti	zero,zero,107
    1990:	00001ad0 	cmplti	zero,zero,107
    1994:	000026ac 	andhi	zero,zero,154
    1998:	000028bc 	xorhi	zero,zero,162
    199c:	00001ad0 	cmplti	zero,zero,107
    19a0:	000026c4 	movi	zero,155
    19a4:	00002964 	muli	zero,zero,165
    19a8:	00001ad0 	cmplti	zero,zero,107
    19ac:	00002950 	cmplti	zero,zero,165
    19b0:	0000290c 	andi	zero,zero,164
    19b4:	0000290c 	andi	zero,zero,164
    19b8:	0000290c 	andi	zero,zero,164
    19bc:	0000290c 	andi	zero,zero,164
    19c0:	0000290c 	andi	zero,zero,164
    19c4:	0000290c 	andi	zero,zero,164
    19c8:	0000290c 	andi	zero,zero,164
    19cc:	0000290c 	andi	zero,zero,164
    19d0:	0000290c 	andi	zero,zero,164
    19d4:	00001ad0 	cmplti	zero,zero,107
    19d8:	00001ad0 	cmplti	zero,zero,107
    19dc:	00001ad0 	cmplti	zero,zero,107
    19e0:	00001ad0 	cmplti	zero,zero,107
    19e4:	00001ad0 	cmplti	zero,zero,107
    19e8:	00001ad0 	cmplti	zero,zero,107
    19ec:	00001ad0 	cmplti	zero,zero,107
    19f0:	00001ad0 	cmplti	zero,zero,107
    19f4:	00001ad0 	cmplti	zero,zero,107
    19f8:	00001ad0 	cmplti	zero,zero,107
    19fc:	00002128 	cmpgeui	zero,zero,132
    1a00:	00002794 	movui	zero,158
    1a04:	00001ad0 	cmplti	zero,zero,107
    1a08:	00002794 	movui	zero,158
    1a0c:	00001ad0 	cmplti	zero,zero,107
    1a10:	00001ad0 	cmplti	zero,zero,107
    1a14:	00001ad0 	cmplti	zero,zero,107
    1a18:	00001ad0 	cmplti	zero,zero,107
    1a1c:	000028f8 	rdprs	zero,zero,163
    1a20:	00001ad0 	cmplti	zero,zero,107
    1a24:	00001ad0 	cmplti	zero,zero,107
    1a28:	000021dc 	xori	zero,zero,135
    1a2c:	00001ad0 	cmplti	zero,zero,107
    1a30:	00001ad0 	cmplti	zero,zero,107
    1a34:	00001ad0 	cmplti	zero,zero,107
    1a38:	00001ad0 	cmplti	zero,zero,107
    1a3c:	00001ad0 	cmplti	zero,zero,107
    1a40:	00002228 	cmpgeui	zero,zero,136
    1a44:	00001ad0 	cmplti	zero,zero,107
    1a48:	00001ad0 	cmplti	zero,zero,107
    1a4c:	00002848 	cmpgei	zero,zero,161
    1a50:	00001ad0 	cmplti	zero,zero,107
    1a54:	00001ad0 	cmplti	zero,zero,107
    1a58:	00001ad0 	cmplti	zero,zero,107
    1a5c:	00001ad0 	cmplti	zero,zero,107
    1a60:	00001ad0 	cmplti	zero,zero,107
    1a64:	00001ad0 	cmplti	zero,zero,107
    1a68:	00001ad0 	cmplti	zero,zero,107
    1a6c:	00001ad0 	cmplti	zero,zero,107
    1a70:	00001ad0 	cmplti	zero,zero,107
    1a74:	00001ad0 	cmplti	zero,zero,107
    1a78:	0000281c 	xori	zero,zero,160
    1a7c:	00002134 	movhi	zero,132
    1a80:	00002794 	movui	zero,158
    1a84:	00002794 	movui	zero,158
    1a88:	00002794 	movui	zero,158
    1a8c:	00002780 	call	278 <ADC_Read+0x8c>
    1a90:	00002134 	movhi	zero,132
    1a94:	00001ad0 	cmplti	zero,zero,107
    1a98:	00001ad0 	cmplti	zero,zero,107
    1a9c:	00002708 	cmpgei	zero,zero,156
    1aa0:	00001ad0 	cmplti	zero,zero,107
    1aa4:	000026d8 	cmpnei	zero,zero,155
    1aa8:	000021e8 	cmpgeui	zero,zero,135
    1aac:	00002738 	rdprs	zero,zero,156
    1ab0:	00002724 	muli	zero,zero,156
    1ab4:	00001ad0 	cmplti	zero,zero,107
    1ab8:	000029cc 	andi	zero,zero,167
    1abc:	00001ad0 	cmplti	zero,zero,107
    1ac0:	00002234 	movhi	zero,136
    1ac4:	00001ad0 	cmplti	zero,zero,107
    1ac8:	00001ad0 	cmplti	zero,zero,107
    1acc:	000028ac 	andhi	zero,zero,162
    1ad0:	d9014d17 	ldw	r4,1332(sp)
    1ad4:	2000ce26 	beq	r4,zero,1e10 <___vfprintf_internal_r+0x6d4>
    1ad8:	01400044 	movi	r5,1
    1adc:	d9800f04 	addi	r6,sp,60
    1ae0:	d9c14015 	stw	r7,1280(sp)
    1ae4:	d9414515 	stw	r5,1300(sp)
    1ae8:	d9814115 	stw	r6,1284(sp)
    1aec:	280f883a 	mov	r7,r5
    1af0:	d9000f05 	stb	r4,60(sp)
    1af4:	d8000405 	stb	zero,16(sp)
    1af8:	d8014615 	stw	zero,1304(sp)
    1afc:	d8c14c17 	ldw	r3,1328(sp)
    1b00:	1880008c 	andi	r2,r3,2
    1b04:	1005003a 	cmpeq	r2,r2,zero
    1b08:	d8815015 	stw	r2,1344(sp)
    1b0c:	1000031e 	bne	r2,zero,1b1c <___vfprintf_internal_r+0x3e0>
    1b10:	d9014517 	ldw	r4,1300(sp)
    1b14:	21000084 	addi	r4,r4,2
    1b18:	d9014515 	stw	r4,1300(sp)
    1b1c:	d9414c17 	ldw	r5,1328(sp)
    1b20:	2940210c 	andi	r5,r5,132
    1b24:	d9414e15 	stw	r5,1336(sp)
    1b28:	28002d1e 	bne	r5,zero,1be0 <___vfprintf_internal_r+0x4a4>
    1b2c:	d9814a17 	ldw	r6,1320(sp)
    1b30:	d8814517 	ldw	r2,1300(sp)
    1b34:	30a1c83a 	sub	r16,r6,r2
    1b38:	0400290e 	bge	zero,r16,1be0 <___vfprintf_internal_r+0x4a4>
    1b3c:	00800404 	movi	r2,16
    1b40:	14045e0e 	bge	r2,r16,2cbc <___vfprintf_internal_r+0x1580>
    1b44:	dc800e17 	ldw	r18,56(sp)
    1b48:	dc400d17 	ldw	r17,52(sp)
    1b4c:	1027883a 	mov	r19,r2
    1b50:	07000074 	movhi	fp,1
    1b54:	e7398684 	addi	fp,fp,-6630
    1b58:	050001c4 	movi	r20,7
    1b5c:	00000306 	br	1b6c <___vfprintf_internal_r+0x430>
    1b60:	843ffc04 	addi	r16,r16,-16
    1b64:	ad400204 	addi	r21,r21,8
    1b68:	9c00130e 	bge	r19,r16,1bb8 <___vfprintf_internal_r+0x47c>
    1b6c:	94800404 	addi	r18,r18,16
    1b70:	8c400044 	addi	r17,r17,1
    1b74:	af000015 	stw	fp,0(r21)
    1b78:	acc00115 	stw	r19,4(r21)
    1b7c:	dc800e15 	stw	r18,56(sp)
    1b80:	dc400d15 	stw	r17,52(sp)
    1b84:	a47ff60e 	bge	r20,r17,1b60 <___vfprintf_internal_r+0x424>
    1b88:	d9014f17 	ldw	r4,1340(sp)
    1b8c:	b00b883a 	mov	r5,r22
    1b90:	d9800c04 	addi	r6,sp,48
    1b94:	d9c15115 	stw	r7,1348(sp)
    1b98:	00016e40 	call	16e4 <__sprint_r>
    1b9c:	d9c15117 	ldw	r7,1348(sp)
    1ba0:	10009e1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    1ba4:	843ffc04 	addi	r16,r16,-16
    1ba8:	dc800e17 	ldw	r18,56(sp)
    1bac:	dc400d17 	ldw	r17,52(sp)
    1bb0:	dd401904 	addi	r21,sp,100
    1bb4:	9c3fed16 	blt	r19,r16,1b6c <___vfprintf_internal_r+0x430>
    1bb8:	9425883a 	add	r18,r18,r16
    1bbc:	8c400044 	addi	r17,r17,1
    1bc0:	008001c4 	movi	r2,7
    1bc4:	af000015 	stw	fp,0(r21)
    1bc8:	ac000115 	stw	r16,4(r21)
    1bcc:	dc800e15 	stw	r18,56(sp)
    1bd0:	dc400d15 	stw	r17,52(sp)
    1bd4:	1441f516 	blt	r2,r17,23ac <___vfprintf_internal_r+0xc70>
    1bd8:	ad400204 	addi	r21,r21,8
    1bdc:	00000206 	br	1be8 <___vfprintf_internal_r+0x4ac>
    1be0:	dc800e17 	ldw	r18,56(sp)
    1be4:	dc400d17 	ldw	r17,52(sp)
    1be8:	d8800407 	ldb	r2,16(sp)
    1bec:	10000b26 	beq	r2,zero,1c1c <___vfprintf_internal_r+0x4e0>
    1bf0:	00800044 	movi	r2,1
    1bf4:	94800044 	addi	r18,r18,1
    1bf8:	8c400044 	addi	r17,r17,1
    1bfc:	a8800115 	stw	r2,4(r21)
    1c00:	d8c00404 	addi	r3,sp,16
    1c04:	008001c4 	movi	r2,7
    1c08:	a8c00015 	stw	r3,0(r21)
    1c0c:	dc800e15 	stw	r18,56(sp)
    1c10:	dc400d15 	stw	r17,52(sp)
    1c14:	1441da16 	blt	r2,r17,2380 <___vfprintf_internal_r+0xc44>
    1c18:	ad400204 	addi	r21,r21,8
    1c1c:	d9015017 	ldw	r4,1344(sp)
    1c20:	20000b1e 	bne	r4,zero,1c50 <___vfprintf_internal_r+0x514>
    1c24:	d8800444 	addi	r2,sp,17
    1c28:	94800084 	addi	r18,r18,2
    1c2c:	8c400044 	addi	r17,r17,1
    1c30:	a8800015 	stw	r2,0(r21)
    1c34:	00c00084 	movi	r3,2
    1c38:	008001c4 	movi	r2,7
    1c3c:	a8c00115 	stw	r3,4(r21)
    1c40:	dc800e15 	stw	r18,56(sp)
    1c44:	dc400d15 	stw	r17,52(sp)
    1c48:	1441c216 	blt	r2,r17,2354 <___vfprintf_internal_r+0xc18>
    1c4c:	ad400204 	addi	r21,r21,8
    1c50:	d9414e17 	ldw	r5,1336(sp)
    1c54:	00802004 	movi	r2,128
    1c58:	2880b126 	beq	r5,r2,1f20 <___vfprintf_internal_r+0x7e4>
    1c5c:	d8c14617 	ldw	r3,1304(sp)
    1c60:	19e1c83a 	sub	r16,r3,r7
    1c64:	0400260e 	bge	zero,r16,1d00 <___vfprintf_internal_r+0x5c4>
    1c68:	00800404 	movi	r2,16
    1c6c:	1403cf0e 	bge	r2,r16,2bac <___vfprintf_internal_r+0x1470>
    1c70:	1027883a 	mov	r19,r2
    1c74:	07000074 	movhi	fp,1
    1c78:	e7398284 	addi	fp,fp,-6646
    1c7c:	050001c4 	movi	r20,7
    1c80:	00000306 	br	1c90 <___vfprintf_internal_r+0x554>
    1c84:	843ffc04 	addi	r16,r16,-16
    1c88:	ad400204 	addi	r21,r21,8
    1c8c:	9c00130e 	bge	r19,r16,1cdc <___vfprintf_internal_r+0x5a0>
    1c90:	94800404 	addi	r18,r18,16
    1c94:	8c400044 	addi	r17,r17,1
    1c98:	af000015 	stw	fp,0(r21)
    1c9c:	acc00115 	stw	r19,4(r21)
    1ca0:	dc800e15 	stw	r18,56(sp)
    1ca4:	dc400d15 	stw	r17,52(sp)
    1ca8:	a47ff60e 	bge	r20,r17,1c84 <___vfprintf_internal_r+0x548>
    1cac:	d9014f17 	ldw	r4,1340(sp)
    1cb0:	b00b883a 	mov	r5,r22
    1cb4:	d9800c04 	addi	r6,sp,48
    1cb8:	d9c15115 	stw	r7,1348(sp)
    1cbc:	00016e40 	call	16e4 <__sprint_r>
    1cc0:	d9c15117 	ldw	r7,1348(sp)
    1cc4:	1000551e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    1cc8:	843ffc04 	addi	r16,r16,-16
    1ccc:	dc800e17 	ldw	r18,56(sp)
    1cd0:	dc400d17 	ldw	r17,52(sp)
    1cd4:	dd401904 	addi	r21,sp,100
    1cd8:	9c3fed16 	blt	r19,r16,1c90 <___vfprintf_internal_r+0x554>
    1cdc:	9425883a 	add	r18,r18,r16
    1ce0:	8c400044 	addi	r17,r17,1
    1ce4:	008001c4 	movi	r2,7
    1ce8:	af000015 	stw	fp,0(r21)
    1cec:	ac000115 	stw	r16,4(r21)
    1cf0:	dc800e15 	stw	r18,56(sp)
    1cf4:	dc400d15 	stw	r17,52(sp)
    1cf8:	14418216 	blt	r2,r17,2304 <___vfprintf_internal_r+0xbc8>
    1cfc:	ad400204 	addi	r21,r21,8
    1d00:	d9014c17 	ldw	r4,1328(sp)
    1d04:	2080400c 	andi	r2,r4,256
    1d08:	10004a1e 	bne	r2,zero,1e34 <___vfprintf_internal_r+0x6f8>
    1d0c:	d9414117 	ldw	r5,1284(sp)
    1d10:	91e5883a 	add	r18,r18,r7
    1d14:	8c400044 	addi	r17,r17,1
    1d18:	008001c4 	movi	r2,7
    1d1c:	a9400015 	stw	r5,0(r21)
    1d20:	a9c00115 	stw	r7,4(r21)
    1d24:	dc800e15 	stw	r18,56(sp)
    1d28:	dc400d15 	stw	r17,52(sp)
    1d2c:	14416716 	blt	r2,r17,22cc <___vfprintf_internal_r+0xb90>
    1d30:	a8c00204 	addi	r3,r21,8
    1d34:	d9814c17 	ldw	r6,1328(sp)
    1d38:	3080010c 	andi	r2,r6,4
    1d3c:	10002826 	beq	r2,zero,1de0 <___vfprintf_internal_r+0x6a4>
    1d40:	d8814a17 	ldw	r2,1320(sp)
    1d44:	d9014517 	ldw	r4,1300(sp)
    1d48:	1121c83a 	sub	r16,r2,r4
    1d4c:	0400240e 	bge	zero,r16,1de0 <___vfprintf_internal_r+0x6a4>
    1d50:	00800404 	movi	r2,16
    1d54:	1404550e 	bge	r2,r16,2eac <___vfprintf_internal_r+0x1770>
    1d58:	dc400d17 	ldw	r17,52(sp)
    1d5c:	1027883a 	mov	r19,r2
    1d60:	07000074 	movhi	fp,1
    1d64:	e7398684 	addi	fp,fp,-6630
    1d68:	050001c4 	movi	r20,7
    1d6c:	00000306 	br	1d7c <___vfprintf_internal_r+0x640>
    1d70:	843ffc04 	addi	r16,r16,-16
    1d74:	18c00204 	addi	r3,r3,8
    1d78:	9c00110e 	bge	r19,r16,1dc0 <___vfprintf_internal_r+0x684>
    1d7c:	94800404 	addi	r18,r18,16
    1d80:	8c400044 	addi	r17,r17,1
    1d84:	1f000015 	stw	fp,0(r3)
    1d88:	1cc00115 	stw	r19,4(r3)
    1d8c:	dc800e15 	stw	r18,56(sp)
    1d90:	dc400d15 	stw	r17,52(sp)
    1d94:	a47ff60e 	bge	r20,r17,1d70 <___vfprintf_internal_r+0x634>
    1d98:	d9014f17 	ldw	r4,1340(sp)
    1d9c:	b00b883a 	mov	r5,r22
    1da0:	d9800c04 	addi	r6,sp,48
    1da4:	00016e40 	call	16e4 <__sprint_r>
    1da8:	10001c1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    1dac:	843ffc04 	addi	r16,r16,-16
    1db0:	dc800e17 	ldw	r18,56(sp)
    1db4:	dc400d17 	ldw	r17,52(sp)
    1db8:	d8c01904 	addi	r3,sp,100
    1dbc:	9c3fef16 	blt	r19,r16,1d7c <___vfprintf_internal_r+0x640>
    1dc0:	9425883a 	add	r18,r18,r16
    1dc4:	8c400044 	addi	r17,r17,1
    1dc8:	008001c4 	movi	r2,7
    1dcc:	1f000015 	stw	fp,0(r3)
    1dd0:	1c000115 	stw	r16,4(r3)
    1dd4:	dc800e15 	stw	r18,56(sp)
    1dd8:	dc400d15 	stw	r17,52(sp)
    1ddc:	1440cb16 	blt	r2,r17,210c <___vfprintf_internal_r+0x9d0>
    1de0:	d8814a17 	ldw	r2,1320(sp)
    1de4:	d9414517 	ldw	r5,1300(sp)
    1de8:	1140010e 	bge	r2,r5,1df0 <___vfprintf_internal_r+0x6b4>
    1dec:	2805883a 	mov	r2,r5
    1df0:	d9814b17 	ldw	r6,1324(sp)
    1df4:	308d883a 	add	r6,r6,r2
    1df8:	d9814b15 	stw	r6,1324(sp)
    1dfc:	90013b1e 	bne	r18,zero,22ec <___vfprintf_internal_r+0xbb0>
    1e00:	d9c14017 	ldw	r7,1280(sp)
    1e04:	dd401904 	addi	r21,sp,100
    1e08:	d8000d15 	stw	zero,52(sp)
    1e0c:	003ea706 	br	18ac <___vfprintf_internal_r+0x170>
    1e10:	d8800e17 	ldw	r2,56(sp)
    1e14:	1005451e 	bne	r2,zero,332c <___vfprintf_internal_r+0x1bf0>
    1e18:	d8000d15 	stw	zero,52(sp)
    1e1c:	b080030b 	ldhu	r2,12(r22)
    1e20:	1080100c 	andi	r2,r2,64
    1e24:	103e8726 	beq	r2,zero,1844 <___vfprintf_internal_r+0x108>
    1e28:	00bfffc4 	movi	r2,-1
    1e2c:	d8814b15 	stw	r2,1324(sp)
    1e30:	003e8406 	br	1844 <___vfprintf_internal_r+0x108>
    1e34:	d9814d17 	ldw	r6,1332(sp)
    1e38:	00801944 	movi	r2,101
    1e3c:	11806e16 	blt	r2,r6,1ff8 <___vfprintf_internal_r+0x8bc>
    1e40:	d9414717 	ldw	r5,1308(sp)
    1e44:	00c00044 	movi	r3,1
    1e48:	1943490e 	bge	r3,r5,2b70 <___vfprintf_internal_r+0x1434>
    1e4c:	d8814117 	ldw	r2,1284(sp)
    1e50:	94800044 	addi	r18,r18,1
    1e54:	8c400044 	addi	r17,r17,1
    1e58:	a8800015 	stw	r2,0(r21)
    1e5c:	008001c4 	movi	r2,7
    1e60:	a8c00115 	stw	r3,4(r21)
    1e64:	dc800e15 	stw	r18,56(sp)
    1e68:	dc400d15 	stw	r17,52(sp)
    1e6c:	1441ca16 	blt	r2,r17,2598 <___vfprintf_internal_r+0xe5c>
    1e70:	a8c00204 	addi	r3,r21,8
    1e74:	d9014917 	ldw	r4,1316(sp)
    1e78:	00800044 	movi	r2,1
    1e7c:	94800044 	addi	r18,r18,1
    1e80:	8c400044 	addi	r17,r17,1
    1e84:	18800115 	stw	r2,4(r3)
    1e88:	008001c4 	movi	r2,7
    1e8c:	19000015 	stw	r4,0(r3)
    1e90:	dc800e15 	stw	r18,56(sp)
    1e94:	dc400d15 	stw	r17,52(sp)
    1e98:	1441b616 	blt	r2,r17,2574 <___vfprintf_internal_r+0xe38>
    1e9c:	1cc00204 	addi	r19,r3,8
    1ea0:	d9014217 	ldw	r4,1288(sp)
    1ea4:	d9414317 	ldw	r5,1292(sp)
    1ea8:	000d883a 	mov	r6,zero
    1eac:	000f883a 	mov	r7,zero
    1eb0:	00097440 	call	9744 <__nedf2>
    1eb4:	10017426 	beq	r2,zero,2488 <___vfprintf_internal_r+0xd4c>
    1eb8:	d9414717 	ldw	r5,1308(sp)
    1ebc:	d9814117 	ldw	r6,1284(sp)
    1ec0:	8c400044 	addi	r17,r17,1
    1ec4:	2c85883a 	add	r2,r5,r18
    1ec8:	14bfffc4 	addi	r18,r2,-1
    1ecc:	28bfffc4 	addi	r2,r5,-1
    1ed0:	30c00044 	addi	r3,r6,1
    1ed4:	98800115 	stw	r2,4(r19)
    1ed8:	008001c4 	movi	r2,7
    1edc:	98c00015 	stw	r3,0(r19)
    1ee0:	dc800e15 	stw	r18,56(sp)
    1ee4:	dc400d15 	stw	r17,52(sp)
    1ee8:	14418e16 	blt	r2,r17,2524 <___vfprintf_internal_r+0xde8>
    1eec:	9cc00204 	addi	r19,r19,8
    1ef0:	d9414817 	ldw	r5,1312(sp)
    1ef4:	d8800804 	addi	r2,sp,32
    1ef8:	8c400044 	addi	r17,r17,1
    1efc:	9165883a 	add	r18,r18,r5
    1f00:	98800015 	stw	r2,0(r19)
    1f04:	008001c4 	movi	r2,7
    1f08:	99400115 	stw	r5,4(r19)
    1f0c:	dc800e15 	stw	r18,56(sp)
    1f10:	dc400d15 	stw	r17,52(sp)
    1f14:	1440ed16 	blt	r2,r17,22cc <___vfprintf_internal_r+0xb90>
    1f18:	98c00204 	addi	r3,r19,8
    1f1c:	003f8506 	br	1d34 <___vfprintf_internal_r+0x5f8>
    1f20:	d9814a17 	ldw	r6,1320(sp)
    1f24:	d8814517 	ldw	r2,1300(sp)
    1f28:	30a1c83a 	sub	r16,r6,r2
    1f2c:	043f4b0e 	bge	zero,r16,1c5c <___vfprintf_internal_r+0x520>
    1f30:	00800404 	movi	r2,16
    1f34:	14043a0e 	bge	r2,r16,3020 <___vfprintf_internal_r+0x18e4>
    1f38:	1027883a 	mov	r19,r2
    1f3c:	07000074 	movhi	fp,1
    1f40:	e7398284 	addi	fp,fp,-6646
    1f44:	050001c4 	movi	r20,7
    1f48:	00000306 	br	1f58 <___vfprintf_internal_r+0x81c>
    1f4c:	843ffc04 	addi	r16,r16,-16
    1f50:	ad400204 	addi	r21,r21,8
    1f54:	9c00130e 	bge	r19,r16,1fa4 <___vfprintf_internal_r+0x868>
    1f58:	94800404 	addi	r18,r18,16
    1f5c:	8c400044 	addi	r17,r17,1
    1f60:	af000015 	stw	fp,0(r21)
    1f64:	acc00115 	stw	r19,4(r21)
    1f68:	dc800e15 	stw	r18,56(sp)
    1f6c:	dc400d15 	stw	r17,52(sp)
    1f70:	a47ff60e 	bge	r20,r17,1f4c <___vfprintf_internal_r+0x810>
    1f74:	d9014f17 	ldw	r4,1340(sp)
    1f78:	b00b883a 	mov	r5,r22
    1f7c:	d9800c04 	addi	r6,sp,48
    1f80:	d9c15115 	stw	r7,1348(sp)
    1f84:	00016e40 	call	16e4 <__sprint_r>
    1f88:	d9c15117 	ldw	r7,1348(sp)
    1f8c:	103fa31e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    1f90:	843ffc04 	addi	r16,r16,-16
    1f94:	dc800e17 	ldw	r18,56(sp)
    1f98:	dc400d17 	ldw	r17,52(sp)
    1f9c:	dd401904 	addi	r21,sp,100
    1fa0:	9c3fed16 	blt	r19,r16,1f58 <___vfprintf_internal_r+0x81c>
    1fa4:	9425883a 	add	r18,r18,r16
    1fa8:	8c400044 	addi	r17,r17,1
    1fac:	008001c4 	movi	r2,7
    1fb0:	af000015 	stw	fp,0(r21)
    1fb4:	ac000115 	stw	r16,4(r21)
    1fb8:	dc800e15 	stw	r18,56(sp)
    1fbc:	dc400d15 	stw	r17,52(sp)
    1fc0:	14416116 	blt	r2,r17,2548 <___vfprintf_internal_r+0xe0c>
    1fc4:	ad400204 	addi	r21,r21,8
    1fc8:	003f2406 	br	1c5c <___vfprintf_internal_r+0x520>
    1fcc:	d9014f17 	ldw	r4,1340(sp)
    1fd0:	00051f00 	call	51f0 <__sinit>
    1fd4:	d9c15117 	ldw	r7,1348(sp)
    1fd8:	003def06 	br	1798 <___vfprintf_internal_r+0x5c>
    1fdc:	d9014f17 	ldw	r4,1340(sp)
    1fe0:	b00b883a 	mov	r5,r22
    1fe4:	d9c15115 	stw	r7,1348(sp)
    1fe8:	00036240 	call	3624 <__swsetup_r>
    1fec:	d9c15117 	ldw	r7,1348(sp)
    1ff0:	103dee26 	beq	r2,zero,17ac <___vfprintf_internal_r+0x70>
    1ff4:	003f8c06 	br	1e28 <___vfprintf_internal_r+0x6ec>
    1ff8:	d9014217 	ldw	r4,1288(sp)
    1ffc:	d9414317 	ldw	r5,1292(sp)
    2000:	000d883a 	mov	r6,zero
    2004:	000f883a 	mov	r7,zero
    2008:	00096bc0 	call	96bc <__eqdf2>
    200c:	1000f21e 	bne	r2,zero,23d8 <___vfprintf_internal_r+0xc9c>
    2010:	00800074 	movhi	r2,1
    2014:	10b98204 	addi	r2,r2,-6648
    2018:	94800044 	addi	r18,r18,1
    201c:	8c400044 	addi	r17,r17,1
    2020:	a8800015 	stw	r2,0(r21)
    2024:	00c00044 	movi	r3,1
    2028:	008001c4 	movi	r2,7
    202c:	a8c00115 	stw	r3,4(r21)
    2030:	dc800e15 	stw	r18,56(sp)
    2034:	dc400d15 	stw	r17,52(sp)
    2038:	14430016 	blt	r2,r17,2c3c <___vfprintf_internal_r+0x1500>
    203c:	a8c00204 	addi	r3,r21,8
    2040:	d8800517 	ldw	r2,20(sp)
    2044:	d9014717 	ldw	r4,1308(sp)
    2048:	11015c0e 	bge	r2,r4,25bc <___vfprintf_internal_r+0xe80>
    204c:	dc400d17 	ldw	r17,52(sp)
    2050:	d9814917 	ldw	r6,1316(sp)
    2054:	00800044 	movi	r2,1
    2058:	94800044 	addi	r18,r18,1
    205c:	8c400044 	addi	r17,r17,1
    2060:	18800115 	stw	r2,4(r3)
    2064:	008001c4 	movi	r2,7
    2068:	19800015 	stw	r6,0(r3)
    206c:	dc800e15 	stw	r18,56(sp)
    2070:	dc400d15 	stw	r17,52(sp)
    2074:	14431616 	blt	r2,r17,2cd0 <___vfprintf_internal_r+0x1594>
    2078:	18c00204 	addi	r3,r3,8
    207c:	d8814717 	ldw	r2,1308(sp)
    2080:	143fffc4 	addi	r16,r2,-1
    2084:	043f2b0e 	bge	zero,r16,1d34 <___vfprintf_internal_r+0x5f8>
    2088:	00800404 	movi	r2,16
    208c:	1402a80e 	bge	r2,r16,2b30 <___vfprintf_internal_r+0x13f4>
    2090:	dc400d17 	ldw	r17,52(sp)
    2094:	1027883a 	mov	r19,r2
    2098:	07000074 	movhi	fp,1
    209c:	e7398284 	addi	fp,fp,-6646
    20a0:	050001c4 	movi	r20,7
    20a4:	00000306 	br	20b4 <___vfprintf_internal_r+0x978>
    20a8:	18c00204 	addi	r3,r3,8
    20ac:	843ffc04 	addi	r16,r16,-16
    20b0:	9c02a20e 	bge	r19,r16,2b3c <___vfprintf_internal_r+0x1400>
    20b4:	94800404 	addi	r18,r18,16
    20b8:	8c400044 	addi	r17,r17,1
    20bc:	1f000015 	stw	fp,0(r3)
    20c0:	1cc00115 	stw	r19,4(r3)
    20c4:	dc800e15 	stw	r18,56(sp)
    20c8:	dc400d15 	stw	r17,52(sp)
    20cc:	a47ff60e 	bge	r20,r17,20a8 <___vfprintf_internal_r+0x96c>
    20d0:	d9014f17 	ldw	r4,1340(sp)
    20d4:	b00b883a 	mov	r5,r22
    20d8:	d9800c04 	addi	r6,sp,48
    20dc:	00016e40 	call	16e4 <__sprint_r>
    20e0:	103f4e1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    20e4:	dc800e17 	ldw	r18,56(sp)
    20e8:	dc400d17 	ldw	r17,52(sp)
    20ec:	d8c01904 	addi	r3,sp,100
    20f0:	003fee06 	br	20ac <___vfprintf_internal_r+0x970>
    20f4:	d8802c0b 	ldhu	r2,176(sp)
    20f8:	00ffffc4 	movi	r3,-1
    20fc:	d8c14b15 	stw	r3,1324(sp)
    2100:	1080100c 	andi	r2,r2,64
    2104:	103dcc1e 	bne	r2,zero,1838 <___vfprintf_internal_r+0xfc>
    2108:	003dce06 	br	1844 <___vfprintf_internal_r+0x108>
    210c:	d9014f17 	ldw	r4,1340(sp)
    2110:	b00b883a 	mov	r5,r22
    2114:	d9800c04 	addi	r6,sp,48
    2118:	00016e40 	call	16e4 <__sprint_r>
    211c:	103f3f1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2120:	dc800e17 	ldw	r18,56(sp)
    2124:	003f2e06 	br	1de0 <___vfprintf_internal_r+0x6a4>
    2128:	d9414c17 	ldw	r5,1328(sp)
    212c:	29400414 	ori	r5,r5,16
    2130:	d9414c15 	stw	r5,1328(sp)
    2134:	d9814c17 	ldw	r6,1328(sp)
    2138:	3080080c 	andi	r2,r6,32
    213c:	10014f1e 	bne	r2,zero,267c <___vfprintf_internal_r+0xf40>
    2140:	d8c14c17 	ldw	r3,1328(sp)
    2144:	1880040c 	andi	r2,r3,16
    2148:	1002f01e 	bne	r2,zero,2d0c <___vfprintf_internal_r+0x15d0>
    214c:	d9014c17 	ldw	r4,1328(sp)
    2150:	2080100c 	andi	r2,r4,64
    2154:	1002ed26 	beq	r2,zero,2d0c <___vfprintf_internal_r+0x15d0>
    2158:	3880000f 	ldh	r2,0(r7)
    215c:	39c00104 	addi	r7,r7,4
    2160:	d9c14015 	stw	r7,1280(sp)
    2164:	1023d7fa 	srai	r17,r2,31
    2168:	1021883a 	mov	r16,r2
    216c:	88037816 	blt	r17,zero,2f50 <___vfprintf_internal_r+0x1814>
    2170:	01000044 	movi	r4,1
    2174:	98000416 	blt	r19,zero,2188 <___vfprintf_internal_r+0xa4c>
    2178:	d8c14c17 	ldw	r3,1328(sp)
    217c:	00bfdfc4 	movi	r2,-129
    2180:	1886703a 	and	r3,r3,r2
    2184:	d8c14c15 	stw	r3,1328(sp)
    2188:	8444b03a 	or	r2,r16,r17
    218c:	10022c1e 	bne	r2,zero,2a40 <___vfprintf_internal_r+0x1304>
    2190:	98022b1e 	bne	r19,zero,2a40 <___vfprintf_internal_r+0x1304>
    2194:	20803fcc 	andi	r2,r4,255
    2198:	1002a126 	beq	r2,zero,2c20 <___vfprintf_internal_r+0x14e4>
    219c:	d8c01904 	addi	r3,sp,100
    21a0:	dd000f04 	addi	r20,sp,60
    21a4:	d8c14115 	stw	r3,1284(sp)
    21a8:	d8c14117 	ldw	r3,1284(sp)
    21ac:	dcc14515 	stw	r19,1300(sp)
    21b0:	a0c5c83a 	sub	r2,r20,r3
    21b4:	11c00a04 	addi	r7,r2,40
    21b8:	99c0010e 	bge	r19,r7,21c0 <___vfprintf_internal_r+0xa84>
    21bc:	d9c14515 	stw	r7,1300(sp)
    21c0:	dcc14615 	stw	r19,1304(sp)
    21c4:	d8800407 	ldb	r2,16(sp)
    21c8:	103e4c26 	beq	r2,zero,1afc <___vfprintf_internal_r+0x3c0>
    21cc:	d8814517 	ldw	r2,1300(sp)
    21d0:	10800044 	addi	r2,r2,1
    21d4:	d8814515 	stw	r2,1300(sp)
    21d8:	003e4806 	br	1afc <___vfprintf_internal_r+0x3c0>
    21dc:	d9814c17 	ldw	r6,1328(sp)
    21e0:	31800414 	ori	r6,r6,16
    21e4:	d9814c15 	stw	r6,1328(sp)
    21e8:	d8c14c17 	ldw	r3,1328(sp)
    21ec:	1880080c 	andi	r2,r3,32
    21f0:	1001271e 	bne	r2,zero,2690 <___vfprintf_internal_r+0xf54>
    21f4:	d9414c17 	ldw	r5,1328(sp)
    21f8:	2880040c 	andi	r2,r5,16
    21fc:	1002bc1e 	bne	r2,zero,2cf0 <___vfprintf_internal_r+0x15b4>
    2200:	d9814c17 	ldw	r6,1328(sp)
    2204:	3080100c 	andi	r2,r6,64
    2208:	1002b926 	beq	r2,zero,2cf0 <___vfprintf_internal_r+0x15b4>
    220c:	3c00000b 	ldhu	r16,0(r7)
    2210:	0009883a 	mov	r4,zero
    2214:	39c00104 	addi	r7,r7,4
    2218:	0023883a 	mov	r17,zero
    221c:	d9c14015 	stw	r7,1280(sp)
    2220:	d8000405 	stb	zero,16(sp)
    2224:	003fd306 	br	2174 <___vfprintf_internal_r+0xa38>
    2228:	d9014c17 	ldw	r4,1328(sp)
    222c:	21000414 	ori	r4,r4,16
    2230:	d9014c15 	stw	r4,1328(sp)
    2234:	d9414c17 	ldw	r5,1328(sp)
    2238:	2880080c 	andi	r2,r5,32
    223c:	1001081e 	bne	r2,zero,2660 <___vfprintf_internal_r+0xf24>
    2240:	d8c14c17 	ldw	r3,1328(sp)
    2244:	1880040c 	andi	r2,r3,16
    2248:	1002b61e 	bne	r2,zero,2d24 <___vfprintf_internal_r+0x15e8>
    224c:	d9014c17 	ldw	r4,1328(sp)
    2250:	2080100c 	andi	r2,r4,64
    2254:	1002b326 	beq	r2,zero,2d24 <___vfprintf_internal_r+0x15e8>
    2258:	3c00000b 	ldhu	r16,0(r7)
    225c:	01000044 	movi	r4,1
    2260:	39c00104 	addi	r7,r7,4
    2264:	0023883a 	mov	r17,zero
    2268:	d9c14015 	stw	r7,1280(sp)
    226c:	d8000405 	stb	zero,16(sp)
    2270:	003fc006 	br	2174 <___vfprintf_internal_r+0xa38>
    2274:	d9014f17 	ldw	r4,1340(sp)
    2278:	b00b883a 	mov	r5,r22
    227c:	d9800c04 	addi	r6,sp,48
    2280:	00016e40 	call	16e4 <__sprint_r>
    2284:	103ee51e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2288:	dc800e17 	ldw	r18,56(sp)
    228c:	d8c01904 	addi	r3,sp,100
    2290:	d9814c17 	ldw	r6,1328(sp)
    2294:	3080004c 	andi	r2,r6,1
    2298:	1005003a 	cmpeq	r2,r2,zero
    229c:	103ea51e 	bne	r2,zero,1d34 <___vfprintf_internal_r+0x5f8>
    22a0:	00800044 	movi	r2,1
    22a4:	dc400d17 	ldw	r17,52(sp)
    22a8:	18800115 	stw	r2,4(r3)
    22ac:	d8814917 	ldw	r2,1316(sp)
    22b0:	94800044 	addi	r18,r18,1
    22b4:	8c400044 	addi	r17,r17,1
    22b8:	18800015 	stw	r2,0(r3)
    22bc:	008001c4 	movi	r2,7
    22c0:	dc800e15 	stw	r18,56(sp)
    22c4:	dc400d15 	stw	r17,52(sp)
    22c8:	1442240e 	bge	r2,r17,2b5c <___vfprintf_internal_r+0x1420>
    22cc:	d9014f17 	ldw	r4,1340(sp)
    22d0:	b00b883a 	mov	r5,r22
    22d4:	d9800c04 	addi	r6,sp,48
    22d8:	00016e40 	call	16e4 <__sprint_r>
    22dc:	103ecf1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    22e0:	dc800e17 	ldw	r18,56(sp)
    22e4:	d8c01904 	addi	r3,sp,100
    22e8:	003e9206 	br	1d34 <___vfprintf_internal_r+0x5f8>
    22ec:	d9014f17 	ldw	r4,1340(sp)
    22f0:	b00b883a 	mov	r5,r22
    22f4:	d9800c04 	addi	r6,sp,48
    22f8:	00016e40 	call	16e4 <__sprint_r>
    22fc:	103ec026 	beq	r2,zero,1e00 <___vfprintf_internal_r+0x6c4>
    2300:	003ec606 	br	1e1c <___vfprintf_internal_r+0x6e0>
    2304:	d9014f17 	ldw	r4,1340(sp)
    2308:	b00b883a 	mov	r5,r22
    230c:	d9800c04 	addi	r6,sp,48
    2310:	d9c15115 	stw	r7,1348(sp)
    2314:	00016e40 	call	16e4 <__sprint_r>
    2318:	d9c15117 	ldw	r7,1348(sp)
    231c:	103ebf1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2320:	dc800e17 	ldw	r18,56(sp)
    2324:	dc400d17 	ldw	r17,52(sp)
    2328:	dd401904 	addi	r21,sp,100
    232c:	003e7406 	br	1d00 <___vfprintf_internal_r+0x5c4>
    2330:	d9014f17 	ldw	r4,1340(sp)
    2334:	b00b883a 	mov	r5,r22
    2338:	d9800c04 	addi	r6,sp,48
    233c:	d9c15115 	stw	r7,1348(sp)
    2340:	00016e40 	call	16e4 <__sprint_r>
    2344:	d9c15117 	ldw	r7,1348(sp)
    2348:	103eb41e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    234c:	dd401904 	addi	r21,sp,100
    2350:	003d6d06 	br	1908 <___vfprintf_internal_r+0x1cc>
    2354:	d9014f17 	ldw	r4,1340(sp)
    2358:	b00b883a 	mov	r5,r22
    235c:	d9800c04 	addi	r6,sp,48
    2360:	d9c15115 	stw	r7,1348(sp)
    2364:	00016e40 	call	16e4 <__sprint_r>
    2368:	d9c15117 	ldw	r7,1348(sp)
    236c:	103eab1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2370:	dc800e17 	ldw	r18,56(sp)
    2374:	dc400d17 	ldw	r17,52(sp)
    2378:	dd401904 	addi	r21,sp,100
    237c:	003e3406 	br	1c50 <___vfprintf_internal_r+0x514>
    2380:	d9014f17 	ldw	r4,1340(sp)
    2384:	b00b883a 	mov	r5,r22
    2388:	d9800c04 	addi	r6,sp,48
    238c:	d9c15115 	stw	r7,1348(sp)
    2390:	00016e40 	call	16e4 <__sprint_r>
    2394:	d9c15117 	ldw	r7,1348(sp)
    2398:	103ea01e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    239c:	dc800e17 	ldw	r18,56(sp)
    23a0:	dc400d17 	ldw	r17,52(sp)
    23a4:	dd401904 	addi	r21,sp,100
    23a8:	003e1c06 	br	1c1c <___vfprintf_internal_r+0x4e0>
    23ac:	d9014f17 	ldw	r4,1340(sp)
    23b0:	b00b883a 	mov	r5,r22
    23b4:	d9800c04 	addi	r6,sp,48
    23b8:	d9c15115 	stw	r7,1348(sp)
    23bc:	00016e40 	call	16e4 <__sprint_r>
    23c0:	d9c15117 	ldw	r7,1348(sp)
    23c4:	103e951e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    23c8:	dc800e17 	ldw	r18,56(sp)
    23cc:	dc400d17 	ldw	r17,52(sp)
    23d0:	dd401904 	addi	r21,sp,100
    23d4:	003e0406 	br	1be8 <___vfprintf_internal_r+0x4ac>
    23d8:	d9000517 	ldw	r4,20(sp)
    23dc:	0102580e 	bge	zero,r4,2d40 <___vfprintf_internal_r+0x1604>
    23e0:	d9814717 	ldw	r6,1308(sp)
    23e4:	21807a16 	blt	r4,r6,25d0 <___vfprintf_internal_r+0xe94>
    23e8:	d8814117 	ldw	r2,1284(sp)
    23ec:	91a5883a 	add	r18,r18,r6
    23f0:	8c400044 	addi	r17,r17,1
    23f4:	a8800015 	stw	r2,0(r21)
    23f8:	008001c4 	movi	r2,7
    23fc:	a9800115 	stw	r6,4(r21)
    2400:	dc800e15 	stw	r18,56(sp)
    2404:	dc400d15 	stw	r17,52(sp)
    2408:	1442fc16 	blt	r2,r17,2ffc <___vfprintf_internal_r+0x18c0>
    240c:	a8c00204 	addi	r3,r21,8
    2410:	d9414717 	ldw	r5,1308(sp)
    2414:	2161c83a 	sub	r16,r4,r5
    2418:	043f9d0e 	bge	zero,r16,2290 <___vfprintf_internal_r+0xb54>
    241c:	00800404 	movi	r2,16
    2420:	1402190e 	bge	r2,r16,2c88 <___vfprintf_internal_r+0x154c>
    2424:	dc400d17 	ldw	r17,52(sp)
    2428:	1027883a 	mov	r19,r2
    242c:	07000074 	movhi	fp,1
    2430:	e7398284 	addi	fp,fp,-6646
    2434:	050001c4 	movi	r20,7
    2438:	00000306 	br	2448 <___vfprintf_internal_r+0xd0c>
    243c:	18c00204 	addi	r3,r3,8
    2440:	843ffc04 	addi	r16,r16,-16
    2444:	9c02130e 	bge	r19,r16,2c94 <___vfprintf_internal_r+0x1558>
    2448:	94800404 	addi	r18,r18,16
    244c:	8c400044 	addi	r17,r17,1
    2450:	1f000015 	stw	fp,0(r3)
    2454:	1cc00115 	stw	r19,4(r3)
    2458:	dc800e15 	stw	r18,56(sp)
    245c:	dc400d15 	stw	r17,52(sp)
    2460:	a47ff60e 	bge	r20,r17,243c <___vfprintf_internal_r+0xd00>
    2464:	d9014f17 	ldw	r4,1340(sp)
    2468:	b00b883a 	mov	r5,r22
    246c:	d9800c04 	addi	r6,sp,48
    2470:	00016e40 	call	16e4 <__sprint_r>
    2474:	103e691e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2478:	dc800e17 	ldw	r18,56(sp)
    247c:	dc400d17 	ldw	r17,52(sp)
    2480:	d8c01904 	addi	r3,sp,100
    2484:	003fee06 	br	2440 <___vfprintf_internal_r+0xd04>
    2488:	d8814717 	ldw	r2,1308(sp)
    248c:	143fffc4 	addi	r16,r2,-1
    2490:	043e970e 	bge	zero,r16,1ef0 <___vfprintf_internal_r+0x7b4>
    2494:	00800404 	movi	r2,16
    2498:	1400180e 	bge	r2,r16,24fc <___vfprintf_internal_r+0xdc0>
    249c:	1029883a 	mov	r20,r2
    24a0:	07000074 	movhi	fp,1
    24a4:	e7398284 	addi	fp,fp,-6646
    24a8:	054001c4 	movi	r21,7
    24ac:	00000306 	br	24bc <___vfprintf_internal_r+0xd80>
    24b0:	9cc00204 	addi	r19,r19,8
    24b4:	843ffc04 	addi	r16,r16,-16
    24b8:	a400120e 	bge	r20,r16,2504 <___vfprintf_internal_r+0xdc8>
    24bc:	94800404 	addi	r18,r18,16
    24c0:	8c400044 	addi	r17,r17,1
    24c4:	9f000015 	stw	fp,0(r19)
    24c8:	9d000115 	stw	r20,4(r19)
    24cc:	dc800e15 	stw	r18,56(sp)
    24d0:	dc400d15 	stw	r17,52(sp)
    24d4:	ac7ff60e 	bge	r21,r17,24b0 <___vfprintf_internal_r+0xd74>
    24d8:	d9014f17 	ldw	r4,1340(sp)
    24dc:	b00b883a 	mov	r5,r22
    24e0:	d9800c04 	addi	r6,sp,48
    24e4:	00016e40 	call	16e4 <__sprint_r>
    24e8:	103e4c1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    24ec:	dc800e17 	ldw	r18,56(sp)
    24f0:	dc400d17 	ldw	r17,52(sp)
    24f4:	dcc01904 	addi	r19,sp,100
    24f8:	003fee06 	br	24b4 <___vfprintf_internal_r+0xd78>
    24fc:	07000074 	movhi	fp,1
    2500:	e7398284 	addi	fp,fp,-6646
    2504:	9425883a 	add	r18,r18,r16
    2508:	8c400044 	addi	r17,r17,1
    250c:	008001c4 	movi	r2,7
    2510:	9f000015 	stw	fp,0(r19)
    2514:	9c000115 	stw	r16,4(r19)
    2518:	dc800e15 	stw	r18,56(sp)
    251c:	dc400d15 	stw	r17,52(sp)
    2520:	147e720e 	bge	r2,r17,1eec <___vfprintf_internal_r+0x7b0>
    2524:	d9014f17 	ldw	r4,1340(sp)
    2528:	b00b883a 	mov	r5,r22
    252c:	d9800c04 	addi	r6,sp,48
    2530:	00016e40 	call	16e4 <__sprint_r>
    2534:	103e391e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2538:	dc800e17 	ldw	r18,56(sp)
    253c:	dc400d17 	ldw	r17,52(sp)
    2540:	dcc01904 	addi	r19,sp,100
    2544:	003e6a06 	br	1ef0 <___vfprintf_internal_r+0x7b4>
    2548:	d9014f17 	ldw	r4,1340(sp)
    254c:	b00b883a 	mov	r5,r22
    2550:	d9800c04 	addi	r6,sp,48
    2554:	d9c15115 	stw	r7,1348(sp)
    2558:	00016e40 	call	16e4 <__sprint_r>
    255c:	d9c15117 	ldw	r7,1348(sp)
    2560:	103e2e1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2564:	dc800e17 	ldw	r18,56(sp)
    2568:	dc400d17 	ldw	r17,52(sp)
    256c:	dd401904 	addi	r21,sp,100
    2570:	003dba06 	br	1c5c <___vfprintf_internal_r+0x520>
    2574:	d9014f17 	ldw	r4,1340(sp)
    2578:	b00b883a 	mov	r5,r22
    257c:	d9800c04 	addi	r6,sp,48
    2580:	00016e40 	call	16e4 <__sprint_r>
    2584:	103e251e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2588:	dc800e17 	ldw	r18,56(sp)
    258c:	dc400d17 	ldw	r17,52(sp)
    2590:	dcc01904 	addi	r19,sp,100
    2594:	003e4206 	br	1ea0 <___vfprintf_internal_r+0x764>
    2598:	d9014f17 	ldw	r4,1340(sp)
    259c:	b00b883a 	mov	r5,r22
    25a0:	d9800c04 	addi	r6,sp,48
    25a4:	00016e40 	call	16e4 <__sprint_r>
    25a8:	103e1c1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    25ac:	dc800e17 	ldw	r18,56(sp)
    25b0:	dc400d17 	ldw	r17,52(sp)
    25b4:	d8c01904 	addi	r3,sp,100
    25b8:	003e2e06 	br	1e74 <___vfprintf_internal_r+0x738>
    25bc:	d9414c17 	ldw	r5,1328(sp)
    25c0:	2880004c 	andi	r2,r5,1
    25c4:	1005003a 	cmpeq	r2,r2,zero
    25c8:	103dda1e 	bne	r2,zero,1d34 <___vfprintf_internal_r+0x5f8>
    25cc:	003e9f06 	br	204c <___vfprintf_internal_r+0x910>
    25d0:	d8c14117 	ldw	r3,1284(sp)
    25d4:	9125883a 	add	r18,r18,r4
    25d8:	8c400044 	addi	r17,r17,1
    25dc:	008001c4 	movi	r2,7
    25e0:	a8c00015 	stw	r3,0(r21)
    25e4:	a9000115 	stw	r4,4(r21)
    25e8:	dc800e15 	stw	r18,56(sp)
    25ec:	dc400d15 	stw	r17,52(sp)
    25f0:	14426c16 	blt	r2,r17,2fa4 <___vfprintf_internal_r+0x1868>
    25f4:	a8c00204 	addi	r3,r21,8
    25f8:	d9414917 	ldw	r5,1316(sp)
    25fc:	00800044 	movi	r2,1
    2600:	94800044 	addi	r18,r18,1
    2604:	8c400044 	addi	r17,r17,1
    2608:	18800115 	stw	r2,4(r3)
    260c:	008001c4 	movi	r2,7
    2610:	19400015 	stw	r5,0(r3)
    2614:	dc800e15 	stw	r18,56(sp)
    2618:	dc400d15 	stw	r17,52(sp)
    261c:	2021883a 	mov	r16,r4
    2620:	14425616 	blt	r2,r17,2f7c <___vfprintf_internal_r+0x1840>
    2624:	19400204 	addi	r5,r3,8
    2628:	d9814717 	ldw	r6,1308(sp)
    262c:	8c400044 	addi	r17,r17,1
    2630:	dc400d15 	stw	r17,52(sp)
    2634:	3107c83a 	sub	r3,r6,r4
    2638:	d9014117 	ldw	r4,1284(sp)
    263c:	90e5883a 	add	r18,r18,r3
    2640:	28c00115 	stw	r3,4(r5)
    2644:	8105883a 	add	r2,r16,r4
    2648:	28800015 	stw	r2,0(r5)
    264c:	008001c4 	movi	r2,7
    2650:	dc800e15 	stw	r18,56(sp)
    2654:	147f1d16 	blt	r2,r17,22cc <___vfprintf_internal_r+0xb90>
    2658:	28c00204 	addi	r3,r5,8
    265c:	003db506 	br	1d34 <___vfprintf_internal_r+0x5f8>
    2660:	3c000017 	ldw	r16,0(r7)
    2664:	3c400117 	ldw	r17,4(r7)
    2668:	39800204 	addi	r6,r7,8
    266c:	01000044 	movi	r4,1
    2670:	d9814015 	stw	r6,1280(sp)
    2674:	d8000405 	stb	zero,16(sp)
    2678:	003ebe06 	br	2174 <___vfprintf_internal_r+0xa38>
    267c:	3c000017 	ldw	r16,0(r7)
    2680:	3c400117 	ldw	r17,4(r7)
    2684:	38800204 	addi	r2,r7,8
    2688:	d8814015 	stw	r2,1280(sp)
    268c:	003eb706 	br	216c <___vfprintf_internal_r+0xa30>
    2690:	3c000017 	ldw	r16,0(r7)
    2694:	3c400117 	ldw	r17,4(r7)
    2698:	39000204 	addi	r4,r7,8
    269c:	d9014015 	stw	r4,1280(sp)
    26a0:	0009883a 	mov	r4,zero
    26a4:	d8000405 	stb	zero,16(sp)
    26a8:	003eb206 	br	2174 <___vfprintf_internal_r+0xa38>
    26ac:	38c00017 	ldw	r3,0(r7)
    26b0:	39c00104 	addi	r7,r7,4
    26b4:	d8c14a15 	stw	r3,1320(sp)
    26b8:	1800d70e 	bge	r3,zero,2a18 <___vfprintf_internal_r+0x12dc>
    26bc:	00c7c83a 	sub	r3,zero,r3
    26c0:	d8c14a15 	stw	r3,1320(sp)
    26c4:	d9014c17 	ldw	r4,1328(sp)
    26c8:	b8c00007 	ldb	r3,0(r23)
    26cc:	21000114 	ori	r4,r4,4
    26d0:	d9014c15 	stw	r4,1328(sp)
    26d4:	003c9806 	br	1938 <___vfprintf_internal_r+0x1fc>
    26d8:	d9814c17 	ldw	r6,1328(sp)
    26dc:	3080080c 	andi	r2,r6,32
    26e0:	1001f626 	beq	r2,zero,2ebc <___vfprintf_internal_r+0x1780>
    26e4:	d9014b17 	ldw	r4,1324(sp)
    26e8:	38800017 	ldw	r2,0(r7)
    26ec:	39c00104 	addi	r7,r7,4
    26f0:	d9c14015 	stw	r7,1280(sp)
    26f4:	2007d7fa 	srai	r3,r4,31
    26f8:	d9c14017 	ldw	r7,1280(sp)
    26fc:	11000015 	stw	r4,0(r2)
    2700:	10c00115 	stw	r3,4(r2)
    2704:	003c6906 	br	18ac <___vfprintf_internal_r+0x170>
    2708:	b8c00007 	ldb	r3,0(r23)
    270c:	00801b04 	movi	r2,108
    2710:	18825526 	beq	r3,r2,3068 <___vfprintf_internal_r+0x192c>
    2714:	d9414c17 	ldw	r5,1328(sp)
    2718:	29400414 	ori	r5,r5,16
    271c:	d9414c15 	stw	r5,1328(sp)
    2720:	003c8506 	br	1938 <___vfprintf_internal_r+0x1fc>
    2724:	d9814c17 	ldw	r6,1328(sp)
    2728:	b8c00007 	ldb	r3,0(r23)
    272c:	31800814 	ori	r6,r6,32
    2730:	d9814c15 	stw	r6,1328(sp)
    2734:	003c8006 	br	1938 <___vfprintf_internal_r+0x1fc>
    2738:	d8814c17 	ldw	r2,1328(sp)
    273c:	3c000017 	ldw	r16,0(r7)
    2740:	00c01e04 	movi	r3,120
    2744:	10800094 	ori	r2,r2,2
    2748:	d8814c15 	stw	r2,1328(sp)
    274c:	39c00104 	addi	r7,r7,4
    2750:	01400074 	movhi	r5,1
    2754:	29796b04 	addi	r5,r5,-6740
    2758:	00800c04 	movi	r2,48
    275c:	0023883a 	mov	r17,zero
    2760:	01000084 	movi	r4,2
    2764:	d9c14015 	stw	r7,1280(sp)
    2768:	d8c14d15 	stw	r3,1332(sp)
    276c:	d9414415 	stw	r5,1296(sp)
    2770:	d8800445 	stb	r2,17(sp)
    2774:	d8c00485 	stb	r3,18(sp)
    2778:	d8000405 	stb	zero,16(sp)
    277c:	003e7d06 	br	2174 <___vfprintf_internal_r+0xa38>
    2780:	d8814c17 	ldw	r2,1328(sp)
    2784:	b8c00007 	ldb	r3,0(r23)
    2788:	10801014 	ori	r2,r2,64
    278c:	d8814c15 	stw	r2,1328(sp)
    2790:	003c6906 	br	1938 <___vfprintf_internal_r+0x1fc>
    2794:	d9414c17 	ldw	r5,1328(sp)
    2798:	2880020c 	andi	r2,r5,8
    279c:	1001e526 	beq	r2,zero,2f34 <___vfprintf_internal_r+0x17f8>
    27a0:	39800017 	ldw	r6,0(r7)
    27a4:	38800204 	addi	r2,r7,8
    27a8:	d8814015 	stw	r2,1280(sp)
    27ac:	d9814215 	stw	r6,1288(sp)
    27b0:	39c00117 	ldw	r7,4(r7)
    27b4:	d9c14315 	stw	r7,1292(sp)
    27b8:	d9014217 	ldw	r4,1288(sp)
    27bc:	d9414317 	ldw	r5,1292(sp)
    27c0:	00081ec0 	call	81ec <__isinfd>
    27c4:	10021d26 	beq	r2,zero,303c <___vfprintf_internal_r+0x1900>
    27c8:	d9014217 	ldw	r4,1288(sp)
    27cc:	d9414317 	ldw	r5,1292(sp)
    27d0:	000d883a 	mov	r6,zero
    27d4:	000f883a 	mov	r7,zero
    27d8:	00098dc0 	call	98dc <__ltdf2>
    27dc:	1002d016 	blt	r2,zero,3320 <___vfprintf_internal_r+0x1be4>
    27e0:	d9414d17 	ldw	r5,1332(sp)
    27e4:	008011c4 	movi	r2,71
    27e8:	11421016 	blt	r2,r5,302c <___vfprintf_internal_r+0x18f0>
    27ec:	01800074 	movhi	r6,1
    27f0:	31b97004 	addi	r6,r6,-6720
    27f4:	d9814115 	stw	r6,1284(sp)
    27f8:	d9014c17 	ldw	r4,1328(sp)
    27fc:	00c000c4 	movi	r3,3
    2800:	00bfdfc4 	movi	r2,-129
    2804:	2088703a 	and	r4,r4,r2
    2808:	180f883a 	mov	r7,r3
    280c:	d8c14515 	stw	r3,1300(sp)
    2810:	d9014c15 	stw	r4,1328(sp)
    2814:	d8014615 	stw	zero,1304(sp)
    2818:	003e6a06 	br	21c4 <___vfprintf_internal_r+0xa88>
    281c:	38800017 	ldw	r2,0(r7)
    2820:	00c00044 	movi	r3,1
    2824:	39c00104 	addi	r7,r7,4
    2828:	d9c14015 	stw	r7,1280(sp)
    282c:	d9000f04 	addi	r4,sp,60
    2830:	180f883a 	mov	r7,r3
    2834:	d8c14515 	stw	r3,1300(sp)
    2838:	d9014115 	stw	r4,1284(sp)
    283c:	d8800f05 	stb	r2,60(sp)
    2840:	d8000405 	stb	zero,16(sp)
    2844:	003cac06 	br	1af8 <___vfprintf_internal_r+0x3bc>
    2848:	01400074 	movhi	r5,1
    284c:	29797604 	addi	r5,r5,-6696
    2850:	d9414415 	stw	r5,1296(sp)
    2854:	d9814c17 	ldw	r6,1328(sp)
    2858:	3080080c 	andi	r2,r6,32
    285c:	1000ff26 	beq	r2,zero,2c5c <___vfprintf_internal_r+0x1520>
    2860:	3c000017 	ldw	r16,0(r7)
    2864:	3c400117 	ldw	r17,4(r7)
    2868:	38800204 	addi	r2,r7,8
    286c:	d8814015 	stw	r2,1280(sp)
    2870:	d9414c17 	ldw	r5,1328(sp)
    2874:	2880004c 	andi	r2,r5,1
    2878:	1005003a 	cmpeq	r2,r2,zero
    287c:	1000b91e 	bne	r2,zero,2b64 <___vfprintf_internal_r+0x1428>
    2880:	8444b03a 	or	r2,r16,r17
    2884:	1000b726 	beq	r2,zero,2b64 <___vfprintf_internal_r+0x1428>
    2888:	d9814d17 	ldw	r6,1332(sp)
    288c:	29400094 	ori	r5,r5,2
    2890:	00800c04 	movi	r2,48
    2894:	01000084 	movi	r4,2
    2898:	d9414c15 	stw	r5,1328(sp)
    289c:	d8800445 	stb	r2,17(sp)
    28a0:	d9800485 	stb	r6,18(sp)
    28a4:	d8000405 	stb	zero,16(sp)
    28a8:	003e3206 	br	2174 <___vfprintf_internal_r+0xa38>
    28ac:	01800074 	movhi	r6,1
    28b0:	31b96b04 	addi	r6,r6,-6740
    28b4:	d9814415 	stw	r6,1296(sp)
    28b8:	003fe606 	br	2854 <___vfprintf_internal_r+0x1118>
    28bc:	00800ac4 	movi	r2,43
    28c0:	d8800405 	stb	r2,16(sp)
    28c4:	b8c00007 	ldb	r3,0(r23)
    28c8:	003c1b06 	br	1938 <___vfprintf_internal_r+0x1fc>
    28cc:	d8814c17 	ldw	r2,1328(sp)
    28d0:	b8c00007 	ldb	r3,0(r23)
    28d4:	10800054 	ori	r2,r2,1
    28d8:	d8814c15 	stw	r2,1328(sp)
    28dc:	003c1606 	br	1938 <___vfprintf_internal_r+0x1fc>
    28e0:	d8800407 	ldb	r2,16(sp)
    28e4:	10004c1e 	bne	r2,zero,2a18 <___vfprintf_internal_r+0x12dc>
    28e8:	00800804 	movi	r2,32
    28ec:	d8800405 	stb	r2,16(sp)
    28f0:	b8c00007 	ldb	r3,0(r23)
    28f4:	003c1006 	br	1938 <___vfprintf_internal_r+0x1fc>
    28f8:	d9814c17 	ldw	r6,1328(sp)
    28fc:	b8c00007 	ldb	r3,0(r23)
    2900:	31800214 	ori	r6,r6,8
    2904:	d9814c15 	stw	r6,1328(sp)
    2908:	003c0b06 	br	1938 <___vfprintf_internal_r+0x1fc>
    290c:	0009883a 	mov	r4,zero
    2910:	04000244 	movi	r16,9
    2914:	01400284 	movi	r5,10
    2918:	d9c15115 	stw	r7,1348(sp)
    291c:	00016340 	call	1634 <__mulsi3>
    2920:	b9000007 	ldb	r4,0(r23)
    2924:	d8c14d17 	ldw	r3,1332(sp)
    2928:	bdc00044 	addi	r23,r23,1
    292c:	d9014d15 	stw	r4,1332(sp)
    2930:	d9414d17 	ldw	r5,1332(sp)
    2934:	1885883a 	add	r2,r3,r2
    2938:	113ff404 	addi	r4,r2,-48
    293c:	28bff404 	addi	r2,r5,-48
    2940:	d9c15117 	ldw	r7,1348(sp)
    2944:	80bff32e 	bgeu	r16,r2,2914 <___vfprintf_internal_r+0x11d8>
    2948:	d9014a15 	stw	r4,1320(sp)
    294c:	003bfc06 	br	1940 <___vfprintf_internal_r+0x204>
    2950:	d8814c17 	ldw	r2,1328(sp)
    2954:	b8c00007 	ldb	r3,0(r23)
    2958:	10802014 	ori	r2,r2,128
    295c:	d8814c15 	stw	r2,1328(sp)
    2960:	003bf506 	br	1938 <___vfprintf_internal_r+0x1fc>
    2964:	b8c00007 	ldb	r3,0(r23)
    2968:	00800a84 	movi	r2,42
    296c:	bdc00044 	addi	r23,r23,1
    2970:	18831826 	beq	r3,r2,35d4 <___vfprintf_internal_r+0x1e98>
    2974:	d8c14d15 	stw	r3,1332(sp)
    2978:	18bff404 	addi	r2,r3,-48
    297c:	00c00244 	movi	r3,9
    2980:	18827b36 	bltu	r3,r2,3370 <___vfprintf_internal_r+0x1c34>
    2984:	1821883a 	mov	r16,r3
    2988:	0009883a 	mov	r4,zero
    298c:	01400284 	movi	r5,10
    2990:	d9c15115 	stw	r7,1348(sp)
    2994:	00016340 	call	1634 <__mulsi3>
    2998:	d9414d17 	ldw	r5,1332(sp)
    299c:	b9800007 	ldb	r6,0(r23)
    29a0:	d9c15117 	ldw	r7,1348(sp)
    29a4:	1145883a 	add	r2,r2,r5
    29a8:	113ff404 	addi	r4,r2,-48
    29ac:	30bff404 	addi	r2,r6,-48
    29b0:	d9814d15 	stw	r6,1332(sp)
    29b4:	bdc00044 	addi	r23,r23,1
    29b8:	80bff42e 	bgeu	r16,r2,298c <___vfprintf_internal_r+0x1250>
    29bc:	2027883a 	mov	r19,r4
    29c0:	203bdf0e 	bge	r4,zero,1940 <___vfprintf_internal_r+0x204>
    29c4:	04ffffc4 	movi	r19,-1
    29c8:	003bdd06 	br	1940 <___vfprintf_internal_r+0x204>
    29cc:	d8000405 	stb	zero,16(sp)
    29d0:	39800017 	ldw	r6,0(r7)
    29d4:	39c00104 	addi	r7,r7,4
    29d8:	d9c14015 	stw	r7,1280(sp)
    29dc:	d9814115 	stw	r6,1284(sp)
    29e0:	3001c926 	beq	r6,zero,3108 <___vfprintf_internal_r+0x19cc>
    29e4:	98000e16 	blt	r19,zero,2a20 <___vfprintf_internal_r+0x12e4>
    29e8:	d9014117 	ldw	r4,1284(sp)
    29ec:	000b883a 	mov	r5,zero
    29f0:	980d883a 	mov	r6,r19
    29f4:	00068700 	call	6870 <memchr>
    29f8:	10025926 	beq	r2,zero,3360 <___vfprintf_internal_r+0x1c24>
    29fc:	d8c14117 	ldw	r3,1284(sp)
    2a00:	10cfc83a 	sub	r7,r2,r3
    2a04:	99c19e16 	blt	r19,r7,3080 <___vfprintf_internal_r+0x1944>
    2a08:	d9c14515 	stw	r7,1300(sp)
    2a0c:	38000916 	blt	r7,zero,2a34 <___vfprintf_internal_r+0x12f8>
    2a10:	d8014615 	stw	zero,1304(sp)
    2a14:	003deb06 	br	21c4 <___vfprintf_internal_r+0xa88>
    2a18:	b8c00007 	ldb	r3,0(r23)
    2a1c:	003bc606 	br	1938 <___vfprintf_internal_r+0x1fc>
    2a20:	d9014117 	ldw	r4,1284(sp)
    2a24:	00084d40 	call	84d4 <strlen>
    2a28:	d8814515 	stw	r2,1300(sp)
    2a2c:	100f883a 	mov	r7,r2
    2a30:	103ff70e 	bge	r2,zero,2a10 <___vfprintf_internal_r+0x12d4>
    2a34:	d8014515 	stw	zero,1300(sp)
    2a38:	d8014615 	stw	zero,1304(sp)
    2a3c:	003de106 	br	21c4 <___vfprintf_internal_r+0xa88>
    2a40:	20c03fcc 	andi	r3,r4,255
    2a44:	00800044 	movi	r2,1
    2a48:	18802d26 	beq	r3,r2,2b00 <___vfprintf_internal_r+0x13c4>
    2a4c:	18800e36 	bltu	r3,r2,2a88 <___vfprintf_internal_r+0x134c>
    2a50:	00800084 	movi	r2,2
    2a54:	1880fa26 	beq	r3,r2,2e40 <___vfprintf_internal_r+0x1704>
    2a58:	01000074 	movhi	r4,1
    2a5c:	21397b04 	addi	r4,r4,-6676
    2a60:	00084d40 	call	84d4 <strlen>
    2a64:	100f883a 	mov	r7,r2
    2a68:	dcc14515 	stw	r19,1300(sp)
    2a6c:	9880010e 	bge	r19,r2,2a74 <___vfprintf_internal_r+0x1338>
    2a70:	d8814515 	stw	r2,1300(sp)
    2a74:	00800074 	movhi	r2,1
    2a78:	10b97b04 	addi	r2,r2,-6676
    2a7c:	dcc14615 	stw	r19,1304(sp)
    2a80:	d8814115 	stw	r2,1284(sp)
    2a84:	003dcf06 	br	21c4 <___vfprintf_internal_r+0xa88>
    2a88:	d9401904 	addi	r5,sp,100
    2a8c:	dd000f04 	addi	r20,sp,60
    2a90:	d9414115 	stw	r5,1284(sp)
    2a94:	880a977a 	slli	r5,r17,29
    2a98:	d9814117 	ldw	r6,1284(sp)
    2a9c:	8004d0fa 	srli	r2,r16,3
    2aa0:	8806d0fa 	srli	r3,r17,3
    2aa4:	810001cc 	andi	r4,r16,7
    2aa8:	2884b03a 	or	r2,r5,r2
    2aac:	31bfffc4 	addi	r6,r6,-1
    2ab0:	21000c04 	addi	r4,r4,48
    2ab4:	d9814115 	stw	r6,1284(sp)
    2ab8:	10cab03a 	or	r5,r2,r3
    2abc:	31000005 	stb	r4,0(r6)
    2ac0:	1021883a 	mov	r16,r2
    2ac4:	1823883a 	mov	r17,r3
    2ac8:	283ff21e 	bne	r5,zero,2a94 <___vfprintf_internal_r+0x1358>
    2acc:	d8c14c17 	ldw	r3,1328(sp)
    2ad0:	1880004c 	andi	r2,r3,1
    2ad4:	1005003a 	cmpeq	r2,r2,zero
    2ad8:	103db31e 	bne	r2,zero,21a8 <___vfprintf_internal_r+0xa6c>
    2adc:	20803fcc 	andi	r2,r4,255
    2ae0:	1080201c 	xori	r2,r2,128
    2ae4:	10bfe004 	addi	r2,r2,-128
    2ae8:	00c00c04 	movi	r3,48
    2aec:	10fdae26 	beq	r2,r3,21a8 <___vfprintf_internal_r+0xa6c>
    2af0:	31bfffc4 	addi	r6,r6,-1
    2af4:	d9814115 	stw	r6,1284(sp)
    2af8:	30c00005 	stb	r3,0(r6)
    2afc:	003daa06 	br	21a8 <___vfprintf_internal_r+0xa6c>
    2b00:	88800068 	cmpgeui	r2,r17,1
    2b04:	10002c1e 	bne	r2,zero,2bb8 <___vfprintf_internal_r+0x147c>
    2b08:	8800021e 	bne	r17,zero,2b14 <___vfprintf_internal_r+0x13d8>
    2b0c:	00800244 	movi	r2,9
    2b10:	14002936 	bltu	r2,r16,2bb8 <___vfprintf_internal_r+0x147c>
    2b14:	d90018c4 	addi	r4,sp,99
    2b18:	dd000f04 	addi	r20,sp,60
    2b1c:	d9014115 	stw	r4,1284(sp)
    2b20:	d9014117 	ldw	r4,1284(sp)
    2b24:	80800c04 	addi	r2,r16,48
    2b28:	20800005 	stb	r2,0(r4)
    2b2c:	003d9e06 	br	21a8 <___vfprintf_internal_r+0xa6c>
    2b30:	dc400d17 	ldw	r17,52(sp)
    2b34:	07000074 	movhi	fp,1
    2b38:	e7398284 	addi	fp,fp,-6646
    2b3c:	9425883a 	add	r18,r18,r16
    2b40:	8c400044 	addi	r17,r17,1
    2b44:	008001c4 	movi	r2,7
    2b48:	1f000015 	stw	fp,0(r3)
    2b4c:	1c000115 	stw	r16,4(r3)
    2b50:	dc800e15 	stw	r18,56(sp)
    2b54:	dc400d15 	stw	r17,52(sp)
    2b58:	147ddc16 	blt	r2,r17,22cc <___vfprintf_internal_r+0xb90>
    2b5c:	18c00204 	addi	r3,r3,8
    2b60:	003c7406 	br	1d34 <___vfprintf_internal_r+0x5f8>
    2b64:	01000084 	movi	r4,2
    2b68:	d8000405 	stb	zero,16(sp)
    2b6c:	003d8106 	br	2174 <___vfprintf_internal_r+0xa38>
    2b70:	d9814c17 	ldw	r6,1328(sp)
    2b74:	30c4703a 	and	r2,r6,r3
    2b78:	1005003a 	cmpeq	r2,r2,zero
    2b7c:	103cb326 	beq	r2,zero,1e4c <___vfprintf_internal_r+0x710>
    2b80:	d9014117 	ldw	r4,1284(sp)
    2b84:	94800044 	addi	r18,r18,1
    2b88:	8c400044 	addi	r17,r17,1
    2b8c:	008001c4 	movi	r2,7
    2b90:	a9000015 	stw	r4,0(r21)
    2b94:	a8c00115 	stw	r3,4(r21)
    2b98:	dc800e15 	stw	r18,56(sp)
    2b9c:	dc400d15 	stw	r17,52(sp)
    2ba0:	147e6016 	blt	r2,r17,2524 <___vfprintf_internal_r+0xde8>
    2ba4:	acc00204 	addi	r19,r21,8
    2ba8:	003cd106 	br	1ef0 <___vfprintf_internal_r+0x7b4>
    2bac:	07000074 	movhi	fp,1
    2bb0:	e7398284 	addi	fp,fp,-6646
    2bb4:	003c4906 	br	1cdc <___vfprintf_internal_r+0x5a0>
    2bb8:	dd000f04 	addi	r20,sp,60
    2bbc:	dc801904 	addi	r18,sp,100
    2bc0:	8009883a 	mov	r4,r16
    2bc4:	880b883a 	mov	r5,r17
    2bc8:	01800284 	movi	r6,10
    2bcc:	000f883a 	mov	r7,zero
    2bd0:	000905c0 	call	905c <__umoddi3>
    2bd4:	12000c04 	addi	r8,r2,48
    2bd8:	94bfffc4 	addi	r18,r18,-1
    2bdc:	8009883a 	mov	r4,r16
    2be0:	880b883a 	mov	r5,r17
    2be4:	01800284 	movi	r6,10
    2be8:	000f883a 	mov	r7,zero
    2bec:	92000005 	stb	r8,0(r18)
    2bf0:	00089f00 	call	89f0 <__udivdi3>
    2bf4:	1009883a 	mov	r4,r2
    2bf8:	1021883a 	mov	r16,r2
    2bfc:	18800068 	cmpgeui	r2,r3,1
    2c00:	1823883a 	mov	r17,r3
    2c04:	103fee1e 	bne	r2,zero,2bc0 <___vfprintf_internal_r+0x1484>
    2c08:	1800021e 	bne	r3,zero,2c14 <___vfprintf_internal_r+0x14d8>
    2c0c:	00800244 	movi	r2,9
    2c10:	113feb36 	bltu	r2,r4,2bc0 <___vfprintf_internal_r+0x1484>
    2c14:	94bfffc4 	addi	r18,r18,-1
    2c18:	dc814115 	stw	r18,1284(sp)
    2c1c:	003fc006 	br	2b20 <___vfprintf_internal_r+0x13e4>
    2c20:	d9014c17 	ldw	r4,1328(sp)
    2c24:	2080004c 	andi	r2,r4,1
    2c28:	10009a1e 	bne	r2,zero,2e94 <___vfprintf_internal_r+0x1758>
    2c2c:	d9401904 	addi	r5,sp,100
    2c30:	dd000f04 	addi	r20,sp,60
    2c34:	d9414115 	stw	r5,1284(sp)
    2c38:	003d5b06 	br	21a8 <___vfprintf_internal_r+0xa6c>
    2c3c:	d9014f17 	ldw	r4,1340(sp)
    2c40:	b00b883a 	mov	r5,r22
    2c44:	d9800c04 	addi	r6,sp,48
    2c48:	00016e40 	call	16e4 <__sprint_r>
    2c4c:	103c731e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2c50:	dc800e17 	ldw	r18,56(sp)
    2c54:	d8c01904 	addi	r3,sp,100
    2c58:	003cf906 	br	2040 <___vfprintf_internal_r+0x904>
    2c5c:	d8c14c17 	ldw	r3,1328(sp)
    2c60:	1880040c 	andi	r2,r3,16
    2c64:	1000711e 	bne	r2,zero,2e2c <___vfprintf_internal_r+0x16f0>
    2c68:	d9014c17 	ldw	r4,1328(sp)
    2c6c:	2080100c 	andi	r2,r4,64
    2c70:	10006e26 	beq	r2,zero,2e2c <___vfprintf_internal_r+0x16f0>
    2c74:	3c00000b 	ldhu	r16,0(r7)
    2c78:	0023883a 	mov	r17,zero
    2c7c:	39c00104 	addi	r7,r7,4
    2c80:	d9c14015 	stw	r7,1280(sp)
    2c84:	003efa06 	br	2870 <___vfprintf_internal_r+0x1134>
    2c88:	dc400d17 	ldw	r17,52(sp)
    2c8c:	07000074 	movhi	fp,1
    2c90:	e7398284 	addi	fp,fp,-6646
    2c94:	9425883a 	add	r18,r18,r16
    2c98:	8c400044 	addi	r17,r17,1
    2c9c:	008001c4 	movi	r2,7
    2ca0:	1f000015 	stw	fp,0(r3)
    2ca4:	1c000115 	stw	r16,4(r3)
    2ca8:	dc800e15 	stw	r18,56(sp)
    2cac:	dc400d15 	stw	r17,52(sp)
    2cb0:	147d7016 	blt	r2,r17,2274 <___vfprintf_internal_r+0xb38>
    2cb4:	18c00204 	addi	r3,r3,8
    2cb8:	003d7506 	br	2290 <___vfprintf_internal_r+0xb54>
    2cbc:	dc800e17 	ldw	r18,56(sp)
    2cc0:	dc400d17 	ldw	r17,52(sp)
    2cc4:	07000074 	movhi	fp,1
    2cc8:	e7398684 	addi	fp,fp,-6630
    2ccc:	003bba06 	br	1bb8 <___vfprintf_internal_r+0x47c>
    2cd0:	d9014f17 	ldw	r4,1340(sp)
    2cd4:	b00b883a 	mov	r5,r22
    2cd8:	d9800c04 	addi	r6,sp,48
    2cdc:	00016e40 	call	16e4 <__sprint_r>
    2ce0:	103c4e1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2ce4:	dc800e17 	ldw	r18,56(sp)
    2ce8:	d8c01904 	addi	r3,sp,100
    2cec:	003ce306 	br	207c <___vfprintf_internal_r+0x940>
    2cf0:	3c000017 	ldw	r16,0(r7)
    2cf4:	0009883a 	mov	r4,zero
    2cf8:	39c00104 	addi	r7,r7,4
    2cfc:	0023883a 	mov	r17,zero
    2d00:	d9c14015 	stw	r7,1280(sp)
    2d04:	d8000405 	stb	zero,16(sp)
    2d08:	003d1a06 	br	2174 <___vfprintf_internal_r+0xa38>
    2d0c:	38800017 	ldw	r2,0(r7)
    2d10:	39c00104 	addi	r7,r7,4
    2d14:	d9c14015 	stw	r7,1280(sp)
    2d18:	1023d7fa 	srai	r17,r2,31
    2d1c:	1021883a 	mov	r16,r2
    2d20:	003d1206 	br	216c <___vfprintf_internal_r+0xa30>
    2d24:	3c000017 	ldw	r16,0(r7)
    2d28:	01000044 	movi	r4,1
    2d2c:	39c00104 	addi	r7,r7,4
    2d30:	0023883a 	mov	r17,zero
    2d34:	d9c14015 	stw	r7,1280(sp)
    2d38:	d8000405 	stb	zero,16(sp)
    2d3c:	003d0d06 	br	2174 <___vfprintf_internal_r+0xa38>
    2d40:	00800074 	movhi	r2,1
    2d44:	10b98204 	addi	r2,r2,-6648
    2d48:	94800044 	addi	r18,r18,1
    2d4c:	8c400044 	addi	r17,r17,1
    2d50:	a8800015 	stw	r2,0(r21)
    2d54:	00c00044 	movi	r3,1
    2d58:	008001c4 	movi	r2,7
    2d5c:	a8c00115 	stw	r3,4(r21)
    2d60:	dc800e15 	stw	r18,56(sp)
    2d64:	dc400d15 	stw	r17,52(sp)
    2d68:	1440ca16 	blt	r2,r17,3094 <___vfprintf_internal_r+0x1958>
    2d6c:	a8c00204 	addi	r3,r21,8
    2d70:	2000061e 	bne	r4,zero,2d8c <___vfprintf_internal_r+0x1650>
    2d74:	d9414717 	ldw	r5,1308(sp)
    2d78:	2800041e 	bne	r5,zero,2d8c <___vfprintf_internal_r+0x1650>
    2d7c:	d9814c17 	ldw	r6,1328(sp)
    2d80:	3080004c 	andi	r2,r6,1
    2d84:	1005003a 	cmpeq	r2,r2,zero
    2d88:	103bea1e 	bne	r2,zero,1d34 <___vfprintf_internal_r+0x5f8>
    2d8c:	00800044 	movi	r2,1
    2d90:	dc400d17 	ldw	r17,52(sp)
    2d94:	18800115 	stw	r2,4(r3)
    2d98:	d8814917 	ldw	r2,1316(sp)
    2d9c:	94800044 	addi	r18,r18,1
    2da0:	8c400044 	addi	r17,r17,1
    2da4:	18800015 	stw	r2,0(r3)
    2da8:	008001c4 	movi	r2,7
    2dac:	dc800e15 	stw	r18,56(sp)
    2db0:	dc400d15 	stw	r17,52(sp)
    2db4:	1440ca16 	blt	r2,r17,30e0 <___vfprintf_internal_r+0x19a4>
    2db8:	18c00204 	addi	r3,r3,8
    2dbc:	0121c83a 	sub	r16,zero,r4
    2dc0:	0400500e 	bge	zero,r16,2f04 <___vfprintf_internal_r+0x17c8>
    2dc4:	00800404 	movi	r2,16
    2dc8:	1400800e 	bge	r2,r16,2fcc <___vfprintf_internal_r+0x1890>
    2dcc:	1027883a 	mov	r19,r2
    2dd0:	07000074 	movhi	fp,1
    2dd4:	e7398284 	addi	fp,fp,-6646
    2dd8:	050001c4 	movi	r20,7
    2ddc:	00000306 	br	2dec <___vfprintf_internal_r+0x16b0>
    2de0:	18c00204 	addi	r3,r3,8
    2de4:	843ffc04 	addi	r16,r16,-16
    2de8:	9c007a0e 	bge	r19,r16,2fd4 <___vfprintf_internal_r+0x1898>
    2dec:	94800404 	addi	r18,r18,16
    2df0:	8c400044 	addi	r17,r17,1
    2df4:	1f000015 	stw	fp,0(r3)
    2df8:	1cc00115 	stw	r19,4(r3)
    2dfc:	dc800e15 	stw	r18,56(sp)
    2e00:	dc400d15 	stw	r17,52(sp)
    2e04:	a47ff60e 	bge	r20,r17,2de0 <___vfprintf_internal_r+0x16a4>
    2e08:	d9014f17 	ldw	r4,1340(sp)
    2e0c:	b00b883a 	mov	r5,r22
    2e10:	d9800c04 	addi	r6,sp,48
    2e14:	00016e40 	call	16e4 <__sprint_r>
    2e18:	103c001e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2e1c:	dc800e17 	ldw	r18,56(sp)
    2e20:	dc400d17 	ldw	r17,52(sp)
    2e24:	d8c01904 	addi	r3,sp,100
    2e28:	003fee06 	br	2de4 <___vfprintf_internal_r+0x16a8>
    2e2c:	3c000017 	ldw	r16,0(r7)
    2e30:	0023883a 	mov	r17,zero
    2e34:	39c00104 	addi	r7,r7,4
    2e38:	d9c14015 	stw	r7,1280(sp)
    2e3c:	003e8c06 	br	2870 <___vfprintf_internal_r+0x1134>
    2e40:	d9401904 	addi	r5,sp,100
    2e44:	dd000f04 	addi	r20,sp,60
    2e48:	d9414115 	stw	r5,1284(sp)
    2e4c:	d9814417 	ldw	r6,1296(sp)
    2e50:	880a973a 	slli	r5,r17,28
    2e54:	8004d13a 	srli	r2,r16,4
    2e58:	810003cc 	andi	r4,r16,15
    2e5c:	3109883a 	add	r4,r6,r4
    2e60:	2884b03a 	or	r2,r5,r2
    2e64:	21400003 	ldbu	r5,0(r4)
    2e68:	d9014117 	ldw	r4,1284(sp)
    2e6c:	8806d13a 	srli	r3,r17,4
    2e70:	1021883a 	mov	r16,r2
    2e74:	213fffc4 	addi	r4,r4,-1
    2e78:	d9014115 	stw	r4,1284(sp)
    2e7c:	d9814117 	ldw	r6,1284(sp)
    2e80:	10c8b03a 	or	r4,r2,r3
    2e84:	1823883a 	mov	r17,r3
    2e88:	31400005 	stb	r5,0(r6)
    2e8c:	203fef1e 	bne	r4,zero,2e4c <___vfprintf_internal_r+0x1710>
    2e90:	003cc506 	br	21a8 <___vfprintf_internal_r+0xa6c>
    2e94:	00800c04 	movi	r2,48
    2e98:	d98018c4 	addi	r6,sp,99
    2e9c:	dd000f04 	addi	r20,sp,60
    2ea0:	d88018c5 	stb	r2,99(sp)
    2ea4:	d9814115 	stw	r6,1284(sp)
    2ea8:	003cbf06 	br	21a8 <___vfprintf_internal_r+0xa6c>
    2eac:	dc400d17 	ldw	r17,52(sp)
    2eb0:	07000074 	movhi	fp,1
    2eb4:	e7398684 	addi	fp,fp,-6630
    2eb8:	003bc106 	br	1dc0 <___vfprintf_internal_r+0x684>
    2ebc:	d9414c17 	ldw	r5,1328(sp)
    2ec0:	2880040c 	andi	r2,r5,16
    2ec4:	10007c26 	beq	r2,zero,30b8 <___vfprintf_internal_r+0x197c>
    2ec8:	38800017 	ldw	r2,0(r7)
    2ecc:	39c00104 	addi	r7,r7,4
    2ed0:	d9c14015 	stw	r7,1280(sp)
    2ed4:	d9814b17 	ldw	r6,1324(sp)
    2ed8:	d9c14017 	ldw	r7,1280(sp)
    2edc:	11800015 	stw	r6,0(r2)
    2ee0:	003a7206 	br	18ac <___vfprintf_internal_r+0x170>
    2ee4:	d9014f17 	ldw	r4,1340(sp)
    2ee8:	b00b883a 	mov	r5,r22
    2eec:	d9800c04 	addi	r6,sp,48
    2ef0:	00016e40 	call	16e4 <__sprint_r>
    2ef4:	103bc91e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2ef8:	dc800e17 	ldw	r18,56(sp)
    2efc:	dc400d17 	ldw	r17,52(sp)
    2f00:	d8c01904 	addi	r3,sp,100
    2f04:	d9014717 	ldw	r4,1308(sp)
    2f08:	d9414117 	ldw	r5,1284(sp)
    2f0c:	8c400044 	addi	r17,r17,1
    2f10:	9125883a 	add	r18,r18,r4
    2f14:	008001c4 	movi	r2,7
    2f18:	19400015 	stw	r5,0(r3)
    2f1c:	19000115 	stw	r4,4(r3)
    2f20:	dc800e15 	stw	r18,56(sp)
    2f24:	dc400d15 	stw	r17,52(sp)
    2f28:	147ce816 	blt	r2,r17,22cc <___vfprintf_internal_r+0xb90>
    2f2c:	18c00204 	addi	r3,r3,8
    2f30:	003b8006 	br	1d34 <___vfprintf_internal_r+0x5f8>
    2f34:	38c00017 	ldw	r3,0(r7)
    2f38:	39000204 	addi	r4,r7,8
    2f3c:	d9014015 	stw	r4,1280(sp)
    2f40:	d8c14215 	stw	r3,1288(sp)
    2f44:	39c00117 	ldw	r7,4(r7)
    2f48:	d9c14315 	stw	r7,1292(sp)
    2f4c:	003e1a06 	br	27b8 <___vfprintf_internal_r+0x107c>
    2f50:	0005883a 	mov	r2,zero
    2f54:	1409c83a 	sub	r4,r2,r16
    2f58:	1105803a 	cmpltu	r2,r2,r4
    2f5c:	044bc83a 	sub	r5,zero,r17
    2f60:	2885c83a 	sub	r2,r5,r2
    2f64:	2021883a 	mov	r16,r4
    2f68:	1023883a 	mov	r17,r2
    2f6c:	01000044 	movi	r4,1
    2f70:	00800b44 	movi	r2,45
    2f74:	d8800405 	stb	r2,16(sp)
    2f78:	003c7e06 	br	2174 <___vfprintf_internal_r+0xa38>
    2f7c:	d9014f17 	ldw	r4,1340(sp)
    2f80:	b00b883a 	mov	r5,r22
    2f84:	d9800c04 	addi	r6,sp,48
    2f88:	00016e40 	call	16e4 <__sprint_r>
    2f8c:	103ba31e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2f90:	dc800e17 	ldw	r18,56(sp)
    2f94:	dc400d17 	ldw	r17,52(sp)
    2f98:	d9000517 	ldw	r4,20(sp)
    2f9c:	d9401904 	addi	r5,sp,100
    2fa0:	003da106 	br	2628 <___vfprintf_internal_r+0xeec>
    2fa4:	d9014f17 	ldw	r4,1340(sp)
    2fa8:	b00b883a 	mov	r5,r22
    2fac:	d9800c04 	addi	r6,sp,48
    2fb0:	00016e40 	call	16e4 <__sprint_r>
    2fb4:	103b991e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    2fb8:	dc800e17 	ldw	r18,56(sp)
    2fbc:	dc400d17 	ldw	r17,52(sp)
    2fc0:	d9000517 	ldw	r4,20(sp)
    2fc4:	d8c01904 	addi	r3,sp,100
    2fc8:	003d8b06 	br	25f8 <___vfprintf_internal_r+0xebc>
    2fcc:	07000074 	movhi	fp,1
    2fd0:	e7398284 	addi	fp,fp,-6646
    2fd4:	9425883a 	add	r18,r18,r16
    2fd8:	8c400044 	addi	r17,r17,1
    2fdc:	008001c4 	movi	r2,7
    2fe0:	1f000015 	stw	fp,0(r3)
    2fe4:	1c000115 	stw	r16,4(r3)
    2fe8:	dc800e15 	stw	r18,56(sp)
    2fec:	dc400d15 	stw	r17,52(sp)
    2ff0:	147fbc16 	blt	r2,r17,2ee4 <___vfprintf_internal_r+0x17a8>
    2ff4:	18c00204 	addi	r3,r3,8
    2ff8:	003fc206 	br	2f04 <___vfprintf_internal_r+0x17c8>
    2ffc:	d9014f17 	ldw	r4,1340(sp)
    3000:	b00b883a 	mov	r5,r22
    3004:	d9800c04 	addi	r6,sp,48
    3008:	00016e40 	call	16e4 <__sprint_r>
    300c:	103b831e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    3010:	dc800e17 	ldw	r18,56(sp)
    3014:	d9000517 	ldw	r4,20(sp)
    3018:	d8c01904 	addi	r3,sp,100
    301c:	003cfc06 	br	2410 <___vfprintf_internal_r+0xcd4>
    3020:	07000074 	movhi	fp,1
    3024:	e7398284 	addi	fp,fp,-6646
    3028:	003bde06 	br	1fa4 <___vfprintf_internal_r+0x868>
    302c:	00800074 	movhi	r2,1
    3030:	10b97104 	addi	r2,r2,-6716
    3034:	d8814115 	stw	r2,1284(sp)
    3038:	003def06 	br	27f8 <___vfprintf_internal_r+0x10bc>
    303c:	d9014217 	ldw	r4,1288(sp)
    3040:	d9414317 	ldw	r5,1292(sp)
    3044:	000822c0 	call	822c <__isnand>
    3048:	10003926 	beq	r2,zero,3130 <___vfprintf_internal_r+0x19f4>
    304c:	d9414d17 	ldw	r5,1332(sp)
    3050:	008011c4 	movi	r2,71
    3054:	1140ce16 	blt	r2,r5,3390 <___vfprintf_internal_r+0x1c54>
    3058:	01800074 	movhi	r6,1
    305c:	31b97204 	addi	r6,r6,-6712
    3060:	d9814115 	stw	r6,1284(sp)
    3064:	003de406 	br	27f8 <___vfprintf_internal_r+0x10bc>
    3068:	d9014c17 	ldw	r4,1328(sp)
    306c:	bdc00044 	addi	r23,r23,1
    3070:	b8c00007 	ldb	r3,0(r23)
    3074:	21000814 	ori	r4,r4,32
    3078:	d9014c15 	stw	r4,1328(sp)
    307c:	003a2e06 	br	1938 <___vfprintf_internal_r+0x1fc>
    3080:	dcc14515 	stw	r19,1300(sp)
    3084:	98011016 	blt	r19,zero,34c8 <___vfprintf_internal_r+0x1d8c>
    3088:	980f883a 	mov	r7,r19
    308c:	d8014615 	stw	zero,1304(sp)
    3090:	003c4c06 	br	21c4 <___vfprintf_internal_r+0xa88>
    3094:	d9014f17 	ldw	r4,1340(sp)
    3098:	b00b883a 	mov	r5,r22
    309c:	d9800c04 	addi	r6,sp,48
    30a0:	00016e40 	call	16e4 <__sprint_r>
    30a4:	103b5d1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    30a8:	dc800e17 	ldw	r18,56(sp)
    30ac:	d9000517 	ldw	r4,20(sp)
    30b0:	d8c01904 	addi	r3,sp,100
    30b4:	003f2e06 	br	2d70 <___vfprintf_internal_r+0x1634>
    30b8:	d8c14c17 	ldw	r3,1328(sp)
    30bc:	1880100c 	andi	r2,r3,64
    30c0:	1000a026 	beq	r2,zero,3344 <___vfprintf_internal_r+0x1c08>
    30c4:	38800017 	ldw	r2,0(r7)
    30c8:	39c00104 	addi	r7,r7,4
    30cc:	d9c14015 	stw	r7,1280(sp)
    30d0:	d9014b17 	ldw	r4,1324(sp)
    30d4:	d9c14017 	ldw	r7,1280(sp)
    30d8:	1100000d 	sth	r4,0(r2)
    30dc:	0039f306 	br	18ac <___vfprintf_internal_r+0x170>
    30e0:	d9014f17 	ldw	r4,1340(sp)
    30e4:	b00b883a 	mov	r5,r22
    30e8:	d9800c04 	addi	r6,sp,48
    30ec:	00016e40 	call	16e4 <__sprint_r>
    30f0:	103b4a1e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    30f4:	dc800e17 	ldw	r18,56(sp)
    30f8:	dc400d17 	ldw	r17,52(sp)
    30fc:	d9000517 	ldw	r4,20(sp)
    3100:	d8c01904 	addi	r3,sp,100
    3104:	003f2d06 	br	2dbc <___vfprintf_internal_r+0x1680>
    3108:	00800184 	movi	r2,6
    310c:	14c09a36 	bltu	r2,r19,3378 <___vfprintf_internal_r+0x1c3c>
    3110:	dcc14515 	stw	r19,1300(sp)
    3114:	9800010e 	bge	r19,zero,311c <___vfprintf_internal_r+0x19e0>
    3118:	d8014515 	stw	zero,1300(sp)
    311c:	00800074 	movhi	r2,1
    3120:	10b97404 	addi	r2,r2,-6704
    3124:	980f883a 	mov	r7,r19
    3128:	d8814115 	stw	r2,1284(sp)
    312c:	003a7206 	br	1af8 <___vfprintf_internal_r+0x3bc>
    3130:	00bfffc4 	movi	r2,-1
    3134:	9880e226 	beq	r19,r2,34c0 <___vfprintf_internal_r+0x1d84>
    3138:	d9414d17 	ldw	r5,1332(sp)
    313c:	008019c4 	movi	r2,103
    3140:	2880dc26 	beq	r5,r2,34b4 <___vfprintf_internal_r+0x1d78>
    3144:	008011c4 	movi	r2,71
    3148:	2880da26 	beq	r5,r2,34b4 <___vfprintf_internal_r+0x1d78>
    314c:	d9414c17 	ldw	r5,1328(sp)
    3150:	d9014317 	ldw	r4,1292(sp)
    3154:	d9814217 	ldw	r6,1288(sp)
    3158:	29404014 	ori	r5,r5,256
    315c:	d9414c15 	stw	r5,1328(sp)
    3160:	2000cc16 	blt	r4,zero,3494 <___vfprintf_internal_r+0x1d58>
    3164:	3021883a 	mov	r16,r6
    3168:	2023883a 	mov	r17,r4
    316c:	0039883a 	mov	fp,zero
    3170:	d9414d17 	ldw	r5,1332(sp)
    3174:	00801984 	movi	r2,102
    3178:	2880b726 	beq	r5,r2,3458 <___vfprintf_internal_r+0x1d1c>
    317c:	00801184 	movi	r2,70
    3180:	2880b526 	beq	r5,r2,3458 <___vfprintf_internal_r+0x1d1c>
    3184:	00801944 	movi	r2,101
    3188:	2880c826 	beq	r5,r2,34ac <___vfprintf_internal_r+0x1d70>
    318c:	00801144 	movi	r2,69
    3190:	2880c626 	beq	r5,r2,34ac <___vfprintf_internal_r+0x1d70>
    3194:	9829883a 	mov	r20,r19
    3198:	d9014f17 	ldw	r4,1340(sp)
    319c:	d8800504 	addi	r2,sp,20
    31a0:	880d883a 	mov	r6,r17
    31a4:	d8800115 	stw	r2,4(sp)
    31a8:	d8c00604 	addi	r3,sp,24
    31ac:	d8800704 	addi	r2,sp,28
    31b0:	800b883a 	mov	r5,r16
    31b4:	01c00084 	movi	r7,2
    31b8:	d8c00215 	stw	r3,8(sp)
    31bc:	d8800315 	stw	r2,12(sp)
    31c0:	dd000015 	stw	r20,0(sp)
    31c4:	00039a40 	call	39a4 <_dtoa_r>
    31c8:	d9814d17 	ldw	r6,1332(sp)
    31cc:	d8814115 	stw	r2,1284(sp)
    31d0:	008019c4 	movi	r2,103
    31d4:	30809526 	beq	r6,r2,342c <___vfprintf_internal_r+0x1cf0>
    31d8:	d8c14d17 	ldw	r3,1332(sp)
    31dc:	008011c4 	movi	r2,71
    31e0:	18809226 	beq	r3,r2,342c <___vfprintf_internal_r+0x1cf0>
    31e4:	d9414117 	ldw	r5,1284(sp)
    31e8:	d9814d17 	ldw	r6,1332(sp)
    31ec:	00801984 	movi	r2,102
    31f0:	2d25883a 	add	r18,r5,r20
    31f4:	30808626 	beq	r6,r2,3410 <___vfprintf_internal_r+0x1cd4>
    31f8:	00801184 	movi	r2,70
    31fc:	30808426 	beq	r6,r2,3410 <___vfprintf_internal_r+0x1cd4>
    3200:	000d883a 	mov	r6,zero
    3204:	000f883a 	mov	r7,zero
    3208:	880b883a 	mov	r5,r17
    320c:	8009883a 	mov	r4,r16
    3210:	00096bc0 	call	96bc <__eqdf2>
    3214:	1000751e 	bne	r2,zero,33ec <___vfprintf_internal_r+0x1cb0>
    3218:	9005883a 	mov	r2,r18
    321c:	dc800715 	stw	r18,28(sp)
    3220:	d9014117 	ldw	r4,1284(sp)
    3224:	d9414d17 	ldw	r5,1332(sp)
    3228:	00c019c4 	movi	r3,103
    322c:	1125c83a 	sub	r18,r2,r4
    3230:	28c06826 	beq	r5,r3,33d4 <___vfprintf_internal_r+0x1c98>
    3234:	008011c4 	movi	r2,71
    3238:	28806626 	beq	r5,r2,33d4 <___vfprintf_internal_r+0x1c98>
    323c:	d9000517 	ldw	r4,20(sp)
    3240:	d8c14d17 	ldw	r3,1332(sp)
    3244:	00801944 	movi	r2,101
    3248:	10c05516 	blt	r2,r3,33a0 <___vfprintf_internal_r+0x1c64>
    324c:	213fffc4 	addi	r4,r4,-1
    3250:	d9000515 	stw	r4,20(sp)
    3254:	d8c00805 	stb	r3,32(sp)
    3258:	2021883a 	mov	r16,r4
    325c:	2000c116 	blt	r4,zero,3564 <___vfprintf_internal_r+0x1e28>
    3260:	00800ac4 	movi	r2,43
    3264:	d8800845 	stb	r2,33(sp)
    3268:	00800244 	movi	r2,9
    326c:	1400af0e 	bge	r2,r16,352c <___vfprintf_internal_r+0x1df0>
    3270:	1027883a 	mov	r19,r2
    3274:	dc400b84 	addi	r17,sp,46
    3278:	8009883a 	mov	r4,r16
    327c:	01400284 	movi	r5,10
    3280:	0009c100 	call	9c10 <__modsi3>
    3284:	10800c04 	addi	r2,r2,48
    3288:	8c7fffc4 	addi	r17,r17,-1
    328c:	8009883a 	mov	r4,r16
    3290:	01400284 	movi	r5,10
    3294:	88800005 	stb	r2,0(r17)
    3298:	0009bb00 	call	9bb0 <__divsi3>
    329c:	1021883a 	mov	r16,r2
    32a0:	98bff516 	blt	r19,r2,3278 <___vfprintf_internal_r+0x1b3c>
    32a4:	10c00c04 	addi	r3,r2,48
    32a8:	d88009c4 	addi	r2,sp,39
    32ac:	108001c4 	addi	r2,r2,7
    32b0:	897fffc4 	addi	r5,r17,-1
    32b4:	88ffffc5 	stb	r3,-1(r17)
    32b8:	2880a72e 	bgeu	r5,r2,3558 <___vfprintf_internal_r+0x1e1c>
    32bc:	1009883a 	mov	r4,r2
    32c0:	d9800804 	addi	r6,sp,32
    32c4:	d8c00884 	addi	r3,sp,34
    32c8:	28800003 	ldbu	r2,0(r5)
    32cc:	29400044 	addi	r5,r5,1
    32d0:	18800005 	stb	r2,0(r3)
    32d4:	18c00044 	addi	r3,r3,1
    32d8:	293ffb36 	bltu	r5,r4,32c8 <___vfprintf_internal_r+0x1b8c>
    32dc:	1987c83a 	sub	r3,r3,r6
    32e0:	00800044 	movi	r2,1
    32e4:	d8c14815 	stw	r3,1312(sp)
    32e8:	90cf883a 	add	r7,r18,r3
    32ec:	1480960e 	bge	r2,r18,3548 <___vfprintf_internal_r+0x1e0c>
    32f0:	39c00044 	addi	r7,r7,1
    32f4:	d9c14515 	stw	r7,1300(sp)
    32f8:	38003416 	blt	r7,zero,33cc <___vfprintf_internal_r+0x1c90>
    32fc:	e0803fcc 	andi	r2,fp,255
    3300:	1080201c 	xori	r2,r2,128
    3304:	10bfe004 	addi	r2,r2,-128
    3308:	10004e26 	beq	r2,zero,3444 <___vfprintf_internal_r+0x1d08>
    330c:	00800b44 	movi	r2,45
    3310:	dc814715 	stw	r18,1308(sp)
    3314:	d8014615 	stw	zero,1304(sp)
    3318:	d8800405 	stb	r2,16(sp)
    331c:	003bab06 	br	21cc <___vfprintf_internal_r+0xa90>
    3320:	00800b44 	movi	r2,45
    3324:	d8800405 	stb	r2,16(sp)
    3328:	003d2d06 	br	27e0 <___vfprintf_internal_r+0x10a4>
    332c:	d9014f17 	ldw	r4,1340(sp)
    3330:	b00b883a 	mov	r5,r22
    3334:	d9800c04 	addi	r6,sp,48
    3338:	00016e40 	call	16e4 <__sprint_r>
    333c:	103ab71e 	bne	r2,zero,1e1c <___vfprintf_internal_r+0x6e0>
    3340:	003ab506 	br	1e18 <___vfprintf_internal_r+0x6dc>
    3344:	38800017 	ldw	r2,0(r7)
    3348:	39c00104 	addi	r7,r7,4
    334c:	d9c14015 	stw	r7,1280(sp)
    3350:	d9414b17 	ldw	r5,1324(sp)
    3354:	d9c14017 	ldw	r7,1280(sp)
    3358:	11400015 	stw	r5,0(r2)
    335c:	00395306 	br	18ac <___vfprintf_internal_r+0x170>
    3360:	980f883a 	mov	r7,r19
    3364:	dcc14515 	stw	r19,1300(sp)
    3368:	d8014615 	stw	zero,1304(sp)
    336c:	003b9506 	br	21c4 <___vfprintf_internal_r+0xa88>
    3370:	0027883a 	mov	r19,zero
    3374:	00397206 	br	1940 <___vfprintf_internal_r+0x204>
    3378:	00c00074 	movhi	r3,1
    337c:	18f97404 	addi	r3,r3,-6704
    3380:	100f883a 	mov	r7,r2
    3384:	d8814515 	stw	r2,1300(sp)
    3388:	d8c14115 	stw	r3,1284(sp)
    338c:	0039da06 	br	1af8 <___vfprintf_internal_r+0x3bc>
    3390:	00800074 	movhi	r2,1
    3394:	10b97304 	addi	r2,r2,-6708
    3398:	d8814115 	stw	r2,1284(sp)
    339c:	003d1606 	br	27f8 <___vfprintf_internal_r+0x10bc>
    33a0:	d9414d17 	ldw	r5,1332(sp)
    33a4:	00801984 	movi	r2,102
    33a8:	28804926 	beq	r5,r2,34d0 <___vfprintf_internal_r+0x1d94>
    33ac:	200f883a 	mov	r7,r4
    33b0:	24805716 	blt	r4,r18,3510 <___vfprintf_internal_r+0x1dd4>
    33b4:	d9414c17 	ldw	r5,1328(sp)
    33b8:	2880004c 	andi	r2,r5,1
    33bc:	10000126 	beq	r2,zero,33c4 <___vfprintf_internal_r+0x1c88>
    33c0:	21c00044 	addi	r7,r4,1
    33c4:	d9c14515 	stw	r7,1300(sp)
    33c8:	383fcc0e 	bge	r7,zero,32fc <___vfprintf_internal_r+0x1bc0>
    33cc:	d8014515 	stw	zero,1300(sp)
    33d0:	003fca06 	br	32fc <___vfprintf_internal_r+0x1bc0>
    33d4:	d9000517 	ldw	r4,20(sp)
    33d8:	00bfff04 	movi	r2,-4
    33dc:	1100480e 	bge	r2,r4,3500 <___vfprintf_internal_r+0x1dc4>
    33e0:	99004716 	blt	r19,r4,3500 <___vfprintf_internal_r+0x1dc4>
    33e4:	d8c14d15 	stw	r3,1332(sp)
    33e8:	003ff006 	br	33ac <___vfprintf_internal_r+0x1c70>
    33ec:	d8800717 	ldw	r2,28(sp)
    33f0:	14bf8b2e 	bgeu	r2,r18,3220 <___vfprintf_internal_r+0x1ae4>
    33f4:	9007883a 	mov	r3,r18
    33f8:	01000c04 	movi	r4,48
    33fc:	11000005 	stb	r4,0(r2)
    3400:	10800044 	addi	r2,r2,1
    3404:	d8800715 	stw	r2,28(sp)
    3408:	18bffc1e 	bne	r3,r2,33fc <___vfprintf_internal_r+0x1cc0>
    340c:	003f8406 	br	3220 <___vfprintf_internal_r+0x1ae4>
    3410:	d8814117 	ldw	r2,1284(sp)
    3414:	10c00007 	ldb	r3,0(r2)
    3418:	00800c04 	movi	r2,48
    341c:	18805b26 	beq	r3,r2,358c <___vfprintf_internal_r+0x1e50>
    3420:	d9000517 	ldw	r4,20(sp)
    3424:	9125883a 	add	r18,r18,r4
    3428:	003f7506 	br	3200 <___vfprintf_internal_r+0x1ac4>
    342c:	d9014c17 	ldw	r4,1328(sp)
    3430:	2080004c 	andi	r2,r4,1
    3434:	1005003a 	cmpeq	r2,r2,zero
    3438:	103f6a26 	beq	r2,zero,31e4 <___vfprintf_internal_r+0x1aa8>
    343c:	d8800717 	ldw	r2,28(sp)
    3440:	003f7706 	br	3220 <___vfprintf_internal_r+0x1ae4>
    3444:	d9c14515 	stw	r7,1300(sp)
    3448:	38004d16 	blt	r7,zero,3580 <___vfprintf_internal_r+0x1e44>
    344c:	dc814715 	stw	r18,1308(sp)
    3450:	d8014615 	stw	zero,1304(sp)
    3454:	003b5b06 	br	21c4 <___vfprintf_internal_r+0xa88>
    3458:	d9014f17 	ldw	r4,1340(sp)
    345c:	d8800504 	addi	r2,sp,20
    3460:	d8800115 	stw	r2,4(sp)
    3464:	d8c00604 	addi	r3,sp,24
    3468:	d8800704 	addi	r2,sp,28
    346c:	800b883a 	mov	r5,r16
    3470:	880d883a 	mov	r6,r17
    3474:	01c000c4 	movi	r7,3
    3478:	d8c00215 	stw	r3,8(sp)
    347c:	d8800315 	stw	r2,12(sp)
    3480:	dcc00015 	stw	r19,0(sp)
    3484:	9829883a 	mov	r20,r19
    3488:	00039a40 	call	39a4 <_dtoa_r>
    348c:	d8814115 	stw	r2,1284(sp)
    3490:	003f5106 	br	31d8 <___vfprintf_internal_r+0x1a9c>
    3494:	d8c14217 	ldw	r3,1288(sp)
    3498:	d9014317 	ldw	r4,1292(sp)
    349c:	07000b44 	movi	fp,45
    34a0:	1821883a 	mov	r16,r3
    34a4:	2460003c 	xorhi	r17,r4,32768
    34a8:	003f3106 	br	3170 <___vfprintf_internal_r+0x1a34>
    34ac:	9d000044 	addi	r20,r19,1
    34b0:	003f3906 	br	3198 <___vfprintf_internal_r+0x1a5c>
    34b4:	983f251e 	bne	r19,zero,314c <___vfprintf_internal_r+0x1a10>
    34b8:	04c00044 	movi	r19,1
    34bc:	003f2306 	br	314c <___vfprintf_internal_r+0x1a10>
    34c0:	04c00184 	movi	r19,6
    34c4:	003f2106 	br	314c <___vfprintf_internal_r+0x1a10>
    34c8:	d8014515 	stw	zero,1300(sp)
    34cc:	003eee06 	br	3088 <___vfprintf_internal_r+0x194c>
    34d0:	200f883a 	mov	r7,r4
    34d4:	0100370e 	bge	zero,r4,35b4 <___vfprintf_internal_r+0x1e78>
    34d8:	9800031e 	bne	r19,zero,34e8 <___vfprintf_internal_r+0x1dac>
    34dc:	d9814c17 	ldw	r6,1328(sp)
    34e0:	3080004c 	andi	r2,r6,1
    34e4:	103fb726 	beq	r2,zero,33c4 <___vfprintf_internal_r+0x1c88>
    34e8:	20800044 	addi	r2,r4,1
    34ec:	98a7883a 	add	r19,r19,r2
    34f0:	dcc14515 	stw	r19,1300(sp)
    34f4:	980f883a 	mov	r7,r19
    34f8:	983f800e 	bge	r19,zero,32fc <___vfprintf_internal_r+0x1bc0>
    34fc:	003fb306 	br	33cc <___vfprintf_internal_r+0x1c90>
    3500:	d9814d17 	ldw	r6,1332(sp)
    3504:	31bfff84 	addi	r6,r6,-2
    3508:	d9814d15 	stw	r6,1332(sp)
    350c:	003f4c06 	br	3240 <___vfprintf_internal_r+0x1b04>
    3510:	0100180e 	bge	zero,r4,3574 <___vfprintf_internal_r+0x1e38>
    3514:	00800044 	movi	r2,1
    3518:	1485883a 	add	r2,r2,r18
    351c:	d8814515 	stw	r2,1300(sp)
    3520:	100f883a 	mov	r7,r2
    3524:	103f750e 	bge	r2,zero,32fc <___vfprintf_internal_r+0x1bc0>
    3528:	003fa806 	br	33cc <___vfprintf_internal_r+0x1c90>
    352c:	80c00c04 	addi	r3,r16,48
    3530:	00800c04 	movi	r2,48
    3534:	d8c008c5 	stb	r3,35(sp)
    3538:	d9800804 	addi	r6,sp,32
    353c:	d8c00904 	addi	r3,sp,36
    3540:	d8800885 	stb	r2,34(sp)
    3544:	003f6506 	br	32dc <___vfprintf_internal_r+0x1ba0>
    3548:	d9014c17 	ldw	r4,1328(sp)
    354c:	2084703a 	and	r2,r4,r2
    3550:	103f9c26 	beq	r2,zero,33c4 <___vfprintf_internal_r+0x1c88>
    3554:	003f6606 	br	32f0 <___vfprintf_internal_r+0x1bb4>
    3558:	d9800804 	addi	r6,sp,32
    355c:	d8c00884 	addi	r3,sp,34
    3560:	003f5e06 	br	32dc <___vfprintf_internal_r+0x1ba0>
    3564:	00800b44 	movi	r2,45
    3568:	0121c83a 	sub	r16,zero,r4
    356c:	d8800845 	stb	r2,33(sp)
    3570:	003f3d06 	br	3268 <___vfprintf_internal_r+0x1b2c>
    3574:	00800084 	movi	r2,2
    3578:	1105c83a 	sub	r2,r2,r4
    357c:	003fe606 	br	3518 <___vfprintf_internal_r+0x1ddc>
    3580:	d8014515 	stw	zero,1300(sp)
    3584:	dc814715 	stw	r18,1308(sp)
    3588:	003fb106 	br	3450 <___vfprintf_internal_r+0x1d14>
    358c:	000d883a 	mov	r6,zero
    3590:	000f883a 	mov	r7,zero
    3594:	8009883a 	mov	r4,r16
    3598:	880b883a 	mov	r5,r17
    359c:	00097440 	call	9744 <__nedf2>
    35a0:	103f9f26 	beq	r2,zero,3420 <___vfprintf_internal_r+0x1ce4>
    35a4:	00800044 	movi	r2,1
    35a8:	1509c83a 	sub	r4,r2,r20
    35ac:	d9000515 	stw	r4,20(sp)
    35b0:	003f9b06 	br	3420 <___vfprintf_internal_r+0x1ce4>
    35b4:	98000d1e 	bne	r19,zero,35ec <___vfprintf_internal_r+0x1eb0>
    35b8:	d8c14c17 	ldw	r3,1328(sp)
    35bc:	1880004c 	andi	r2,r3,1
    35c0:	10000a1e 	bne	r2,zero,35ec <___vfprintf_internal_r+0x1eb0>
    35c4:	01000044 	movi	r4,1
    35c8:	200f883a 	mov	r7,r4
    35cc:	d9014515 	stw	r4,1300(sp)
    35d0:	003f4a06 	br	32fc <___vfprintf_internal_r+0x1bc0>
    35d4:	3cc00017 	ldw	r19,0(r7)
    35d8:	39c00104 	addi	r7,r7,4
    35dc:	983d0e0e 	bge	r19,zero,2a18 <___vfprintf_internal_r+0x12dc>
    35e0:	b8c00007 	ldb	r3,0(r23)
    35e4:	04ffffc4 	movi	r19,-1
    35e8:	0038d306 	br	1938 <___vfprintf_internal_r+0x1fc>
    35ec:	9cc00084 	addi	r19,r19,2
    35f0:	dcc14515 	stw	r19,1300(sp)
    35f4:	980f883a 	mov	r7,r19
    35f8:	983f400e 	bge	r19,zero,32fc <___vfprintf_internal_r+0x1bc0>
    35fc:	003f7306 	br	33cc <___vfprintf_internal_r+0x1c90>

00003600 <__vfprintf_internal>:
    3600:	00800074 	movhi	r2,1
    3604:	1081c804 	addi	r2,r2,1824
    3608:	2013883a 	mov	r9,r4
    360c:	11000017 	ldw	r4,0(r2)
    3610:	2805883a 	mov	r2,r5
    3614:	300f883a 	mov	r7,r6
    3618:	480b883a 	mov	r5,r9
    361c:	100d883a 	mov	r6,r2
    3620:	000173c1 	jmpi	173c <___vfprintf_internal_r>

00003624 <__swsetup_r>:
    3624:	00800074 	movhi	r2,1
    3628:	1081c804 	addi	r2,r2,1824
    362c:	10c00017 	ldw	r3,0(r2)
    3630:	defffd04 	addi	sp,sp,-12
    3634:	dc400115 	stw	r17,4(sp)
    3638:	dc000015 	stw	r16,0(sp)
    363c:	dfc00215 	stw	ra,8(sp)
    3640:	2023883a 	mov	r17,r4
    3644:	2821883a 	mov	r16,r5
    3648:	18000226 	beq	r3,zero,3654 <__swsetup_r+0x30>
    364c:	18800e17 	ldw	r2,56(r3)
    3650:	10001f26 	beq	r2,zero,36d0 <__swsetup_r+0xac>
    3654:	8100030b 	ldhu	r4,12(r16)
    3658:	2080020c 	andi	r2,r4,8
    365c:	10002826 	beq	r2,zero,3700 <__swsetup_r+0xdc>
    3660:	81400417 	ldw	r5,16(r16)
    3664:	28001d26 	beq	r5,zero,36dc <__swsetup_r+0xb8>
    3668:	2080004c 	andi	r2,r4,1
    366c:	1005003a 	cmpeq	r2,r2,zero
    3670:	10000b26 	beq	r2,zero,36a0 <__swsetup_r+0x7c>
    3674:	2080008c 	andi	r2,r4,2
    3678:	10001226 	beq	r2,zero,36c4 <__swsetup_r+0xa0>
    367c:	0005883a 	mov	r2,zero
    3680:	80800215 	stw	r2,8(r16)
    3684:	28000b26 	beq	r5,zero,36b4 <__swsetup_r+0x90>
    3688:	0005883a 	mov	r2,zero
    368c:	dfc00217 	ldw	ra,8(sp)
    3690:	dc400117 	ldw	r17,4(sp)
    3694:	dc000017 	ldw	r16,0(sp)
    3698:	dec00304 	addi	sp,sp,12
    369c:	f800283a 	ret
    36a0:	80800517 	ldw	r2,20(r16)
    36a4:	80000215 	stw	zero,8(r16)
    36a8:	0085c83a 	sub	r2,zero,r2
    36ac:	80800615 	stw	r2,24(r16)
    36b0:	283ff51e 	bne	r5,zero,3688 <__swsetup_r+0x64>
    36b4:	2080200c 	andi	r2,r4,128
    36b8:	103ff326 	beq	r2,zero,3688 <__swsetup_r+0x64>
    36bc:	00bfffc4 	movi	r2,-1
    36c0:	003ff206 	br	368c <__swsetup_r+0x68>
    36c4:	80800517 	ldw	r2,20(r16)
    36c8:	80800215 	stw	r2,8(r16)
    36cc:	003fed06 	br	3684 <__swsetup_r+0x60>
    36d0:	1809883a 	mov	r4,r3
    36d4:	00051f00 	call	51f0 <__sinit>
    36d8:	003fde06 	br	3654 <__swsetup_r+0x30>
    36dc:	20c0a00c 	andi	r3,r4,640
    36e0:	00808004 	movi	r2,512
    36e4:	18bfe026 	beq	r3,r2,3668 <__swsetup_r+0x44>
    36e8:	8809883a 	mov	r4,r17
    36ec:	800b883a 	mov	r5,r16
    36f0:	0005f9c0 	call	5f9c <__smakebuf_r>
    36f4:	8100030b 	ldhu	r4,12(r16)
    36f8:	81400417 	ldw	r5,16(r16)
    36fc:	003fda06 	br	3668 <__swsetup_r+0x44>
    3700:	2080040c 	andi	r2,r4,16
    3704:	103fed26 	beq	r2,zero,36bc <__swsetup_r+0x98>
    3708:	2080010c 	andi	r2,r4,4
    370c:	10001226 	beq	r2,zero,3758 <__swsetup_r+0x134>
    3710:	81400c17 	ldw	r5,48(r16)
    3714:	28000526 	beq	r5,zero,372c <__swsetup_r+0x108>
    3718:	80801004 	addi	r2,r16,64
    371c:	28800226 	beq	r5,r2,3728 <__swsetup_r+0x104>
    3720:	8809883a 	mov	r4,r17
    3724:	00055a80 	call	55a8 <_free_r>
    3728:	80000c15 	stw	zero,48(r16)
    372c:	8080030b 	ldhu	r2,12(r16)
    3730:	81400417 	ldw	r5,16(r16)
    3734:	80000115 	stw	zero,4(r16)
    3738:	10bff6cc 	andi	r2,r2,65499
    373c:	8080030d 	sth	r2,12(r16)
    3740:	81400015 	stw	r5,0(r16)
    3744:	8080030b 	ldhu	r2,12(r16)
    3748:	10800214 	ori	r2,r2,8
    374c:	113fffcc 	andi	r4,r2,65535
    3750:	8080030d 	sth	r2,12(r16)
    3754:	003fc306 	br	3664 <__swsetup_r+0x40>
    3758:	81400417 	ldw	r5,16(r16)
    375c:	003ff906 	br	3744 <__swsetup_r+0x120>

00003760 <quorem>:
    3760:	28c00417 	ldw	r3,16(r5)
    3764:	20800417 	ldw	r2,16(r4)
    3768:	defff104 	addi	sp,sp,-60
    376c:	dfc00e15 	stw	ra,56(sp)
    3770:	df000d15 	stw	fp,52(sp)
    3774:	ddc00c15 	stw	r23,48(sp)
    3778:	dd800b15 	stw	r22,44(sp)
    377c:	dd400a15 	stw	r21,40(sp)
    3780:	dd000915 	stw	r20,36(sp)
    3784:	dcc00815 	stw	r19,32(sp)
    3788:	dc800715 	stw	r18,28(sp)
    378c:	dc400615 	stw	r17,24(sp)
    3790:	dc000515 	stw	r16,20(sp)
    3794:	d9000315 	stw	r4,12(sp)
    3798:	d9400415 	stw	r5,16(sp)
    379c:	10c07f16 	blt	r2,r3,399c <quorem+0x23c>
    37a0:	1d3fffc4 	addi	r20,r3,-1
    37a4:	d8c00417 	ldw	r3,16(sp)
    37a8:	d9000317 	ldw	r4,12(sp)
    37ac:	a505883a 	add	r2,r20,r20
    37b0:	1085883a 	add	r2,r2,r2
    37b4:	1cc00504 	addi	r19,r3,20
    37b8:	25c00504 	addi	r23,r4,20
    37bc:	98ad883a 	add	r22,r19,r2
    37c0:	15c7883a 	add	r3,r2,r23
    37c4:	b1400017 	ldw	r5,0(r22)
    37c8:	19000017 	ldw	r4,0(r3)
    37cc:	d8c00015 	stw	r3,0(sp)
    37d0:	29400044 	addi	r5,r5,1
    37d4:	d9000215 	stw	r4,8(sp)
    37d8:	0009c700 	call	9c70 <__udivsi3>
    37dc:	1039883a 	mov	fp,r2
    37e0:	10003d1e 	bne	r2,zero,38d8 <quorem+0x178>
    37e4:	d9400417 	ldw	r5,16(sp)
    37e8:	d9000317 	ldw	r4,12(sp)
    37ec:	0006cc80 	call	6cc8 <__mcmp>
    37f0:	10002c16 	blt	r2,zero,38a4 <quorem+0x144>
    37f4:	e7000044 	addi	fp,fp,1
    37f8:	b80f883a 	mov	r7,r23
    37fc:	0011883a 	mov	r8,zero
    3800:	0009883a 	mov	r4,zero
    3804:	99400017 	ldw	r5,0(r19)
    3808:	38c00017 	ldw	r3,0(r7)
    380c:	9cc00104 	addi	r19,r19,4
    3810:	28bfffcc 	andi	r2,r5,65535
    3814:	2085883a 	add	r2,r4,r2
    3818:	11bfffcc 	andi	r6,r2,65535
    381c:	193fffcc 	andi	r4,r3,65535
    3820:	1004d43a 	srli	r2,r2,16
    3824:	280ad43a 	srli	r5,r5,16
    3828:	2189c83a 	sub	r4,r4,r6
    382c:	2209883a 	add	r4,r4,r8
    3830:	1806d43a 	srli	r3,r3,16
    3834:	288b883a 	add	r5,r5,r2
    3838:	200dd43a 	srai	r6,r4,16
    383c:	28bfffcc 	andi	r2,r5,65535
    3840:	1887c83a 	sub	r3,r3,r2
    3844:	1987883a 	add	r3,r3,r6
    3848:	3900000d 	sth	r4,0(r7)
    384c:	38c0008d 	sth	r3,2(r7)
    3850:	2808d43a 	srli	r4,r5,16
    3854:	39c00104 	addi	r7,r7,4
    3858:	1811d43a 	srai	r8,r3,16
    385c:	b4ffe92e 	bgeu	r22,r19,3804 <quorem+0xa4>
    3860:	a505883a 	add	r2,r20,r20
    3864:	1085883a 	add	r2,r2,r2
    3868:	b885883a 	add	r2,r23,r2
    386c:	10c00017 	ldw	r3,0(r2)
    3870:	18000c1e 	bne	r3,zero,38a4 <quorem+0x144>
    3874:	113fff04 	addi	r4,r2,-4
    3878:	b900082e 	bgeu	r23,r4,389c <quorem+0x13c>
    387c:	10bfff17 	ldw	r2,-4(r2)
    3880:	10000326 	beq	r2,zero,3890 <quorem+0x130>
    3884:	00000506 	br	389c <quorem+0x13c>
    3888:	20800017 	ldw	r2,0(r4)
    388c:	1000031e 	bne	r2,zero,389c <quorem+0x13c>
    3890:	213fff04 	addi	r4,r4,-4
    3894:	a53fffc4 	addi	r20,r20,-1
    3898:	b93ffb36 	bltu	r23,r4,3888 <quorem+0x128>
    389c:	d9000317 	ldw	r4,12(sp)
    38a0:	25000415 	stw	r20,16(r4)
    38a4:	e005883a 	mov	r2,fp
    38a8:	dfc00e17 	ldw	ra,56(sp)
    38ac:	df000d17 	ldw	fp,52(sp)
    38b0:	ddc00c17 	ldw	r23,48(sp)
    38b4:	dd800b17 	ldw	r22,44(sp)
    38b8:	dd400a17 	ldw	r21,40(sp)
    38bc:	dd000917 	ldw	r20,36(sp)
    38c0:	dcc00817 	ldw	r19,32(sp)
    38c4:	dc800717 	ldw	r18,28(sp)
    38c8:	dc400617 	ldw	r17,24(sp)
    38cc:	dc000517 	ldw	r16,20(sp)
    38d0:	dec00f04 	addi	sp,sp,60
    38d4:	f800283a 	ret
    38d8:	b823883a 	mov	r17,r23
    38dc:	9825883a 	mov	r18,r19
    38e0:	d8000115 	stw	zero,4(sp)
    38e4:	002b883a 	mov	r21,zero
    38e8:	94000017 	ldw	r16,0(r18)
    38ec:	e009883a 	mov	r4,fp
    38f0:	94800104 	addi	r18,r18,4
    38f4:	817fffcc 	andi	r5,r16,65535
    38f8:	00016340 	call	1634 <__mulsi3>
    38fc:	800ad43a 	srli	r5,r16,16
    3900:	e009883a 	mov	r4,fp
    3904:	a8a1883a 	add	r16,r21,r2
    3908:	00016340 	call	1634 <__mulsi3>
    390c:	89000017 	ldw	r4,0(r17)
    3910:	80ffffcc 	andi	r3,r16,65535
    3914:	8020d43a 	srli	r16,r16,16
    3918:	217fffcc 	andi	r5,r4,65535
    391c:	28cbc83a 	sub	r5,r5,r3
    3920:	d8c00117 	ldw	r3,4(sp)
    3924:	2008d43a 	srli	r4,r4,16
    3928:	1405883a 	add	r2,r2,r16
    392c:	28cb883a 	add	r5,r5,r3
    3930:	280dd43a 	srai	r6,r5,16
    3934:	10ffffcc 	andi	r3,r2,65535
    3938:	20c9c83a 	sub	r4,r4,r3
    393c:	2189883a 	add	r4,r4,r6
    3940:	8900008d 	sth	r4,2(r17)
    3944:	2009d43a 	srai	r4,r4,16
    3948:	8940000d 	sth	r5,0(r17)
    394c:	102ad43a 	srli	r21,r2,16
    3950:	8c400104 	addi	r17,r17,4
    3954:	d9000115 	stw	r4,4(sp)
    3958:	b4bfe32e 	bgeu	r22,r18,38e8 <quorem+0x188>
    395c:	d9000217 	ldw	r4,8(sp)
    3960:	203fa01e 	bne	r4,zero,37e4 <quorem+0x84>
    3964:	d8800017 	ldw	r2,0(sp)
    3968:	10ffff04 	addi	r3,r2,-4
    396c:	b8c0082e 	bgeu	r23,r3,3990 <quorem+0x230>
    3970:	10bfff17 	ldw	r2,-4(r2)
    3974:	10000326 	beq	r2,zero,3984 <quorem+0x224>
    3978:	00000506 	br	3990 <quorem+0x230>
    397c:	18800017 	ldw	r2,0(r3)
    3980:	1000031e 	bne	r2,zero,3990 <quorem+0x230>
    3984:	18ffff04 	addi	r3,r3,-4
    3988:	a53fffc4 	addi	r20,r20,-1
    398c:	b8fffb36 	bltu	r23,r3,397c <quorem+0x21c>
    3990:	d8c00317 	ldw	r3,12(sp)
    3994:	1d000415 	stw	r20,16(r3)
    3998:	003f9206 	br	37e4 <quorem+0x84>
    399c:	0005883a 	mov	r2,zero
    39a0:	003fc106 	br	38a8 <quorem+0x148>

000039a4 <_dtoa_r>:
    39a4:	22001017 	ldw	r8,64(r4)
    39a8:	deffda04 	addi	sp,sp,-152
    39ac:	dd402115 	stw	r21,132(sp)
    39b0:	dd002015 	stw	r20,128(sp)
    39b4:	dc801e15 	stw	r18,120(sp)
    39b8:	dc401d15 	stw	r17,116(sp)
    39bc:	dfc02515 	stw	ra,148(sp)
    39c0:	df002415 	stw	fp,144(sp)
    39c4:	ddc02315 	stw	r23,140(sp)
    39c8:	dd802215 	stw	r22,136(sp)
    39cc:	dcc01f15 	stw	r19,124(sp)
    39d0:	dc001c15 	stw	r16,112(sp)
    39d4:	d9001615 	stw	r4,88(sp)
    39d8:	3023883a 	mov	r17,r6
    39dc:	2829883a 	mov	r20,r5
    39e0:	d9c01715 	stw	r7,92(sp)
    39e4:	dc802817 	ldw	r18,160(sp)
    39e8:	302b883a 	mov	r21,r6
    39ec:	40000a26 	beq	r8,zero,3a18 <_dtoa_r+0x74>
    39f0:	20801117 	ldw	r2,68(r4)
    39f4:	400b883a 	mov	r5,r8
    39f8:	40800115 	stw	r2,4(r8)
    39fc:	20c01117 	ldw	r3,68(r4)
    3a00:	00800044 	movi	r2,1
    3a04:	10c4983a 	sll	r2,r2,r3
    3a08:	40800215 	stw	r2,8(r8)
    3a0c:	0006b6c0 	call	6b6c <_Bfree>
    3a10:	d8c01617 	ldw	r3,88(sp)
    3a14:	18001015 	stw	zero,64(r3)
    3a18:	8800a316 	blt	r17,zero,3ca8 <_dtoa_r+0x304>
    3a1c:	90000015 	stw	zero,0(r18)
    3a20:	a8dffc2c 	andhi	r3,r21,32752
    3a24:	009ffc34 	movhi	r2,32752
    3a28:	18809126 	beq	r3,r2,3c70 <_dtoa_r+0x2cc>
    3a2c:	000d883a 	mov	r6,zero
    3a30:	000f883a 	mov	r7,zero
    3a34:	a009883a 	mov	r4,r20
    3a38:	a80b883a 	mov	r5,r21
    3a3c:	dd001215 	stw	r20,72(sp)
    3a40:	dd401315 	stw	r21,76(sp)
    3a44:	00097440 	call	9744 <__nedf2>
    3a48:	1000171e 	bne	r2,zero,3aa8 <_dtoa_r+0x104>
    3a4c:	d9802717 	ldw	r6,156(sp)
    3a50:	00800044 	movi	r2,1
    3a54:	30800015 	stw	r2,0(r6)
    3a58:	d8802917 	ldw	r2,164(sp)
    3a5c:	10029b26 	beq	r2,zero,44cc <_dtoa_r+0xb28>
    3a60:	d9002917 	ldw	r4,164(sp)
    3a64:	00800074 	movhi	r2,1
    3a68:	10b98244 	addi	r2,r2,-6647
    3a6c:	10ffffc4 	addi	r3,r2,-1
    3a70:	20800015 	stw	r2,0(r4)
    3a74:	1805883a 	mov	r2,r3
    3a78:	dfc02517 	ldw	ra,148(sp)
    3a7c:	df002417 	ldw	fp,144(sp)
    3a80:	ddc02317 	ldw	r23,140(sp)
    3a84:	dd802217 	ldw	r22,136(sp)
    3a88:	dd402117 	ldw	r21,132(sp)
    3a8c:	dd002017 	ldw	r20,128(sp)
    3a90:	dcc01f17 	ldw	r19,124(sp)
    3a94:	dc801e17 	ldw	r18,120(sp)
    3a98:	dc401d17 	ldw	r17,116(sp)
    3a9c:	dc001c17 	ldw	r16,112(sp)
    3aa0:	dec02604 	addi	sp,sp,152
    3aa4:	f800283a 	ret
    3aa8:	d9001617 	ldw	r4,88(sp)
    3aac:	d9401217 	ldw	r5,72(sp)
    3ab0:	d8800104 	addi	r2,sp,4
    3ab4:	a80d883a 	mov	r6,r21
    3ab8:	d9c00204 	addi	r7,sp,8
    3abc:	d8800015 	stw	r2,0(sp)
    3ac0:	00071a80 	call	71a8 <__d2b>
    3ac4:	d8800715 	stw	r2,28(sp)
    3ac8:	a804d53a 	srli	r2,r21,20
    3acc:	1101ffcc 	andi	r4,r2,2047
    3ad0:	20008626 	beq	r4,zero,3cec <_dtoa_r+0x348>
    3ad4:	d8c01217 	ldw	r3,72(sp)
    3ad8:	00800434 	movhi	r2,16
    3adc:	10bfffc4 	addi	r2,r2,-1
    3ae0:	ddc00117 	ldw	r23,4(sp)
    3ae4:	a884703a 	and	r2,r21,r2
    3ae8:	1811883a 	mov	r8,r3
    3aec:	124ffc34 	orhi	r9,r2,16368
    3af0:	25bf0044 	addi	r22,r4,-1023
    3af4:	d8000815 	stw	zero,32(sp)
    3af8:	0005883a 	mov	r2,zero
    3afc:	00cffe34 	movhi	r3,16376
    3b00:	480b883a 	mov	r5,r9
    3b04:	4009883a 	mov	r4,r8
    3b08:	180f883a 	mov	r7,r3
    3b0c:	100d883a 	mov	r6,r2
    3b10:	00007a00 	call	7a0 <__subdf3>
    3b14:	0218dbf4 	movhi	r8,25455
    3b18:	4210d844 	addi	r8,r8,17249
    3b1c:	024ff4f4 	movhi	r9,16339
    3b20:	4a61e9c4 	addi	r9,r9,-30809
    3b24:	480f883a 	mov	r7,r9
    3b28:	400d883a 	mov	r6,r8
    3b2c:	180b883a 	mov	r5,r3
    3b30:	1009883a 	mov	r4,r2
    3b34:	00008940 	call	894 <__muldf3>
    3b38:	0222d874 	movhi	r8,35681
    3b3c:	42322cc4 	addi	r8,r8,-14157
    3b40:	024ff1f4 	movhi	r9,16327
    3b44:	4a628a04 	addi	r9,r9,-30168
    3b48:	480f883a 	mov	r7,r9
    3b4c:	400d883a 	mov	r6,r8
    3b50:	180b883a 	mov	r5,r3
    3b54:	1009883a 	mov	r4,r2
    3b58:	00008200 	call	820 <__adddf3>
    3b5c:	b009883a 	mov	r4,r22
    3b60:	1021883a 	mov	r16,r2
    3b64:	1823883a 	mov	r17,r3
    3b68:	00099640 	call	9964 <__floatsidf>
    3b6c:	021427f4 	movhi	r8,20639
    3b70:	421e7ec4 	addi	r8,r8,31227
    3b74:	024ff4f4 	movhi	r9,16339
    3b78:	4a5104c4 	addi	r9,r9,17427
    3b7c:	480f883a 	mov	r7,r9
    3b80:	400d883a 	mov	r6,r8
    3b84:	180b883a 	mov	r5,r3
    3b88:	1009883a 	mov	r4,r2
    3b8c:	00008940 	call	894 <__muldf3>
    3b90:	180f883a 	mov	r7,r3
    3b94:	880b883a 	mov	r5,r17
    3b98:	100d883a 	mov	r6,r2
    3b9c:	8009883a 	mov	r4,r16
    3ba0:	00008200 	call	820 <__adddf3>
    3ba4:	1009883a 	mov	r4,r2
    3ba8:	180b883a 	mov	r5,r3
    3bac:	1021883a 	mov	r16,r2
    3bb0:	1823883a 	mov	r17,r3
    3bb4:	0009a5c0 	call	9a5c <__fixdfsi>
    3bb8:	000d883a 	mov	r6,zero
    3bbc:	000f883a 	mov	r7,zero
    3bc0:	8009883a 	mov	r4,r16
    3bc4:	880b883a 	mov	r5,r17
    3bc8:	d8800d15 	stw	r2,52(sp)
    3bcc:	00098dc0 	call	98dc <__ltdf2>
    3bd0:	10031716 	blt	r2,zero,4830 <_dtoa_r+0xe8c>
    3bd4:	d8c00d17 	ldw	r3,52(sp)
    3bd8:	00800584 	movi	r2,22
    3bdc:	10c1482e 	bgeu	r2,r3,4100 <_dtoa_r+0x75c>
    3be0:	01000044 	movi	r4,1
    3be4:	d9000c15 	stw	r4,48(sp)
    3be8:	bd85c83a 	sub	r2,r23,r22
    3bec:	11bfffc4 	addi	r6,r2,-1
    3bf0:	30030b16 	blt	r6,zero,4820 <_dtoa_r+0xe7c>
    3bf4:	d9800a15 	stw	r6,40(sp)
    3bf8:	d8001115 	stw	zero,68(sp)
    3bfc:	d8c00d17 	ldw	r3,52(sp)
    3c00:	1802ff16 	blt	r3,zero,4800 <_dtoa_r+0xe5c>
    3c04:	d9000a17 	ldw	r4,40(sp)
    3c08:	d8c00915 	stw	r3,36(sp)
    3c0c:	d8001015 	stw	zero,64(sp)
    3c10:	20c9883a 	add	r4,r4,r3
    3c14:	d9000a15 	stw	r4,40(sp)
    3c18:	d9001717 	ldw	r4,92(sp)
    3c1c:	00800244 	movi	r2,9
    3c20:	11004636 	bltu	r2,r4,3d3c <_dtoa_r+0x398>
    3c24:	00800144 	movi	r2,5
    3c28:	11020416 	blt	r2,r4,443c <_dtoa_r+0xa98>
    3c2c:	04400044 	movi	r17,1
    3c30:	d8c01717 	ldw	r3,92(sp)
    3c34:	00800144 	movi	r2,5
    3c38:	10c1ed36 	bltu	r2,r3,43f0 <_dtoa_r+0xa4c>
    3c3c:	18c5883a 	add	r2,r3,r3
    3c40:	1085883a 	add	r2,r2,r2
    3c44:	00c00034 	movhi	r3,0
    3c48:	18cf1604 	addi	r3,r3,15448
    3c4c:	10c5883a 	add	r2,r2,r3
    3c50:	11000017 	ldw	r4,0(r2)
    3c54:	2000683a 	jmp	r4
    3c58:	00003d44 	movi	zero,245
    3c5c:	00003d44 	movi	zero,245
    3c60:	00004744 	movi	zero,285
    3c64:	0000471c 	xori	zero,zero,284
    3c68:	00004760 	cmpeqi	zero,zero,285
    3c6c:	0000476c 	andhi	zero,zero,285
    3c70:	d9002717 	ldw	r4,156(sp)
    3c74:	0089c3c4 	movi	r2,9999
    3c78:	20800015 	stw	r2,0(r4)
    3c7c:	a0001026 	beq	r20,zero,3cc0 <_dtoa_r+0x31c>
    3c80:	00c00074 	movhi	r3,1
    3c84:	18f98e04 	addi	r3,r3,-6600
    3c88:	d9802917 	ldw	r6,164(sp)
    3c8c:	303f7926 	beq	r6,zero,3a74 <_dtoa_r+0xd0>
    3c90:	188000c7 	ldb	r2,3(r3)
    3c94:	190000c4 	addi	r4,r3,3
    3c98:	1000101e 	bne	r2,zero,3cdc <_dtoa_r+0x338>
    3c9c:	d8802917 	ldw	r2,164(sp)
    3ca0:	11000015 	stw	r4,0(r2)
    3ca4:	003f7306 	br	3a74 <_dtoa_r+0xd0>
    3ca8:	00a00034 	movhi	r2,32768
    3cac:	10bfffc4 	addi	r2,r2,-1
    3cb0:	00c00044 	movi	r3,1
    3cb4:	88aa703a 	and	r21,r17,r2
    3cb8:	90c00015 	stw	r3,0(r18)
    3cbc:	003f5806 	br	3a20 <_dtoa_r+0x7c>
    3cc0:	00800434 	movhi	r2,16
    3cc4:	10bfffc4 	addi	r2,r2,-1
    3cc8:	a884703a 	and	r2,r21,r2
    3ccc:	103fec1e 	bne	r2,zero,3c80 <_dtoa_r+0x2dc>
    3cd0:	00c00074 	movhi	r3,1
    3cd4:	18f98b04 	addi	r3,r3,-6612
    3cd8:	003feb06 	br	3c88 <_dtoa_r+0x2e4>
    3cdc:	d8802917 	ldw	r2,164(sp)
    3ce0:	19000204 	addi	r4,r3,8
    3ce4:	11000015 	stw	r4,0(r2)
    3ce8:	003f6206 	br	3a74 <_dtoa_r+0xd0>
    3cec:	ddc00117 	ldw	r23,4(sp)
    3cf0:	d8800217 	ldw	r2,8(sp)
    3cf4:	01000804 	movi	r4,32
    3cf8:	b8c10c84 	addi	r3,r23,1074
    3cfc:	18a3883a 	add	r17,r3,r2
    3d00:	2441b80e 	bge	r4,r17,43e4 <_dtoa_r+0xa40>
    3d04:	00c01004 	movi	r3,64
    3d08:	1c47c83a 	sub	r3,r3,r17
    3d0c:	88bff804 	addi	r2,r17,-32
    3d10:	a8c6983a 	sll	r3,r21,r3
    3d14:	a084d83a 	srl	r2,r20,r2
    3d18:	1888b03a 	or	r4,r3,r2
    3d1c:	0000eb00 	call	eb0 <__floatunsidf>
    3d20:	1011883a 	mov	r8,r2
    3d24:	00bf8434 	movhi	r2,65040
    3d28:	01000044 	movi	r4,1
    3d2c:	10d3883a 	add	r9,r2,r3
    3d30:	8dbef344 	addi	r22,r17,-1075
    3d34:	d9000815 	stw	r4,32(sp)
    3d38:	003f6f06 	br	3af8 <_dtoa_r+0x154>
    3d3c:	d8001715 	stw	zero,92(sp)
    3d40:	04400044 	movi	r17,1
    3d44:	00bfffc4 	movi	r2,-1
    3d48:	00c00044 	movi	r3,1
    3d4c:	d8800e15 	stw	r2,56(sp)
    3d50:	d8002615 	stw	zero,152(sp)
    3d54:	d8800f15 	stw	r2,60(sp)
    3d58:	d8c00b15 	stw	r3,44(sp)
    3d5c:	1021883a 	mov	r16,r2
    3d60:	d8801617 	ldw	r2,88(sp)
    3d64:	10001115 	stw	zero,68(r2)
    3d68:	d8801617 	ldw	r2,88(sp)
    3d6c:	11401117 	ldw	r5,68(r2)
    3d70:	1009883a 	mov	r4,r2
    3d74:	00070ec0 	call	70ec <_Balloc>
    3d78:	d8c01617 	ldw	r3,88(sp)
    3d7c:	d8800515 	stw	r2,20(sp)
    3d80:	18801015 	stw	r2,64(r3)
    3d84:	00800384 	movi	r2,14
    3d88:	14006836 	bltu	r2,r16,3f2c <_dtoa_r+0x588>
    3d8c:	8805003a 	cmpeq	r2,r17,zero
    3d90:	1000661e 	bne	r2,zero,3f2c <_dtoa_r+0x588>
    3d94:	d9000d17 	ldw	r4,52(sp)
    3d98:	0102300e 	bge	zero,r4,465c <_dtoa_r+0xcb8>
    3d9c:	208003cc 	andi	r2,r4,15
    3da0:	100490fa 	slli	r2,r2,3
    3da4:	2025d13a 	srai	r18,r4,4
    3da8:	00c00074 	movhi	r3,1
    3dac:	18f9a004 	addi	r3,r3,-6528
    3db0:	10c5883a 	add	r2,r2,r3
    3db4:	90c0040c 	andi	r3,r18,16
    3db8:	14000017 	ldw	r16,0(r2)
    3dbc:	14400117 	ldw	r17,4(r2)
    3dc0:	18036a1e 	bne	r3,zero,4b6c <_dtoa_r+0x11c8>
    3dc4:	05800084 	movi	r22,2
    3dc8:	90001026 	beq	r18,zero,3e0c <_dtoa_r+0x468>
    3dcc:	04c00074 	movhi	r19,1
    3dd0:	9cf9d204 	addi	r19,r19,-6328
    3dd4:	9080004c 	andi	r2,r18,1
    3dd8:	1005003a 	cmpeq	r2,r2,zero
    3ddc:	1000081e 	bne	r2,zero,3e00 <_dtoa_r+0x45c>
    3de0:	99800017 	ldw	r6,0(r19)
    3de4:	99c00117 	ldw	r7,4(r19)
    3de8:	880b883a 	mov	r5,r17
    3dec:	8009883a 	mov	r4,r16
    3df0:	00008940 	call	894 <__muldf3>
    3df4:	1021883a 	mov	r16,r2
    3df8:	b5800044 	addi	r22,r22,1
    3dfc:	1823883a 	mov	r17,r3
    3e00:	9025d07a 	srai	r18,r18,1
    3e04:	9cc00204 	addi	r19,r19,8
    3e08:	903ff21e 	bne	r18,zero,3dd4 <_dtoa_r+0x430>
    3e0c:	a80b883a 	mov	r5,r21
    3e10:	a009883a 	mov	r4,r20
    3e14:	880f883a 	mov	r7,r17
    3e18:	800d883a 	mov	r6,r16
    3e1c:	0000c580 	call	c58 <__divdf3>
    3e20:	1029883a 	mov	r20,r2
    3e24:	182b883a 	mov	r21,r3
    3e28:	d8c00c17 	ldw	r3,48(sp)
    3e2c:	1805003a 	cmpeq	r2,r3,zero
    3e30:	1000081e 	bne	r2,zero,3e54 <_dtoa_r+0x4b0>
    3e34:	0005883a 	mov	r2,zero
    3e38:	00cffc34 	movhi	r3,16368
    3e3c:	180f883a 	mov	r7,r3
    3e40:	a009883a 	mov	r4,r20
    3e44:	a80b883a 	mov	r5,r21
    3e48:	100d883a 	mov	r6,r2
    3e4c:	00098dc0 	call	98dc <__ltdf2>
    3e50:	1003fe16 	blt	r2,zero,4e4c <_dtoa_r+0x14a8>
    3e54:	b009883a 	mov	r4,r22
    3e58:	00099640 	call	9964 <__floatsidf>
    3e5c:	180b883a 	mov	r5,r3
    3e60:	1009883a 	mov	r4,r2
    3e64:	a00d883a 	mov	r6,r20
    3e68:	a80f883a 	mov	r7,r21
    3e6c:	00008940 	call	894 <__muldf3>
    3e70:	0011883a 	mov	r8,zero
    3e74:	02500734 	movhi	r9,16412
    3e78:	1009883a 	mov	r4,r2
    3e7c:	180b883a 	mov	r5,r3
    3e80:	480f883a 	mov	r7,r9
    3e84:	400d883a 	mov	r6,r8
    3e88:	00008200 	call	820 <__adddf3>
    3e8c:	d9000f17 	ldw	r4,60(sp)
    3e90:	102d883a 	mov	r22,r2
    3e94:	00bf3034 	movhi	r2,64704
    3e98:	18b9883a 	add	fp,r3,r2
    3e9c:	e02f883a 	mov	r23,fp
    3ea0:	20028f1e 	bne	r4,zero,48e0 <_dtoa_r+0xf3c>
    3ea4:	0005883a 	mov	r2,zero
    3ea8:	00d00534 	movhi	r3,16404
    3eac:	a009883a 	mov	r4,r20
    3eb0:	a80b883a 	mov	r5,r21
    3eb4:	180f883a 	mov	r7,r3
    3eb8:	100d883a 	mov	r6,r2
    3ebc:	00007a00 	call	7a0 <__subdf3>
    3ec0:	1009883a 	mov	r4,r2
    3ec4:	e00f883a 	mov	r7,fp
    3ec8:	180b883a 	mov	r5,r3
    3ecc:	b00d883a 	mov	r6,r22
    3ed0:	1025883a 	mov	r18,r2
    3ed4:	1827883a 	mov	r19,r3
    3ed8:	00097cc0 	call	97cc <__gtdf2>
    3edc:	00834f16 	blt	zero,r2,4c1c <_dtoa_r+0x1278>
    3ee0:	e0e0003c 	xorhi	r3,fp,32768
    3ee4:	9009883a 	mov	r4,r18
    3ee8:	980b883a 	mov	r5,r19
    3eec:	180f883a 	mov	r7,r3
    3ef0:	b00d883a 	mov	r6,r22
    3ef4:	00098dc0 	call	98dc <__ltdf2>
    3ef8:	1000080e 	bge	r2,zero,3f1c <_dtoa_r+0x578>
    3efc:	0027883a 	mov	r19,zero
    3f00:	0025883a 	mov	r18,zero
    3f04:	d8802617 	ldw	r2,152(sp)
    3f08:	df000517 	ldw	fp,20(sp)
    3f0c:	d8000615 	stw	zero,24(sp)
    3f10:	0084303a 	nor	r2,zero,r2
    3f14:	d8800d15 	stw	r2,52(sp)
    3f18:	00019b06 	br	4588 <_dtoa_r+0xbe4>
    3f1c:	d9801217 	ldw	r6,72(sp)
    3f20:	d8801317 	ldw	r2,76(sp)
    3f24:	3029883a 	mov	r20,r6
    3f28:	102b883a 	mov	r21,r2
    3f2c:	d8c00217 	ldw	r3,8(sp)
    3f30:	18008516 	blt	r3,zero,4148 <_dtoa_r+0x7a4>
    3f34:	d9000d17 	ldw	r4,52(sp)
    3f38:	00800384 	movi	r2,14
    3f3c:	11008216 	blt	r2,r4,4148 <_dtoa_r+0x7a4>
    3f40:	200490fa 	slli	r2,r4,3
    3f44:	d9802617 	ldw	r6,152(sp)
    3f48:	00c00074 	movhi	r3,1
    3f4c:	18f9a004 	addi	r3,r3,-6528
    3f50:	10c5883a 	add	r2,r2,r3
    3f54:	14800017 	ldw	r18,0(r2)
    3f58:	14c00117 	ldw	r19,4(r2)
    3f5c:	30031e16 	blt	r6,zero,4bd8 <_dtoa_r+0x1234>
    3f60:	d9000517 	ldw	r4,20(sp)
    3f64:	d8c00f17 	ldw	r3,60(sp)
    3f68:	a823883a 	mov	r17,r21
    3f6c:	a021883a 	mov	r16,r20
    3f70:	192b883a 	add	r21,r3,r4
    3f74:	2039883a 	mov	fp,r4
    3f78:	00000f06 	br	3fb8 <_dtoa_r+0x614>
    3f7c:	0005883a 	mov	r2,zero
    3f80:	00d00934 	movhi	r3,16420
    3f84:	5009883a 	mov	r4,r10
    3f88:	580b883a 	mov	r5,r11
    3f8c:	180f883a 	mov	r7,r3
    3f90:	100d883a 	mov	r6,r2
    3f94:	00008940 	call	894 <__muldf3>
    3f98:	180b883a 	mov	r5,r3
    3f9c:	000d883a 	mov	r6,zero
    3fa0:	000f883a 	mov	r7,zero
    3fa4:	1009883a 	mov	r4,r2
    3fa8:	1021883a 	mov	r16,r2
    3fac:	1823883a 	mov	r17,r3
    3fb0:	00097440 	call	9744 <__nedf2>
    3fb4:	10004526 	beq	r2,zero,40cc <_dtoa_r+0x728>
    3fb8:	900d883a 	mov	r6,r18
    3fbc:	980f883a 	mov	r7,r19
    3fc0:	8009883a 	mov	r4,r16
    3fc4:	880b883a 	mov	r5,r17
    3fc8:	0000c580 	call	c58 <__divdf3>
    3fcc:	180b883a 	mov	r5,r3
    3fd0:	1009883a 	mov	r4,r2
    3fd4:	0009a5c0 	call	9a5c <__fixdfsi>
    3fd8:	1009883a 	mov	r4,r2
    3fdc:	1029883a 	mov	r20,r2
    3fe0:	00099640 	call	9964 <__floatsidf>
    3fe4:	180f883a 	mov	r7,r3
    3fe8:	9009883a 	mov	r4,r18
    3fec:	980b883a 	mov	r5,r19
    3ff0:	100d883a 	mov	r6,r2
    3ff4:	00008940 	call	894 <__muldf3>
    3ff8:	180f883a 	mov	r7,r3
    3ffc:	880b883a 	mov	r5,r17
    4000:	8009883a 	mov	r4,r16
    4004:	100d883a 	mov	r6,r2
    4008:	00007a00 	call	7a0 <__subdf3>
    400c:	1015883a 	mov	r10,r2
    4010:	a0800c04 	addi	r2,r20,48
    4014:	e0800005 	stb	r2,0(fp)
    4018:	e7000044 	addi	fp,fp,1
    401c:	1817883a 	mov	r11,r3
    4020:	e57fd61e 	bne	fp,r21,3f7c <_dtoa_r+0x5d8>
    4024:	500d883a 	mov	r6,r10
    4028:	180f883a 	mov	r7,r3
    402c:	5009883a 	mov	r4,r10
    4030:	180b883a 	mov	r5,r3
    4034:	00008200 	call	820 <__adddf3>
    4038:	100d883a 	mov	r6,r2
    403c:	9009883a 	mov	r4,r18
    4040:	980b883a 	mov	r5,r19
    4044:	180f883a 	mov	r7,r3
    4048:	1021883a 	mov	r16,r2
    404c:	1823883a 	mov	r17,r3
    4050:	00098dc0 	call	98dc <__ltdf2>
    4054:	10000816 	blt	r2,zero,4078 <_dtoa_r+0x6d4>
    4058:	980b883a 	mov	r5,r19
    405c:	800d883a 	mov	r6,r16
    4060:	880f883a 	mov	r7,r17
    4064:	9009883a 	mov	r4,r18
    4068:	00096bc0 	call	96bc <__eqdf2>
    406c:	1000171e 	bne	r2,zero,40cc <_dtoa_r+0x728>
    4070:	a080004c 	andi	r2,r20,1
    4074:	10001526 	beq	r2,zero,40cc <_dtoa_r+0x728>
    4078:	d8800d17 	ldw	r2,52(sp)
    407c:	d8800415 	stw	r2,16(sp)
    4080:	e009883a 	mov	r4,fp
    4084:	213fffc4 	addi	r4,r4,-1
    4088:	20c00007 	ldb	r3,0(r4)
    408c:	00800e44 	movi	r2,57
    4090:	1880081e 	bne	r3,r2,40b4 <_dtoa_r+0x710>
    4094:	d8800517 	ldw	r2,20(sp)
    4098:	113ffa1e 	bne	r2,r4,4084 <_dtoa_r+0x6e0>
    409c:	d8c00417 	ldw	r3,16(sp)
    40a0:	d9800517 	ldw	r6,20(sp)
    40a4:	00800c04 	movi	r2,48
    40a8:	18c00044 	addi	r3,r3,1
    40ac:	d8c00415 	stw	r3,16(sp)
    40b0:	30800005 	stb	r2,0(r6)
    40b4:	20800003 	ldbu	r2,0(r4)
    40b8:	d8c00417 	ldw	r3,16(sp)
    40bc:	27000044 	addi	fp,r4,1
    40c0:	10800044 	addi	r2,r2,1
    40c4:	d8c00d15 	stw	r3,52(sp)
    40c8:	20800005 	stb	r2,0(r4)
    40cc:	d9001617 	ldw	r4,88(sp)
    40d0:	d9400717 	ldw	r5,28(sp)
    40d4:	0006b6c0 	call	6b6c <_Bfree>
    40d8:	e0000005 	stb	zero,0(fp)
    40dc:	d9800d17 	ldw	r6,52(sp)
    40e0:	d8c02717 	ldw	r3,156(sp)
    40e4:	d9002917 	ldw	r4,164(sp)
    40e8:	30800044 	addi	r2,r6,1
    40ec:	18800015 	stw	r2,0(r3)
    40f0:	20029c26 	beq	r4,zero,4b64 <_dtoa_r+0x11c0>
    40f4:	d8c00517 	ldw	r3,20(sp)
    40f8:	27000015 	stw	fp,0(r4)
    40fc:	003e5d06 	br	3a74 <_dtoa_r+0xd0>
    4100:	d9800d17 	ldw	r6,52(sp)
    4104:	00c00074 	movhi	r3,1
    4108:	18f9a004 	addi	r3,r3,-6528
    410c:	d9001217 	ldw	r4,72(sp)
    4110:	300490fa 	slli	r2,r6,3
    4114:	d9401317 	ldw	r5,76(sp)
    4118:	10c5883a 	add	r2,r2,r3
    411c:	12000017 	ldw	r8,0(r2)
    4120:	12400117 	ldw	r9,4(r2)
    4124:	400d883a 	mov	r6,r8
    4128:	480f883a 	mov	r7,r9
    412c:	00098dc0 	call	98dc <__ltdf2>
    4130:	1000030e 	bge	r2,zero,4140 <_dtoa_r+0x79c>
    4134:	d8800d17 	ldw	r2,52(sp)
    4138:	10bfffc4 	addi	r2,r2,-1
    413c:	d8800d15 	stw	r2,52(sp)
    4140:	d8000c15 	stw	zero,48(sp)
    4144:	003ea806 	br	3be8 <_dtoa_r+0x244>
    4148:	d9000b17 	ldw	r4,44(sp)
    414c:	202cc03a 	cmpne	r22,r4,zero
    4150:	b000c71e 	bne	r22,zero,4470 <_dtoa_r+0xacc>
    4154:	dc001117 	ldw	r16,68(sp)
    4158:	dc801017 	ldw	r18,64(sp)
    415c:	0027883a 	mov	r19,zero
    4160:	04000b0e 	bge	zero,r16,4190 <_dtoa_r+0x7ec>
    4164:	d8c00a17 	ldw	r3,40(sp)
    4168:	00c0090e 	bge	zero,r3,4190 <_dtoa_r+0x7ec>
    416c:	8005883a 	mov	r2,r16
    4170:	1c011316 	blt	r3,r16,45c0 <_dtoa_r+0xc1c>
    4174:	d9000a17 	ldw	r4,40(sp)
    4178:	d9801117 	ldw	r6,68(sp)
    417c:	80a1c83a 	sub	r16,r16,r2
    4180:	2089c83a 	sub	r4,r4,r2
    4184:	308dc83a 	sub	r6,r6,r2
    4188:	d9000a15 	stw	r4,40(sp)
    418c:	d9801115 	stw	r6,68(sp)
    4190:	d8801017 	ldw	r2,64(sp)
    4194:	0080150e 	bge	zero,r2,41ec <_dtoa_r+0x848>
    4198:	d8c00b17 	ldw	r3,44(sp)
    419c:	1805003a 	cmpeq	r2,r3,zero
    41a0:	1001c91e 	bne	r2,zero,48c8 <_dtoa_r+0xf24>
    41a4:	04800e0e 	bge	zero,r18,41e0 <_dtoa_r+0x83c>
    41a8:	d9001617 	ldw	r4,88(sp)
    41ac:	980b883a 	mov	r5,r19
    41b0:	900d883a 	mov	r6,r18
    41b4:	00079b80 	call	79b8 <__pow5mult>
    41b8:	d9001617 	ldw	r4,88(sp)
    41bc:	d9800717 	ldw	r6,28(sp)
    41c0:	100b883a 	mov	r5,r2
    41c4:	1027883a 	mov	r19,r2
    41c8:	00075fc0 	call	75fc <__multiply>
    41cc:	d9001617 	ldw	r4,88(sp)
    41d0:	d9400717 	ldw	r5,28(sp)
    41d4:	1023883a 	mov	r17,r2
    41d8:	0006b6c0 	call	6b6c <_Bfree>
    41dc:	dc400715 	stw	r17,28(sp)
    41e0:	d9001017 	ldw	r4,64(sp)
    41e4:	248dc83a 	sub	r6,r4,r18
    41e8:	30010e1e 	bne	r6,zero,4624 <_dtoa_r+0xc80>
    41ec:	d9001617 	ldw	r4,88(sp)
    41f0:	04400044 	movi	r17,1
    41f4:	880b883a 	mov	r5,r17
    41f8:	00078500 	call	7850 <__i2b>
    41fc:	d9800917 	ldw	r6,36(sp)
    4200:	1025883a 	mov	r18,r2
    4204:	0180040e 	bge	zero,r6,4218 <_dtoa_r+0x874>
    4208:	d9001617 	ldw	r4,88(sp)
    420c:	100b883a 	mov	r5,r2
    4210:	00079b80 	call	79b8 <__pow5mult>
    4214:	1025883a 	mov	r18,r2
    4218:	d8801717 	ldw	r2,92(sp)
    421c:	8880f30e 	bge	r17,r2,45ec <_dtoa_r+0xc48>
    4220:	0023883a 	mov	r17,zero
    4224:	d9800917 	ldw	r6,36(sp)
    4228:	30019e1e 	bne	r6,zero,48a4 <_dtoa_r+0xf00>
    422c:	00c00044 	movi	r3,1
    4230:	d9000a17 	ldw	r4,40(sp)
    4234:	20c5883a 	add	r2,r4,r3
    4238:	10c007cc 	andi	r3,r2,31
    423c:	1800841e 	bne	r3,zero,4450 <_dtoa_r+0xaac>
    4240:	00800704 	movi	r2,28
    4244:	d9000a17 	ldw	r4,40(sp)
    4248:	d9801117 	ldw	r6,68(sp)
    424c:	80a1883a 	add	r16,r16,r2
    4250:	2089883a 	add	r4,r4,r2
    4254:	308d883a 	add	r6,r6,r2
    4258:	d9000a15 	stw	r4,40(sp)
    425c:	d9801115 	stw	r6,68(sp)
    4260:	d8801117 	ldw	r2,68(sp)
    4264:	0080050e 	bge	zero,r2,427c <_dtoa_r+0x8d8>
    4268:	d9400717 	ldw	r5,28(sp)
    426c:	d9001617 	ldw	r4,88(sp)
    4270:	100d883a 	mov	r6,r2
    4274:	00074b00 	call	74b0 <__lshift>
    4278:	d8800715 	stw	r2,28(sp)
    427c:	d8c00a17 	ldw	r3,40(sp)
    4280:	00c0050e 	bge	zero,r3,4298 <_dtoa_r+0x8f4>
    4284:	d9001617 	ldw	r4,88(sp)
    4288:	900b883a 	mov	r5,r18
    428c:	180d883a 	mov	r6,r3
    4290:	00074b00 	call	74b0 <__lshift>
    4294:	1025883a 	mov	r18,r2
    4298:	d9000c17 	ldw	r4,48(sp)
    429c:	2005003a 	cmpeq	r2,r4,zero
    42a0:	10016f26 	beq	r2,zero,4860 <_dtoa_r+0xebc>
    42a4:	d9000f17 	ldw	r4,60(sp)
    42a8:	0102170e 	bge	zero,r4,4b08 <_dtoa_r+0x1164>
    42ac:	d9800b17 	ldw	r6,44(sp)
    42b0:	3005003a 	cmpeq	r2,r6,zero
    42b4:	1000881e 	bne	r2,zero,44d8 <_dtoa_r+0xb34>
    42b8:	0400050e 	bge	zero,r16,42d0 <_dtoa_r+0x92c>
    42bc:	d9001617 	ldw	r4,88(sp)
    42c0:	980b883a 	mov	r5,r19
    42c4:	800d883a 	mov	r6,r16
    42c8:	00074b00 	call	74b0 <__lshift>
    42cc:	1027883a 	mov	r19,r2
    42d0:	8804c03a 	cmpne	r2,r17,zero
    42d4:	1002541e 	bne	r2,zero,4c28 <_dtoa_r+0x1284>
    42d8:	980b883a 	mov	r5,r19
    42dc:	dd800517 	ldw	r22,20(sp)
    42e0:	dcc00615 	stw	r19,24(sp)
    42e4:	a700004c 	andi	fp,r20,1
    42e8:	2827883a 	mov	r19,r5
    42ec:	d9000717 	ldw	r4,28(sp)
    42f0:	900b883a 	mov	r5,r18
    42f4:	00037600 	call	3760 <quorem>
    42f8:	d9000717 	ldw	r4,28(sp)
    42fc:	d9400617 	ldw	r5,24(sp)
    4300:	1023883a 	mov	r17,r2
    4304:	8dc00c04 	addi	r23,r17,48
    4308:	0006cc80 	call	6cc8 <__mcmp>
    430c:	d9001617 	ldw	r4,88(sp)
    4310:	900b883a 	mov	r5,r18
    4314:	980d883a 	mov	r6,r19
    4318:	1029883a 	mov	r20,r2
    431c:	00073240 	call	7324 <__mdiff>
    4320:	102b883a 	mov	r21,r2
    4324:	10800317 	ldw	r2,12(r2)
    4328:	1001281e 	bne	r2,zero,47cc <_dtoa_r+0xe28>
    432c:	d9000717 	ldw	r4,28(sp)
    4330:	a80b883a 	mov	r5,r21
    4334:	0006cc80 	call	6cc8 <__mcmp>
    4338:	d9001617 	ldw	r4,88(sp)
    433c:	1021883a 	mov	r16,r2
    4340:	a80b883a 	mov	r5,r21
    4344:	0006b6c0 	call	6b6c <_Bfree>
    4348:	8000041e 	bne	r16,zero,435c <_dtoa_r+0x9b8>
    434c:	d8801717 	ldw	r2,92(sp)
    4350:	1000021e 	bne	r2,zero,435c <_dtoa_r+0x9b8>
    4354:	e004c03a 	cmpne	r2,fp,zero
    4358:	10011726 	beq	r2,zero,47b8 <_dtoa_r+0xe14>
    435c:	a0010616 	blt	r20,zero,4778 <_dtoa_r+0xdd4>
    4360:	a000041e 	bne	r20,zero,4374 <_dtoa_r+0x9d0>
    4364:	d8c01717 	ldw	r3,92(sp)
    4368:	1800021e 	bne	r3,zero,4374 <_dtoa_r+0x9d0>
    436c:	e004c03a 	cmpne	r2,fp,zero
    4370:	10010126 	beq	r2,zero,4778 <_dtoa_r+0xdd4>
    4374:	04023d16 	blt	zero,r16,4c6c <_dtoa_r+0x12c8>
    4378:	b5c00005 	stb	r23,0(r22)
    437c:	d9800517 	ldw	r6,20(sp)
    4380:	d9000f17 	ldw	r4,60(sp)
    4384:	b5800044 	addi	r22,r22,1
    4388:	3105883a 	add	r2,r6,r4
    438c:	b0806526 	beq	r22,r2,4524 <_dtoa_r+0xb80>
    4390:	d9400717 	ldw	r5,28(sp)
    4394:	d9001617 	ldw	r4,88(sp)
    4398:	01800284 	movi	r6,10
    439c:	000f883a 	mov	r7,zero
    43a0:	000788c0 	call	788c <__multadd>
    43a4:	d8800715 	stw	r2,28(sp)
    43a8:	d8800617 	ldw	r2,24(sp)
    43ac:	14c10c26 	beq	r2,r19,47e0 <_dtoa_r+0xe3c>
    43b0:	d9400617 	ldw	r5,24(sp)
    43b4:	d9001617 	ldw	r4,88(sp)
    43b8:	01800284 	movi	r6,10
    43bc:	000f883a 	mov	r7,zero
    43c0:	000788c0 	call	788c <__multadd>
    43c4:	d9001617 	ldw	r4,88(sp)
    43c8:	980b883a 	mov	r5,r19
    43cc:	01800284 	movi	r6,10
    43d0:	000f883a 	mov	r7,zero
    43d4:	d8800615 	stw	r2,24(sp)
    43d8:	000788c0 	call	788c <__multadd>
    43dc:	1027883a 	mov	r19,r2
    43e0:	003fc206 	br	42ec <_dtoa_r+0x948>
    43e4:	2445c83a 	sub	r2,r4,r17
    43e8:	a088983a 	sll	r4,r20,r2
    43ec:	003e4b06 	br	3d1c <_dtoa_r+0x378>
    43f0:	01bfffc4 	movi	r6,-1
    43f4:	00800044 	movi	r2,1
    43f8:	d9800e15 	stw	r6,56(sp)
    43fc:	d9800f15 	stw	r6,60(sp)
    4400:	d8800b15 	stw	r2,44(sp)
    4404:	d8c01617 	ldw	r3,88(sp)
    4408:	008005c4 	movi	r2,23
    440c:	18001115 	stw	zero,68(r3)
    4410:	1580082e 	bgeu	r2,r22,4434 <_dtoa_r+0xa90>
    4414:	00c00104 	movi	r3,4
    4418:	0009883a 	mov	r4,zero
    441c:	18c7883a 	add	r3,r3,r3
    4420:	18800504 	addi	r2,r3,20
    4424:	21000044 	addi	r4,r4,1
    4428:	b0bffc2e 	bgeu	r22,r2,441c <_dtoa_r+0xa78>
    442c:	d9801617 	ldw	r6,88(sp)
    4430:	31001115 	stw	r4,68(r6)
    4434:	dc000f17 	ldw	r16,60(sp)
    4438:	003e4b06 	br	3d68 <_dtoa_r+0x3c4>
    443c:	d9801717 	ldw	r6,92(sp)
    4440:	0023883a 	mov	r17,zero
    4444:	31bfff04 	addi	r6,r6,-4
    4448:	d9801715 	stw	r6,92(sp)
    444c:	003df806 	br	3c30 <_dtoa_r+0x28c>
    4450:	00800804 	movi	r2,32
    4454:	10c9c83a 	sub	r4,r2,r3
    4458:	00c00104 	movi	r3,4
    445c:	19005a16 	blt	r3,r4,45c8 <_dtoa_r+0xc24>
    4460:	008000c4 	movi	r2,3
    4464:	113f7e16 	blt	r2,r4,4260 <_dtoa_r+0x8bc>
    4468:	20800704 	addi	r2,r4,28
    446c:	003f7506 	br	4244 <_dtoa_r+0x8a0>
    4470:	d9801717 	ldw	r6,92(sp)
    4474:	00800044 	movi	r2,1
    4478:	1180a10e 	bge	r2,r6,4700 <_dtoa_r+0xd5c>
    447c:	d9800f17 	ldw	r6,60(sp)
    4480:	d8c01017 	ldw	r3,64(sp)
    4484:	30bfffc4 	addi	r2,r6,-1
    4488:	1881c616 	blt	r3,r2,4ba4 <_dtoa_r+0x1200>
    448c:	18a5c83a 	sub	r18,r3,r2
    4490:	d8800f17 	ldw	r2,60(sp)
    4494:	10026216 	blt	r2,zero,4e20 <_dtoa_r+0x147c>
    4498:	dc001117 	ldw	r16,68(sp)
    449c:	1007883a 	mov	r3,r2
    44a0:	d9800a17 	ldw	r6,40(sp)
    44a4:	d8801117 	ldw	r2,68(sp)
    44a8:	d9001617 	ldw	r4,88(sp)
    44ac:	30cd883a 	add	r6,r6,r3
    44b0:	10c5883a 	add	r2,r2,r3
    44b4:	01400044 	movi	r5,1
    44b8:	d9800a15 	stw	r6,40(sp)
    44bc:	d8801115 	stw	r2,68(sp)
    44c0:	00078500 	call	7850 <__i2b>
    44c4:	1027883a 	mov	r19,r2
    44c8:	003f2506 	br	4160 <_dtoa_r+0x7bc>
    44cc:	00c00074 	movhi	r3,1
    44d0:	18f98204 	addi	r3,r3,-6648
    44d4:	003d6706 	br	3a74 <_dtoa_r+0xd0>
    44d8:	dd800517 	ldw	r22,20(sp)
    44dc:	04000044 	movi	r16,1
    44e0:	00000706 	br	4500 <_dtoa_r+0xb5c>
    44e4:	d9400717 	ldw	r5,28(sp)
    44e8:	d9001617 	ldw	r4,88(sp)
    44ec:	01800284 	movi	r6,10
    44f0:	000f883a 	mov	r7,zero
    44f4:	000788c0 	call	788c <__multadd>
    44f8:	d8800715 	stw	r2,28(sp)
    44fc:	84000044 	addi	r16,r16,1
    4500:	d9000717 	ldw	r4,28(sp)
    4504:	900b883a 	mov	r5,r18
    4508:	00037600 	call	3760 <quorem>
    450c:	15c00c04 	addi	r23,r2,48
    4510:	b5c00005 	stb	r23,0(r22)
    4514:	d8c00f17 	ldw	r3,60(sp)
    4518:	b5800044 	addi	r22,r22,1
    451c:	80fff116 	blt	r16,r3,44e4 <_dtoa_r+0xb40>
    4520:	d8000615 	stw	zero,24(sp)
    4524:	d9400717 	ldw	r5,28(sp)
    4528:	d9001617 	ldw	r4,88(sp)
    452c:	01800044 	movi	r6,1
    4530:	00074b00 	call	74b0 <__lshift>
    4534:	1009883a 	mov	r4,r2
    4538:	900b883a 	mov	r5,r18
    453c:	d8800715 	stw	r2,28(sp)
    4540:	0006cc80 	call	6cc8 <__mcmp>
    4544:	00803c0e 	bge	zero,r2,4638 <_dtoa_r+0xc94>
    4548:	b009883a 	mov	r4,r22
    454c:	213fffc4 	addi	r4,r4,-1
    4550:	21400003 	ldbu	r5,0(r4)
    4554:	00800e44 	movi	r2,57
    4558:	28c03fcc 	andi	r3,r5,255
    455c:	18c0201c 	xori	r3,r3,128
    4560:	18ffe004 	addi	r3,r3,-128
    4564:	1881981e 	bne	r3,r2,4bc8 <_dtoa_r+0x1224>
    4568:	d9800517 	ldw	r6,20(sp)
    456c:	21bff71e 	bne	r4,r6,454c <_dtoa_r+0xba8>
    4570:	d8800d17 	ldw	r2,52(sp)
    4574:	37000044 	addi	fp,r6,1
    4578:	10800044 	addi	r2,r2,1
    457c:	d8800d15 	stw	r2,52(sp)
    4580:	00800c44 	movi	r2,49
    4584:	30800005 	stb	r2,0(r6)
    4588:	d9001617 	ldw	r4,88(sp)
    458c:	900b883a 	mov	r5,r18
    4590:	0006b6c0 	call	6b6c <_Bfree>
    4594:	983ecd26 	beq	r19,zero,40cc <_dtoa_r+0x728>
    4598:	d8c00617 	ldw	r3,24(sp)
    459c:	18000426 	beq	r3,zero,45b0 <_dtoa_r+0xc0c>
    45a0:	1cc00326 	beq	r3,r19,45b0 <_dtoa_r+0xc0c>
    45a4:	d9001617 	ldw	r4,88(sp)
    45a8:	180b883a 	mov	r5,r3
    45ac:	0006b6c0 	call	6b6c <_Bfree>
    45b0:	d9001617 	ldw	r4,88(sp)
    45b4:	980b883a 	mov	r5,r19
    45b8:	0006b6c0 	call	6b6c <_Bfree>
    45bc:	003ec306 	br	40cc <_dtoa_r+0x728>
    45c0:	1805883a 	mov	r2,r3
    45c4:	003eeb06 	br	4174 <_dtoa_r+0x7d0>
    45c8:	d9800a17 	ldw	r6,40(sp)
    45cc:	d8c01117 	ldw	r3,68(sp)
    45d0:	20bfff04 	addi	r2,r4,-4
    45d4:	308d883a 	add	r6,r6,r2
    45d8:	1887883a 	add	r3,r3,r2
    45dc:	80a1883a 	add	r16,r16,r2
    45e0:	d9800a15 	stw	r6,40(sp)
    45e4:	d8c01115 	stw	r3,68(sp)
    45e8:	003f1d06 	br	4260 <_dtoa_r+0x8bc>
    45ec:	a03f0c1e 	bne	r20,zero,4220 <_dtoa_r+0x87c>
    45f0:	00800434 	movhi	r2,16
    45f4:	10bfffc4 	addi	r2,r2,-1
    45f8:	a884703a 	and	r2,r21,r2
    45fc:	103f081e 	bne	r2,zero,4220 <_dtoa_r+0x87c>
    4600:	a89ffc2c 	andhi	r2,r21,32752
    4604:	103f0626 	beq	r2,zero,4220 <_dtoa_r+0x87c>
    4608:	d8c01117 	ldw	r3,68(sp)
    460c:	d9000a17 	ldw	r4,40(sp)
    4610:	18c00044 	addi	r3,r3,1
    4614:	21000044 	addi	r4,r4,1
    4618:	d8c01115 	stw	r3,68(sp)
    461c:	d9000a15 	stw	r4,40(sp)
    4620:	003f0006 	br	4224 <_dtoa_r+0x880>
    4624:	d9400717 	ldw	r5,28(sp)
    4628:	d9001617 	ldw	r4,88(sp)
    462c:	00079b80 	call	79b8 <__pow5mult>
    4630:	d8800715 	stw	r2,28(sp)
    4634:	003eed06 	br	41ec <_dtoa_r+0x848>
    4638:	1000021e 	bne	r2,zero,4644 <_dtoa_r+0xca0>
    463c:	b880004c 	andi	r2,r23,1
    4640:	103fc11e 	bne	r2,zero,4548 <_dtoa_r+0xba4>
    4644:	b5bfffc4 	addi	r22,r22,-1
    4648:	b0c00007 	ldb	r3,0(r22)
    464c:	00800c04 	movi	r2,48
    4650:	18bffc26 	beq	r3,r2,4644 <_dtoa_r+0xca0>
    4654:	b7000044 	addi	fp,r22,1
    4658:	003fcb06 	br	4588 <_dtoa_r+0xbe4>
    465c:	d9800d17 	ldw	r6,52(sp)
    4660:	018fc83a 	sub	r7,zero,r6
    4664:	3801f726 	beq	r7,zero,4e44 <_dtoa_r+0x14a0>
    4668:	398003cc 	andi	r6,r7,15
    466c:	300c90fa 	slli	r6,r6,3
    4670:	01400074 	movhi	r5,1
    4674:	2979a004 	addi	r5,r5,-6528
    4678:	d9001217 	ldw	r4,72(sp)
    467c:	314d883a 	add	r6,r6,r5
    4680:	30c00117 	ldw	r3,4(r6)
    4684:	30800017 	ldw	r2,0(r6)
    4688:	d9401317 	ldw	r5,76(sp)
    468c:	3821d13a 	srai	r16,r7,4
    4690:	100d883a 	mov	r6,r2
    4694:	180f883a 	mov	r7,r3
    4698:	00008940 	call	894 <__muldf3>
    469c:	1011883a 	mov	r8,r2
    46a0:	1813883a 	mov	r9,r3
    46a4:	1029883a 	mov	r20,r2
    46a8:	182b883a 	mov	r21,r3
    46ac:	8001e526 	beq	r16,zero,4e44 <_dtoa_r+0x14a0>
    46b0:	05800084 	movi	r22,2
    46b4:	04400074 	movhi	r17,1
    46b8:	8c79d204 	addi	r17,r17,-6328
    46bc:	8080004c 	andi	r2,r16,1
    46c0:	1005003a 	cmpeq	r2,r2,zero
    46c4:	1000081e 	bne	r2,zero,46e8 <_dtoa_r+0xd44>
    46c8:	89800017 	ldw	r6,0(r17)
    46cc:	89c00117 	ldw	r7,4(r17)
    46d0:	480b883a 	mov	r5,r9
    46d4:	4009883a 	mov	r4,r8
    46d8:	00008940 	call	894 <__muldf3>
    46dc:	1011883a 	mov	r8,r2
    46e0:	b5800044 	addi	r22,r22,1
    46e4:	1813883a 	mov	r9,r3
    46e8:	8021d07a 	srai	r16,r16,1
    46ec:	8c400204 	addi	r17,r17,8
    46f0:	803ff21e 	bne	r16,zero,46bc <_dtoa_r+0xd18>
    46f4:	4029883a 	mov	r20,r8
    46f8:	482b883a 	mov	r21,r9
    46fc:	003dca06 	br	3e28 <_dtoa_r+0x484>
    4700:	d9000817 	ldw	r4,32(sp)
    4704:	2005003a 	cmpeq	r2,r4,zero
    4708:	1001f61e 	bne	r2,zero,4ee4 <_dtoa_r+0x1540>
    470c:	dc001117 	ldw	r16,68(sp)
    4710:	dc801017 	ldw	r18,64(sp)
    4714:	18c10cc4 	addi	r3,r3,1075
    4718:	003f6106 	br	44a0 <_dtoa_r+0xafc>
    471c:	d8000b15 	stw	zero,44(sp)
    4720:	d9802617 	ldw	r6,152(sp)
    4724:	d8c00d17 	ldw	r3,52(sp)
    4728:	30800044 	addi	r2,r6,1
    472c:	18ad883a 	add	r22,r3,r2
    4730:	b13fffc4 	addi	r4,r22,-1
    4734:	d9000e15 	stw	r4,56(sp)
    4738:	0581f60e 	bge	zero,r22,4f14 <_dtoa_r+0x1570>
    473c:	dd800f15 	stw	r22,60(sp)
    4740:	003f3006 	br	4404 <_dtoa_r+0xa60>
    4744:	d8000b15 	stw	zero,44(sp)
    4748:	d9002617 	ldw	r4,152(sp)
    474c:	0101eb0e 	bge	zero,r4,4efc <_dtoa_r+0x1558>
    4750:	202d883a 	mov	r22,r4
    4754:	d9000e15 	stw	r4,56(sp)
    4758:	d9000f15 	stw	r4,60(sp)
    475c:	003f2906 	br	4404 <_dtoa_r+0xa60>
    4760:	01800044 	movi	r6,1
    4764:	d9800b15 	stw	r6,44(sp)
    4768:	003ff706 	br	4748 <_dtoa_r+0xda4>
    476c:	01000044 	movi	r4,1
    4770:	d9000b15 	stw	r4,44(sp)
    4774:	003fea06 	br	4720 <_dtoa_r+0xd7c>
    4778:	04000c0e 	bge	zero,r16,47ac <_dtoa_r+0xe08>
    477c:	d9400717 	ldw	r5,28(sp)
    4780:	d9001617 	ldw	r4,88(sp)
    4784:	01800044 	movi	r6,1
    4788:	00074b00 	call	74b0 <__lshift>
    478c:	1009883a 	mov	r4,r2
    4790:	900b883a 	mov	r5,r18
    4794:	d8800715 	stw	r2,28(sp)
    4798:	0006cc80 	call	6cc8 <__mcmp>
    479c:	0081e00e 	bge	zero,r2,4f20 <_dtoa_r+0x157c>
    47a0:	bdc00044 	addi	r23,r23,1
    47a4:	00800e84 	movi	r2,58
    47a8:	b881a226 	beq	r23,r2,4e34 <_dtoa_r+0x1490>
    47ac:	b7000044 	addi	fp,r22,1
    47b0:	b5c00005 	stb	r23,0(r22)
    47b4:	003f7406 	br	4588 <_dtoa_r+0xbe4>
    47b8:	00800e44 	movi	r2,57
    47bc:	b8819d26 	beq	r23,r2,4e34 <_dtoa_r+0x1490>
    47c0:	053ffa0e 	bge	zero,r20,47ac <_dtoa_r+0xe08>
    47c4:	8dc00c44 	addi	r23,r17,49
    47c8:	003ff806 	br	47ac <_dtoa_r+0xe08>
    47cc:	d9001617 	ldw	r4,88(sp)
    47d0:	a80b883a 	mov	r5,r21
    47d4:	04000044 	movi	r16,1
    47d8:	0006b6c0 	call	6b6c <_Bfree>
    47dc:	003edf06 	br	435c <_dtoa_r+0x9b8>
    47e0:	d9001617 	ldw	r4,88(sp)
    47e4:	980b883a 	mov	r5,r19
    47e8:	01800284 	movi	r6,10
    47ec:	000f883a 	mov	r7,zero
    47f0:	000788c0 	call	788c <__multadd>
    47f4:	1027883a 	mov	r19,r2
    47f8:	d8800615 	stw	r2,24(sp)
    47fc:	003ebb06 	br	42ec <_dtoa_r+0x948>
    4800:	d9801117 	ldw	r6,68(sp)
    4804:	d8800d17 	ldw	r2,52(sp)
    4808:	d8000915 	stw	zero,36(sp)
    480c:	308dc83a 	sub	r6,r6,r2
    4810:	0087c83a 	sub	r3,zero,r2
    4814:	d9801115 	stw	r6,68(sp)
    4818:	d8c01015 	stw	r3,64(sp)
    481c:	003cfe06 	br	3c18 <_dtoa_r+0x274>
    4820:	018dc83a 	sub	r6,zero,r6
    4824:	d9801115 	stw	r6,68(sp)
    4828:	d8000a15 	stw	zero,40(sp)
    482c:	003cf306 	br	3bfc <_dtoa_r+0x258>
    4830:	d9000d17 	ldw	r4,52(sp)
    4834:	00099640 	call	9964 <__floatsidf>
    4838:	880b883a 	mov	r5,r17
    483c:	8009883a 	mov	r4,r16
    4840:	180f883a 	mov	r7,r3
    4844:	100d883a 	mov	r6,r2
    4848:	00097440 	call	9744 <__nedf2>
    484c:	103ce126 	beq	r2,zero,3bd4 <_dtoa_r+0x230>
    4850:	d9800d17 	ldw	r6,52(sp)
    4854:	31bfffc4 	addi	r6,r6,-1
    4858:	d9800d15 	stw	r6,52(sp)
    485c:	003cdd06 	br	3bd4 <_dtoa_r+0x230>
    4860:	d9000717 	ldw	r4,28(sp)
    4864:	900b883a 	mov	r5,r18
    4868:	0006cc80 	call	6cc8 <__mcmp>
    486c:	103e8d0e 	bge	r2,zero,42a4 <_dtoa_r+0x900>
    4870:	d9400717 	ldw	r5,28(sp)
    4874:	d9001617 	ldw	r4,88(sp)
    4878:	01800284 	movi	r6,10
    487c:	000f883a 	mov	r7,zero
    4880:	000788c0 	call	788c <__multadd>
    4884:	d9800d17 	ldw	r6,52(sp)
    4888:	d8800715 	stw	r2,28(sp)
    488c:	31bfffc4 	addi	r6,r6,-1
    4890:	d9800d15 	stw	r6,52(sp)
    4894:	b001a71e 	bne	r22,zero,4f34 <_dtoa_r+0x1590>
    4898:	d8800e17 	ldw	r2,56(sp)
    489c:	d8800f15 	stw	r2,60(sp)
    48a0:	003e8006 	br	42a4 <_dtoa_r+0x900>
    48a4:	90800417 	ldw	r2,16(r18)
    48a8:	1085883a 	add	r2,r2,r2
    48ac:	1085883a 	add	r2,r2,r2
    48b0:	1485883a 	add	r2,r2,r18
    48b4:	11000417 	ldw	r4,16(r2)
    48b8:	0006b940 	call	6b94 <__hi0bits>
    48bc:	00c00804 	movi	r3,32
    48c0:	1887c83a 	sub	r3,r3,r2
    48c4:	003e5a06 	br	4230 <_dtoa_r+0x88c>
    48c8:	d9400717 	ldw	r5,28(sp)
    48cc:	d9801017 	ldw	r6,64(sp)
    48d0:	d9001617 	ldw	r4,88(sp)
    48d4:	00079b80 	call	79b8 <__pow5mult>
    48d8:	d8800715 	stw	r2,28(sp)
    48dc:	003e4306 	br	41ec <_dtoa_r+0x848>
    48e0:	d9800f17 	ldw	r6,60(sp)
    48e4:	d8800d17 	ldw	r2,52(sp)
    48e8:	d9800315 	stw	r6,12(sp)
    48ec:	d8800415 	stw	r2,16(sp)
    48f0:	d8c00b17 	ldw	r3,44(sp)
    48f4:	1805003a 	cmpeq	r2,r3,zero
    48f8:	1000e21e 	bne	r2,zero,4c84 <_dtoa_r+0x12e0>
    48fc:	d9000317 	ldw	r4,12(sp)
    4900:	0005883a 	mov	r2,zero
    4904:	00cff834 	movhi	r3,16352
    4908:	200c90fa 	slli	r6,r4,3
    490c:	01000074 	movhi	r4,1
    4910:	2139a004 	addi	r4,r4,-6528
    4914:	180b883a 	mov	r5,r3
    4918:	310d883a 	add	r6,r6,r4
    491c:	327fff17 	ldw	r9,-4(r6)
    4920:	323ffe17 	ldw	r8,-8(r6)
    4924:	1009883a 	mov	r4,r2
    4928:	480f883a 	mov	r7,r9
    492c:	400d883a 	mov	r6,r8
    4930:	0000c580 	call	c58 <__divdf3>
    4934:	180b883a 	mov	r5,r3
    4938:	b00d883a 	mov	r6,r22
    493c:	b80f883a 	mov	r7,r23
    4940:	1009883a 	mov	r4,r2
    4944:	00007a00 	call	7a0 <__subdf3>
    4948:	a80b883a 	mov	r5,r21
    494c:	a009883a 	mov	r4,r20
    4950:	d8c01915 	stw	r3,100(sp)
    4954:	d8801815 	stw	r2,96(sp)
    4958:	0009a5c0 	call	9a5c <__fixdfsi>
    495c:	1009883a 	mov	r4,r2
    4960:	1027883a 	mov	r19,r2
    4964:	00099640 	call	9964 <__floatsidf>
    4968:	a80b883a 	mov	r5,r21
    496c:	a009883a 	mov	r4,r20
    4970:	180f883a 	mov	r7,r3
    4974:	100d883a 	mov	r6,r2
    4978:	00007a00 	call	7a0 <__subdf3>
    497c:	d9801817 	ldw	r6,96(sp)
    4980:	1823883a 	mov	r17,r3
    4984:	d8801415 	stw	r2,80(sp)
    4988:	302d883a 	mov	r22,r6
    498c:	d9800517 	ldw	r6,20(sp)
    4990:	9cc00c04 	addi	r19,r19,48
    4994:	dc401515 	stw	r17,84(sp)
    4998:	d8c01917 	ldw	r3,100(sp)
    499c:	34c00005 	stb	r19,0(r6)
    49a0:	d8800517 	ldw	r2,20(sp)
    49a4:	d9401917 	ldw	r5,100(sp)
    49a8:	d9801417 	ldw	r6,80(sp)
    49ac:	b009883a 	mov	r4,r22
    49b0:	880f883a 	mov	r7,r17
    49b4:	182f883a 	mov	r23,r3
    49b8:	17000044 	addi	fp,r2,1
    49bc:	00097cc0 	call	97cc <__gtdf2>
    49c0:	00804e16 	blt	zero,r2,4afc <_dtoa_r+0x1158>
    49c4:	d9801417 	ldw	r6,80(sp)
    49c8:	0005883a 	mov	r2,zero
    49cc:	00cffc34 	movhi	r3,16368
    49d0:	180b883a 	mov	r5,r3
    49d4:	880f883a 	mov	r7,r17
    49d8:	1009883a 	mov	r4,r2
    49dc:	00007a00 	call	7a0 <__subdf3>
    49e0:	d9401917 	ldw	r5,100(sp)
    49e4:	180f883a 	mov	r7,r3
    49e8:	b009883a 	mov	r4,r22
    49ec:	100d883a 	mov	r6,r2
    49f0:	00097cc0 	call	97cc <__gtdf2>
    49f4:	00bda216 	blt	zero,r2,4080 <_dtoa_r+0x6dc>
    49f8:	d8c00317 	ldw	r3,12(sp)
    49fc:	00800044 	movi	r2,1
    4a00:	10c01216 	blt	r2,r3,4a4c <_dtoa_r+0x10a8>
    4a04:	003d4506 	br	3f1c <_dtoa_r+0x578>
    4a08:	d9801417 	ldw	r6,80(sp)
    4a0c:	0005883a 	mov	r2,zero
    4a10:	00cffc34 	movhi	r3,16368
    4a14:	180b883a 	mov	r5,r3
    4a18:	880f883a 	mov	r7,r17
    4a1c:	1009883a 	mov	r4,r2
    4a20:	00007a00 	call	7a0 <__subdf3>
    4a24:	d9c01b17 	ldw	r7,108(sp)
    4a28:	180b883a 	mov	r5,r3
    4a2c:	1009883a 	mov	r4,r2
    4a30:	b00d883a 	mov	r6,r22
    4a34:	00098dc0 	call	98dc <__ltdf2>
    4a38:	103d9116 	blt	r2,zero,4080 <_dtoa_r+0x6dc>
    4a3c:	d9800517 	ldw	r6,20(sp)
    4a40:	d9000317 	ldw	r4,12(sp)
    4a44:	3105883a 	add	r2,r6,r4
    4a48:	e0bd3426 	beq	fp,r2,3f1c <_dtoa_r+0x578>
    4a4c:	04500934 	movhi	r17,16420
    4a50:	0021883a 	mov	r16,zero
    4a54:	b80b883a 	mov	r5,r23
    4a58:	b009883a 	mov	r4,r22
    4a5c:	800d883a 	mov	r6,r16
    4a60:	880f883a 	mov	r7,r17
    4a64:	00008940 	call	894 <__muldf3>
    4a68:	d9401517 	ldw	r5,84(sp)
    4a6c:	d9001417 	ldw	r4,80(sp)
    4a70:	880f883a 	mov	r7,r17
    4a74:	000d883a 	mov	r6,zero
    4a78:	d8801a15 	stw	r2,104(sp)
    4a7c:	d8c01b15 	stw	r3,108(sp)
    4a80:	00008940 	call	894 <__muldf3>
    4a84:	180b883a 	mov	r5,r3
    4a88:	1009883a 	mov	r4,r2
    4a8c:	1823883a 	mov	r17,r3
    4a90:	1021883a 	mov	r16,r2
    4a94:	0009a5c0 	call	9a5c <__fixdfsi>
    4a98:	1009883a 	mov	r4,r2
    4a9c:	102b883a 	mov	r21,r2
    4aa0:	00099640 	call	9964 <__floatsidf>
    4aa4:	880b883a 	mov	r5,r17
    4aa8:	8009883a 	mov	r4,r16
    4aac:	180f883a 	mov	r7,r3
    4ab0:	100d883a 	mov	r6,r2
    4ab4:	00007a00 	call	7a0 <__subdf3>
    4ab8:	1021883a 	mov	r16,r2
    4abc:	d9001b17 	ldw	r4,108(sp)
    4ac0:	1823883a 	mov	r17,r3
    4ac4:	dc001415 	stw	r16,80(sp)
    4ac8:	ad400c04 	addi	r21,r21,48
    4acc:	dc401515 	stw	r17,84(sp)
    4ad0:	d8801a17 	ldw	r2,104(sp)
    4ad4:	e5400005 	stb	r21,0(fp)
    4ad8:	202f883a 	mov	r23,r4
    4adc:	d9c01b17 	ldw	r7,108(sp)
    4ae0:	d9001417 	ldw	r4,80(sp)
    4ae4:	880b883a 	mov	r5,r17
    4ae8:	100d883a 	mov	r6,r2
    4aec:	102d883a 	mov	r22,r2
    4af0:	e7000044 	addi	fp,fp,1
    4af4:	00098dc0 	call	98dc <__ltdf2>
    4af8:	103fc30e 	bge	r2,zero,4a08 <_dtoa_r+0x1064>
    4afc:	d9000417 	ldw	r4,16(sp)
    4b00:	d9000d15 	stw	r4,52(sp)
    4b04:	003d7106 	br	40cc <_dtoa_r+0x728>
    4b08:	d9801717 	ldw	r6,92(sp)
    4b0c:	00800084 	movi	r2,2
    4b10:	11bde60e 	bge	r2,r6,42ac <_dtoa_r+0x908>
    4b14:	203cfb1e 	bne	r4,zero,3f04 <_dtoa_r+0x560>
    4b18:	d9001617 	ldw	r4,88(sp)
    4b1c:	900b883a 	mov	r5,r18
    4b20:	01800144 	movi	r6,5
    4b24:	000f883a 	mov	r7,zero
    4b28:	000788c0 	call	788c <__multadd>
    4b2c:	d9000717 	ldw	r4,28(sp)
    4b30:	100b883a 	mov	r5,r2
    4b34:	1025883a 	mov	r18,r2
    4b38:	0006cc80 	call	6cc8 <__mcmp>
    4b3c:	00bcf10e 	bge	zero,r2,3f04 <_dtoa_r+0x560>
    4b40:	d8c00d17 	ldw	r3,52(sp)
    4b44:	d9000517 	ldw	r4,20(sp)
    4b48:	d8000615 	stw	zero,24(sp)
    4b4c:	18c00044 	addi	r3,r3,1
    4b50:	d8c00d15 	stw	r3,52(sp)
    4b54:	00800c44 	movi	r2,49
    4b58:	27000044 	addi	fp,r4,1
    4b5c:	20800005 	stb	r2,0(r4)
    4b60:	003e8906 	br	4588 <_dtoa_r+0xbe4>
    4b64:	d8c00517 	ldw	r3,20(sp)
    4b68:	003bc206 	br	3a74 <_dtoa_r+0xd0>
    4b6c:	01800074 	movhi	r6,1
    4b70:	31b9d204 	addi	r6,r6,-6328
    4b74:	30c00917 	ldw	r3,36(r6)
    4b78:	30800817 	ldw	r2,32(r6)
    4b7c:	d9001217 	ldw	r4,72(sp)
    4b80:	d9401317 	ldw	r5,76(sp)
    4b84:	180f883a 	mov	r7,r3
    4b88:	100d883a 	mov	r6,r2
    4b8c:	0000c580 	call	c58 <__divdf3>
    4b90:	948003cc 	andi	r18,r18,15
    4b94:	058000c4 	movi	r22,3
    4b98:	1029883a 	mov	r20,r2
    4b9c:	182b883a 	mov	r21,r3
    4ba0:	003c8906 	br	3dc8 <_dtoa_r+0x424>
    4ba4:	d9001017 	ldw	r4,64(sp)
    4ba8:	d9800917 	ldw	r6,36(sp)
    4bac:	0025883a 	mov	r18,zero
    4bb0:	1105c83a 	sub	r2,r2,r4
    4bb4:	2089883a 	add	r4,r4,r2
    4bb8:	308d883a 	add	r6,r6,r2
    4bbc:	d9001015 	stw	r4,64(sp)
    4bc0:	d9800915 	stw	r6,36(sp)
    4bc4:	003e3206 	br	4490 <_dtoa_r+0xaec>
    4bc8:	28800044 	addi	r2,r5,1
    4bcc:	27000044 	addi	fp,r4,1
    4bd0:	20800005 	stb	r2,0(r4)
    4bd4:	003e6c06 	br	4588 <_dtoa_r+0xbe4>
    4bd8:	d8800f17 	ldw	r2,60(sp)
    4bdc:	00bce016 	blt	zero,r2,3f60 <_dtoa_r+0x5bc>
    4be0:	d9800f17 	ldw	r6,60(sp)
    4be4:	303cc51e 	bne	r6,zero,3efc <_dtoa_r+0x558>
    4be8:	0005883a 	mov	r2,zero
    4bec:	00d00534 	movhi	r3,16404
    4bf0:	980b883a 	mov	r5,r19
    4bf4:	180f883a 	mov	r7,r3
    4bf8:	9009883a 	mov	r4,r18
    4bfc:	100d883a 	mov	r6,r2
    4c00:	00008940 	call	894 <__muldf3>
    4c04:	180b883a 	mov	r5,r3
    4c08:	a80f883a 	mov	r7,r21
    4c0c:	1009883a 	mov	r4,r2
    4c10:	a00d883a 	mov	r6,r20
    4c14:	00098540 	call	9854 <__gedf2>
    4c18:	103cb80e 	bge	r2,zero,3efc <_dtoa_r+0x558>
    4c1c:	0027883a 	mov	r19,zero
    4c20:	0025883a 	mov	r18,zero
    4c24:	003fc606 	br	4b40 <_dtoa_r+0x119c>
    4c28:	99400117 	ldw	r5,4(r19)
    4c2c:	d9001617 	ldw	r4,88(sp)
    4c30:	00070ec0 	call	70ec <_Balloc>
    4c34:	99800417 	ldw	r6,16(r19)
    4c38:	11000304 	addi	r4,r2,12
    4c3c:	99400304 	addi	r5,r19,12
    4c40:	318d883a 	add	r6,r6,r6
    4c44:	318d883a 	add	r6,r6,r6
    4c48:	31800204 	addi	r6,r6,8
    4c4c:	1023883a 	mov	r17,r2
    4c50:	00069540 	call	6954 <memcpy>
    4c54:	d9001617 	ldw	r4,88(sp)
    4c58:	880b883a 	mov	r5,r17
    4c5c:	01800044 	movi	r6,1
    4c60:	00074b00 	call	74b0 <__lshift>
    4c64:	100b883a 	mov	r5,r2
    4c68:	003d9c06 	br	42dc <_dtoa_r+0x938>
    4c6c:	00800e44 	movi	r2,57
    4c70:	b8807026 	beq	r23,r2,4e34 <_dtoa_r+0x1490>
    4c74:	b8800044 	addi	r2,r23,1
    4c78:	b7000044 	addi	fp,r22,1
    4c7c:	b0800005 	stb	r2,0(r22)
    4c80:	003e4106 	br	4588 <_dtoa_r+0xbe4>
    4c84:	d8800317 	ldw	r2,12(sp)
    4c88:	01800074 	movhi	r6,1
    4c8c:	31b9a004 	addi	r6,r6,-6528
    4c90:	b009883a 	mov	r4,r22
    4c94:	100e90fa 	slli	r7,r2,3
    4c98:	b80b883a 	mov	r5,r23
    4c9c:	398f883a 	add	r7,r7,r6
    4ca0:	38bffe17 	ldw	r2,-8(r7)
    4ca4:	d9800517 	ldw	r6,20(sp)
    4ca8:	38ffff17 	ldw	r3,-4(r7)
    4cac:	37000044 	addi	fp,r6,1
    4cb0:	180f883a 	mov	r7,r3
    4cb4:	100d883a 	mov	r6,r2
    4cb8:	00008940 	call	894 <__muldf3>
    4cbc:	a80b883a 	mov	r5,r21
    4cc0:	a009883a 	mov	r4,r20
    4cc4:	182f883a 	mov	r23,r3
    4cc8:	102d883a 	mov	r22,r2
    4ccc:	0009a5c0 	call	9a5c <__fixdfsi>
    4cd0:	1009883a 	mov	r4,r2
    4cd4:	1027883a 	mov	r19,r2
    4cd8:	00099640 	call	9964 <__floatsidf>
    4cdc:	a80b883a 	mov	r5,r21
    4ce0:	a009883a 	mov	r4,r20
    4ce4:	180f883a 	mov	r7,r3
    4ce8:	100d883a 	mov	r6,r2
    4cec:	00007a00 	call	7a0 <__subdf3>
    4cf0:	180b883a 	mov	r5,r3
    4cf4:	d8c00517 	ldw	r3,20(sp)
    4cf8:	9cc00c04 	addi	r19,r19,48
    4cfc:	1009883a 	mov	r4,r2
    4d00:	1cc00005 	stb	r19,0(r3)
    4d04:	2021883a 	mov	r16,r4
    4d08:	d9000317 	ldw	r4,12(sp)
    4d0c:	00800044 	movi	r2,1
    4d10:	2823883a 	mov	r17,r5
    4d14:	20802226 	beq	r4,r2,4da0 <_dtoa_r+0x13fc>
    4d18:	1029883a 	mov	r20,r2
    4d1c:	0005883a 	mov	r2,zero
    4d20:	00d00934 	movhi	r3,16420
    4d24:	180f883a 	mov	r7,r3
    4d28:	100d883a 	mov	r6,r2
    4d2c:	880b883a 	mov	r5,r17
    4d30:	8009883a 	mov	r4,r16
    4d34:	00008940 	call	894 <__muldf3>
    4d38:	180b883a 	mov	r5,r3
    4d3c:	1009883a 	mov	r4,r2
    4d40:	1823883a 	mov	r17,r3
    4d44:	1021883a 	mov	r16,r2
    4d48:	0009a5c0 	call	9a5c <__fixdfsi>
    4d4c:	1009883a 	mov	r4,r2
    4d50:	102b883a 	mov	r21,r2
    4d54:	00099640 	call	9964 <__floatsidf>
    4d58:	880b883a 	mov	r5,r17
    4d5c:	8009883a 	mov	r4,r16
    4d60:	180f883a 	mov	r7,r3
    4d64:	100d883a 	mov	r6,r2
    4d68:	00007a00 	call	7a0 <__subdf3>
    4d6c:	180b883a 	mov	r5,r3
    4d70:	d8c00517 	ldw	r3,20(sp)
    4d74:	1009883a 	mov	r4,r2
    4d78:	ad400c04 	addi	r21,r21,48
    4d7c:	1d05883a 	add	r2,r3,r20
    4d80:	15400005 	stb	r21,0(r2)
    4d84:	2021883a 	mov	r16,r4
    4d88:	d9000317 	ldw	r4,12(sp)
    4d8c:	a5000044 	addi	r20,r20,1
    4d90:	2823883a 	mov	r17,r5
    4d94:	a13fe11e 	bne	r20,r4,4d1c <_dtoa_r+0x1378>
    4d98:	e505883a 	add	r2,fp,r20
    4d9c:	173fffc4 	addi	fp,r2,-1
    4da0:	0025883a 	mov	r18,zero
    4da4:	04cff834 	movhi	r19,16352
    4da8:	b009883a 	mov	r4,r22
    4dac:	b80b883a 	mov	r5,r23
    4db0:	900d883a 	mov	r6,r18
    4db4:	980f883a 	mov	r7,r19
    4db8:	00008200 	call	820 <__adddf3>
    4dbc:	180b883a 	mov	r5,r3
    4dc0:	1009883a 	mov	r4,r2
    4dc4:	800d883a 	mov	r6,r16
    4dc8:	880f883a 	mov	r7,r17
    4dcc:	00098dc0 	call	98dc <__ltdf2>
    4dd0:	103cab16 	blt	r2,zero,4080 <_dtoa_r+0x6dc>
    4dd4:	0009883a 	mov	r4,zero
    4dd8:	980b883a 	mov	r5,r19
    4ddc:	b80f883a 	mov	r7,r23
    4de0:	b00d883a 	mov	r6,r22
    4de4:	00007a00 	call	7a0 <__subdf3>
    4de8:	180b883a 	mov	r5,r3
    4dec:	880f883a 	mov	r7,r17
    4df0:	1009883a 	mov	r4,r2
    4df4:	800d883a 	mov	r6,r16
    4df8:	00097cc0 	call	97cc <__gtdf2>
    4dfc:	00bc470e 	bge	zero,r2,3f1c <_dtoa_r+0x578>
    4e00:	00c00c04 	movi	r3,48
    4e04:	e73fffc4 	addi	fp,fp,-1
    4e08:	e0800007 	ldb	r2,0(fp)
    4e0c:	10fffd26 	beq	r2,r3,4e04 <_dtoa_r+0x1460>
    4e10:	d9800417 	ldw	r6,16(sp)
    4e14:	e7000044 	addi	fp,fp,1
    4e18:	d9800d15 	stw	r6,52(sp)
    4e1c:	003cab06 	br	40cc <_dtoa_r+0x728>
    4e20:	d8c00f17 	ldw	r3,60(sp)
    4e24:	d9001117 	ldw	r4,68(sp)
    4e28:	20e1c83a 	sub	r16,r4,r3
    4e2c:	0007883a 	mov	r3,zero
    4e30:	003d9b06 	br	44a0 <_dtoa_r+0xafc>
    4e34:	00800e44 	movi	r2,57
    4e38:	b0800005 	stb	r2,0(r22)
    4e3c:	b5800044 	addi	r22,r22,1
    4e40:	003dc106 	br	4548 <_dtoa_r+0xba4>
    4e44:	05800084 	movi	r22,2
    4e48:	003bf706 	br	3e28 <_dtoa_r+0x484>
    4e4c:	d9000f17 	ldw	r4,60(sp)
    4e50:	013c000e 	bge	zero,r4,3e54 <_dtoa_r+0x4b0>
    4e54:	d9800e17 	ldw	r6,56(sp)
    4e58:	01bc300e 	bge	zero,r6,3f1c <_dtoa_r+0x578>
    4e5c:	0005883a 	mov	r2,zero
    4e60:	00d00934 	movhi	r3,16420
    4e64:	a80b883a 	mov	r5,r21
    4e68:	180f883a 	mov	r7,r3
    4e6c:	a009883a 	mov	r4,r20
    4e70:	100d883a 	mov	r6,r2
    4e74:	00008940 	call	894 <__muldf3>
    4e78:	b1000044 	addi	r4,r22,1
    4e7c:	1021883a 	mov	r16,r2
    4e80:	1823883a 	mov	r17,r3
    4e84:	00099640 	call	9964 <__floatsidf>
    4e88:	880b883a 	mov	r5,r17
    4e8c:	8009883a 	mov	r4,r16
    4e90:	180f883a 	mov	r7,r3
    4e94:	100d883a 	mov	r6,r2
    4e98:	00008940 	call	894 <__muldf3>
    4e9c:	0011883a 	mov	r8,zero
    4ea0:	02500734 	movhi	r9,16412
    4ea4:	180b883a 	mov	r5,r3
    4ea8:	480f883a 	mov	r7,r9
    4eac:	1009883a 	mov	r4,r2
    4eb0:	400d883a 	mov	r6,r8
    4eb4:	00008200 	call	820 <__adddf3>
    4eb8:	102d883a 	mov	r22,r2
    4ebc:	00bf3034 	movhi	r2,64704
    4ec0:	10ef883a 	add	r23,r2,r3
    4ec4:	d8800d17 	ldw	r2,52(sp)
    4ec8:	d8c00e17 	ldw	r3,56(sp)
    4ecc:	8029883a 	mov	r20,r16
    4ed0:	10bfffc4 	addi	r2,r2,-1
    4ed4:	882b883a 	mov	r21,r17
    4ed8:	d8800415 	stw	r2,16(sp)
    4edc:	d8c00315 	stw	r3,12(sp)
    4ee0:	003e8306 	br	48f0 <_dtoa_r+0xf4c>
    4ee4:	d8800117 	ldw	r2,4(sp)
    4ee8:	dc001117 	ldw	r16,68(sp)
    4eec:	dc801017 	ldw	r18,64(sp)
    4ef0:	00c00d84 	movi	r3,54
    4ef4:	1887c83a 	sub	r3,r3,r2
    4ef8:	003d6906 	br	44a0 <_dtoa_r+0xafc>
    4efc:	01800044 	movi	r6,1
    4f00:	3021883a 	mov	r16,r6
    4f04:	d9800f15 	stw	r6,60(sp)
    4f08:	d9802615 	stw	r6,152(sp)
    4f0c:	d9800e15 	stw	r6,56(sp)
    4f10:	003b9306 	br	3d60 <_dtoa_r+0x3bc>
    4f14:	b021883a 	mov	r16,r22
    4f18:	dd800f15 	stw	r22,60(sp)
    4f1c:	003b9006 	br	3d60 <_dtoa_r+0x3bc>
    4f20:	103e221e 	bne	r2,zero,47ac <_dtoa_r+0xe08>
    4f24:	b880004c 	andi	r2,r23,1
    4f28:	1005003a 	cmpeq	r2,r2,zero
    4f2c:	103e1f1e 	bne	r2,zero,47ac <_dtoa_r+0xe08>
    4f30:	003e1b06 	br	47a0 <_dtoa_r+0xdfc>
    4f34:	d9001617 	ldw	r4,88(sp)
    4f38:	980b883a 	mov	r5,r19
    4f3c:	01800284 	movi	r6,10
    4f40:	000f883a 	mov	r7,zero
    4f44:	000788c0 	call	788c <__multadd>
    4f48:	d8c00e17 	ldw	r3,56(sp)
    4f4c:	1027883a 	mov	r19,r2
    4f50:	d8c00f15 	stw	r3,60(sp)
    4f54:	003cd306 	br	42a4 <_dtoa_r+0x900>

00004f58 <_fflush_r>:
    4f58:	defffb04 	addi	sp,sp,-20
    4f5c:	dcc00315 	stw	r19,12(sp)
    4f60:	dc800215 	stw	r18,8(sp)
    4f64:	dfc00415 	stw	ra,16(sp)
    4f68:	dc400115 	stw	r17,4(sp)
    4f6c:	dc000015 	stw	r16,0(sp)
    4f70:	2027883a 	mov	r19,r4
    4f74:	2825883a 	mov	r18,r5
    4f78:	20000226 	beq	r4,zero,4f84 <_fflush_r+0x2c>
    4f7c:	20800e17 	ldw	r2,56(r4)
    4f80:	10005626 	beq	r2,zero,50dc <_fflush_r+0x184>
    4f84:	9100030b 	ldhu	r4,12(r18)
    4f88:	20ffffcc 	andi	r3,r4,65535
    4f8c:	18e0001c 	xori	r3,r3,32768
    4f90:	18e00004 	addi	r3,r3,-32768
    4f94:	1880020c 	andi	r2,r3,8
    4f98:	1000261e 	bne	r2,zero,5034 <_fflush_r+0xdc>
    4f9c:	90c00117 	ldw	r3,4(r18)
    4fa0:	20820014 	ori	r2,r4,2048
    4fa4:	9080030d 	sth	r2,12(r18)
    4fa8:	1009883a 	mov	r4,r2
    4fac:	00c0400e 	bge	zero,r3,50b0 <_fflush_r+0x158>
    4fb0:	92000a17 	ldw	r8,40(r18)
    4fb4:	40004026 	beq	r8,zero,50b8 <_fflush_r+0x160>
    4fb8:	2084000c 	andi	r2,r4,4096
    4fbc:	10005326 	beq	r2,zero,510c <_fflush_r+0x1b4>
    4fc0:	94001417 	ldw	r16,80(r18)
    4fc4:	9080030b 	ldhu	r2,12(r18)
    4fc8:	1080010c 	andi	r2,r2,4
    4fcc:	1000481e 	bne	r2,zero,50f0 <_fflush_r+0x198>
    4fd0:	91400717 	ldw	r5,28(r18)
    4fd4:	9809883a 	mov	r4,r19
    4fd8:	800d883a 	mov	r6,r16
    4fdc:	000f883a 	mov	r7,zero
    4fe0:	403ee83a 	callr	r8
    4fe4:	8080261e 	bne	r16,r2,5080 <_fflush_r+0x128>
    4fe8:	9080030b 	ldhu	r2,12(r18)
    4fec:	91000417 	ldw	r4,16(r18)
    4ff0:	90000115 	stw	zero,4(r18)
    4ff4:	10bdffcc 	andi	r2,r2,63487
    4ff8:	10ffffcc 	andi	r3,r2,65535
    4ffc:	18c4000c 	andi	r3,r3,4096
    5000:	9080030d 	sth	r2,12(r18)
    5004:	91000015 	stw	r4,0(r18)
    5008:	18002b26 	beq	r3,zero,50b8 <_fflush_r+0x160>
    500c:	0007883a 	mov	r3,zero
    5010:	1805883a 	mov	r2,r3
    5014:	94001415 	stw	r16,80(r18)
    5018:	dfc00417 	ldw	ra,16(sp)
    501c:	dcc00317 	ldw	r19,12(sp)
    5020:	dc800217 	ldw	r18,8(sp)
    5024:	dc400117 	ldw	r17,4(sp)
    5028:	dc000017 	ldw	r16,0(sp)
    502c:	dec00504 	addi	sp,sp,20
    5030:	f800283a 	ret
    5034:	94400417 	ldw	r17,16(r18)
    5038:	88001f26 	beq	r17,zero,50b8 <_fflush_r+0x160>
    503c:	90800017 	ldw	r2,0(r18)
    5040:	18c000cc 	andi	r3,r3,3
    5044:	94400015 	stw	r17,0(r18)
    5048:	1461c83a 	sub	r16,r2,r17
    504c:	18002526 	beq	r3,zero,50e4 <_fflush_r+0x18c>
    5050:	0005883a 	mov	r2,zero
    5054:	90800215 	stw	r2,8(r18)
    5058:	0400170e 	bge	zero,r16,50b8 <_fflush_r+0x160>
    505c:	90c00917 	ldw	r3,36(r18)
    5060:	91400717 	ldw	r5,28(r18)
    5064:	880d883a 	mov	r6,r17
    5068:	800f883a 	mov	r7,r16
    506c:	9809883a 	mov	r4,r19
    5070:	183ee83a 	callr	r3
    5074:	88a3883a 	add	r17,r17,r2
    5078:	80a1c83a 	sub	r16,r16,r2
    507c:	00bff616 	blt	zero,r2,5058 <_fflush_r+0x100>
    5080:	9080030b 	ldhu	r2,12(r18)
    5084:	00ffffc4 	movi	r3,-1
    5088:	10801014 	ori	r2,r2,64
    508c:	9080030d 	sth	r2,12(r18)
    5090:	1805883a 	mov	r2,r3
    5094:	dfc00417 	ldw	ra,16(sp)
    5098:	dcc00317 	ldw	r19,12(sp)
    509c:	dc800217 	ldw	r18,8(sp)
    50a0:	dc400117 	ldw	r17,4(sp)
    50a4:	dc000017 	ldw	r16,0(sp)
    50a8:	dec00504 	addi	sp,sp,20
    50ac:	f800283a 	ret
    50b0:	90800f17 	ldw	r2,60(r18)
    50b4:	00bfbe16 	blt	zero,r2,4fb0 <_fflush_r+0x58>
    50b8:	0007883a 	mov	r3,zero
    50bc:	1805883a 	mov	r2,r3
    50c0:	dfc00417 	ldw	ra,16(sp)
    50c4:	dcc00317 	ldw	r19,12(sp)
    50c8:	dc800217 	ldw	r18,8(sp)
    50cc:	dc400117 	ldw	r17,4(sp)
    50d0:	dc000017 	ldw	r16,0(sp)
    50d4:	dec00504 	addi	sp,sp,20
    50d8:	f800283a 	ret
    50dc:	00051f00 	call	51f0 <__sinit>
    50e0:	003fa806 	br	4f84 <_fflush_r+0x2c>
    50e4:	90800517 	ldw	r2,20(r18)
    50e8:	90800215 	stw	r2,8(r18)
    50ec:	003fda06 	br	5058 <_fflush_r+0x100>
    50f0:	90800117 	ldw	r2,4(r18)
    50f4:	90c00c17 	ldw	r3,48(r18)
    50f8:	80a1c83a 	sub	r16,r16,r2
    50fc:	183fb426 	beq	r3,zero,4fd0 <_fflush_r+0x78>
    5100:	90800f17 	ldw	r2,60(r18)
    5104:	80a1c83a 	sub	r16,r16,r2
    5108:	003fb106 	br	4fd0 <_fflush_r+0x78>
    510c:	91400717 	ldw	r5,28(r18)
    5110:	9809883a 	mov	r4,r19
    5114:	000d883a 	mov	r6,zero
    5118:	01c00044 	movi	r7,1
    511c:	403ee83a 	callr	r8
    5120:	1021883a 	mov	r16,r2
    5124:	00bfffc4 	movi	r2,-1
    5128:	80800226 	beq	r16,r2,5134 <_fflush_r+0x1dc>
    512c:	92000a17 	ldw	r8,40(r18)
    5130:	003fa406 	br	4fc4 <_fflush_r+0x6c>
    5134:	98c00017 	ldw	r3,0(r19)
    5138:	00800744 	movi	r2,29
    513c:	18bfde26 	beq	r3,r2,50b8 <_fflush_r+0x160>
    5140:	9080030b 	ldhu	r2,12(r18)
    5144:	8007883a 	mov	r3,r16
    5148:	10801014 	ori	r2,r2,64
    514c:	9080030d 	sth	r2,12(r18)
    5150:	003fcf06 	br	5090 <_fflush_r+0x138>

00005154 <fflush>:
    5154:	01400034 	movhi	r5,0
    5158:	2953d604 	addi	r5,r5,20312
    515c:	2007883a 	mov	r3,r4
    5160:	20000526 	beq	r4,zero,5178 <fflush+0x24>
    5164:	00800074 	movhi	r2,1
    5168:	1081c804 	addi	r2,r2,1824
    516c:	11000017 	ldw	r4,0(r2)
    5170:	180b883a 	mov	r5,r3
    5174:	0004f581 	jmpi	4f58 <_fflush_r>
    5178:	00800074 	movhi	r2,1
    517c:	1081c904 	addi	r2,r2,1828
    5180:	11000017 	ldw	r4,0(r2)
    5184:	0005d581 	jmpi	5d58 <_fwalk_reent>

00005188 <std>:
    5188:	00800074 	movhi	r2,1
    518c:	10a0b304 	addi	r2,r2,-32052
    5190:	20800b15 	stw	r2,44(r4)
    5194:	00800074 	movhi	r2,1
    5198:	10a0ee04 	addi	r2,r2,-31816
    519c:	20800815 	stw	r2,32(r4)
    51a0:	00c00074 	movhi	r3,1
    51a4:	18e0cf04 	addi	r3,r3,-31940
    51a8:	00800074 	movhi	r2,1
    51ac:	10a0b504 	addi	r2,r2,-32044
    51b0:	2140030d 	sth	r5,12(r4)
    51b4:	2180038d 	sth	r6,14(r4)
    51b8:	20c00915 	stw	r3,36(r4)
    51bc:	20800a15 	stw	r2,40(r4)
    51c0:	20000015 	stw	zero,0(r4)
    51c4:	20000115 	stw	zero,4(r4)
    51c8:	20000215 	stw	zero,8(r4)
    51cc:	20000415 	stw	zero,16(r4)
    51d0:	20000515 	stw	zero,20(r4)
    51d4:	20000615 	stw	zero,24(r4)
    51d8:	21000715 	stw	r4,28(r4)
    51dc:	f800283a 	ret

000051e0 <__sfp_lock_acquire>:
    51e0:	f800283a 	ret

000051e4 <__sfp_lock_release>:
    51e4:	f800283a 	ret

000051e8 <__sinit_lock_acquire>:
    51e8:	f800283a 	ret

000051ec <__sinit_lock_release>:
    51ec:	f800283a 	ret

000051f0 <__sinit>:
    51f0:	20800e17 	ldw	r2,56(r4)
    51f4:	defffd04 	addi	sp,sp,-12
    51f8:	dc400115 	stw	r17,4(sp)
    51fc:	dc000015 	stw	r16,0(sp)
    5200:	dfc00215 	stw	ra,8(sp)
    5204:	04400044 	movi	r17,1
    5208:	01400104 	movi	r5,4
    520c:	000d883a 	mov	r6,zero
    5210:	2021883a 	mov	r16,r4
    5214:	2200bb04 	addi	r8,r4,748
    5218:	200f883a 	mov	r7,r4
    521c:	10000526 	beq	r2,zero,5234 <__sinit+0x44>
    5220:	dfc00217 	ldw	ra,8(sp)
    5224:	dc400117 	ldw	r17,4(sp)
    5228:	dc000017 	ldw	r16,0(sp)
    522c:	dec00304 	addi	sp,sp,12
    5230:	f800283a 	ret
    5234:	21000117 	ldw	r4,4(r4)
    5238:	00800034 	movhi	r2,0
    523c:	1094b504 	addi	r2,r2,21204
    5240:	00c000c4 	movi	r3,3
    5244:	80800f15 	stw	r2,60(r16)
    5248:	80c0b915 	stw	r3,740(r16)
    524c:	8200ba15 	stw	r8,744(r16)
    5250:	84400e15 	stw	r17,56(r16)
    5254:	8000b815 	stw	zero,736(r16)
    5258:	00051880 	call	5188 <std>
    525c:	81000217 	ldw	r4,8(r16)
    5260:	880d883a 	mov	r6,r17
    5264:	800f883a 	mov	r7,r16
    5268:	01400284 	movi	r5,10
    526c:	00051880 	call	5188 <std>
    5270:	81000317 	ldw	r4,12(r16)
    5274:	800f883a 	mov	r7,r16
    5278:	01400484 	movi	r5,18
    527c:	01800084 	movi	r6,2
    5280:	dfc00217 	ldw	ra,8(sp)
    5284:	dc400117 	ldw	r17,4(sp)
    5288:	dc000017 	ldw	r16,0(sp)
    528c:	dec00304 	addi	sp,sp,12
    5290:	00051881 	jmpi	5188 <std>

00005294 <__fp_lock>:
    5294:	0005883a 	mov	r2,zero
    5298:	f800283a 	ret

0000529c <__fp_unlock>:
    529c:	0005883a 	mov	r2,zero
    52a0:	f800283a 	ret

000052a4 <__fp_unlock_all>:
    52a4:	00800074 	movhi	r2,1
    52a8:	1081c804 	addi	r2,r2,1824
    52ac:	11000017 	ldw	r4,0(r2)
    52b0:	01400034 	movhi	r5,0
    52b4:	2954a704 	addi	r5,r5,21148
    52b8:	0005e201 	jmpi	5e20 <_fwalk>

000052bc <__fp_lock_all>:
    52bc:	00800074 	movhi	r2,1
    52c0:	1081c804 	addi	r2,r2,1824
    52c4:	11000017 	ldw	r4,0(r2)
    52c8:	01400034 	movhi	r5,0
    52cc:	2954a504 	addi	r5,r5,21140
    52d0:	0005e201 	jmpi	5e20 <_fwalk>

000052d4 <_cleanup_r>:
    52d4:	01400074 	movhi	r5,1
    52d8:	29620204 	addi	r5,r5,-30712
    52dc:	0005e201 	jmpi	5e20 <_fwalk>

000052e0 <_cleanup>:
    52e0:	00800074 	movhi	r2,1
    52e4:	1081c904 	addi	r2,r2,1828
    52e8:	11000017 	ldw	r4,0(r2)
    52ec:	00052d41 	jmpi	52d4 <_cleanup_r>

000052f0 <__sfmoreglue>:
    52f0:	defffc04 	addi	sp,sp,-16
    52f4:	dc000015 	stw	r16,0(sp)
    52f8:	2821883a 	mov	r16,r5
    52fc:	dc400115 	stw	r17,4(sp)
    5300:	01401704 	movi	r5,92
    5304:	2023883a 	mov	r17,r4
    5308:	8009883a 	mov	r4,r16
    530c:	dfc00315 	stw	ra,12(sp)
    5310:	dcc00215 	stw	r19,8(sp)
    5314:	00016340 	call	1634 <__mulsi3>
    5318:	11400304 	addi	r5,r2,12
    531c:	8809883a 	mov	r4,r17
    5320:	1027883a 	mov	r19,r2
    5324:	00061300 	call	6130 <_malloc_r>
    5328:	10c00304 	addi	r3,r2,12
    532c:	1023883a 	mov	r17,r2
    5330:	1809883a 	mov	r4,r3
    5334:	980d883a 	mov	r6,r19
    5338:	000b883a 	mov	r5,zero
    533c:	10000b26 	beq	r2,zero,536c <__sfmoreglue+0x7c>
    5340:	14000115 	stw	r16,4(r2)
    5344:	10c00215 	stw	r3,8(r2)
    5348:	10000015 	stw	zero,0(r2)
    534c:	0006ad40 	call	6ad4 <memset>
    5350:	8805883a 	mov	r2,r17
    5354:	dfc00317 	ldw	ra,12(sp)
    5358:	dcc00217 	ldw	r19,8(sp)
    535c:	dc400117 	ldw	r17,4(sp)
    5360:	dc000017 	ldw	r16,0(sp)
    5364:	dec00404 	addi	sp,sp,16
    5368:	f800283a 	ret
    536c:	0023883a 	mov	r17,zero
    5370:	8805883a 	mov	r2,r17
    5374:	dfc00317 	ldw	ra,12(sp)
    5378:	dcc00217 	ldw	r19,8(sp)
    537c:	dc400117 	ldw	r17,4(sp)
    5380:	dc000017 	ldw	r16,0(sp)
    5384:	dec00404 	addi	sp,sp,16
    5388:	f800283a 	ret

0000538c <__sfp>:
    538c:	defffd04 	addi	sp,sp,-12
    5390:	00800074 	movhi	r2,1
    5394:	1081c904 	addi	r2,r2,1828
    5398:	dc000015 	stw	r16,0(sp)
    539c:	14000017 	ldw	r16,0(r2)
    53a0:	dc400115 	stw	r17,4(sp)
    53a4:	dfc00215 	stw	ra,8(sp)
    53a8:	80800e17 	ldw	r2,56(r16)
    53ac:	2023883a 	mov	r17,r4
    53b0:	10002626 	beq	r2,zero,544c <__sfp+0xc0>
    53b4:	8400b804 	addi	r16,r16,736
    53b8:	80800117 	ldw	r2,4(r16)
    53bc:	81000217 	ldw	r4,8(r16)
    53c0:	10ffffc4 	addi	r3,r2,-1
    53c4:	18000916 	blt	r3,zero,53ec <__sfp+0x60>
    53c8:	2080030f 	ldh	r2,12(r4)
    53cc:	10000b26 	beq	r2,zero,53fc <__sfp+0x70>
    53d0:	017fffc4 	movi	r5,-1
    53d4:	00000206 	br	53e0 <__sfp+0x54>
    53d8:	2080030f 	ldh	r2,12(r4)
    53dc:	10000726 	beq	r2,zero,53fc <__sfp+0x70>
    53e0:	18ffffc4 	addi	r3,r3,-1
    53e4:	21001704 	addi	r4,r4,92
    53e8:	197ffb1e 	bne	r3,r5,53d8 <__sfp+0x4c>
    53ec:	80800017 	ldw	r2,0(r16)
    53f0:	10001926 	beq	r2,zero,5458 <__sfp+0xcc>
    53f4:	1021883a 	mov	r16,r2
    53f8:	003fef06 	br	53b8 <__sfp+0x2c>
    53fc:	00bfffc4 	movi	r2,-1
    5400:	00c00044 	movi	r3,1
    5404:	2080038d 	sth	r2,14(r4)
    5408:	20c0030d 	sth	r3,12(r4)
    540c:	20000015 	stw	zero,0(r4)
    5410:	20000215 	stw	zero,8(r4)
    5414:	20000115 	stw	zero,4(r4)
    5418:	20000415 	stw	zero,16(r4)
    541c:	20000515 	stw	zero,20(r4)
    5420:	20000615 	stw	zero,24(r4)
    5424:	20000c15 	stw	zero,48(r4)
    5428:	20000d15 	stw	zero,52(r4)
    542c:	20001115 	stw	zero,68(r4)
    5430:	20001215 	stw	zero,72(r4)
    5434:	2005883a 	mov	r2,r4
    5438:	dfc00217 	ldw	ra,8(sp)
    543c:	dc400117 	ldw	r17,4(sp)
    5440:	dc000017 	ldw	r16,0(sp)
    5444:	dec00304 	addi	sp,sp,12
    5448:	f800283a 	ret
    544c:	8009883a 	mov	r4,r16
    5450:	00051f00 	call	51f0 <__sinit>
    5454:	003fd706 	br	53b4 <__sfp+0x28>
    5458:	8809883a 	mov	r4,r17
    545c:	01400104 	movi	r5,4
    5460:	00052f00 	call	52f0 <__sfmoreglue>
    5464:	80800015 	stw	r2,0(r16)
    5468:	103fe21e 	bne	r2,zero,53f4 <__sfp+0x68>
    546c:	00800304 	movi	r2,12
    5470:	0009883a 	mov	r4,zero
    5474:	88800015 	stw	r2,0(r17)
    5478:	003fee06 	br	5434 <__sfp+0xa8>

0000547c <_malloc_trim_r>:
    547c:	defffb04 	addi	sp,sp,-20
    5480:	dcc00315 	stw	r19,12(sp)
    5484:	04c00074 	movhi	r19,1
    5488:	9cfb1c04 	addi	r19,r19,-5008
    548c:	dc800215 	stw	r18,8(sp)
    5490:	dc400115 	stw	r17,4(sp)
    5494:	dc000015 	stw	r16,0(sp)
    5498:	2823883a 	mov	r17,r5
    549c:	2025883a 	mov	r18,r4
    54a0:	dfc00415 	stw	ra,16(sp)
    54a4:	000a2f00 	call	a2f0 <__malloc_lock>
    54a8:	98800217 	ldw	r2,8(r19)
    54ac:	9009883a 	mov	r4,r18
    54b0:	000b883a 	mov	r5,zero
    54b4:	10c00117 	ldw	r3,4(r2)
    54b8:	00bfff04 	movi	r2,-4
    54bc:	18a0703a 	and	r16,r3,r2
    54c0:	8463c83a 	sub	r17,r16,r17
    54c4:	8c43fbc4 	addi	r17,r17,4079
    54c8:	8822d33a 	srli	r17,r17,12
    54cc:	0083ffc4 	movi	r2,4095
    54d0:	8c7fffc4 	addi	r17,r17,-1
    54d4:	8822933a 	slli	r17,r17,12
    54d8:	1440060e 	bge	r2,r17,54f4 <_malloc_trim_r+0x78>
    54dc:	000825c0 	call	825c <_sbrk_r>
    54e0:	98c00217 	ldw	r3,8(r19)
    54e4:	9009883a 	mov	r4,r18
    54e8:	044bc83a 	sub	r5,zero,r17
    54ec:	80c7883a 	add	r3,r16,r3
    54f0:	10c00926 	beq	r2,r3,5518 <_malloc_trim_r+0x9c>
    54f4:	000a3100 	call	a310 <__malloc_unlock>
    54f8:	0005883a 	mov	r2,zero
    54fc:	dfc00417 	ldw	ra,16(sp)
    5500:	dcc00317 	ldw	r19,12(sp)
    5504:	dc800217 	ldw	r18,8(sp)
    5508:	dc400117 	ldw	r17,4(sp)
    550c:	dc000017 	ldw	r16,0(sp)
    5510:	dec00504 	addi	sp,sp,20
    5514:	f800283a 	ret
    5518:	9009883a 	mov	r4,r18
    551c:	000825c0 	call	825c <_sbrk_r>
    5520:	844dc83a 	sub	r6,r16,r17
    5524:	00ffffc4 	movi	r3,-1
    5528:	9009883a 	mov	r4,r18
    552c:	000b883a 	mov	r5,zero
    5530:	01c00074 	movhi	r7,1
    5534:	39c1e704 	addi	r7,r7,1948
    5538:	31800054 	ori	r6,r6,1
    553c:	10c00926 	beq	r2,r3,5564 <_malloc_trim_r+0xe8>
    5540:	38800017 	ldw	r2,0(r7)
    5544:	98c00217 	ldw	r3,8(r19)
    5548:	9009883a 	mov	r4,r18
    554c:	1445c83a 	sub	r2,r2,r17
    5550:	38800015 	stw	r2,0(r7)
    5554:	19800115 	stw	r6,4(r3)
    5558:	000a3100 	call	a310 <__malloc_unlock>
    555c:	00800044 	movi	r2,1
    5560:	003fe606 	br	54fc <_malloc_trim_r+0x80>
    5564:	000825c0 	call	825c <_sbrk_r>
    5568:	99800217 	ldw	r6,8(r19)
    556c:	100f883a 	mov	r7,r2
    5570:	9009883a 	mov	r4,r18
    5574:	1187c83a 	sub	r3,r2,r6
    5578:	008003c4 	movi	r2,15
    557c:	19400054 	ori	r5,r3,1
    5580:	10ffdc0e 	bge	r2,r3,54f4 <_malloc_trim_r+0x78>
    5584:	00800074 	movhi	r2,1
    5588:	1081cd04 	addi	r2,r2,1844
    558c:	10c00017 	ldw	r3,0(r2)
    5590:	00800074 	movhi	r2,1
    5594:	1081e704 	addi	r2,r2,1948
    5598:	31400115 	stw	r5,4(r6)
    559c:	38c7c83a 	sub	r3,r7,r3
    55a0:	10c00015 	stw	r3,0(r2)
    55a4:	003fd306 	br	54f4 <_malloc_trim_r+0x78>

000055a8 <_free_r>:
    55a8:	defffd04 	addi	sp,sp,-12
    55ac:	dc400115 	stw	r17,4(sp)
    55b0:	dc000015 	stw	r16,0(sp)
    55b4:	dfc00215 	stw	ra,8(sp)
    55b8:	2821883a 	mov	r16,r5
    55bc:	2023883a 	mov	r17,r4
    55c0:	28005a26 	beq	r5,zero,572c <_free_r+0x184>
    55c4:	000a2f00 	call	a2f0 <__malloc_lock>
    55c8:	823ffe04 	addi	r8,r16,-8
    55cc:	41400117 	ldw	r5,4(r8)
    55d0:	00bfff84 	movi	r2,-2
    55d4:	02800074 	movhi	r10,1
    55d8:	52bb1c04 	addi	r10,r10,-5008
    55dc:	288e703a 	and	r7,r5,r2
    55e0:	41cd883a 	add	r6,r8,r7
    55e4:	30c00117 	ldw	r3,4(r6)
    55e8:	51000217 	ldw	r4,8(r10)
    55ec:	00bfff04 	movi	r2,-4
    55f0:	1892703a 	and	r9,r3,r2
    55f4:	5017883a 	mov	r11,r10
    55f8:	31006726 	beq	r6,r4,5798 <_free_r+0x1f0>
    55fc:	2880004c 	andi	r2,r5,1
    5600:	1005003a 	cmpeq	r2,r2,zero
    5604:	32400115 	stw	r9,4(r6)
    5608:	10001a1e 	bne	r2,zero,5674 <_free_r+0xcc>
    560c:	000b883a 	mov	r5,zero
    5610:	3247883a 	add	r3,r6,r9
    5614:	18800117 	ldw	r2,4(r3)
    5618:	1080004c 	andi	r2,r2,1
    561c:	1000231e 	bne	r2,zero,56ac <_free_r+0x104>
    5620:	280ac03a 	cmpne	r5,r5,zero
    5624:	3a4f883a 	add	r7,r7,r9
    5628:	2800451e 	bne	r5,zero,5740 <_free_r+0x198>
    562c:	31000217 	ldw	r4,8(r6)
    5630:	00800074 	movhi	r2,1
    5634:	10bb1e04 	addi	r2,r2,-5000
    5638:	20807b26 	beq	r4,r2,5828 <_free_r+0x280>
    563c:	30800317 	ldw	r2,12(r6)
    5640:	3a07883a 	add	r3,r7,r8
    5644:	19c00015 	stw	r7,0(r3)
    5648:	11000215 	stw	r4,8(r2)
    564c:	20800315 	stw	r2,12(r4)
    5650:	38800054 	ori	r2,r7,1
    5654:	40800115 	stw	r2,4(r8)
    5658:	28001a26 	beq	r5,zero,56c4 <_free_r+0x11c>
    565c:	8809883a 	mov	r4,r17
    5660:	dfc00217 	ldw	ra,8(sp)
    5664:	dc400117 	ldw	r17,4(sp)
    5668:	dc000017 	ldw	r16,0(sp)
    566c:	dec00304 	addi	sp,sp,12
    5670:	000a3101 	jmpi	a310 <__malloc_unlock>
    5674:	80bffe17 	ldw	r2,-8(r16)
    5678:	50c00204 	addi	r3,r10,8
    567c:	4091c83a 	sub	r8,r8,r2
    5680:	41000217 	ldw	r4,8(r8)
    5684:	388f883a 	add	r7,r7,r2
    5688:	20c06126 	beq	r4,r3,5810 <_free_r+0x268>
    568c:	40800317 	ldw	r2,12(r8)
    5690:	3247883a 	add	r3,r6,r9
    5694:	000b883a 	mov	r5,zero
    5698:	11000215 	stw	r4,8(r2)
    569c:	20800315 	stw	r2,12(r4)
    56a0:	18800117 	ldw	r2,4(r3)
    56a4:	1080004c 	andi	r2,r2,1
    56a8:	103fdd26 	beq	r2,zero,5620 <_free_r+0x78>
    56ac:	38800054 	ori	r2,r7,1
    56b0:	3a07883a 	add	r3,r7,r8
    56b4:	280ac03a 	cmpne	r5,r5,zero
    56b8:	40800115 	stw	r2,4(r8)
    56bc:	19c00015 	stw	r7,0(r3)
    56c0:	283fe61e 	bne	r5,zero,565c <_free_r+0xb4>
    56c4:	00807fc4 	movi	r2,511
    56c8:	11c01f2e 	bgeu	r2,r7,5748 <_free_r+0x1a0>
    56cc:	3806d27a 	srli	r3,r7,9
    56d0:	1800481e 	bne	r3,zero,57f4 <_free_r+0x24c>
    56d4:	3804d0fa 	srli	r2,r7,3
    56d8:	100690fa 	slli	r3,r2,3
    56dc:	1acd883a 	add	r6,r3,r11
    56e0:	31400217 	ldw	r5,8(r6)
    56e4:	31405926 	beq	r6,r5,584c <_free_r+0x2a4>
    56e8:	28800117 	ldw	r2,4(r5)
    56ec:	00ffff04 	movi	r3,-4
    56f0:	10c4703a 	and	r2,r2,r3
    56f4:	3880022e 	bgeu	r7,r2,5700 <_free_r+0x158>
    56f8:	29400217 	ldw	r5,8(r5)
    56fc:	317ffa1e 	bne	r6,r5,56e8 <_free_r+0x140>
    5700:	29800317 	ldw	r6,12(r5)
    5704:	41800315 	stw	r6,12(r8)
    5708:	41400215 	stw	r5,8(r8)
    570c:	8809883a 	mov	r4,r17
    5710:	2a000315 	stw	r8,12(r5)
    5714:	32000215 	stw	r8,8(r6)
    5718:	dfc00217 	ldw	ra,8(sp)
    571c:	dc400117 	ldw	r17,4(sp)
    5720:	dc000017 	ldw	r16,0(sp)
    5724:	dec00304 	addi	sp,sp,12
    5728:	000a3101 	jmpi	a310 <__malloc_unlock>
    572c:	dfc00217 	ldw	ra,8(sp)
    5730:	dc400117 	ldw	r17,4(sp)
    5734:	dc000017 	ldw	r16,0(sp)
    5738:	dec00304 	addi	sp,sp,12
    573c:	f800283a 	ret
    5740:	31000217 	ldw	r4,8(r6)
    5744:	003fbd06 	br	563c <_free_r+0x94>
    5748:	3806d0fa 	srli	r3,r7,3
    574c:	00800044 	movi	r2,1
    5750:	51400117 	ldw	r5,4(r10)
    5754:	180890fa 	slli	r4,r3,3
    5758:	1807d0ba 	srai	r3,r3,2
    575c:	22c9883a 	add	r4,r4,r11
    5760:	21800217 	ldw	r6,8(r4)
    5764:	10c4983a 	sll	r2,r2,r3
    5768:	41000315 	stw	r4,12(r8)
    576c:	41800215 	stw	r6,8(r8)
    5770:	288ab03a 	or	r5,r5,r2
    5774:	22000215 	stw	r8,8(r4)
    5778:	8809883a 	mov	r4,r17
    577c:	51400115 	stw	r5,4(r10)
    5780:	32000315 	stw	r8,12(r6)
    5784:	dfc00217 	ldw	ra,8(sp)
    5788:	dc400117 	ldw	r17,4(sp)
    578c:	dc000017 	ldw	r16,0(sp)
    5790:	dec00304 	addi	sp,sp,12
    5794:	000a3101 	jmpi	a310 <__malloc_unlock>
    5798:	2880004c 	andi	r2,r5,1
    579c:	3a4d883a 	add	r6,r7,r9
    57a0:	1000071e 	bne	r2,zero,57c0 <_free_r+0x218>
    57a4:	80bffe17 	ldw	r2,-8(r16)
    57a8:	4091c83a 	sub	r8,r8,r2
    57ac:	41000317 	ldw	r4,12(r8)
    57b0:	40c00217 	ldw	r3,8(r8)
    57b4:	308d883a 	add	r6,r6,r2
    57b8:	20c00215 	stw	r3,8(r4)
    57bc:	19000315 	stw	r4,12(r3)
    57c0:	00800074 	movhi	r2,1
    57c4:	1081cc04 	addi	r2,r2,1840
    57c8:	11000017 	ldw	r4,0(r2)
    57cc:	30c00054 	ori	r3,r6,1
    57d0:	52000215 	stw	r8,8(r10)
    57d4:	40c00115 	stw	r3,4(r8)
    57d8:	313fa036 	bltu	r6,r4,565c <_free_r+0xb4>
    57dc:	00800074 	movhi	r2,1
    57e0:	1081dd04 	addi	r2,r2,1908
    57e4:	11400017 	ldw	r5,0(r2)
    57e8:	8809883a 	mov	r4,r17
    57ec:	000547c0 	call	547c <_malloc_trim_r>
    57f0:	003f9a06 	br	565c <_free_r+0xb4>
    57f4:	00800104 	movi	r2,4
    57f8:	10c0072e 	bgeu	r2,r3,5818 <_free_r+0x270>
    57fc:	00800504 	movi	r2,20
    5800:	10c01936 	bltu	r2,r3,5868 <_free_r+0x2c0>
    5804:	188016c4 	addi	r2,r3,91
    5808:	100690fa 	slli	r3,r2,3
    580c:	003fb306 	br	56dc <_free_r+0x134>
    5810:	01400044 	movi	r5,1
    5814:	003f7e06 	br	5610 <_free_r+0x68>
    5818:	3804d1ba 	srli	r2,r7,6
    581c:	10800e04 	addi	r2,r2,56
    5820:	100690fa 	slli	r3,r2,3
    5824:	003fad06 	br	56dc <_free_r+0x134>
    5828:	22000315 	stw	r8,12(r4)
    582c:	22000215 	stw	r8,8(r4)
    5830:	3a05883a 	add	r2,r7,r8
    5834:	38c00054 	ori	r3,r7,1
    5838:	11c00015 	stw	r7,0(r2)
    583c:	41000215 	stw	r4,8(r8)
    5840:	40c00115 	stw	r3,4(r8)
    5844:	41000315 	stw	r4,12(r8)
    5848:	003f8406 	br	565c <_free_r+0xb4>
    584c:	1005d0ba 	srai	r2,r2,2
    5850:	00c00044 	movi	r3,1
    5854:	51000117 	ldw	r4,4(r10)
    5858:	1886983a 	sll	r3,r3,r2
    585c:	20c8b03a 	or	r4,r4,r3
    5860:	51000115 	stw	r4,4(r10)
    5864:	003fa706 	br	5704 <_free_r+0x15c>
    5868:	00801504 	movi	r2,84
    586c:	10c00436 	bltu	r2,r3,5880 <_free_r+0x2d8>
    5870:	3804d33a 	srli	r2,r7,12
    5874:	10801b84 	addi	r2,r2,110
    5878:	100690fa 	slli	r3,r2,3
    587c:	003f9706 	br	56dc <_free_r+0x134>
    5880:	00805504 	movi	r2,340
    5884:	10c00436 	bltu	r2,r3,5898 <_free_r+0x2f0>
    5888:	3804d3fa 	srli	r2,r7,15
    588c:	10801dc4 	addi	r2,r2,119
    5890:	100690fa 	slli	r3,r2,3
    5894:	003f9106 	br	56dc <_free_r+0x134>
    5898:	00815504 	movi	r2,1364
    589c:	10c0032e 	bgeu	r2,r3,58ac <_free_r+0x304>
    58a0:	00801f84 	movi	r2,126
    58a4:	00c0fc04 	movi	r3,1008
    58a8:	003f8c06 	br	56dc <_free_r+0x134>
    58ac:	3804d4ba 	srli	r2,r7,18
    58b0:	10801f04 	addi	r2,r2,124
    58b4:	100690fa 	slli	r3,r2,3
    58b8:	003f8806 	br	56dc <_free_r+0x134>

000058bc <__sfvwrite_r>:
    58bc:	30800217 	ldw	r2,8(r6)
    58c0:	defff504 	addi	sp,sp,-44
    58c4:	df000915 	stw	fp,36(sp)
    58c8:	dd800715 	stw	r22,28(sp)
    58cc:	dc800315 	stw	r18,12(sp)
    58d0:	dfc00a15 	stw	ra,40(sp)
    58d4:	ddc00815 	stw	r23,32(sp)
    58d8:	dd400615 	stw	r21,24(sp)
    58dc:	dd000515 	stw	r20,20(sp)
    58e0:	dcc00415 	stw	r19,16(sp)
    58e4:	dc400215 	stw	r17,8(sp)
    58e8:	dc000115 	stw	r16,4(sp)
    58ec:	302d883a 	mov	r22,r6
    58f0:	2039883a 	mov	fp,r4
    58f4:	2825883a 	mov	r18,r5
    58f8:	10001c26 	beq	r2,zero,596c <__sfvwrite_r+0xb0>
    58fc:	29c0030b 	ldhu	r7,12(r5)
    5900:	3880020c 	andi	r2,r7,8
    5904:	10002726 	beq	r2,zero,59a4 <__sfvwrite_r+0xe8>
    5908:	28800417 	ldw	r2,16(r5)
    590c:	10002526 	beq	r2,zero,59a4 <__sfvwrite_r+0xe8>
    5910:	3880008c 	andi	r2,r7,2
    5914:	b5400017 	ldw	r21,0(r22)
    5918:	10002826 	beq	r2,zero,59bc <__sfvwrite_r+0x100>
    591c:	0021883a 	mov	r16,zero
    5920:	0023883a 	mov	r17,zero
    5924:	880d883a 	mov	r6,r17
    5928:	e009883a 	mov	r4,fp
    592c:	00810004 	movi	r2,1024
    5930:	80006e26 	beq	r16,zero,5aec <__sfvwrite_r+0x230>
    5934:	800f883a 	mov	r7,r16
    5938:	91400717 	ldw	r5,28(r18)
    593c:	1400012e 	bgeu	r2,r16,5944 <__sfvwrite_r+0x88>
    5940:	100f883a 	mov	r7,r2
    5944:	90c00917 	ldw	r3,36(r18)
    5948:	183ee83a 	callr	r3
    594c:	1007883a 	mov	r3,r2
    5950:	80a1c83a 	sub	r16,r16,r2
    5954:	88a3883a 	add	r17,r17,r2
    5958:	00806d0e 	bge	zero,r2,5b10 <__sfvwrite_r+0x254>
    595c:	b0800217 	ldw	r2,8(r22)
    5960:	10c5c83a 	sub	r2,r2,r3
    5964:	b0800215 	stw	r2,8(r22)
    5968:	103fee1e 	bne	r2,zero,5924 <__sfvwrite_r+0x68>
    596c:	0009883a 	mov	r4,zero
    5970:	2005883a 	mov	r2,r4
    5974:	dfc00a17 	ldw	ra,40(sp)
    5978:	df000917 	ldw	fp,36(sp)
    597c:	ddc00817 	ldw	r23,32(sp)
    5980:	dd800717 	ldw	r22,28(sp)
    5984:	dd400617 	ldw	r21,24(sp)
    5988:	dd000517 	ldw	r20,20(sp)
    598c:	dcc00417 	ldw	r19,16(sp)
    5990:	dc800317 	ldw	r18,12(sp)
    5994:	dc400217 	ldw	r17,8(sp)
    5998:	dc000117 	ldw	r16,4(sp)
    599c:	dec00b04 	addi	sp,sp,44
    59a0:	f800283a 	ret
    59a4:	00036240 	call	3624 <__swsetup_r>
    59a8:	1000e41e 	bne	r2,zero,5d3c <__sfvwrite_r+0x480>
    59ac:	91c0030b 	ldhu	r7,12(r18)
    59b0:	b5400017 	ldw	r21,0(r22)
    59b4:	3880008c 	andi	r2,r7,2
    59b8:	103fd81e 	bne	r2,zero,591c <__sfvwrite_r+0x60>
    59bc:	3880004c 	andi	r2,r7,1
    59c0:	1005003a 	cmpeq	r2,r2,zero
    59c4:	10005726 	beq	r2,zero,5b24 <__sfvwrite_r+0x268>
    59c8:	0029883a 	mov	r20,zero
    59cc:	002f883a 	mov	r23,zero
    59d0:	a0004226 	beq	r20,zero,5adc <__sfvwrite_r+0x220>
    59d4:	3880800c 	andi	r2,r7,512
    59d8:	94000217 	ldw	r16,8(r18)
    59dc:	10008b26 	beq	r2,zero,5c0c <__sfvwrite_r+0x350>
    59e0:	800d883a 	mov	r6,r16
    59e4:	a400a536 	bltu	r20,r16,5c7c <__sfvwrite_r+0x3c0>
    59e8:	3881200c 	andi	r2,r7,1152
    59ec:	10002726 	beq	r2,zero,5a8c <__sfvwrite_r+0x1d0>
    59f0:	90800517 	ldw	r2,20(r18)
    59f4:	92000417 	ldw	r8,16(r18)
    59f8:	91400017 	ldw	r5,0(r18)
    59fc:	1087883a 	add	r3,r2,r2
    5a00:	1887883a 	add	r3,r3,r2
    5a04:	1808d7fa 	srli	r4,r3,31
    5a08:	2a21c83a 	sub	r16,r5,r8
    5a0c:	80800044 	addi	r2,r16,1
    5a10:	20c9883a 	add	r4,r4,r3
    5a14:	2027d07a 	srai	r19,r4,1
    5a18:	a085883a 	add	r2,r20,r2
    5a1c:	980d883a 	mov	r6,r19
    5a20:	9880022e 	bgeu	r19,r2,5a2c <__sfvwrite_r+0x170>
    5a24:	1027883a 	mov	r19,r2
    5a28:	100d883a 	mov	r6,r2
    5a2c:	3881000c 	andi	r2,r7,1024
    5a30:	1000b826 	beq	r2,zero,5d14 <__sfvwrite_r+0x458>
    5a34:	300b883a 	mov	r5,r6
    5a38:	e009883a 	mov	r4,fp
    5a3c:	00061300 	call	6130 <_malloc_r>
    5a40:	10003126 	beq	r2,zero,5b08 <__sfvwrite_r+0x24c>
    5a44:	91400417 	ldw	r5,16(r18)
    5a48:	1009883a 	mov	r4,r2
    5a4c:	800d883a 	mov	r6,r16
    5a50:	1023883a 	mov	r17,r2
    5a54:	00069540 	call	6954 <memcpy>
    5a58:	90c0030b 	ldhu	r3,12(r18)
    5a5c:	00beffc4 	movi	r2,-1025
    5a60:	1886703a 	and	r3,r3,r2
    5a64:	18c02014 	ori	r3,r3,128
    5a68:	90c0030d 	sth	r3,12(r18)
    5a6c:	9c07c83a 	sub	r3,r19,r16
    5a70:	8c05883a 	add	r2,r17,r16
    5a74:	a00d883a 	mov	r6,r20
    5a78:	a021883a 	mov	r16,r20
    5a7c:	90800015 	stw	r2,0(r18)
    5a80:	90c00215 	stw	r3,8(r18)
    5a84:	94400415 	stw	r17,16(r18)
    5a88:	94c00515 	stw	r19,20(r18)
    5a8c:	91000017 	ldw	r4,0(r18)
    5a90:	b80b883a 	mov	r5,r23
    5a94:	a023883a 	mov	r17,r20
    5a98:	00069f40 	call	69f4 <memmove>
    5a9c:	90c00217 	ldw	r3,8(r18)
    5aa0:	90800017 	ldw	r2,0(r18)
    5aa4:	a027883a 	mov	r19,r20
    5aa8:	1c07c83a 	sub	r3,r3,r16
    5aac:	1405883a 	add	r2,r2,r16
    5ab0:	90c00215 	stw	r3,8(r18)
    5ab4:	a021883a 	mov	r16,r20
    5ab8:	90800015 	stw	r2,0(r18)
    5abc:	b0800217 	ldw	r2,8(r22)
    5ac0:	1405c83a 	sub	r2,r2,r16
    5ac4:	b0800215 	stw	r2,8(r22)
    5ac8:	103fa826 	beq	r2,zero,596c <__sfvwrite_r+0xb0>
    5acc:	a469c83a 	sub	r20,r20,r17
    5ad0:	91c0030b 	ldhu	r7,12(r18)
    5ad4:	bcef883a 	add	r23,r23,r19
    5ad8:	a03fbe1e 	bne	r20,zero,59d4 <__sfvwrite_r+0x118>
    5adc:	adc00017 	ldw	r23,0(r21)
    5ae0:	ad000117 	ldw	r20,4(r21)
    5ae4:	ad400204 	addi	r21,r21,8
    5ae8:	003fb906 	br	59d0 <__sfvwrite_r+0x114>
    5aec:	ac400017 	ldw	r17,0(r21)
    5af0:	ac000117 	ldw	r16,4(r21)
    5af4:	ad400204 	addi	r21,r21,8
    5af8:	003f8a06 	br	5924 <__sfvwrite_r+0x68>
    5afc:	91400417 	ldw	r5,16(r18)
    5b00:	e009883a 	mov	r4,fp
    5b04:	00055a80 	call	55a8 <_free_r>
    5b08:	00800304 	movi	r2,12
    5b0c:	e0800015 	stw	r2,0(fp)
    5b10:	9080030b 	ldhu	r2,12(r18)
    5b14:	013fffc4 	movi	r4,-1
    5b18:	10801014 	ori	r2,r2,64
    5b1c:	9080030d 	sth	r2,12(r18)
    5b20:	003f9306 	br	5970 <__sfvwrite_r+0xb4>
    5b24:	0027883a 	mov	r19,zero
    5b28:	002f883a 	mov	r23,zero
    5b2c:	d8000015 	stw	zero,0(sp)
    5b30:	0029883a 	mov	r20,zero
    5b34:	98001e26 	beq	r19,zero,5bb0 <__sfvwrite_r+0x2f4>
    5b38:	d8c00017 	ldw	r3,0(sp)
    5b3c:	1804c03a 	cmpne	r2,r3,zero
    5b40:	10005e26 	beq	r2,zero,5cbc <__sfvwrite_r+0x400>
    5b44:	9821883a 	mov	r16,r19
    5b48:	a4c0012e 	bgeu	r20,r19,5b50 <__sfvwrite_r+0x294>
    5b4c:	a021883a 	mov	r16,r20
    5b50:	91000017 	ldw	r4,0(r18)
    5b54:	90800417 	ldw	r2,16(r18)
    5b58:	91800217 	ldw	r6,8(r18)
    5b5c:	91c00517 	ldw	r7,20(r18)
    5b60:	1100022e 	bgeu	r2,r4,5b6c <__sfvwrite_r+0x2b0>
    5b64:	31e3883a 	add	r17,r6,r7
    5b68:	8c001616 	blt	r17,r16,5bc4 <__sfvwrite_r+0x308>
    5b6c:	81c03816 	blt	r16,r7,5c50 <__sfvwrite_r+0x394>
    5b70:	90c00917 	ldw	r3,36(r18)
    5b74:	91400717 	ldw	r5,28(r18)
    5b78:	e009883a 	mov	r4,fp
    5b7c:	b80d883a 	mov	r6,r23
    5b80:	183ee83a 	callr	r3
    5b84:	1023883a 	mov	r17,r2
    5b88:	00bfe10e 	bge	zero,r2,5b10 <__sfvwrite_r+0x254>
    5b8c:	a469c83a 	sub	r20,r20,r17
    5b90:	a0001826 	beq	r20,zero,5bf4 <__sfvwrite_r+0x338>
    5b94:	b0800217 	ldw	r2,8(r22)
    5b98:	1445c83a 	sub	r2,r2,r17
    5b9c:	b0800215 	stw	r2,8(r22)
    5ba0:	103f7226 	beq	r2,zero,596c <__sfvwrite_r+0xb0>
    5ba4:	9c67c83a 	sub	r19,r19,r17
    5ba8:	bc6f883a 	add	r23,r23,r17
    5bac:	983fe21e 	bne	r19,zero,5b38 <__sfvwrite_r+0x27c>
    5bb0:	adc00017 	ldw	r23,0(r21)
    5bb4:	acc00117 	ldw	r19,4(r21)
    5bb8:	ad400204 	addi	r21,r21,8
    5bbc:	d8000015 	stw	zero,0(sp)
    5bc0:	003fdc06 	br	5b34 <__sfvwrite_r+0x278>
    5bc4:	b80b883a 	mov	r5,r23
    5bc8:	880d883a 	mov	r6,r17
    5bcc:	00069f40 	call	69f4 <memmove>
    5bd0:	90c00017 	ldw	r3,0(r18)
    5bd4:	e009883a 	mov	r4,fp
    5bd8:	900b883a 	mov	r5,r18
    5bdc:	1c47883a 	add	r3,r3,r17
    5be0:	90c00015 	stw	r3,0(r18)
    5be4:	0004f580 	call	4f58 <_fflush_r>
    5be8:	103fc91e 	bne	r2,zero,5b10 <__sfvwrite_r+0x254>
    5bec:	a469c83a 	sub	r20,r20,r17
    5bf0:	a03fe81e 	bne	r20,zero,5b94 <__sfvwrite_r+0x2d8>
    5bf4:	e009883a 	mov	r4,fp
    5bf8:	900b883a 	mov	r5,r18
    5bfc:	0004f580 	call	4f58 <_fflush_r>
    5c00:	103fc31e 	bne	r2,zero,5b10 <__sfvwrite_r+0x254>
    5c04:	d8000015 	stw	zero,0(sp)
    5c08:	003fe206 	br	5b94 <__sfvwrite_r+0x2d8>
    5c0c:	91000017 	ldw	r4,0(r18)
    5c10:	90800417 	ldw	r2,16(r18)
    5c14:	1100022e 	bgeu	r2,r4,5c20 <__sfvwrite_r+0x364>
    5c18:	8023883a 	mov	r17,r16
    5c1c:	85003136 	bltu	r16,r20,5ce4 <__sfvwrite_r+0x428>
    5c20:	91c00517 	ldw	r7,20(r18)
    5c24:	a1c01836 	bltu	r20,r7,5c88 <__sfvwrite_r+0x3cc>
    5c28:	90c00917 	ldw	r3,36(r18)
    5c2c:	91400717 	ldw	r5,28(r18)
    5c30:	e009883a 	mov	r4,fp
    5c34:	b80d883a 	mov	r6,r23
    5c38:	183ee83a 	callr	r3
    5c3c:	1021883a 	mov	r16,r2
    5c40:	00bfb30e 	bge	zero,r2,5b10 <__sfvwrite_r+0x254>
    5c44:	1023883a 	mov	r17,r2
    5c48:	1027883a 	mov	r19,r2
    5c4c:	003f9b06 	br	5abc <__sfvwrite_r+0x200>
    5c50:	b80b883a 	mov	r5,r23
    5c54:	800d883a 	mov	r6,r16
    5c58:	00069f40 	call	69f4 <memmove>
    5c5c:	90c00217 	ldw	r3,8(r18)
    5c60:	90800017 	ldw	r2,0(r18)
    5c64:	8023883a 	mov	r17,r16
    5c68:	1c07c83a 	sub	r3,r3,r16
    5c6c:	1405883a 	add	r2,r2,r16
    5c70:	90c00215 	stw	r3,8(r18)
    5c74:	90800015 	stw	r2,0(r18)
    5c78:	003fc406 	br	5b8c <__sfvwrite_r+0x2d0>
    5c7c:	a00d883a 	mov	r6,r20
    5c80:	a021883a 	mov	r16,r20
    5c84:	003f8106 	br	5a8c <__sfvwrite_r+0x1d0>
    5c88:	b80b883a 	mov	r5,r23
    5c8c:	a00d883a 	mov	r6,r20
    5c90:	00069f40 	call	69f4 <memmove>
    5c94:	90c00217 	ldw	r3,8(r18)
    5c98:	90800017 	ldw	r2,0(r18)
    5c9c:	a021883a 	mov	r16,r20
    5ca0:	1d07c83a 	sub	r3,r3,r20
    5ca4:	1505883a 	add	r2,r2,r20
    5ca8:	a023883a 	mov	r17,r20
    5cac:	a027883a 	mov	r19,r20
    5cb0:	90c00215 	stw	r3,8(r18)
    5cb4:	90800015 	stw	r2,0(r18)
    5cb8:	003f8006 	br	5abc <__sfvwrite_r+0x200>
    5cbc:	b809883a 	mov	r4,r23
    5cc0:	01400284 	movi	r5,10
    5cc4:	980d883a 	mov	r6,r19
    5cc8:	00068700 	call	6870 <memchr>
    5ccc:	10001726 	beq	r2,zero,5d2c <__sfvwrite_r+0x470>
    5cd0:	15c5c83a 	sub	r2,r2,r23
    5cd4:	15000044 	addi	r20,r2,1
    5cd8:	00800044 	movi	r2,1
    5cdc:	d8800015 	stw	r2,0(sp)
    5ce0:	003f9806 	br	5b44 <__sfvwrite_r+0x288>
    5ce4:	b80b883a 	mov	r5,r23
    5ce8:	800d883a 	mov	r6,r16
    5cec:	00069f40 	call	69f4 <memmove>
    5cf0:	90c00017 	ldw	r3,0(r18)
    5cf4:	e009883a 	mov	r4,fp
    5cf8:	900b883a 	mov	r5,r18
    5cfc:	1c07883a 	add	r3,r3,r16
    5d00:	90c00015 	stw	r3,0(r18)
    5d04:	8027883a 	mov	r19,r16
    5d08:	0004f580 	call	4f58 <_fflush_r>
    5d0c:	103f6b26 	beq	r2,zero,5abc <__sfvwrite_r+0x200>
    5d10:	003f7f06 	br	5b10 <__sfvwrite_r+0x254>
    5d14:	400b883a 	mov	r5,r8
    5d18:	e009883a 	mov	r4,fp
    5d1c:	0007bf80 	call	7bf8 <_realloc_r>
    5d20:	103f7626 	beq	r2,zero,5afc <__sfvwrite_r+0x240>
    5d24:	1023883a 	mov	r17,r2
    5d28:	003f5006 	br	5a6c <__sfvwrite_r+0x1b0>
    5d2c:	00c00044 	movi	r3,1
    5d30:	9d000044 	addi	r20,r19,1
    5d34:	d8c00015 	stw	r3,0(sp)
    5d38:	003f8206 	br	5b44 <__sfvwrite_r+0x288>
    5d3c:	9080030b 	ldhu	r2,12(r18)
    5d40:	00c00244 	movi	r3,9
    5d44:	013fffc4 	movi	r4,-1
    5d48:	10801014 	ori	r2,r2,64
    5d4c:	9080030d 	sth	r2,12(r18)
    5d50:	e0c00015 	stw	r3,0(fp)
    5d54:	003f0606 	br	5970 <__sfvwrite_r+0xb4>

00005d58 <_fwalk_reent>:
    5d58:	defff704 	addi	sp,sp,-36
    5d5c:	dcc00315 	stw	r19,12(sp)
    5d60:	24c0b804 	addi	r19,r4,736
    5d64:	dd800615 	stw	r22,24(sp)
    5d68:	dd400515 	stw	r21,20(sp)
    5d6c:	dfc00815 	stw	ra,32(sp)
    5d70:	ddc00715 	stw	r23,28(sp)
    5d74:	dd000415 	stw	r20,16(sp)
    5d78:	dc800215 	stw	r18,8(sp)
    5d7c:	dc400115 	stw	r17,4(sp)
    5d80:	dc000015 	stw	r16,0(sp)
    5d84:	202b883a 	mov	r21,r4
    5d88:	282d883a 	mov	r22,r5
    5d8c:	00051e00 	call	51e0 <__sfp_lock_acquire>
    5d90:	98002126 	beq	r19,zero,5e18 <_fwalk_reent+0xc0>
    5d94:	002f883a 	mov	r23,zero
    5d98:	9c800117 	ldw	r18,4(r19)
    5d9c:	9c000217 	ldw	r16,8(r19)
    5da0:	90bfffc4 	addi	r2,r18,-1
    5da4:	10000d16 	blt	r2,zero,5ddc <_fwalk_reent+0x84>
    5da8:	0023883a 	mov	r17,zero
    5dac:	053fffc4 	movi	r20,-1
    5db0:	8080030f 	ldh	r2,12(r16)
    5db4:	8c400044 	addi	r17,r17,1
    5db8:	10000626 	beq	r2,zero,5dd4 <_fwalk_reent+0x7c>
    5dbc:	8080038f 	ldh	r2,14(r16)
    5dc0:	800b883a 	mov	r5,r16
    5dc4:	a809883a 	mov	r4,r21
    5dc8:	15000226 	beq	r2,r20,5dd4 <_fwalk_reent+0x7c>
    5dcc:	b03ee83a 	callr	r22
    5dd0:	b8aeb03a 	or	r23,r23,r2
    5dd4:	84001704 	addi	r16,r16,92
    5dd8:	947ff51e 	bne	r18,r17,5db0 <_fwalk_reent+0x58>
    5ddc:	9cc00017 	ldw	r19,0(r19)
    5de0:	983fed1e 	bne	r19,zero,5d98 <_fwalk_reent+0x40>
    5de4:	00051e40 	call	51e4 <__sfp_lock_release>
    5de8:	b805883a 	mov	r2,r23
    5dec:	dfc00817 	ldw	ra,32(sp)
    5df0:	ddc00717 	ldw	r23,28(sp)
    5df4:	dd800617 	ldw	r22,24(sp)
    5df8:	dd400517 	ldw	r21,20(sp)
    5dfc:	dd000417 	ldw	r20,16(sp)
    5e00:	dcc00317 	ldw	r19,12(sp)
    5e04:	dc800217 	ldw	r18,8(sp)
    5e08:	dc400117 	ldw	r17,4(sp)
    5e0c:	dc000017 	ldw	r16,0(sp)
    5e10:	dec00904 	addi	sp,sp,36
    5e14:	f800283a 	ret
    5e18:	002f883a 	mov	r23,zero
    5e1c:	003ff106 	br	5de4 <_fwalk_reent+0x8c>

00005e20 <_fwalk>:
    5e20:	defff804 	addi	sp,sp,-32
    5e24:	dcc00315 	stw	r19,12(sp)
    5e28:	24c0b804 	addi	r19,r4,736
    5e2c:	dd400515 	stw	r21,20(sp)
    5e30:	dfc00715 	stw	ra,28(sp)
    5e34:	dd800615 	stw	r22,24(sp)
    5e38:	dd000415 	stw	r20,16(sp)
    5e3c:	dc800215 	stw	r18,8(sp)
    5e40:	dc400115 	stw	r17,4(sp)
    5e44:	dc000015 	stw	r16,0(sp)
    5e48:	282b883a 	mov	r21,r5
    5e4c:	00051e00 	call	51e0 <__sfp_lock_acquire>
    5e50:	98001f26 	beq	r19,zero,5ed0 <_fwalk+0xb0>
    5e54:	002d883a 	mov	r22,zero
    5e58:	9c800117 	ldw	r18,4(r19)
    5e5c:	9c000217 	ldw	r16,8(r19)
    5e60:	90bfffc4 	addi	r2,r18,-1
    5e64:	10000c16 	blt	r2,zero,5e98 <_fwalk+0x78>
    5e68:	0023883a 	mov	r17,zero
    5e6c:	053fffc4 	movi	r20,-1
    5e70:	8080030f 	ldh	r2,12(r16)
    5e74:	8c400044 	addi	r17,r17,1
    5e78:	10000526 	beq	r2,zero,5e90 <_fwalk+0x70>
    5e7c:	8080038f 	ldh	r2,14(r16)
    5e80:	8009883a 	mov	r4,r16
    5e84:	15000226 	beq	r2,r20,5e90 <_fwalk+0x70>
    5e88:	a83ee83a 	callr	r21
    5e8c:	b0acb03a 	or	r22,r22,r2
    5e90:	84001704 	addi	r16,r16,92
    5e94:	947ff61e 	bne	r18,r17,5e70 <_fwalk+0x50>
    5e98:	9cc00017 	ldw	r19,0(r19)
    5e9c:	983fee1e 	bne	r19,zero,5e58 <_fwalk+0x38>
    5ea0:	00051e40 	call	51e4 <__sfp_lock_release>
    5ea4:	b005883a 	mov	r2,r22
    5ea8:	dfc00717 	ldw	ra,28(sp)
    5eac:	dd800617 	ldw	r22,24(sp)
    5eb0:	dd400517 	ldw	r21,20(sp)
    5eb4:	dd000417 	ldw	r20,16(sp)
    5eb8:	dcc00317 	ldw	r19,12(sp)
    5ebc:	dc800217 	ldw	r18,8(sp)
    5ec0:	dc400117 	ldw	r17,4(sp)
    5ec4:	dc000017 	ldw	r16,0(sp)
    5ec8:	dec00804 	addi	sp,sp,32
    5ecc:	f800283a 	ret
    5ed0:	002d883a 	mov	r22,zero
    5ed4:	003ff206 	br	5ea0 <_fwalk+0x80>

00005ed8 <__locale_charset>:
    5ed8:	d0a00417 	ldw	r2,-32752(gp)
    5edc:	f800283a 	ret

00005ee0 <_localeconv_r>:
    5ee0:	00800074 	movhi	r2,1
    5ee4:	10b99404 	addi	r2,r2,-6576
    5ee8:	f800283a 	ret

00005eec <localeconv>:
    5eec:	00800074 	movhi	r2,1
    5ef0:	1081c804 	addi	r2,r2,1824
    5ef4:	11000017 	ldw	r4,0(r2)
    5ef8:	0005ee01 	jmpi	5ee0 <_localeconv_r>

00005efc <_setlocale_r>:
    5efc:	defffc04 	addi	sp,sp,-16
    5f00:	00c00074 	movhi	r3,1
    5f04:	18f98f04 	addi	r3,r3,-6596
    5f08:	dc800215 	stw	r18,8(sp)
    5f0c:	dc400115 	stw	r17,4(sp)
    5f10:	dc000015 	stw	r16,0(sp)
    5f14:	2023883a 	mov	r17,r4
    5f18:	2825883a 	mov	r18,r5
    5f1c:	dfc00315 	stw	ra,12(sp)
    5f20:	3021883a 	mov	r16,r6
    5f24:	3009883a 	mov	r4,r6
    5f28:	180b883a 	mov	r5,r3
    5f2c:	30000926 	beq	r6,zero,5f54 <_setlocale_r+0x58>
    5f30:	00084180 	call	8418 <strcmp>
    5f34:	8009883a 	mov	r4,r16
    5f38:	01400074 	movhi	r5,1
    5f3c:	29797a04 	addi	r5,r5,-6680
    5f40:	10000b1e 	bne	r2,zero,5f70 <_setlocale_r+0x74>
    5f44:	8c000d15 	stw	r16,52(r17)
    5f48:	8c800c15 	stw	r18,48(r17)
    5f4c:	00c00074 	movhi	r3,1
    5f50:	18f98f04 	addi	r3,r3,-6596
    5f54:	1805883a 	mov	r2,r3
    5f58:	dfc00317 	ldw	ra,12(sp)
    5f5c:	dc800217 	ldw	r18,8(sp)
    5f60:	dc400117 	ldw	r17,4(sp)
    5f64:	dc000017 	ldw	r16,0(sp)
    5f68:	dec00404 	addi	sp,sp,16
    5f6c:	f800283a 	ret
    5f70:	00084180 	call	8418 <strcmp>
    5f74:	0007883a 	mov	r3,zero
    5f78:	103ff226 	beq	r2,zero,5f44 <_setlocale_r+0x48>
    5f7c:	003ff506 	br	5f54 <_setlocale_r+0x58>

00005f80 <setlocale>:
    5f80:	01800074 	movhi	r6,1
    5f84:	3181c804 	addi	r6,r6,1824
    5f88:	2007883a 	mov	r3,r4
    5f8c:	31000017 	ldw	r4,0(r6)
    5f90:	280d883a 	mov	r6,r5
    5f94:	180b883a 	mov	r5,r3
    5f98:	0005efc1 	jmpi	5efc <_setlocale_r>

00005f9c <__smakebuf_r>:
    5f9c:	2880030b 	ldhu	r2,12(r5)
    5fa0:	deffed04 	addi	sp,sp,-76
    5fa4:	dc401015 	stw	r17,64(sp)
    5fa8:	1080008c 	andi	r2,r2,2
    5fac:	dc000f15 	stw	r16,60(sp)
    5fb0:	dfc01215 	stw	ra,72(sp)
    5fb4:	dc801115 	stw	r18,68(sp)
    5fb8:	2821883a 	mov	r16,r5
    5fbc:	2023883a 	mov	r17,r4
    5fc0:	10000b26 	beq	r2,zero,5ff0 <__smakebuf_r+0x54>
    5fc4:	28c010c4 	addi	r3,r5,67
    5fc8:	00800044 	movi	r2,1
    5fcc:	28800515 	stw	r2,20(r5)
    5fd0:	28c00415 	stw	r3,16(r5)
    5fd4:	28c00015 	stw	r3,0(r5)
    5fd8:	dfc01217 	ldw	ra,72(sp)
    5fdc:	dc801117 	ldw	r18,68(sp)
    5fe0:	dc401017 	ldw	r17,64(sp)
    5fe4:	dc000f17 	ldw	r16,60(sp)
    5fe8:	dec01304 	addi	sp,sp,76
    5fec:	f800283a 	ret
    5ff0:	2940038f 	ldh	r5,14(r5)
    5ff4:	28002116 	blt	r5,zero,607c <__smakebuf_r+0xe0>
    5ff8:	d80d883a 	mov	r6,sp
    5ffc:	000881c0 	call	881c <_fstat_r>
    6000:	10001e16 	blt	r2,zero,607c <__smakebuf_r+0xe0>
    6004:	d8800117 	ldw	r2,4(sp)
    6008:	00e00014 	movui	r3,32768
    600c:	113c000c 	andi	r4,r2,61440
    6010:	20c03126 	beq	r4,r3,60d8 <__smakebuf_r+0x13c>
    6014:	8080030b 	ldhu	r2,12(r16)
    6018:	00c80004 	movi	r3,8192
    601c:	10820014 	ori	r2,r2,2048
    6020:	8080030d 	sth	r2,12(r16)
    6024:	20c01e26 	beq	r4,r3,60a0 <__smakebuf_r+0x104>
    6028:	04810004 	movi	r18,1024
    602c:	8809883a 	mov	r4,r17
    6030:	900b883a 	mov	r5,r18
    6034:	00061300 	call	6130 <_malloc_r>
    6038:	1009883a 	mov	r4,r2
    603c:	10003126 	beq	r2,zero,6104 <__smakebuf_r+0x168>
    6040:	80c0030b 	ldhu	r3,12(r16)
    6044:	00800034 	movhi	r2,0
    6048:	1094b504 	addi	r2,r2,21204
    604c:	88800f15 	stw	r2,60(r17)
    6050:	18c02014 	ori	r3,r3,128
    6054:	84800515 	stw	r18,20(r16)
    6058:	80c0030d 	sth	r3,12(r16)
    605c:	81000415 	stw	r4,16(r16)
    6060:	81000015 	stw	r4,0(r16)
    6064:	dfc01217 	ldw	ra,72(sp)
    6068:	dc801117 	ldw	r18,68(sp)
    606c:	dc401017 	ldw	r17,64(sp)
    6070:	dc000f17 	ldw	r16,60(sp)
    6074:	dec01304 	addi	sp,sp,76
    6078:	f800283a 	ret
    607c:	80c0030b 	ldhu	r3,12(r16)
    6080:	1880200c 	andi	r2,r3,128
    6084:	10000426 	beq	r2,zero,6098 <__smakebuf_r+0xfc>
    6088:	04801004 	movi	r18,64
    608c:	18820014 	ori	r2,r3,2048
    6090:	8080030d 	sth	r2,12(r16)
    6094:	003fe506 	br	602c <__smakebuf_r+0x90>
    6098:	04810004 	movi	r18,1024
    609c:	003ffb06 	br	608c <__smakebuf_r+0xf0>
    60a0:	8140038f 	ldh	r5,14(r16)
    60a4:	8809883a 	mov	r4,r17
    60a8:	00088900 	call	8890 <_isatty_r>
    60ac:	103fde26 	beq	r2,zero,6028 <__smakebuf_r+0x8c>
    60b0:	8080030b 	ldhu	r2,12(r16)
    60b4:	80c010c4 	addi	r3,r16,67
    60b8:	04810004 	movi	r18,1024
    60bc:	10800054 	ori	r2,r2,1
    60c0:	8080030d 	sth	r2,12(r16)
    60c4:	00800044 	movi	r2,1
    60c8:	80c00415 	stw	r3,16(r16)
    60cc:	80800515 	stw	r2,20(r16)
    60d0:	80c00015 	stw	r3,0(r16)
    60d4:	003fd506 	br	602c <__smakebuf_r+0x90>
    60d8:	80c00a17 	ldw	r3,40(r16)
    60dc:	00800074 	movhi	r2,1
    60e0:	10a0b504 	addi	r2,r2,-32044
    60e4:	18bfcb1e 	bne	r3,r2,6014 <__smakebuf_r+0x78>
    60e8:	8080030b 	ldhu	r2,12(r16)
    60ec:	00c10004 	movi	r3,1024
    60f0:	1825883a 	mov	r18,r3
    60f4:	10c4b03a 	or	r2,r2,r3
    60f8:	8080030d 	sth	r2,12(r16)
    60fc:	80c01315 	stw	r3,76(r16)
    6100:	003fca06 	br	602c <__smakebuf_r+0x90>
    6104:	8100030b 	ldhu	r4,12(r16)
    6108:	2080800c 	andi	r2,r4,512
    610c:	103fb21e 	bne	r2,zero,5fd8 <__smakebuf_r+0x3c>
    6110:	80c010c4 	addi	r3,r16,67
    6114:	21000094 	ori	r4,r4,2
    6118:	00800044 	movi	r2,1
    611c:	80800515 	stw	r2,20(r16)
    6120:	8100030d 	sth	r4,12(r16)
    6124:	80c00415 	stw	r3,16(r16)
    6128:	80c00015 	stw	r3,0(r16)
    612c:	003faa06 	br	5fd8 <__smakebuf_r+0x3c>

00006130 <_malloc_r>:
    6130:	defff604 	addi	sp,sp,-40
    6134:	28c002c4 	addi	r3,r5,11
    6138:	00800584 	movi	r2,22
    613c:	dc800215 	stw	r18,8(sp)
    6140:	dfc00915 	stw	ra,36(sp)
    6144:	df000815 	stw	fp,32(sp)
    6148:	ddc00715 	stw	r23,28(sp)
    614c:	dd800615 	stw	r22,24(sp)
    6150:	dd400515 	stw	r21,20(sp)
    6154:	dd000415 	stw	r20,16(sp)
    6158:	dcc00315 	stw	r19,12(sp)
    615c:	dc400115 	stw	r17,4(sp)
    6160:	dc000015 	stw	r16,0(sp)
    6164:	2025883a 	mov	r18,r4
    6168:	10c01236 	bltu	r2,r3,61b4 <_malloc_r+0x84>
    616c:	04400404 	movi	r17,16
    6170:	8940142e 	bgeu	r17,r5,61c4 <_malloc_r+0x94>
    6174:	00800304 	movi	r2,12
    6178:	0007883a 	mov	r3,zero
    617c:	90800015 	stw	r2,0(r18)
    6180:	1805883a 	mov	r2,r3
    6184:	dfc00917 	ldw	ra,36(sp)
    6188:	df000817 	ldw	fp,32(sp)
    618c:	ddc00717 	ldw	r23,28(sp)
    6190:	dd800617 	ldw	r22,24(sp)
    6194:	dd400517 	ldw	r21,20(sp)
    6198:	dd000417 	ldw	r20,16(sp)
    619c:	dcc00317 	ldw	r19,12(sp)
    61a0:	dc800217 	ldw	r18,8(sp)
    61a4:	dc400117 	ldw	r17,4(sp)
    61a8:	dc000017 	ldw	r16,0(sp)
    61ac:	dec00a04 	addi	sp,sp,40
    61b0:	f800283a 	ret
    61b4:	00bffe04 	movi	r2,-8
    61b8:	18a2703a 	and	r17,r3,r2
    61bc:	883fed16 	blt	r17,zero,6174 <_malloc_r+0x44>
    61c0:	897fec36 	bltu	r17,r5,6174 <_malloc_r+0x44>
    61c4:	9009883a 	mov	r4,r18
    61c8:	000a2f00 	call	a2f0 <__malloc_lock>
    61cc:	00807dc4 	movi	r2,503
    61d0:	14402b2e 	bgeu	r2,r17,6280 <_malloc_r+0x150>
    61d4:	8806d27a 	srli	r3,r17,9
    61d8:	18003f1e 	bne	r3,zero,62d8 <_malloc_r+0x1a8>
    61dc:	880cd0fa 	srli	r6,r17,3
    61e0:	300490fa 	slli	r2,r6,3
    61e4:	02c00074 	movhi	r11,1
    61e8:	5afb1c04 	addi	r11,r11,-5008
    61ec:	12cb883a 	add	r5,r2,r11
    61f0:	2c000317 	ldw	r16,12(r5)
    61f4:	580f883a 	mov	r7,r11
    61f8:	2c00041e 	bne	r5,r16,620c <_malloc_r+0xdc>
    61fc:	00000a06 	br	6228 <_malloc_r+0xf8>
    6200:	1800860e 	bge	r3,zero,641c <_malloc_r+0x2ec>
    6204:	84000317 	ldw	r16,12(r16)
    6208:	2c000726 	beq	r5,r16,6228 <_malloc_r+0xf8>
    620c:	80800117 	ldw	r2,4(r16)
    6210:	00ffff04 	movi	r3,-4
    6214:	10c8703a 	and	r4,r2,r3
    6218:	2447c83a 	sub	r3,r4,r17
    621c:	008003c4 	movi	r2,15
    6220:	10fff70e 	bge	r2,r3,6200 <_malloc_r+0xd0>
    6224:	31bfffc4 	addi	r6,r6,-1
    6228:	32400044 	addi	r9,r6,1
    622c:	02800074 	movhi	r10,1
    6230:	52bb1e04 	addi	r10,r10,-5000
    6234:	54000217 	ldw	r16,8(r10)
    6238:	8280a026 	beq	r16,r10,64bc <_malloc_r+0x38c>
    623c:	80800117 	ldw	r2,4(r16)
    6240:	00ffff04 	movi	r3,-4
    6244:	10ca703a 	and	r5,r2,r3
    6248:	2c4dc83a 	sub	r6,r5,r17
    624c:	008003c4 	movi	r2,15
    6250:	11808316 	blt	r2,r6,6460 <_malloc_r+0x330>
    6254:	52800315 	stw	r10,12(r10)
    6258:	52800215 	stw	r10,8(r10)
    625c:	30002916 	blt	r6,zero,6304 <_malloc_r+0x1d4>
    6260:	8147883a 	add	r3,r16,r5
    6264:	18800117 	ldw	r2,4(r3)
    6268:	9009883a 	mov	r4,r18
    626c:	10800054 	ori	r2,r2,1
    6270:	18800115 	stw	r2,4(r3)
    6274:	000a3100 	call	a310 <__malloc_unlock>
    6278:	80c00204 	addi	r3,r16,8
    627c:	003fc006 	br	6180 <_malloc_r+0x50>
    6280:	02c00074 	movhi	r11,1
    6284:	5afb1c04 	addi	r11,r11,-5008
    6288:	8ac5883a 	add	r2,r17,r11
    628c:	14000317 	ldw	r16,12(r2)
    6290:	580f883a 	mov	r7,r11
    6294:	8806d0fa 	srli	r3,r17,3
    6298:	14006c26 	beq	r2,r16,644c <_malloc_r+0x31c>
    629c:	80c00117 	ldw	r3,4(r16)
    62a0:	00bfff04 	movi	r2,-4
    62a4:	81800317 	ldw	r6,12(r16)
    62a8:	1886703a 	and	r3,r3,r2
    62ac:	80c7883a 	add	r3,r16,r3
    62b0:	18800117 	ldw	r2,4(r3)
    62b4:	81400217 	ldw	r5,8(r16)
    62b8:	9009883a 	mov	r4,r18
    62bc:	10800054 	ori	r2,r2,1
    62c0:	18800115 	stw	r2,4(r3)
    62c4:	31400215 	stw	r5,8(r6)
    62c8:	29800315 	stw	r6,12(r5)
    62cc:	000a3100 	call	a310 <__malloc_unlock>
    62d0:	80c00204 	addi	r3,r16,8
    62d4:	003faa06 	br	6180 <_malloc_r+0x50>
    62d8:	00800104 	movi	r2,4
    62dc:	10c0052e 	bgeu	r2,r3,62f4 <_malloc_r+0x1c4>
    62e0:	00800504 	movi	r2,20
    62e4:	10c07836 	bltu	r2,r3,64c8 <_malloc_r+0x398>
    62e8:	198016c4 	addi	r6,r3,91
    62ec:	300490fa 	slli	r2,r6,3
    62f0:	003fbc06 	br	61e4 <_malloc_r+0xb4>
    62f4:	8804d1ba 	srli	r2,r17,6
    62f8:	11800e04 	addi	r6,r2,56
    62fc:	300490fa 	slli	r2,r6,3
    6300:	003fb806 	br	61e4 <_malloc_r+0xb4>
    6304:	00807fc4 	movi	r2,511
    6308:	1140bb36 	bltu	r2,r5,65f8 <_malloc_r+0x4c8>
    630c:	2806d0fa 	srli	r3,r5,3
    6310:	573ffe04 	addi	fp,r10,-8
    6314:	00800044 	movi	r2,1
    6318:	180890fa 	slli	r4,r3,3
    631c:	1807d0ba 	srai	r3,r3,2
    6320:	e1c00117 	ldw	r7,4(fp)
    6324:	5909883a 	add	r4,r11,r4
    6328:	21400217 	ldw	r5,8(r4)
    632c:	10c4983a 	sll	r2,r2,r3
    6330:	81000315 	stw	r4,12(r16)
    6334:	81400215 	stw	r5,8(r16)
    6338:	388eb03a 	or	r7,r7,r2
    633c:	2c000315 	stw	r16,12(r5)
    6340:	24000215 	stw	r16,8(r4)
    6344:	e1c00115 	stw	r7,4(fp)
    6348:	4807883a 	mov	r3,r9
    634c:	4800cd16 	blt	r9,zero,6684 <_malloc_r+0x554>
    6350:	1807d0ba 	srai	r3,r3,2
    6354:	00800044 	movi	r2,1
    6358:	10c8983a 	sll	r4,r2,r3
    635c:	39004436 	bltu	r7,r4,6470 <_malloc_r+0x340>
    6360:	21c4703a 	and	r2,r4,r7
    6364:	10000a1e 	bne	r2,zero,6390 <_malloc_r+0x260>
    6368:	2109883a 	add	r4,r4,r4
    636c:	00bfff04 	movi	r2,-4
    6370:	4884703a 	and	r2,r9,r2
    6374:	3906703a 	and	r3,r7,r4
    6378:	12400104 	addi	r9,r2,4
    637c:	1800041e 	bne	r3,zero,6390 <_malloc_r+0x260>
    6380:	2109883a 	add	r4,r4,r4
    6384:	3904703a 	and	r2,r7,r4
    6388:	4a400104 	addi	r9,r9,4
    638c:	103ffc26 	beq	r2,zero,6380 <_malloc_r+0x250>
    6390:	480490fa 	slli	r2,r9,3
    6394:	4819883a 	mov	r12,r9
    6398:	023fff04 	movi	r8,-4
    639c:	589b883a 	add	r13,r11,r2
    63a0:	6807883a 	mov	r3,r13
    63a4:	014003c4 	movi	r5,15
    63a8:	1c000317 	ldw	r16,12(r3)
    63ac:	1c00041e 	bne	r3,r16,63c0 <_malloc_r+0x290>
    63b0:	0000a706 	br	6650 <_malloc_r+0x520>
    63b4:	3000ab0e 	bge	r6,zero,6664 <_malloc_r+0x534>
    63b8:	84000317 	ldw	r16,12(r16)
    63bc:	1c00a426 	beq	r3,r16,6650 <_malloc_r+0x520>
    63c0:	80800117 	ldw	r2,4(r16)
    63c4:	1204703a 	and	r2,r2,r8
    63c8:	144dc83a 	sub	r6,r2,r17
    63cc:	29bff90e 	bge	r5,r6,63b4 <_malloc_r+0x284>
    63d0:	81000317 	ldw	r4,12(r16)
    63d4:	80c00217 	ldw	r3,8(r16)
    63d8:	89400054 	ori	r5,r17,1
    63dc:	8445883a 	add	r2,r16,r17
    63e0:	20c00215 	stw	r3,8(r4)
    63e4:	19000315 	stw	r4,12(r3)
    63e8:	81400115 	stw	r5,4(r16)
    63ec:	1187883a 	add	r3,r2,r6
    63f0:	31000054 	ori	r4,r6,1
    63f4:	50800315 	stw	r2,12(r10)
    63f8:	50800215 	stw	r2,8(r10)
    63fc:	19800015 	stw	r6,0(r3)
    6400:	11000115 	stw	r4,4(r2)
    6404:	12800215 	stw	r10,8(r2)
    6408:	12800315 	stw	r10,12(r2)
    640c:	9009883a 	mov	r4,r18
    6410:	000a3100 	call	a310 <__malloc_unlock>
    6414:	80c00204 	addi	r3,r16,8
    6418:	003f5906 	br	6180 <_malloc_r+0x50>
    641c:	8109883a 	add	r4,r16,r4
    6420:	20800117 	ldw	r2,4(r4)
    6424:	80c00217 	ldw	r3,8(r16)
    6428:	81400317 	ldw	r5,12(r16)
    642c:	10800054 	ori	r2,r2,1
    6430:	20800115 	stw	r2,4(r4)
    6434:	28c00215 	stw	r3,8(r5)
    6438:	19400315 	stw	r5,12(r3)
    643c:	9009883a 	mov	r4,r18
    6440:	000a3100 	call	a310 <__malloc_unlock>
    6444:	80c00204 	addi	r3,r16,8
    6448:	003f4d06 	br	6180 <_malloc_r+0x50>
    644c:	80800204 	addi	r2,r16,8
    6450:	14000317 	ldw	r16,12(r2)
    6454:	143f911e 	bne	r2,r16,629c <_malloc_r+0x16c>
    6458:	1a400084 	addi	r9,r3,2
    645c:	003f7306 	br	622c <_malloc_r+0xfc>
    6460:	88c00054 	ori	r3,r17,1
    6464:	8445883a 	add	r2,r16,r17
    6468:	80c00115 	stw	r3,4(r16)
    646c:	003fdf06 	br	63ec <_malloc_r+0x2bc>
    6470:	e4000217 	ldw	r16,8(fp)
    6474:	00bfff04 	movi	r2,-4
    6478:	80c00117 	ldw	r3,4(r16)
    647c:	802d883a 	mov	r22,r16
    6480:	18aa703a 	and	r21,r3,r2
    6484:	ac401636 	bltu	r21,r17,64e0 <_malloc_r+0x3b0>
    6488:	ac49c83a 	sub	r4,r21,r17
    648c:	008003c4 	movi	r2,15
    6490:	1100130e 	bge	r2,r4,64e0 <_malloc_r+0x3b0>
    6494:	88800054 	ori	r2,r17,1
    6498:	8447883a 	add	r3,r16,r17
    649c:	80800115 	stw	r2,4(r16)
    64a0:	20800054 	ori	r2,r4,1
    64a4:	18800115 	stw	r2,4(r3)
    64a8:	e0c00215 	stw	r3,8(fp)
    64ac:	9009883a 	mov	r4,r18
    64b0:	000a3100 	call	a310 <__malloc_unlock>
    64b4:	80c00204 	addi	r3,r16,8
    64b8:	003f3106 	br	6180 <_malloc_r+0x50>
    64bc:	39c00117 	ldw	r7,4(r7)
    64c0:	573ffe04 	addi	fp,r10,-8
    64c4:	003fa006 	br	6348 <_malloc_r+0x218>
    64c8:	00801504 	movi	r2,84
    64cc:	10c06736 	bltu	r2,r3,666c <_malloc_r+0x53c>
    64d0:	8804d33a 	srli	r2,r17,12
    64d4:	11801b84 	addi	r6,r2,110
    64d8:	300490fa 	slli	r2,r6,3
    64dc:	003f4106 	br	61e4 <_malloc_r+0xb4>
    64e0:	d0a01617 	ldw	r2,-32680(gp)
    64e4:	d0e00617 	ldw	r3,-32744(gp)
    64e8:	053fffc4 	movi	r20,-1
    64ec:	10800404 	addi	r2,r2,16
    64f0:	88a7883a 	add	r19,r17,r2
    64f4:	1d000326 	beq	r3,r20,6504 <_malloc_r+0x3d4>
    64f8:	98c3ffc4 	addi	r3,r19,4095
    64fc:	00bc0004 	movi	r2,-4096
    6500:	18a6703a 	and	r19,r3,r2
    6504:	9009883a 	mov	r4,r18
    6508:	980b883a 	mov	r5,r19
    650c:	000825c0 	call	825c <_sbrk_r>
    6510:	1009883a 	mov	r4,r2
    6514:	15000426 	beq	r2,r20,6528 <_malloc_r+0x3f8>
    6518:	854b883a 	add	r5,r16,r21
    651c:	1029883a 	mov	r20,r2
    6520:	11405a2e 	bgeu	r2,r5,668c <_malloc_r+0x55c>
    6524:	87000c26 	beq	r16,fp,6558 <_malloc_r+0x428>
    6528:	e4000217 	ldw	r16,8(fp)
    652c:	80c00117 	ldw	r3,4(r16)
    6530:	00bfff04 	movi	r2,-4
    6534:	1884703a 	and	r2,r3,r2
    6538:	14400336 	bltu	r2,r17,6548 <_malloc_r+0x418>
    653c:	1449c83a 	sub	r4,r2,r17
    6540:	008003c4 	movi	r2,15
    6544:	113fd316 	blt	r2,r4,6494 <_malloc_r+0x364>
    6548:	9009883a 	mov	r4,r18
    654c:	000a3100 	call	a310 <__malloc_unlock>
    6550:	0007883a 	mov	r3,zero
    6554:	003f0a06 	br	6180 <_malloc_r+0x50>
    6558:	05c00074 	movhi	r23,1
    655c:	bdc1e704 	addi	r23,r23,1948
    6560:	b8800017 	ldw	r2,0(r23)
    6564:	988d883a 	add	r6,r19,r2
    6568:	b9800015 	stw	r6,0(r23)
    656c:	d0e00617 	ldw	r3,-32744(gp)
    6570:	00bfffc4 	movi	r2,-1
    6574:	18808e26 	beq	r3,r2,67b0 <_malloc_r+0x680>
    6578:	2145c83a 	sub	r2,r4,r5
    657c:	3085883a 	add	r2,r6,r2
    6580:	b8800015 	stw	r2,0(r23)
    6584:	20c001cc 	andi	r3,r4,7
    6588:	18005f1e 	bne	r3,zero,6708 <_malloc_r+0x5d8>
    658c:	000b883a 	mov	r5,zero
    6590:	a4c5883a 	add	r2,r20,r19
    6594:	1083ffcc 	andi	r2,r2,4095
    6598:	00c40004 	movi	r3,4096
    659c:	1887c83a 	sub	r3,r3,r2
    65a0:	28e7883a 	add	r19,r5,r3
    65a4:	9009883a 	mov	r4,r18
    65a8:	980b883a 	mov	r5,r19
    65ac:	000825c0 	call	825c <_sbrk_r>
    65b0:	1007883a 	mov	r3,r2
    65b4:	00bfffc4 	movi	r2,-1
    65b8:	18807a26 	beq	r3,r2,67a4 <_malloc_r+0x674>
    65bc:	1d05c83a 	sub	r2,r3,r20
    65c0:	9885883a 	add	r2,r19,r2
    65c4:	10c00054 	ori	r3,r2,1
    65c8:	b8800017 	ldw	r2,0(r23)
    65cc:	a021883a 	mov	r16,r20
    65d0:	a0c00115 	stw	r3,4(r20)
    65d4:	9885883a 	add	r2,r19,r2
    65d8:	b8800015 	stw	r2,0(r23)
    65dc:	e5000215 	stw	r20,8(fp)
    65e0:	b7003626 	beq	r22,fp,66bc <_malloc_r+0x58c>
    65e4:	018003c4 	movi	r6,15
    65e8:	35404b36 	bltu	r6,r21,6718 <_malloc_r+0x5e8>
    65ec:	00800044 	movi	r2,1
    65f0:	a0800115 	stw	r2,4(r20)
    65f4:	003fcd06 	br	652c <_malloc_r+0x3fc>
    65f8:	2808d27a 	srli	r4,r5,9
    65fc:	2000371e 	bne	r4,zero,66dc <_malloc_r+0x5ac>
    6600:	2808d0fa 	srli	r4,r5,3
    6604:	200690fa 	slli	r3,r4,3
    6608:	1ad1883a 	add	r8,r3,r11
    660c:	41800217 	ldw	r6,8(r8)
    6610:	41805b26 	beq	r8,r6,6780 <_malloc_r+0x650>
    6614:	30800117 	ldw	r2,4(r6)
    6618:	00ffff04 	movi	r3,-4
    661c:	10c4703a 	and	r2,r2,r3
    6620:	2880022e 	bgeu	r5,r2,662c <_malloc_r+0x4fc>
    6624:	31800217 	ldw	r6,8(r6)
    6628:	41bffa1e 	bne	r8,r6,6614 <_malloc_r+0x4e4>
    662c:	32000317 	ldw	r8,12(r6)
    6630:	39c00117 	ldw	r7,4(r7)
    6634:	82000315 	stw	r8,12(r16)
    6638:	81800215 	stw	r6,8(r16)
    663c:	07000074 	movhi	fp,1
    6640:	e73b1c04 	addi	fp,fp,-5008
    6644:	34000315 	stw	r16,12(r6)
    6648:	44000215 	stw	r16,8(r8)
    664c:	003f3e06 	br	6348 <_malloc_r+0x218>
    6650:	63000044 	addi	r12,r12,1
    6654:	608000cc 	andi	r2,r12,3
    6658:	10005d26 	beq	r2,zero,67d0 <_malloc_r+0x6a0>
    665c:	18c00204 	addi	r3,r3,8
    6660:	003f5106 	br	63a8 <_malloc_r+0x278>
    6664:	8089883a 	add	r4,r16,r2
    6668:	003f6d06 	br	6420 <_malloc_r+0x2f0>
    666c:	00805504 	movi	r2,340
    6670:	10c02036 	bltu	r2,r3,66f4 <_malloc_r+0x5c4>
    6674:	8804d3fa 	srli	r2,r17,15
    6678:	11801dc4 	addi	r6,r2,119
    667c:	300490fa 	slli	r2,r6,3
    6680:	003ed806 	br	61e4 <_malloc_r+0xb4>
    6684:	48c000c4 	addi	r3,r9,3
    6688:	003f3106 	br	6350 <_malloc_r+0x220>
    668c:	05c00074 	movhi	r23,1
    6690:	bdc1e704 	addi	r23,r23,1948
    6694:	b8800017 	ldw	r2,0(r23)
    6698:	988d883a 	add	r6,r19,r2
    669c:	b9800015 	stw	r6,0(r23)
    66a0:	293fb21e 	bne	r5,r4,656c <_malloc_r+0x43c>
    66a4:	2083ffcc 	andi	r2,r4,4095
    66a8:	103fb01e 	bne	r2,zero,656c <_malloc_r+0x43c>
    66ac:	e4000217 	ldw	r16,8(fp)
    66b0:	9d45883a 	add	r2,r19,r21
    66b4:	10800054 	ori	r2,r2,1
    66b8:	80800115 	stw	r2,4(r16)
    66bc:	b8c00017 	ldw	r3,0(r23)
    66c0:	d0a01717 	ldw	r2,-32676(gp)
    66c4:	10c0012e 	bgeu	r2,r3,66cc <_malloc_r+0x59c>
    66c8:	d0e01715 	stw	r3,-32676(gp)
    66cc:	d0a01817 	ldw	r2,-32672(gp)
    66d0:	10ff962e 	bgeu	r2,r3,652c <_malloc_r+0x3fc>
    66d4:	d0e01815 	stw	r3,-32672(gp)
    66d8:	003f9406 	br	652c <_malloc_r+0x3fc>
    66dc:	00800104 	movi	r2,4
    66e0:	11001e36 	bltu	r2,r4,675c <_malloc_r+0x62c>
    66e4:	2804d1ba 	srli	r2,r5,6
    66e8:	11000e04 	addi	r4,r2,56
    66ec:	200690fa 	slli	r3,r4,3
    66f0:	003fc506 	br	6608 <_malloc_r+0x4d8>
    66f4:	00815504 	movi	r2,1364
    66f8:	10c01d2e 	bgeu	r2,r3,6770 <_malloc_r+0x640>
    66fc:	01801f84 	movi	r6,126
    6700:	0080fc04 	movi	r2,1008
    6704:	003eb706 	br	61e4 <_malloc_r+0xb4>
    6708:	00800204 	movi	r2,8
    670c:	10cbc83a 	sub	r5,r2,r3
    6710:	2169883a 	add	r20,r4,r5
    6714:	003f9e06 	br	6590 <_malloc_r+0x460>
    6718:	00bffe04 	movi	r2,-8
    671c:	a93ffd04 	addi	r4,r21,-12
    6720:	2088703a 	and	r4,r4,r2
    6724:	b10b883a 	add	r5,r22,r4
    6728:	00c00144 	movi	r3,5
    672c:	28c00215 	stw	r3,8(r5)
    6730:	28c00115 	stw	r3,4(r5)
    6734:	b0800117 	ldw	r2,4(r22)
    6738:	1080004c 	andi	r2,r2,1
    673c:	2084b03a 	or	r2,r4,r2
    6740:	b0800115 	stw	r2,4(r22)
    6744:	313fdd2e 	bgeu	r6,r4,66bc <_malloc_r+0x58c>
    6748:	b1400204 	addi	r5,r22,8
    674c:	9009883a 	mov	r4,r18
    6750:	00055a80 	call	55a8 <_free_r>
    6754:	e4000217 	ldw	r16,8(fp)
    6758:	003fd806 	br	66bc <_malloc_r+0x58c>
    675c:	00800504 	movi	r2,20
    6760:	11001536 	bltu	r2,r4,67b8 <_malloc_r+0x688>
    6764:	210016c4 	addi	r4,r4,91
    6768:	200690fa 	slli	r3,r4,3
    676c:	003fa606 	br	6608 <_malloc_r+0x4d8>
    6770:	8804d4ba 	srli	r2,r17,18
    6774:	11801f04 	addi	r6,r2,124
    6778:	300490fa 	slli	r2,r6,3
    677c:	003e9906 	br	61e4 <_malloc_r+0xb4>
    6780:	2009d0ba 	srai	r4,r4,2
    6784:	01400074 	movhi	r5,1
    6788:	297b1c04 	addi	r5,r5,-5008
    678c:	00c00044 	movi	r3,1
    6790:	28800117 	ldw	r2,4(r5)
    6794:	1906983a 	sll	r3,r3,r4
    6798:	10c4b03a 	or	r2,r2,r3
    679c:	28800115 	stw	r2,4(r5)
    67a0:	003fa306 	br	6630 <_malloc_r+0x500>
    67a4:	0027883a 	mov	r19,zero
    67a8:	00c00044 	movi	r3,1
    67ac:	003f8606 	br	65c8 <_malloc_r+0x498>
    67b0:	d1200615 	stw	r4,-32744(gp)
    67b4:	003f7306 	br	6584 <_malloc_r+0x454>
    67b8:	00801504 	movi	r2,84
    67bc:	11001936 	bltu	r2,r4,6824 <_malloc_r+0x6f4>
    67c0:	2804d33a 	srli	r2,r5,12
    67c4:	11001b84 	addi	r4,r2,110
    67c8:	200690fa 	slli	r3,r4,3
    67cc:	003f8e06 	br	6608 <_malloc_r+0x4d8>
    67d0:	480b883a 	mov	r5,r9
    67d4:	6807883a 	mov	r3,r13
    67d8:	288000cc 	andi	r2,r5,3
    67dc:	18fffe04 	addi	r3,r3,-8
    67e0:	297fffc4 	addi	r5,r5,-1
    67e4:	10001526 	beq	r2,zero,683c <_malloc_r+0x70c>
    67e8:	18800217 	ldw	r2,8(r3)
    67ec:	10fffa26 	beq	r2,r3,67d8 <_malloc_r+0x6a8>
    67f0:	2109883a 	add	r4,r4,r4
    67f4:	393f1e36 	bltu	r7,r4,6470 <_malloc_r+0x340>
    67f8:	203f1d26 	beq	r4,zero,6470 <_malloc_r+0x340>
    67fc:	21c4703a 	and	r2,r4,r7
    6800:	10000226 	beq	r2,zero,680c <_malloc_r+0x6dc>
    6804:	6013883a 	mov	r9,r12
    6808:	003ee106 	br	6390 <_malloc_r+0x260>
    680c:	2109883a 	add	r4,r4,r4
    6810:	3904703a 	and	r2,r7,r4
    6814:	63000104 	addi	r12,r12,4
    6818:	103ffc26 	beq	r2,zero,680c <_malloc_r+0x6dc>
    681c:	6013883a 	mov	r9,r12
    6820:	003edb06 	br	6390 <_malloc_r+0x260>
    6824:	00805504 	movi	r2,340
    6828:	11000836 	bltu	r2,r4,684c <_malloc_r+0x71c>
    682c:	2804d3fa 	srli	r2,r5,15
    6830:	11001dc4 	addi	r4,r2,119
    6834:	200690fa 	slli	r3,r4,3
    6838:	003f7306 	br	6608 <_malloc_r+0x4d8>
    683c:	0104303a 	nor	r2,zero,r4
    6840:	388e703a 	and	r7,r7,r2
    6844:	e1c00115 	stw	r7,4(fp)
    6848:	003fe906 	br	67f0 <_malloc_r+0x6c0>
    684c:	00815504 	movi	r2,1364
    6850:	1100032e 	bgeu	r2,r4,6860 <_malloc_r+0x730>
    6854:	01001f84 	movi	r4,126
    6858:	00c0fc04 	movi	r3,1008
    685c:	003f6a06 	br	6608 <_malloc_r+0x4d8>
    6860:	2804d4ba 	srli	r2,r5,18
    6864:	11001f04 	addi	r4,r2,124
    6868:	200690fa 	slli	r3,r4,3
    686c:	003f6606 	br	6608 <_malloc_r+0x4d8>

00006870 <memchr>:
    6870:	008000c4 	movi	r2,3
    6874:	29403fcc 	andi	r5,r5,255
    6878:	2007883a 	mov	r3,r4
    687c:	1180022e 	bgeu	r2,r6,6888 <memchr+0x18>
    6880:	2084703a 	and	r2,r4,r2
    6884:	10000b26 	beq	r2,zero,68b4 <memchr+0x44>
    6888:	313fffc4 	addi	r4,r6,-1
    688c:	3000051e 	bne	r6,zero,68a4 <memchr+0x34>
    6890:	00002c06 	br	6944 <memchr+0xd4>
    6894:	213fffc4 	addi	r4,r4,-1
    6898:	00bfffc4 	movi	r2,-1
    689c:	18c00044 	addi	r3,r3,1
    68a0:	20802826 	beq	r4,r2,6944 <memchr+0xd4>
    68a4:	18800003 	ldbu	r2,0(r3)
    68a8:	28bffa1e 	bne	r5,r2,6894 <memchr+0x24>
    68ac:	1805883a 	mov	r2,r3
    68b0:	f800283a 	ret
    68b4:	0011883a 	mov	r8,zero
    68b8:	0007883a 	mov	r3,zero
    68bc:	01c00104 	movi	r7,4
    68c0:	4004923a 	slli	r2,r8,8
    68c4:	18c00044 	addi	r3,r3,1
    68c8:	1151883a 	add	r8,r2,r5
    68cc:	19fffc1e 	bne	r3,r7,68c0 <memchr+0x50>
    68d0:	02bfbff4 	movhi	r10,65279
    68d4:	52bfbfc4 	addi	r10,r10,-257
    68d8:	02602074 	movhi	r9,32897
    68dc:	4a602004 	addi	r9,r9,-32640
    68e0:	02c000c4 	movi	r11,3
    68e4:	20800017 	ldw	r2,0(r4)
    68e8:	31bfff04 	addi	r6,r6,-4
    68ec:	200f883a 	mov	r7,r4
    68f0:	1204f03a 	xor	r2,r2,r8
    68f4:	1287883a 	add	r3,r2,r10
    68f8:	1a46703a 	and	r3,r3,r9
    68fc:	0084303a 	nor	r2,zero,r2
    6900:	10c4703a 	and	r2,r2,r3
    6904:	10000b26 	beq	r2,zero,6934 <memchr+0xc4>
    6908:	20800003 	ldbu	r2,0(r4)
    690c:	28800f26 	beq	r5,r2,694c <memchr+0xdc>
    6910:	20800043 	ldbu	r2,1(r4)
    6914:	21c00044 	addi	r7,r4,1
    6918:	28800c26 	beq	r5,r2,694c <memchr+0xdc>
    691c:	20800083 	ldbu	r2,2(r4)
    6920:	21c00084 	addi	r7,r4,2
    6924:	28800926 	beq	r5,r2,694c <memchr+0xdc>
    6928:	208000c3 	ldbu	r2,3(r4)
    692c:	21c000c4 	addi	r7,r4,3
    6930:	28800626 	beq	r5,r2,694c <memchr+0xdc>
    6934:	21000104 	addi	r4,r4,4
    6938:	59bfea36 	bltu	r11,r6,68e4 <memchr+0x74>
    693c:	2007883a 	mov	r3,r4
    6940:	003fd106 	br	6888 <memchr+0x18>
    6944:	0005883a 	mov	r2,zero
    6948:	f800283a 	ret
    694c:	3805883a 	mov	r2,r7
    6950:	f800283a 	ret

00006954 <memcpy>:
    6954:	01c003c4 	movi	r7,15
    6958:	2007883a 	mov	r3,r4
    695c:	3980032e 	bgeu	r7,r6,696c <memcpy+0x18>
    6960:	2904b03a 	or	r2,r5,r4
    6964:	108000cc 	andi	r2,r2,3
    6968:	10000926 	beq	r2,zero,6990 <memcpy+0x3c>
    696c:	30000626 	beq	r6,zero,6988 <memcpy+0x34>
    6970:	30cd883a 	add	r6,r6,r3
    6974:	28800003 	ldbu	r2,0(r5)
    6978:	29400044 	addi	r5,r5,1
    697c:	18800005 	stb	r2,0(r3)
    6980:	18c00044 	addi	r3,r3,1
    6984:	30fffb1e 	bne	r6,r3,6974 <memcpy+0x20>
    6988:	2005883a 	mov	r2,r4
    698c:	f800283a 	ret
    6990:	3811883a 	mov	r8,r7
    6994:	200f883a 	mov	r7,r4
    6998:	28c00017 	ldw	r3,0(r5)
    699c:	31bffc04 	addi	r6,r6,-16
    69a0:	38c00015 	stw	r3,0(r7)
    69a4:	28800117 	ldw	r2,4(r5)
    69a8:	38800115 	stw	r2,4(r7)
    69ac:	28c00217 	ldw	r3,8(r5)
    69b0:	38c00215 	stw	r3,8(r7)
    69b4:	28800317 	ldw	r2,12(r5)
    69b8:	29400404 	addi	r5,r5,16
    69bc:	38800315 	stw	r2,12(r7)
    69c0:	39c00404 	addi	r7,r7,16
    69c4:	41bff436 	bltu	r8,r6,6998 <memcpy+0x44>
    69c8:	008000c4 	movi	r2,3
    69cc:	1180072e 	bgeu	r2,r6,69ec <memcpy+0x98>
    69d0:	1007883a 	mov	r3,r2
    69d4:	28800017 	ldw	r2,0(r5)
    69d8:	31bfff04 	addi	r6,r6,-4
    69dc:	29400104 	addi	r5,r5,4
    69e0:	38800015 	stw	r2,0(r7)
    69e4:	39c00104 	addi	r7,r7,4
    69e8:	19bffa36 	bltu	r3,r6,69d4 <memcpy+0x80>
    69ec:	3807883a 	mov	r3,r7
    69f0:	003fde06 	br	696c <memcpy+0x18>

000069f4 <memmove>:
    69f4:	2807883a 	mov	r3,r5
    69f8:	2011883a 	mov	r8,r4
    69fc:	29000c2e 	bgeu	r5,r4,6a30 <memmove+0x3c>
    6a00:	298f883a 	add	r7,r5,r6
    6a04:	21c00a2e 	bgeu	r4,r7,6a30 <memmove+0x3c>
    6a08:	30000726 	beq	r6,zero,6a28 <memmove+0x34>
    6a0c:	2187883a 	add	r3,r4,r6
    6a10:	198dc83a 	sub	r6,r3,r6
    6a14:	39ffffc4 	addi	r7,r7,-1
    6a18:	38800003 	ldbu	r2,0(r7)
    6a1c:	18ffffc4 	addi	r3,r3,-1
    6a20:	18800005 	stb	r2,0(r3)
    6a24:	19bffb1e 	bne	r3,r6,6a14 <memmove+0x20>
    6a28:	2005883a 	mov	r2,r4
    6a2c:	f800283a 	ret
    6a30:	01c003c4 	movi	r7,15
    6a34:	39800a36 	bltu	r7,r6,6a60 <memmove+0x6c>
    6a38:	303ffb26 	beq	r6,zero,6a28 <memmove+0x34>
    6a3c:	400f883a 	mov	r7,r8
    6a40:	320d883a 	add	r6,r6,r8
    6a44:	28800003 	ldbu	r2,0(r5)
    6a48:	29400044 	addi	r5,r5,1
    6a4c:	38800005 	stb	r2,0(r7)
    6a50:	39c00044 	addi	r7,r7,1
    6a54:	39bffb1e 	bne	r7,r6,6a44 <memmove+0x50>
    6a58:	2005883a 	mov	r2,r4
    6a5c:	f800283a 	ret
    6a60:	1904b03a 	or	r2,r3,r4
    6a64:	108000cc 	andi	r2,r2,3
    6a68:	103ff31e 	bne	r2,zero,6a38 <memmove+0x44>
    6a6c:	3811883a 	mov	r8,r7
    6a70:	180b883a 	mov	r5,r3
    6a74:	200f883a 	mov	r7,r4
    6a78:	28c00017 	ldw	r3,0(r5)
    6a7c:	31bffc04 	addi	r6,r6,-16
    6a80:	38c00015 	stw	r3,0(r7)
    6a84:	28800117 	ldw	r2,4(r5)
    6a88:	38800115 	stw	r2,4(r7)
    6a8c:	28c00217 	ldw	r3,8(r5)
    6a90:	38c00215 	stw	r3,8(r7)
    6a94:	28800317 	ldw	r2,12(r5)
    6a98:	29400404 	addi	r5,r5,16
    6a9c:	38800315 	stw	r2,12(r7)
    6aa0:	39c00404 	addi	r7,r7,16
    6aa4:	41bff436 	bltu	r8,r6,6a78 <memmove+0x84>
    6aa8:	008000c4 	movi	r2,3
    6aac:	1180072e 	bgeu	r2,r6,6acc <memmove+0xd8>
    6ab0:	1007883a 	mov	r3,r2
    6ab4:	28800017 	ldw	r2,0(r5)
    6ab8:	31bfff04 	addi	r6,r6,-4
    6abc:	29400104 	addi	r5,r5,4
    6ac0:	38800015 	stw	r2,0(r7)
    6ac4:	39c00104 	addi	r7,r7,4
    6ac8:	19bffa36 	bltu	r3,r6,6ab4 <memmove+0xc0>
    6acc:	3811883a 	mov	r8,r7
    6ad0:	003fd906 	br	6a38 <memmove+0x44>

00006ad4 <memset>:
    6ad4:	008000c4 	movi	r2,3
    6ad8:	29403fcc 	andi	r5,r5,255
    6adc:	2007883a 	mov	r3,r4
    6ae0:	1180022e 	bgeu	r2,r6,6aec <memset+0x18>
    6ae4:	2084703a 	and	r2,r4,r2
    6ae8:	10000826 	beq	r2,zero,6b0c <memset+0x38>
    6aec:	30000526 	beq	r6,zero,6b04 <memset+0x30>
    6af0:	2805883a 	mov	r2,r5
    6af4:	30cd883a 	add	r6,r6,r3
    6af8:	18800005 	stb	r2,0(r3)
    6afc:	18c00044 	addi	r3,r3,1
    6b00:	19bffd1e 	bne	r3,r6,6af8 <memset+0x24>
    6b04:	2005883a 	mov	r2,r4
    6b08:	f800283a 	ret
    6b0c:	2804923a 	slli	r2,r5,8
    6b10:	020003c4 	movi	r8,15
    6b14:	200f883a 	mov	r7,r4
    6b18:	2884b03a 	or	r2,r5,r2
    6b1c:	1006943a 	slli	r3,r2,16
    6b20:	10c6b03a 	or	r3,r2,r3
    6b24:	41800a2e 	bgeu	r8,r6,6b50 <memset+0x7c>
    6b28:	4005883a 	mov	r2,r8
    6b2c:	31bffc04 	addi	r6,r6,-16
    6b30:	38c00015 	stw	r3,0(r7)
    6b34:	38c00115 	stw	r3,4(r7)
    6b38:	38c00215 	stw	r3,8(r7)
    6b3c:	38c00315 	stw	r3,12(r7)
    6b40:	39c00404 	addi	r7,r7,16
    6b44:	11bff936 	bltu	r2,r6,6b2c <memset+0x58>
    6b48:	008000c4 	movi	r2,3
    6b4c:	1180052e 	bgeu	r2,r6,6b64 <memset+0x90>
    6b50:	31bfff04 	addi	r6,r6,-4
    6b54:	008000c4 	movi	r2,3
    6b58:	38c00015 	stw	r3,0(r7)
    6b5c:	39c00104 	addi	r7,r7,4
    6b60:	11bffb36 	bltu	r2,r6,6b50 <memset+0x7c>
    6b64:	3807883a 	mov	r3,r7
    6b68:	003fe006 	br	6aec <memset+0x18>

00006b6c <_Bfree>:
    6b6c:	28000826 	beq	r5,zero,6b90 <_Bfree+0x24>
    6b70:	28800117 	ldw	r2,4(r5)
    6b74:	21001317 	ldw	r4,76(r4)
    6b78:	1085883a 	add	r2,r2,r2
    6b7c:	1085883a 	add	r2,r2,r2
    6b80:	1105883a 	add	r2,r2,r4
    6b84:	10c00017 	ldw	r3,0(r2)
    6b88:	28c00015 	stw	r3,0(r5)
    6b8c:	11400015 	stw	r5,0(r2)
    6b90:	f800283a 	ret

00006b94 <__hi0bits>:
    6b94:	20bfffec 	andhi	r2,r4,65535
    6b98:	10001426 	beq	r2,zero,6bec <__hi0bits+0x58>
    6b9c:	0007883a 	mov	r3,zero
    6ba0:	20bfc02c 	andhi	r2,r4,65280
    6ba4:	1000021e 	bne	r2,zero,6bb0 <__hi0bits+0x1c>
    6ba8:	2008923a 	slli	r4,r4,8
    6bac:	18c00204 	addi	r3,r3,8
    6bb0:	20bc002c 	andhi	r2,r4,61440
    6bb4:	1000021e 	bne	r2,zero,6bc0 <__hi0bits+0x2c>
    6bb8:	2008913a 	slli	r4,r4,4
    6bbc:	18c00104 	addi	r3,r3,4
    6bc0:	20b0002c 	andhi	r2,r4,49152
    6bc4:	1000031e 	bne	r2,zero,6bd4 <__hi0bits+0x40>
    6bc8:	2105883a 	add	r2,r4,r4
    6bcc:	18c00084 	addi	r3,r3,2
    6bd0:	1089883a 	add	r4,r2,r2
    6bd4:	20000316 	blt	r4,zero,6be4 <__hi0bits+0x50>
    6bd8:	2090002c 	andhi	r2,r4,16384
    6bdc:	10000626 	beq	r2,zero,6bf8 <__hi0bits+0x64>
    6be0:	18c00044 	addi	r3,r3,1
    6be4:	1805883a 	mov	r2,r3
    6be8:	f800283a 	ret
    6bec:	2008943a 	slli	r4,r4,16
    6bf0:	00c00404 	movi	r3,16
    6bf4:	003fea06 	br	6ba0 <__hi0bits+0xc>
    6bf8:	00c00804 	movi	r3,32
    6bfc:	1805883a 	mov	r2,r3
    6c00:	f800283a 	ret

00006c04 <__lo0bits>:
    6c04:	20c00017 	ldw	r3,0(r4)
    6c08:	188001cc 	andi	r2,r3,7
    6c0c:	10000a26 	beq	r2,zero,6c38 <__lo0bits+0x34>
    6c10:	1880004c 	andi	r2,r3,1
    6c14:	1005003a 	cmpeq	r2,r2,zero
    6c18:	10002126 	beq	r2,zero,6ca0 <__lo0bits+0x9c>
    6c1c:	1880008c 	andi	r2,r3,2
    6c20:	1000251e 	bne	r2,zero,6cb8 <__lo0bits+0xb4>
    6c24:	1804d0ba 	srli	r2,r3,2
    6c28:	01400084 	movi	r5,2
    6c2c:	20800015 	stw	r2,0(r4)
    6c30:	2805883a 	mov	r2,r5
    6c34:	f800283a 	ret
    6c38:	18bfffcc 	andi	r2,r3,65535
    6c3c:	10001526 	beq	r2,zero,6c94 <__lo0bits+0x90>
    6c40:	000b883a 	mov	r5,zero
    6c44:	18803fcc 	andi	r2,r3,255
    6c48:	1000021e 	bne	r2,zero,6c54 <__lo0bits+0x50>
    6c4c:	1806d23a 	srli	r3,r3,8
    6c50:	29400204 	addi	r5,r5,8
    6c54:	188003cc 	andi	r2,r3,15
    6c58:	1000021e 	bne	r2,zero,6c64 <__lo0bits+0x60>
    6c5c:	1806d13a 	srli	r3,r3,4
    6c60:	29400104 	addi	r5,r5,4
    6c64:	188000cc 	andi	r2,r3,3
    6c68:	1000021e 	bne	r2,zero,6c74 <__lo0bits+0x70>
    6c6c:	1806d0ba 	srli	r3,r3,2
    6c70:	29400084 	addi	r5,r5,2
    6c74:	1880004c 	andi	r2,r3,1
    6c78:	1000031e 	bne	r2,zero,6c88 <__lo0bits+0x84>
    6c7c:	1806d07a 	srli	r3,r3,1
    6c80:	18000a26 	beq	r3,zero,6cac <__lo0bits+0xa8>
    6c84:	29400044 	addi	r5,r5,1
    6c88:	2805883a 	mov	r2,r5
    6c8c:	20c00015 	stw	r3,0(r4)
    6c90:	f800283a 	ret
    6c94:	1806d43a 	srli	r3,r3,16
    6c98:	01400404 	movi	r5,16
    6c9c:	003fe906 	br	6c44 <__lo0bits+0x40>
    6ca0:	000b883a 	mov	r5,zero
    6ca4:	2805883a 	mov	r2,r5
    6ca8:	f800283a 	ret
    6cac:	01400804 	movi	r5,32
    6cb0:	2805883a 	mov	r2,r5
    6cb4:	f800283a 	ret
    6cb8:	1804d07a 	srli	r2,r3,1
    6cbc:	01400044 	movi	r5,1
    6cc0:	20800015 	stw	r2,0(r4)
    6cc4:	003fda06 	br	6c30 <__lo0bits+0x2c>

00006cc8 <__mcmp>:
    6cc8:	20800417 	ldw	r2,16(r4)
    6ccc:	28c00417 	ldw	r3,16(r5)
    6cd0:	10cfc83a 	sub	r7,r2,r3
    6cd4:	38000c1e 	bne	r7,zero,6d08 <__mcmp+0x40>
    6cd8:	18c5883a 	add	r2,r3,r3
    6cdc:	1085883a 	add	r2,r2,r2
    6ce0:	10c00504 	addi	r3,r2,20
    6ce4:	21000504 	addi	r4,r4,20
    6ce8:	28cb883a 	add	r5,r5,r3
    6cec:	2085883a 	add	r2,r4,r2
    6cf0:	10bfff04 	addi	r2,r2,-4
    6cf4:	297fff04 	addi	r5,r5,-4
    6cf8:	11800017 	ldw	r6,0(r2)
    6cfc:	28c00017 	ldw	r3,0(r5)
    6d00:	30c0031e 	bne	r6,r3,6d10 <__mcmp+0x48>
    6d04:	20bffa36 	bltu	r4,r2,6cf0 <__mcmp+0x28>
    6d08:	3805883a 	mov	r2,r7
    6d0c:	f800283a 	ret
    6d10:	30c00336 	bltu	r6,r3,6d20 <__mcmp+0x58>
    6d14:	01c00044 	movi	r7,1
    6d18:	3805883a 	mov	r2,r7
    6d1c:	f800283a 	ret
    6d20:	01ffffc4 	movi	r7,-1
    6d24:	003ff806 	br	6d08 <__mcmp+0x40>

00006d28 <__ulp>:
    6d28:	295ffc2c 	andhi	r5,r5,32752
    6d2c:	013f3034 	movhi	r4,64704
    6d30:	290b883a 	add	r5,r5,r4
    6d34:	0145c83a 	sub	r2,zero,r5
    6d38:	1007d53a 	srai	r3,r2,20
    6d3c:	000d883a 	mov	r6,zero
    6d40:	0140040e 	bge	zero,r5,6d54 <__ulp+0x2c>
    6d44:	280f883a 	mov	r7,r5
    6d48:	3807883a 	mov	r3,r7
    6d4c:	3005883a 	mov	r2,r6
    6d50:	f800283a 	ret
    6d54:	008004c4 	movi	r2,19
    6d58:	193ffb04 	addi	r4,r3,-20
    6d5c:	10c00c0e 	bge	r2,r3,6d90 <__ulp+0x68>
    6d60:	008007c4 	movi	r2,31
    6d64:	1107c83a 	sub	r3,r2,r4
    6d68:	00800784 	movi	r2,30
    6d6c:	01400044 	movi	r5,1
    6d70:	11000216 	blt	r2,r4,6d7c <__ulp+0x54>
    6d74:	00800044 	movi	r2,1
    6d78:	10ca983a 	sll	r5,r2,r3
    6d7c:	000f883a 	mov	r7,zero
    6d80:	280d883a 	mov	r6,r5
    6d84:	3807883a 	mov	r3,r7
    6d88:	3005883a 	mov	r2,r6
    6d8c:	f800283a 	ret
    6d90:	00800234 	movhi	r2,8
    6d94:	10cfd83a 	sra	r7,r2,r3
    6d98:	000d883a 	mov	r6,zero
    6d9c:	3005883a 	mov	r2,r6
    6da0:	3807883a 	mov	r3,r7
    6da4:	f800283a 	ret

00006da8 <__b2d>:
    6da8:	20800417 	ldw	r2,16(r4)
    6dac:	defff904 	addi	sp,sp,-28
    6db0:	dd000415 	stw	r20,16(sp)
    6db4:	1085883a 	add	r2,r2,r2
    6db8:	25000504 	addi	r20,r4,20
    6dbc:	1085883a 	add	r2,r2,r2
    6dc0:	dc000015 	stw	r16,0(sp)
    6dc4:	a0a1883a 	add	r16,r20,r2
    6dc8:	dd400515 	stw	r21,20(sp)
    6dcc:	857fff17 	ldw	r21,-4(r16)
    6dd0:	dc400115 	stw	r17,4(sp)
    6dd4:	dfc00615 	stw	ra,24(sp)
    6dd8:	a809883a 	mov	r4,r21
    6ddc:	2823883a 	mov	r17,r5
    6de0:	dcc00315 	stw	r19,12(sp)
    6de4:	dc800215 	stw	r18,8(sp)
    6de8:	0006b940 	call	6b94 <__hi0bits>
    6dec:	100b883a 	mov	r5,r2
    6df0:	00800804 	movi	r2,32
    6df4:	1145c83a 	sub	r2,r2,r5
    6df8:	88800015 	stw	r2,0(r17)
    6dfc:	00800284 	movi	r2,10
    6e00:	80ffff04 	addi	r3,r16,-4
    6e04:	11401416 	blt	r2,r5,6e58 <__b2d+0xb0>
    6e08:	008002c4 	movi	r2,11
    6e0c:	1149c83a 	sub	r4,r2,r5
    6e10:	a0c02736 	bltu	r20,r3,6eb0 <__b2d+0x108>
    6e14:	000d883a 	mov	r6,zero
    6e18:	28800544 	addi	r2,r5,21
    6e1c:	a906d83a 	srl	r3,r21,r4
    6e20:	a884983a 	sll	r2,r21,r2
    6e24:	1ccffc34 	orhi	r19,r3,16368
    6e28:	11a4b03a 	or	r18,r2,r6
    6e2c:	9005883a 	mov	r2,r18
    6e30:	9807883a 	mov	r3,r19
    6e34:	dfc00617 	ldw	ra,24(sp)
    6e38:	dd400517 	ldw	r21,20(sp)
    6e3c:	dd000417 	ldw	r20,16(sp)
    6e40:	dcc00317 	ldw	r19,12(sp)
    6e44:	dc800217 	ldw	r18,8(sp)
    6e48:	dc400117 	ldw	r17,4(sp)
    6e4c:	dc000017 	ldw	r16,0(sp)
    6e50:	dec00704 	addi	sp,sp,28
    6e54:	f800283a 	ret
    6e58:	a0c00e36 	bltu	r20,r3,6e94 <__b2d+0xec>
    6e5c:	293ffd44 	addi	r4,r5,-11
    6e60:	000d883a 	mov	r6,zero
    6e64:	20000f26 	beq	r4,zero,6ea4 <__b2d+0xfc>
    6e68:	00800804 	movi	r2,32
    6e6c:	110bc83a 	sub	r5,r2,r4
    6e70:	a0c01236 	bltu	r20,r3,6ebc <__b2d+0x114>
    6e74:	000f883a 	mov	r7,zero
    6e78:	a904983a 	sll	r2,r21,r4
    6e7c:	3146d83a 	srl	r3,r6,r5
    6e80:	3108983a 	sll	r4,r6,r4
    6e84:	108ffc34 	orhi	r2,r2,16368
    6e88:	18a6b03a 	or	r19,r3,r2
    6e8c:	3924b03a 	or	r18,r7,r4
    6e90:	003fe606 	br	6e2c <__b2d+0x84>
    6e94:	293ffd44 	addi	r4,r5,-11
    6e98:	81bffe17 	ldw	r6,-8(r16)
    6e9c:	80fffe04 	addi	r3,r16,-8
    6ea0:	203ff11e 	bne	r4,zero,6e68 <__b2d+0xc0>
    6ea4:	accffc34 	orhi	r19,r21,16368
    6ea8:	3025883a 	mov	r18,r6
    6eac:	003fdf06 	br	6e2c <__b2d+0x84>
    6eb0:	18bfff17 	ldw	r2,-4(r3)
    6eb4:	110cd83a 	srl	r6,r2,r4
    6eb8:	003fd706 	br	6e18 <__b2d+0x70>
    6ebc:	18bfff17 	ldw	r2,-4(r3)
    6ec0:	114ed83a 	srl	r7,r2,r5
    6ec4:	003fec06 	br	6e78 <__b2d+0xd0>

00006ec8 <__ratio>:
    6ec8:	defff904 	addi	sp,sp,-28
    6ecc:	dc400215 	stw	r17,8(sp)
    6ed0:	2823883a 	mov	r17,r5
    6ed4:	d80b883a 	mov	r5,sp
    6ed8:	dfc00615 	stw	ra,24(sp)
    6edc:	dd000515 	stw	r20,20(sp)
    6ee0:	dcc00415 	stw	r19,16(sp)
    6ee4:	dc800315 	stw	r18,12(sp)
    6ee8:	2025883a 	mov	r18,r4
    6eec:	0006da80 	call	6da8 <__b2d>
    6ef0:	8809883a 	mov	r4,r17
    6ef4:	d9400104 	addi	r5,sp,4
    6ef8:	1027883a 	mov	r19,r2
    6efc:	1829883a 	mov	r20,r3
    6f00:	0006da80 	call	6da8 <__b2d>
    6f04:	89000417 	ldw	r4,16(r17)
    6f08:	91c00417 	ldw	r7,16(r18)
    6f0c:	d9800117 	ldw	r6,4(sp)
    6f10:	180b883a 	mov	r5,r3
    6f14:	390fc83a 	sub	r7,r7,r4
    6f18:	1009883a 	mov	r4,r2
    6f1c:	d8800017 	ldw	r2,0(sp)
    6f20:	380e917a 	slli	r7,r7,5
    6f24:	2011883a 	mov	r8,r4
    6f28:	1185c83a 	sub	r2,r2,r6
    6f2c:	11c5883a 	add	r2,r2,r7
    6f30:	1006953a 	slli	r3,r2,20
    6f34:	2813883a 	mov	r9,r5
    6f38:	00800d0e 	bge	zero,r2,6f70 <__ratio+0xa8>
    6f3c:	1d29883a 	add	r20,r3,r20
    6f40:	a00b883a 	mov	r5,r20
    6f44:	480f883a 	mov	r7,r9
    6f48:	9809883a 	mov	r4,r19
    6f4c:	400d883a 	mov	r6,r8
    6f50:	0000c580 	call	c58 <__divdf3>
    6f54:	dfc00617 	ldw	ra,24(sp)
    6f58:	dd000517 	ldw	r20,20(sp)
    6f5c:	dcc00417 	ldw	r19,16(sp)
    6f60:	dc800317 	ldw	r18,12(sp)
    6f64:	dc400217 	ldw	r17,8(sp)
    6f68:	dec00704 	addi	sp,sp,28
    6f6c:	f800283a 	ret
    6f70:	28d3c83a 	sub	r9,r5,r3
    6f74:	003ff206 	br	6f40 <__ratio+0x78>

00006f78 <_mprec_log10>:
    6f78:	defffe04 	addi	sp,sp,-8
    6f7c:	008005c4 	movi	r2,23
    6f80:	dc000015 	stw	r16,0(sp)
    6f84:	dfc00115 	stw	ra,4(sp)
    6f88:	2021883a 	mov	r16,r4
    6f8c:	11000c16 	blt	r2,r4,6fc0 <_mprec_log10+0x48>
    6f90:	200490fa 	slli	r2,r4,3
    6f94:	00c00074 	movhi	r3,1
    6f98:	18f9a004 	addi	r3,r3,-6528
    6f9c:	10c5883a 	add	r2,r2,r3
    6fa0:	12400117 	ldw	r9,4(r2)
    6fa4:	12000017 	ldw	r8,0(r2)
    6fa8:	4807883a 	mov	r3,r9
    6fac:	4005883a 	mov	r2,r8
    6fb0:	dfc00117 	ldw	ra,4(sp)
    6fb4:	dc000017 	ldw	r16,0(sp)
    6fb8:	dec00204 	addi	sp,sp,8
    6fbc:	f800283a 	ret
    6fc0:	0011883a 	mov	r8,zero
    6fc4:	024ffc34 	movhi	r9,16368
    6fc8:	0005883a 	mov	r2,zero
    6fcc:	00d00934 	movhi	r3,16420
    6fd0:	480b883a 	mov	r5,r9
    6fd4:	4009883a 	mov	r4,r8
    6fd8:	180f883a 	mov	r7,r3
    6fdc:	100d883a 	mov	r6,r2
    6fe0:	00008940 	call	894 <__muldf3>
    6fe4:	843fffc4 	addi	r16,r16,-1
    6fe8:	1011883a 	mov	r8,r2
    6fec:	1813883a 	mov	r9,r3
    6ff0:	803ff51e 	bne	r16,zero,6fc8 <_mprec_log10+0x50>
    6ff4:	4005883a 	mov	r2,r8
    6ff8:	4807883a 	mov	r3,r9
    6ffc:	dfc00117 	ldw	ra,4(sp)
    7000:	dc000017 	ldw	r16,0(sp)
    7004:	dec00204 	addi	sp,sp,8
    7008:	f800283a 	ret

0000700c <__copybits>:
    700c:	297fffc4 	addi	r5,r5,-1
    7010:	30800417 	ldw	r2,16(r6)
    7014:	280bd17a 	srai	r5,r5,5
    7018:	31800504 	addi	r6,r6,20
    701c:	1085883a 	add	r2,r2,r2
    7020:	294b883a 	add	r5,r5,r5
    7024:	294b883a 	add	r5,r5,r5
    7028:	1085883a 	add	r2,r2,r2
    702c:	290b883a 	add	r5,r5,r4
    7030:	3087883a 	add	r3,r6,r2
    7034:	29400104 	addi	r5,r5,4
    7038:	30c0052e 	bgeu	r6,r3,7050 <__copybits+0x44>
    703c:	30800017 	ldw	r2,0(r6)
    7040:	31800104 	addi	r6,r6,4
    7044:	20800015 	stw	r2,0(r4)
    7048:	21000104 	addi	r4,r4,4
    704c:	30fffb36 	bltu	r6,r3,703c <__copybits+0x30>
    7050:	2140032e 	bgeu	r4,r5,7060 <__copybits+0x54>
    7054:	20000015 	stw	zero,0(r4)
    7058:	21000104 	addi	r4,r4,4
    705c:	217ffd36 	bltu	r4,r5,7054 <__copybits+0x48>
    7060:	f800283a 	ret

00007064 <__any_on>:
    7064:	20800417 	ldw	r2,16(r4)
    7068:	2807d17a 	srai	r3,r5,5
    706c:	21000504 	addi	r4,r4,20
    7070:	10c00d0e 	bge	r2,r3,70a8 <__any_on+0x44>
    7074:	1085883a 	add	r2,r2,r2
    7078:	1085883a 	add	r2,r2,r2
    707c:	208d883a 	add	r6,r4,r2
    7080:	2180182e 	bgeu	r4,r6,70e4 <__any_on+0x80>
    7084:	30bfff17 	ldw	r2,-4(r6)
    7088:	30ffff04 	addi	r3,r6,-4
    708c:	1000041e 	bne	r2,zero,70a0 <__any_on+0x3c>
    7090:	20c0142e 	bgeu	r4,r3,70e4 <__any_on+0x80>
    7094:	18ffff04 	addi	r3,r3,-4
    7098:	18800017 	ldw	r2,0(r3)
    709c:	103ffc26 	beq	r2,zero,7090 <__any_on+0x2c>
    70a0:	00800044 	movi	r2,1
    70a4:	f800283a 	ret
    70a8:	18800a0e 	bge	r3,r2,70d4 <__any_on+0x70>
    70ac:	294007cc 	andi	r5,r5,31
    70b0:	28000826 	beq	r5,zero,70d4 <__any_on+0x70>
    70b4:	18c5883a 	add	r2,r3,r3
    70b8:	1085883a 	add	r2,r2,r2
    70bc:	208d883a 	add	r6,r4,r2
    70c0:	30c00017 	ldw	r3,0(r6)
    70c4:	1944d83a 	srl	r2,r3,r5
    70c8:	1144983a 	sll	r2,r2,r5
    70cc:	18bff41e 	bne	r3,r2,70a0 <__any_on+0x3c>
    70d0:	003feb06 	br	7080 <__any_on+0x1c>
    70d4:	18c5883a 	add	r2,r3,r3
    70d8:	1085883a 	add	r2,r2,r2
    70dc:	208d883a 	add	r6,r4,r2
    70e0:	003fe706 	br	7080 <__any_on+0x1c>
    70e4:	0005883a 	mov	r2,zero
    70e8:	f800283a 	ret

000070ec <_Balloc>:
    70ec:	20c01317 	ldw	r3,76(r4)
    70f0:	defffb04 	addi	sp,sp,-20
    70f4:	dcc00315 	stw	r19,12(sp)
    70f8:	dc800215 	stw	r18,8(sp)
    70fc:	dfc00415 	stw	ra,16(sp)
    7100:	2825883a 	mov	r18,r5
    7104:	dc400115 	stw	r17,4(sp)
    7108:	dc000015 	stw	r16,0(sp)
    710c:	2027883a 	mov	r19,r4
    7110:	01800404 	movi	r6,16
    7114:	01400104 	movi	r5,4
    7118:	18001726 	beq	r3,zero,7178 <_Balloc+0x8c>
    711c:	01400044 	movi	r5,1
    7120:	9485883a 	add	r2,r18,r18
    7124:	2ca2983a 	sll	r17,r5,r18
    7128:	1085883a 	add	r2,r2,r2
    712c:	10c7883a 	add	r3,r2,r3
    7130:	1c000017 	ldw	r16,0(r3)
    7134:	8c4d883a 	add	r6,r17,r17
    7138:	318d883a 	add	r6,r6,r6
    713c:	9809883a 	mov	r4,r19
    7140:	31800504 	addi	r6,r6,20
    7144:	80001226 	beq	r16,zero,7190 <_Balloc+0xa4>
    7148:	80800017 	ldw	r2,0(r16)
    714c:	18800015 	stw	r2,0(r3)
    7150:	80000415 	stw	zero,16(r16)
    7154:	80000315 	stw	zero,12(r16)
    7158:	8005883a 	mov	r2,r16
    715c:	dfc00417 	ldw	ra,16(sp)
    7160:	dcc00317 	ldw	r19,12(sp)
    7164:	dc800217 	ldw	r18,8(sp)
    7168:	dc400117 	ldw	r17,4(sp)
    716c:	dc000017 	ldw	r16,0(sp)
    7170:	dec00504 	addi	sp,sp,20
    7174:	f800283a 	ret
    7178:	00085c00 	call	85c0 <_calloc_r>
    717c:	1007883a 	mov	r3,r2
    7180:	0021883a 	mov	r16,zero
    7184:	98801315 	stw	r2,76(r19)
    7188:	103fe41e 	bne	r2,zero,711c <_Balloc+0x30>
    718c:	003ff206 	br	7158 <_Balloc+0x6c>
    7190:	00085c00 	call	85c0 <_calloc_r>
    7194:	103ff026 	beq	r2,zero,7158 <_Balloc+0x6c>
    7198:	1021883a 	mov	r16,r2
    719c:	14800115 	stw	r18,4(r2)
    71a0:	14400215 	stw	r17,8(r2)
    71a4:	003fea06 	br	7150 <_Balloc+0x64>

000071a8 <__d2b>:
    71a8:	defff504 	addi	sp,sp,-44
    71ac:	dcc00515 	stw	r19,20(sp)
    71b0:	04c00044 	movi	r19,1
    71b4:	dc000215 	stw	r16,8(sp)
    71b8:	2821883a 	mov	r16,r5
    71bc:	980b883a 	mov	r5,r19
    71c0:	ddc00915 	stw	r23,36(sp)
    71c4:	dd800815 	stw	r22,32(sp)
    71c8:	dd400715 	stw	r21,28(sp)
    71cc:	dd000615 	stw	r20,24(sp)
    71d0:	dc800415 	stw	r18,16(sp)
    71d4:	dc400315 	stw	r17,12(sp)
    71d8:	dfc00a15 	stw	ra,40(sp)
    71dc:	3023883a 	mov	r17,r6
    71e0:	382d883a 	mov	r22,r7
    71e4:	ddc00b17 	ldw	r23,44(sp)
    71e8:	00070ec0 	call	70ec <_Balloc>
    71ec:	1025883a 	mov	r18,r2
    71f0:	00a00034 	movhi	r2,32768
    71f4:	10bfffc4 	addi	r2,r2,-1
    71f8:	8888703a 	and	r4,r17,r2
    71fc:	202ad53a 	srli	r21,r4,20
    7200:	00800434 	movhi	r2,16
    7204:	10bfffc4 	addi	r2,r2,-1
    7208:	8886703a 	and	r3,r17,r2
    720c:	a829003a 	cmpeq	r20,r21,zero
    7210:	800b883a 	mov	r5,r16
    7214:	d8c00115 	stw	r3,4(sp)
    7218:	94000504 	addi	r16,r18,20
    721c:	a000021e 	bne	r20,zero,7228 <__d2b+0x80>
    7220:	18c00434 	orhi	r3,r3,16
    7224:	d8c00115 	stw	r3,4(sp)
    7228:	28002726 	beq	r5,zero,72c8 <__d2b+0x120>
    722c:	d809883a 	mov	r4,sp
    7230:	d9400015 	stw	r5,0(sp)
    7234:	0006c040 	call	6c04 <__lo0bits>
    7238:	100d883a 	mov	r6,r2
    723c:	10003526 	beq	r2,zero,7314 <__d2b+0x16c>
    7240:	d8c00117 	ldw	r3,4(sp)
    7244:	00800804 	movi	r2,32
    7248:	1185c83a 	sub	r2,r2,r6
    724c:	d9000017 	ldw	r4,0(sp)
    7250:	1886983a 	sll	r3,r3,r2
    7254:	1906b03a 	or	r3,r3,r4
    7258:	90c00515 	stw	r3,20(r18)
    725c:	d8c00117 	ldw	r3,4(sp)
    7260:	1986d83a 	srl	r3,r3,r6
    7264:	d8c00115 	stw	r3,4(sp)
    7268:	180b003a 	cmpeq	r5,r3,zero
    726c:	00800084 	movi	r2,2
    7270:	114bc83a 	sub	r5,r2,r5
    7274:	80c00115 	stw	r3,4(r16)
    7278:	91400415 	stw	r5,16(r18)
    727c:	a0001a1e 	bne	r20,zero,72e8 <__d2b+0x140>
    7280:	3545883a 	add	r2,r6,r21
    7284:	10bef344 	addi	r2,r2,-1075
    7288:	00c00d44 	movi	r3,53
    728c:	b0800015 	stw	r2,0(r22)
    7290:	1987c83a 	sub	r3,r3,r6
    7294:	b8c00015 	stw	r3,0(r23)
    7298:	9005883a 	mov	r2,r18
    729c:	dfc00a17 	ldw	ra,40(sp)
    72a0:	ddc00917 	ldw	r23,36(sp)
    72a4:	dd800817 	ldw	r22,32(sp)
    72a8:	dd400717 	ldw	r21,28(sp)
    72ac:	dd000617 	ldw	r20,24(sp)
    72b0:	dcc00517 	ldw	r19,20(sp)
    72b4:	dc800417 	ldw	r18,16(sp)
    72b8:	dc400317 	ldw	r17,12(sp)
    72bc:	dc000217 	ldw	r16,8(sp)
    72c0:	dec00b04 	addi	sp,sp,44
    72c4:	f800283a 	ret
    72c8:	d9000104 	addi	r4,sp,4
    72cc:	0006c040 	call	6c04 <__lo0bits>
    72d0:	11800804 	addi	r6,r2,32
    72d4:	d8800117 	ldw	r2,4(sp)
    72d8:	94c00415 	stw	r19,16(r18)
    72dc:	980b883a 	mov	r5,r19
    72e0:	90800515 	stw	r2,20(r18)
    72e4:	a03fe626 	beq	r20,zero,7280 <__d2b+0xd8>
    72e8:	2945883a 	add	r2,r5,r5
    72ec:	1085883a 	add	r2,r2,r2
    72f0:	1405883a 	add	r2,r2,r16
    72f4:	113fff17 	ldw	r4,-4(r2)
    72f8:	30fef384 	addi	r3,r6,-1074
    72fc:	2820917a 	slli	r16,r5,5
    7300:	b0c00015 	stw	r3,0(r22)
    7304:	0006b940 	call	6b94 <__hi0bits>
    7308:	80a1c83a 	sub	r16,r16,r2
    730c:	bc000015 	stw	r16,0(r23)
    7310:	003fe106 	br	7298 <__d2b+0xf0>
    7314:	d8800017 	ldw	r2,0(sp)
    7318:	90800515 	stw	r2,20(r18)
    731c:	d8c00117 	ldw	r3,4(sp)
    7320:	003fd106 	br	7268 <__d2b+0xc0>

00007324 <__mdiff>:
    7324:	defffb04 	addi	sp,sp,-20
    7328:	dc000015 	stw	r16,0(sp)
    732c:	2821883a 	mov	r16,r5
    7330:	dc800215 	stw	r18,8(sp)
    7334:	300b883a 	mov	r5,r6
    7338:	2025883a 	mov	r18,r4
    733c:	8009883a 	mov	r4,r16
    7340:	dc400115 	stw	r17,4(sp)
    7344:	dfc00415 	stw	ra,16(sp)
    7348:	dcc00315 	stw	r19,12(sp)
    734c:	3023883a 	mov	r17,r6
    7350:	0006cc80 	call	6cc8 <__mcmp>
    7354:	10004226 	beq	r2,zero,7460 <__mdiff+0x13c>
    7358:	10005016 	blt	r2,zero,749c <__mdiff+0x178>
    735c:	0027883a 	mov	r19,zero
    7360:	81400117 	ldw	r5,4(r16)
    7364:	9009883a 	mov	r4,r18
    7368:	00070ec0 	call	70ec <_Balloc>
    736c:	1019883a 	mov	r12,r2
    7370:	82800417 	ldw	r10,16(r16)
    7374:	88800417 	ldw	r2,16(r17)
    7378:	81800504 	addi	r6,r16,20
    737c:	5287883a 	add	r3,r10,r10
    7380:	1085883a 	add	r2,r2,r2
    7384:	18c7883a 	add	r3,r3,r3
    7388:	1085883a 	add	r2,r2,r2
    738c:	8a000504 	addi	r8,r17,20
    7390:	64c00315 	stw	r19,12(r12)
    7394:	30db883a 	add	r13,r6,r3
    7398:	4097883a 	add	r11,r8,r2
    739c:	61c00504 	addi	r7,r12,20
    73a0:	0013883a 	mov	r9,zero
    73a4:	31000017 	ldw	r4,0(r6)
    73a8:	41400017 	ldw	r5,0(r8)
    73ac:	42000104 	addi	r8,r8,4
    73b0:	20bfffcc 	andi	r2,r4,65535
    73b4:	28ffffcc 	andi	r3,r5,65535
    73b8:	10c5c83a 	sub	r2,r2,r3
    73bc:	1245883a 	add	r2,r2,r9
    73c0:	2008d43a 	srli	r4,r4,16
    73c4:	280ad43a 	srli	r5,r5,16
    73c8:	1007d43a 	srai	r3,r2,16
    73cc:	3880000d 	sth	r2,0(r7)
    73d0:	2149c83a 	sub	r4,r4,r5
    73d4:	20c9883a 	add	r4,r4,r3
    73d8:	3900008d 	sth	r4,2(r7)
    73dc:	31800104 	addi	r6,r6,4
    73e0:	39c00104 	addi	r7,r7,4
    73e4:	2013d43a 	srai	r9,r4,16
    73e8:	42ffee36 	bltu	r8,r11,73a4 <__mdiff+0x80>
    73ec:	33400c2e 	bgeu	r6,r13,7420 <__mdiff+0xfc>
    73f0:	30800017 	ldw	r2,0(r6)
    73f4:	31800104 	addi	r6,r6,4
    73f8:	10ffffcc 	andi	r3,r2,65535
    73fc:	1a47883a 	add	r3,r3,r9
    7400:	1004d43a 	srli	r2,r2,16
    7404:	1809d43a 	srai	r4,r3,16
    7408:	38c0000d 	sth	r3,0(r7)
    740c:	1105883a 	add	r2,r2,r4
    7410:	3880008d 	sth	r2,2(r7)
    7414:	1013d43a 	srai	r9,r2,16
    7418:	39c00104 	addi	r7,r7,4
    741c:	337ff436 	bltu	r6,r13,73f0 <__mdiff+0xcc>
    7420:	38bfff17 	ldw	r2,-4(r7)
    7424:	38ffff04 	addi	r3,r7,-4
    7428:	1000041e 	bne	r2,zero,743c <__mdiff+0x118>
    742c:	18ffff04 	addi	r3,r3,-4
    7430:	18800017 	ldw	r2,0(r3)
    7434:	52bfffc4 	addi	r10,r10,-1
    7438:	103ffc26 	beq	r2,zero,742c <__mdiff+0x108>
    743c:	6005883a 	mov	r2,r12
    7440:	62800415 	stw	r10,16(r12)
    7444:	dfc00417 	ldw	ra,16(sp)
    7448:	dcc00317 	ldw	r19,12(sp)
    744c:	dc800217 	ldw	r18,8(sp)
    7450:	dc400117 	ldw	r17,4(sp)
    7454:	dc000017 	ldw	r16,0(sp)
    7458:	dec00504 	addi	sp,sp,20
    745c:	f800283a 	ret
    7460:	9009883a 	mov	r4,r18
    7464:	000b883a 	mov	r5,zero
    7468:	00070ec0 	call	70ec <_Balloc>
    746c:	1019883a 	mov	r12,r2
    7470:	00800044 	movi	r2,1
    7474:	60800415 	stw	r2,16(r12)
    7478:	6005883a 	mov	r2,r12
    747c:	60000515 	stw	zero,20(r12)
    7480:	dfc00417 	ldw	ra,16(sp)
    7484:	dcc00317 	ldw	r19,12(sp)
    7488:	dc800217 	ldw	r18,8(sp)
    748c:	dc400117 	ldw	r17,4(sp)
    7490:	dc000017 	ldw	r16,0(sp)
    7494:	dec00504 	addi	sp,sp,20
    7498:	f800283a 	ret
    749c:	880d883a 	mov	r6,r17
    74a0:	04c00044 	movi	r19,1
    74a4:	8023883a 	mov	r17,r16
    74a8:	3021883a 	mov	r16,r6
    74ac:	003fac06 	br	7360 <__mdiff+0x3c>

000074b0 <__lshift>:
    74b0:	defff904 	addi	sp,sp,-28
    74b4:	28800417 	ldw	r2,16(r5)
    74b8:	dc000015 	stw	r16,0(sp)
    74bc:	3021d17a 	srai	r16,r6,5
    74c0:	28c00217 	ldw	r3,8(r5)
    74c4:	10800044 	addi	r2,r2,1
    74c8:	dc400115 	stw	r17,4(sp)
    74cc:	80a3883a 	add	r17,r16,r2
    74d0:	dd400515 	stw	r21,20(sp)
    74d4:	dd000415 	stw	r20,16(sp)
    74d8:	dc800215 	stw	r18,8(sp)
    74dc:	dfc00615 	stw	ra,24(sp)
    74e0:	2825883a 	mov	r18,r5
    74e4:	dcc00315 	stw	r19,12(sp)
    74e8:	3029883a 	mov	r20,r6
    74ec:	202b883a 	mov	r21,r4
    74f0:	29400117 	ldw	r5,4(r5)
    74f4:	1c40030e 	bge	r3,r17,7504 <__lshift+0x54>
    74f8:	18c7883a 	add	r3,r3,r3
    74fc:	29400044 	addi	r5,r5,1
    7500:	1c7ffd16 	blt	r3,r17,74f8 <__lshift+0x48>
    7504:	a809883a 	mov	r4,r21
    7508:	00070ec0 	call	70ec <_Balloc>
    750c:	1027883a 	mov	r19,r2
    7510:	11400504 	addi	r5,r2,20
    7514:	0400090e 	bge	zero,r16,753c <__lshift+0x8c>
    7518:	2805883a 	mov	r2,r5
    751c:	0007883a 	mov	r3,zero
    7520:	18c00044 	addi	r3,r3,1
    7524:	10000015 	stw	zero,0(r2)
    7528:	10800104 	addi	r2,r2,4
    752c:	80fffc1e 	bne	r16,r3,7520 <__lshift+0x70>
    7530:	8405883a 	add	r2,r16,r16
    7534:	1085883a 	add	r2,r2,r2
    7538:	288b883a 	add	r5,r5,r2
    753c:	90800417 	ldw	r2,16(r18)
    7540:	91000504 	addi	r4,r18,20
    7544:	a18007cc 	andi	r6,r20,31
    7548:	1085883a 	add	r2,r2,r2
    754c:	1085883a 	add	r2,r2,r2
    7550:	208f883a 	add	r7,r4,r2
    7554:	30001e26 	beq	r6,zero,75d0 <__lshift+0x120>
    7558:	00800804 	movi	r2,32
    755c:	1191c83a 	sub	r8,r2,r6
    7560:	0007883a 	mov	r3,zero
    7564:	20800017 	ldw	r2,0(r4)
    7568:	1184983a 	sll	r2,r2,r6
    756c:	1884b03a 	or	r2,r3,r2
    7570:	28800015 	stw	r2,0(r5)
    7574:	20c00017 	ldw	r3,0(r4)
    7578:	21000104 	addi	r4,r4,4
    757c:	29400104 	addi	r5,r5,4
    7580:	1a06d83a 	srl	r3,r3,r8
    7584:	21fff736 	bltu	r4,r7,7564 <__lshift+0xb4>
    7588:	28c00015 	stw	r3,0(r5)
    758c:	18000126 	beq	r3,zero,7594 <__lshift+0xe4>
    7590:	8c400044 	addi	r17,r17,1
    7594:	88bfffc4 	addi	r2,r17,-1
    7598:	98800415 	stw	r2,16(r19)
    759c:	a809883a 	mov	r4,r21
    75a0:	900b883a 	mov	r5,r18
    75a4:	0006b6c0 	call	6b6c <_Bfree>
    75a8:	9805883a 	mov	r2,r19
    75ac:	dfc00617 	ldw	ra,24(sp)
    75b0:	dd400517 	ldw	r21,20(sp)
    75b4:	dd000417 	ldw	r20,16(sp)
    75b8:	dcc00317 	ldw	r19,12(sp)
    75bc:	dc800217 	ldw	r18,8(sp)
    75c0:	dc400117 	ldw	r17,4(sp)
    75c4:	dc000017 	ldw	r16,0(sp)
    75c8:	dec00704 	addi	sp,sp,28
    75cc:	f800283a 	ret
    75d0:	20800017 	ldw	r2,0(r4)
    75d4:	21000104 	addi	r4,r4,4
    75d8:	28800015 	stw	r2,0(r5)
    75dc:	29400104 	addi	r5,r5,4
    75e0:	21ffec2e 	bgeu	r4,r7,7594 <__lshift+0xe4>
    75e4:	20800017 	ldw	r2,0(r4)
    75e8:	21000104 	addi	r4,r4,4
    75ec:	28800015 	stw	r2,0(r5)
    75f0:	29400104 	addi	r5,r5,4
    75f4:	21fff636 	bltu	r4,r7,75d0 <__lshift+0x120>
    75f8:	003fe606 	br	7594 <__lshift+0xe4>

000075fc <__multiply>:
    75fc:	defff004 	addi	sp,sp,-64
    7600:	dc800815 	stw	r18,32(sp)
    7604:	dc400715 	stw	r17,28(sp)
    7608:	2c800417 	ldw	r18,16(r5)
    760c:	34400417 	ldw	r17,16(r6)
    7610:	dcc00915 	stw	r19,36(sp)
    7614:	dc000615 	stw	r16,24(sp)
    7618:	dfc00f15 	stw	ra,60(sp)
    761c:	df000e15 	stw	fp,56(sp)
    7620:	ddc00d15 	stw	r23,52(sp)
    7624:	dd800c15 	stw	r22,48(sp)
    7628:	dd400b15 	stw	r21,44(sp)
    762c:	dd000a15 	stw	r20,40(sp)
    7630:	2821883a 	mov	r16,r5
    7634:	3027883a 	mov	r19,r6
    7638:	9440040e 	bge	r18,r17,764c <__multiply+0x50>
    763c:	8825883a 	mov	r18,r17
    7640:	2c400417 	ldw	r17,16(r5)
    7644:	2827883a 	mov	r19,r5
    7648:	3021883a 	mov	r16,r6
    764c:	80800217 	ldw	r2,8(r16)
    7650:	9447883a 	add	r3,r18,r17
    7654:	d8c00415 	stw	r3,16(sp)
    7658:	81400117 	ldw	r5,4(r16)
    765c:	10c0010e 	bge	r2,r3,7664 <__multiply+0x68>
    7660:	29400044 	addi	r5,r5,1
    7664:	00070ec0 	call	70ec <_Balloc>
    7668:	d8800515 	stw	r2,20(sp)
    766c:	d9000417 	ldw	r4,16(sp)
    7670:	d8c00517 	ldw	r3,20(sp)
    7674:	2105883a 	add	r2,r4,r4
    7678:	1085883a 	add	r2,r2,r2
    767c:	19000504 	addi	r4,r3,20
    7680:	2085883a 	add	r2,r4,r2
    7684:	d8800315 	stw	r2,12(sp)
    7688:	2080052e 	bgeu	r4,r2,76a0 <__multiply+0xa4>
    768c:	2005883a 	mov	r2,r4
    7690:	d8c00317 	ldw	r3,12(sp)
    7694:	10000015 	stw	zero,0(r2)
    7698:	10800104 	addi	r2,r2,4
    769c:	10fffc36 	bltu	r2,r3,7690 <__multiply+0x94>
    76a0:	8c45883a 	add	r2,r17,r17
    76a4:	9487883a 	add	r3,r18,r18
    76a8:	9dc00504 	addi	r23,r19,20
    76ac:	1085883a 	add	r2,r2,r2
    76b0:	84000504 	addi	r16,r16,20
    76b4:	18c7883a 	add	r3,r3,r3
    76b8:	b885883a 	add	r2,r23,r2
    76bc:	dc000015 	stw	r16,0(sp)
    76c0:	d8800215 	stw	r2,8(sp)
    76c4:	80f9883a 	add	fp,r16,r3
    76c8:	b880432e 	bgeu	r23,r2,77d8 <__multiply+0x1dc>
    76cc:	d9000115 	stw	r4,4(sp)
    76d0:	b9000017 	ldw	r4,0(r23)
    76d4:	253fffcc 	andi	r20,r4,65535
    76d8:	a0001a26 	beq	r20,zero,7744 <__multiply+0x148>
    76dc:	dcc00017 	ldw	r19,0(sp)
    76e0:	dc800117 	ldw	r18,4(sp)
    76e4:	002b883a 	mov	r21,zero
    76e8:	9c400017 	ldw	r17,0(r19)
    76ec:	94000017 	ldw	r16,0(r18)
    76f0:	a009883a 	mov	r4,r20
    76f4:	897fffcc 	andi	r5,r17,65535
    76f8:	00016340 	call	1634 <__mulsi3>
    76fc:	880ad43a 	srli	r5,r17,16
    7700:	80ffffcc 	andi	r3,r16,65535
    7704:	a8c7883a 	add	r3,r21,r3
    7708:	a009883a 	mov	r4,r20
    770c:	10e3883a 	add	r17,r2,r3
    7710:	8020d43a 	srli	r16,r16,16
    7714:	00016340 	call	1634 <__mulsi3>
    7718:	8806d43a 	srli	r3,r17,16
    771c:	1405883a 	add	r2,r2,r16
    7720:	9cc00104 	addi	r19,r19,4
    7724:	1887883a 	add	r3,r3,r2
    7728:	90c0008d 	sth	r3,2(r18)
    772c:	9440000d 	sth	r17,0(r18)
    7730:	182ad43a 	srli	r21,r3,16
    7734:	94800104 	addi	r18,r18,4
    7738:	9f3feb36 	bltu	r19,fp,76e8 <__multiply+0xec>
    773c:	95400015 	stw	r21,0(r18)
    7740:	b9000017 	ldw	r4,0(r23)
    7744:	202ad43a 	srli	r21,r4,16
    7748:	a8001c26 	beq	r21,zero,77bc <__multiply+0x1c0>
    774c:	d9000117 	ldw	r4,4(sp)
    7750:	dd000017 	ldw	r20,0(sp)
    7754:	002d883a 	mov	r22,zero
    7758:	24c00017 	ldw	r19,0(r4)
    775c:	2025883a 	mov	r18,r4
    7760:	9823883a 	mov	r17,r19
    7764:	a4000017 	ldw	r16,0(r20)
    7768:	a809883a 	mov	r4,r21
    776c:	a5000104 	addi	r20,r20,4
    7770:	817fffcc 	andi	r5,r16,65535
    7774:	00016340 	call	1634 <__mulsi3>
    7778:	8806d43a 	srli	r3,r17,16
    777c:	800ad43a 	srli	r5,r16,16
    7780:	94c0000d 	sth	r19,0(r18)
    7784:	b0c7883a 	add	r3,r22,r3
    7788:	10e1883a 	add	r16,r2,r3
    778c:	9400008d 	sth	r16,2(r18)
    7790:	a809883a 	mov	r4,r21
    7794:	94800104 	addi	r18,r18,4
    7798:	00016340 	call	1634 <__mulsi3>
    779c:	94400017 	ldw	r17,0(r18)
    77a0:	8020d43a 	srli	r16,r16,16
    77a4:	88ffffcc 	andi	r3,r17,65535
    77a8:	10c5883a 	add	r2,r2,r3
    77ac:	80a7883a 	add	r19,r16,r2
    77b0:	982cd43a 	srli	r22,r19,16
    77b4:	a73feb36 	bltu	r20,fp,7764 <__multiply+0x168>
    77b8:	94c00015 	stw	r19,0(r18)
    77bc:	d8800217 	ldw	r2,8(sp)
    77c0:	bdc00104 	addi	r23,r23,4
    77c4:	b880042e 	bgeu	r23,r2,77d8 <__multiply+0x1dc>
    77c8:	d8c00117 	ldw	r3,4(sp)
    77cc:	18c00104 	addi	r3,r3,4
    77d0:	d8c00115 	stw	r3,4(sp)
    77d4:	003fbe06 	br	76d0 <__multiply+0xd4>
    77d8:	d9000417 	ldw	r4,16(sp)
    77dc:	01000c0e 	bge	zero,r4,7810 <__multiply+0x214>
    77e0:	d8c00317 	ldw	r3,12(sp)
    77e4:	18bfff17 	ldw	r2,-4(r3)
    77e8:	18ffff04 	addi	r3,r3,-4
    77ec:	10000326 	beq	r2,zero,77fc <__multiply+0x200>
    77f0:	00000706 	br	7810 <__multiply+0x214>
    77f4:	18800017 	ldw	r2,0(r3)
    77f8:	1000051e 	bne	r2,zero,7810 <__multiply+0x214>
    77fc:	d9000417 	ldw	r4,16(sp)
    7800:	18ffff04 	addi	r3,r3,-4
    7804:	213fffc4 	addi	r4,r4,-1
    7808:	d9000415 	stw	r4,16(sp)
    780c:	203ff91e 	bne	r4,zero,77f4 <__multiply+0x1f8>
    7810:	d8800417 	ldw	r2,16(sp)
    7814:	d8c00517 	ldw	r3,20(sp)
    7818:	18800415 	stw	r2,16(r3)
    781c:	1805883a 	mov	r2,r3
    7820:	dfc00f17 	ldw	ra,60(sp)
    7824:	df000e17 	ldw	fp,56(sp)
    7828:	ddc00d17 	ldw	r23,52(sp)
    782c:	dd800c17 	ldw	r22,48(sp)
    7830:	dd400b17 	ldw	r21,44(sp)
    7834:	dd000a17 	ldw	r20,40(sp)
    7838:	dcc00917 	ldw	r19,36(sp)
    783c:	dc800817 	ldw	r18,32(sp)
    7840:	dc400717 	ldw	r17,28(sp)
    7844:	dc000617 	ldw	r16,24(sp)
    7848:	dec01004 	addi	sp,sp,64
    784c:	f800283a 	ret

00007850 <__i2b>:
    7850:	defffd04 	addi	sp,sp,-12
    7854:	dc000015 	stw	r16,0(sp)
    7858:	04000044 	movi	r16,1
    785c:	dc800115 	stw	r18,4(sp)
    7860:	2825883a 	mov	r18,r5
    7864:	800b883a 	mov	r5,r16
    7868:	dfc00215 	stw	ra,8(sp)
    786c:	00070ec0 	call	70ec <_Balloc>
    7870:	14000415 	stw	r16,16(r2)
    7874:	14800515 	stw	r18,20(r2)
    7878:	dfc00217 	ldw	ra,8(sp)
    787c:	dc800117 	ldw	r18,4(sp)
    7880:	dc000017 	ldw	r16,0(sp)
    7884:	dec00304 	addi	sp,sp,12
    7888:	f800283a 	ret

0000788c <__multadd>:
    788c:	defff604 	addi	sp,sp,-40
    7890:	dd800615 	stw	r22,24(sp)
    7894:	2d800417 	ldw	r22,16(r5)
    7898:	df000815 	stw	fp,32(sp)
    789c:	ddc00715 	stw	r23,28(sp)
    78a0:	dd400515 	stw	r21,20(sp)
    78a4:	dd000415 	stw	r20,16(sp)
    78a8:	dcc00315 	stw	r19,12(sp)
    78ac:	dc800215 	stw	r18,8(sp)
    78b0:	dfc00915 	stw	ra,36(sp)
    78b4:	dc400115 	stw	r17,4(sp)
    78b8:	dc000015 	stw	r16,0(sp)
    78bc:	282f883a 	mov	r23,r5
    78c0:	2039883a 	mov	fp,r4
    78c4:	302b883a 	mov	r21,r6
    78c8:	3829883a 	mov	r20,r7
    78cc:	2c800504 	addi	r18,r5,20
    78d0:	0027883a 	mov	r19,zero
    78d4:	94400017 	ldw	r17,0(r18)
    78d8:	a80b883a 	mov	r5,r21
    78dc:	9cc00044 	addi	r19,r19,1
    78e0:	893fffcc 	andi	r4,r17,65535
    78e4:	00016340 	call	1634 <__mulsi3>
    78e8:	8808d43a 	srli	r4,r17,16
    78ec:	1521883a 	add	r16,r2,r20
    78f0:	a80b883a 	mov	r5,r21
    78f4:	00016340 	call	1634 <__mulsi3>
    78f8:	8008d43a 	srli	r4,r16,16
    78fc:	843fffcc 	andi	r16,r16,65535
    7900:	1105883a 	add	r2,r2,r4
    7904:	1006943a 	slli	r3,r2,16
    7908:	1028d43a 	srli	r20,r2,16
    790c:	1c07883a 	add	r3,r3,r16
    7910:	90c00015 	stw	r3,0(r18)
    7914:	94800104 	addi	r18,r18,4
    7918:	9dbfee16 	blt	r19,r22,78d4 <__multadd+0x48>
    791c:	a0000826 	beq	r20,zero,7940 <__multadd+0xb4>
    7920:	b8800217 	ldw	r2,8(r23)
    7924:	b080130e 	bge	r22,r2,7974 <__multadd+0xe8>
    7928:	b585883a 	add	r2,r22,r22
    792c:	1085883a 	add	r2,r2,r2
    7930:	15c5883a 	add	r2,r2,r23
    7934:	b0c00044 	addi	r3,r22,1
    7938:	15000515 	stw	r20,20(r2)
    793c:	b8c00415 	stw	r3,16(r23)
    7940:	b805883a 	mov	r2,r23
    7944:	dfc00917 	ldw	ra,36(sp)
    7948:	df000817 	ldw	fp,32(sp)
    794c:	ddc00717 	ldw	r23,28(sp)
    7950:	dd800617 	ldw	r22,24(sp)
    7954:	dd400517 	ldw	r21,20(sp)
    7958:	dd000417 	ldw	r20,16(sp)
    795c:	dcc00317 	ldw	r19,12(sp)
    7960:	dc800217 	ldw	r18,8(sp)
    7964:	dc400117 	ldw	r17,4(sp)
    7968:	dc000017 	ldw	r16,0(sp)
    796c:	dec00a04 	addi	sp,sp,40
    7970:	f800283a 	ret
    7974:	b9400117 	ldw	r5,4(r23)
    7978:	e009883a 	mov	r4,fp
    797c:	29400044 	addi	r5,r5,1
    7980:	00070ec0 	call	70ec <_Balloc>
    7984:	b9800417 	ldw	r6,16(r23)
    7988:	b9400304 	addi	r5,r23,12
    798c:	11000304 	addi	r4,r2,12
    7990:	318d883a 	add	r6,r6,r6
    7994:	318d883a 	add	r6,r6,r6
    7998:	31800204 	addi	r6,r6,8
    799c:	1023883a 	mov	r17,r2
    79a0:	00069540 	call	6954 <memcpy>
    79a4:	b80b883a 	mov	r5,r23
    79a8:	e009883a 	mov	r4,fp
    79ac:	0006b6c0 	call	6b6c <_Bfree>
    79b0:	882f883a 	mov	r23,r17
    79b4:	003fdc06 	br	7928 <__multadd+0x9c>

000079b8 <__pow5mult>:
    79b8:	defffa04 	addi	sp,sp,-24
    79bc:	308000cc 	andi	r2,r6,3
    79c0:	dd000415 	stw	r20,16(sp)
    79c4:	dcc00315 	stw	r19,12(sp)
    79c8:	dc000015 	stw	r16,0(sp)
    79cc:	dfc00515 	stw	ra,20(sp)
    79d0:	dc800215 	stw	r18,8(sp)
    79d4:	dc400115 	stw	r17,4(sp)
    79d8:	3021883a 	mov	r16,r6
    79dc:	2027883a 	mov	r19,r4
    79e0:	2829883a 	mov	r20,r5
    79e4:	10002b1e 	bne	r2,zero,7a94 <__pow5mult+0xdc>
    79e8:	8025d0ba 	srai	r18,r16,2
    79ec:	90001b26 	beq	r18,zero,7a5c <__pow5mult+0xa4>
    79f0:	9c001217 	ldw	r16,72(r19)
    79f4:	8000081e 	bne	r16,zero,7a18 <__pow5mult+0x60>
    79f8:	00003006 	br	7abc <__pow5mult+0x104>
    79fc:	800b883a 	mov	r5,r16
    7a00:	800d883a 	mov	r6,r16
    7a04:	9809883a 	mov	r4,r19
    7a08:	90001426 	beq	r18,zero,7a5c <__pow5mult+0xa4>
    7a0c:	80800017 	ldw	r2,0(r16)
    7a10:	10001b26 	beq	r2,zero,7a80 <__pow5mult+0xc8>
    7a14:	1021883a 	mov	r16,r2
    7a18:	9080004c 	andi	r2,r18,1
    7a1c:	1005003a 	cmpeq	r2,r2,zero
    7a20:	9025d07a 	srai	r18,r18,1
    7a24:	800d883a 	mov	r6,r16
    7a28:	9809883a 	mov	r4,r19
    7a2c:	a00b883a 	mov	r5,r20
    7a30:	103ff21e 	bne	r2,zero,79fc <__pow5mult+0x44>
    7a34:	00075fc0 	call	75fc <__multiply>
    7a38:	a00b883a 	mov	r5,r20
    7a3c:	9809883a 	mov	r4,r19
    7a40:	1023883a 	mov	r17,r2
    7a44:	0006b6c0 	call	6b6c <_Bfree>
    7a48:	8829883a 	mov	r20,r17
    7a4c:	800b883a 	mov	r5,r16
    7a50:	800d883a 	mov	r6,r16
    7a54:	9809883a 	mov	r4,r19
    7a58:	903fec1e 	bne	r18,zero,7a0c <__pow5mult+0x54>
    7a5c:	a005883a 	mov	r2,r20
    7a60:	dfc00517 	ldw	ra,20(sp)
    7a64:	dd000417 	ldw	r20,16(sp)
    7a68:	dcc00317 	ldw	r19,12(sp)
    7a6c:	dc800217 	ldw	r18,8(sp)
    7a70:	dc400117 	ldw	r17,4(sp)
    7a74:	dc000017 	ldw	r16,0(sp)
    7a78:	dec00604 	addi	sp,sp,24
    7a7c:	f800283a 	ret
    7a80:	00075fc0 	call	75fc <__multiply>
    7a84:	80800015 	stw	r2,0(r16)
    7a88:	1021883a 	mov	r16,r2
    7a8c:	10000015 	stw	zero,0(r2)
    7a90:	003fe106 	br	7a18 <__pow5mult+0x60>
    7a94:	1085883a 	add	r2,r2,r2
    7a98:	00c00074 	movhi	r3,1
    7a9c:	18f9e604 	addi	r3,r3,-6248
    7aa0:	1085883a 	add	r2,r2,r2
    7aa4:	10c5883a 	add	r2,r2,r3
    7aa8:	11bfff17 	ldw	r6,-4(r2)
    7aac:	000f883a 	mov	r7,zero
    7ab0:	000788c0 	call	788c <__multadd>
    7ab4:	1029883a 	mov	r20,r2
    7ab8:	003fcb06 	br	79e8 <__pow5mult+0x30>
    7abc:	9809883a 	mov	r4,r19
    7ac0:	01409c44 	movi	r5,625
    7ac4:	00078500 	call	7850 <__i2b>
    7ac8:	98801215 	stw	r2,72(r19)
    7acc:	1021883a 	mov	r16,r2
    7ad0:	10000015 	stw	zero,0(r2)
    7ad4:	003fd006 	br	7a18 <__pow5mult+0x60>

00007ad8 <__s2b>:
    7ad8:	defff904 	addi	sp,sp,-28
    7adc:	dcc00315 	stw	r19,12(sp)
    7ae0:	dc800215 	stw	r18,8(sp)
    7ae4:	2827883a 	mov	r19,r5
    7ae8:	2025883a 	mov	r18,r4
    7aec:	01400244 	movi	r5,9
    7af0:	39000204 	addi	r4,r7,8
    7af4:	dd000415 	stw	r20,16(sp)
    7af8:	dc400115 	stw	r17,4(sp)
    7afc:	dfc00615 	stw	ra,24(sp)
    7b00:	dd400515 	stw	r21,20(sp)
    7b04:	dc000015 	stw	r16,0(sp)
    7b08:	3829883a 	mov	r20,r7
    7b0c:	3023883a 	mov	r17,r6
    7b10:	0009bb00 	call	9bb0 <__divsi3>
    7b14:	00c00044 	movi	r3,1
    7b18:	1880350e 	bge	r3,r2,7bf0 <__s2b+0x118>
    7b1c:	000b883a 	mov	r5,zero
    7b20:	18c7883a 	add	r3,r3,r3
    7b24:	29400044 	addi	r5,r5,1
    7b28:	18bffd16 	blt	r3,r2,7b20 <__s2b+0x48>
    7b2c:	9009883a 	mov	r4,r18
    7b30:	00070ec0 	call	70ec <_Balloc>
    7b34:	1011883a 	mov	r8,r2
    7b38:	d8800717 	ldw	r2,28(sp)
    7b3c:	00c00044 	movi	r3,1
    7b40:	01800244 	movi	r6,9
    7b44:	40800515 	stw	r2,20(r8)
    7b48:	40c00415 	stw	r3,16(r8)
    7b4c:	3440260e 	bge	r6,r17,7be8 <__s2b+0x110>
    7b50:	3021883a 	mov	r16,r6
    7b54:	99ab883a 	add	r21,r19,r6
    7b58:	9c05883a 	add	r2,r19,r16
    7b5c:	11c00007 	ldb	r7,0(r2)
    7b60:	400b883a 	mov	r5,r8
    7b64:	9009883a 	mov	r4,r18
    7b68:	39fff404 	addi	r7,r7,-48
    7b6c:	01800284 	movi	r6,10
    7b70:	000788c0 	call	788c <__multadd>
    7b74:	84000044 	addi	r16,r16,1
    7b78:	1011883a 	mov	r8,r2
    7b7c:	8c3ff61e 	bne	r17,r16,7b58 <__s2b+0x80>
    7b80:	ac45883a 	add	r2,r21,r17
    7b84:	117ffe04 	addi	r5,r2,-8
    7b88:	880d883a 	mov	r6,r17
    7b8c:	35000c0e 	bge	r6,r20,7bc0 <__s2b+0xe8>
    7b90:	a185c83a 	sub	r2,r20,r6
    7b94:	2821883a 	mov	r16,r5
    7b98:	28a3883a 	add	r17,r5,r2
    7b9c:	81c00007 	ldb	r7,0(r16)
    7ba0:	400b883a 	mov	r5,r8
    7ba4:	9009883a 	mov	r4,r18
    7ba8:	39fff404 	addi	r7,r7,-48
    7bac:	01800284 	movi	r6,10
    7bb0:	000788c0 	call	788c <__multadd>
    7bb4:	84000044 	addi	r16,r16,1
    7bb8:	1011883a 	mov	r8,r2
    7bbc:	847ff71e 	bne	r16,r17,7b9c <__s2b+0xc4>
    7bc0:	4005883a 	mov	r2,r8
    7bc4:	dfc00617 	ldw	ra,24(sp)
    7bc8:	dd400517 	ldw	r21,20(sp)
    7bcc:	dd000417 	ldw	r20,16(sp)
    7bd0:	dcc00317 	ldw	r19,12(sp)
    7bd4:	dc800217 	ldw	r18,8(sp)
    7bd8:	dc400117 	ldw	r17,4(sp)
    7bdc:	dc000017 	ldw	r16,0(sp)
    7be0:	dec00704 	addi	sp,sp,28
    7be4:	f800283a 	ret
    7be8:	99400284 	addi	r5,r19,10
    7bec:	003fe706 	br	7b8c <__s2b+0xb4>
    7bf0:	000b883a 	mov	r5,zero
    7bf4:	003fcd06 	br	7b2c <__s2b+0x54>

00007bf8 <_realloc_r>:
    7bf8:	defff404 	addi	sp,sp,-48
    7bfc:	dd800815 	stw	r22,32(sp)
    7c00:	dc800415 	stw	r18,16(sp)
    7c04:	dc400315 	stw	r17,12(sp)
    7c08:	dfc00b15 	stw	ra,44(sp)
    7c0c:	df000a15 	stw	fp,40(sp)
    7c10:	ddc00915 	stw	r23,36(sp)
    7c14:	dd400715 	stw	r21,28(sp)
    7c18:	dd000615 	stw	r20,24(sp)
    7c1c:	dcc00515 	stw	r19,20(sp)
    7c20:	dc000215 	stw	r16,8(sp)
    7c24:	2825883a 	mov	r18,r5
    7c28:	3023883a 	mov	r17,r6
    7c2c:	202d883a 	mov	r22,r4
    7c30:	2800c926 	beq	r5,zero,7f58 <_realloc_r+0x360>
    7c34:	000a2f00 	call	a2f0 <__malloc_lock>
    7c38:	943ffe04 	addi	r16,r18,-8
    7c3c:	88c002c4 	addi	r3,r17,11
    7c40:	00800584 	movi	r2,22
    7c44:	82000117 	ldw	r8,4(r16)
    7c48:	10c01b2e 	bgeu	r2,r3,7cb8 <_realloc_r+0xc0>
    7c4c:	00bffe04 	movi	r2,-8
    7c50:	188e703a 	and	r7,r3,r2
    7c54:	3839883a 	mov	fp,r7
    7c58:	38001a16 	blt	r7,zero,7cc4 <_realloc_r+0xcc>
    7c5c:	e4401936 	bltu	fp,r17,7cc4 <_realloc_r+0xcc>
    7c60:	013fff04 	movi	r4,-4
    7c64:	4126703a 	and	r19,r8,r4
    7c68:	99c02616 	blt	r19,r7,7d04 <_realloc_r+0x10c>
    7c6c:	802b883a 	mov	r21,r16
    7c70:	9829883a 	mov	r20,r19
    7c74:	84000204 	addi	r16,r16,8
    7c78:	a80f883a 	mov	r7,r21
    7c7c:	a70dc83a 	sub	r6,r20,fp
    7c80:	008003c4 	movi	r2,15
    7c84:	1180c136 	bltu	r2,r6,7f8c <_realloc_r+0x394>
    7c88:	38800117 	ldw	r2,4(r7)
    7c8c:	a549883a 	add	r4,r20,r21
    7c90:	1080004c 	andi	r2,r2,1
    7c94:	a084b03a 	or	r2,r20,r2
    7c98:	38800115 	stw	r2,4(r7)
    7c9c:	20c00117 	ldw	r3,4(r4)
    7ca0:	18c00054 	ori	r3,r3,1
    7ca4:	20c00115 	stw	r3,4(r4)
    7ca8:	b009883a 	mov	r4,r22
    7cac:	000a3100 	call	a310 <__malloc_unlock>
    7cb0:	8023883a 	mov	r17,r16
    7cb4:	00000606 	br	7cd0 <_realloc_r+0xd8>
    7cb8:	01c00404 	movi	r7,16
    7cbc:	3839883a 	mov	fp,r7
    7cc0:	e47fe72e 	bgeu	fp,r17,7c60 <_realloc_r+0x68>
    7cc4:	00800304 	movi	r2,12
    7cc8:	0023883a 	mov	r17,zero
    7ccc:	b0800015 	stw	r2,0(r22)
    7cd0:	8805883a 	mov	r2,r17
    7cd4:	dfc00b17 	ldw	ra,44(sp)
    7cd8:	df000a17 	ldw	fp,40(sp)
    7cdc:	ddc00917 	ldw	r23,36(sp)
    7ce0:	dd800817 	ldw	r22,32(sp)
    7ce4:	dd400717 	ldw	r21,28(sp)
    7ce8:	dd000617 	ldw	r20,24(sp)
    7cec:	dcc00517 	ldw	r19,20(sp)
    7cf0:	dc800417 	ldw	r18,16(sp)
    7cf4:	dc400317 	ldw	r17,12(sp)
    7cf8:	dc000217 	ldw	r16,8(sp)
    7cfc:	dec00c04 	addi	sp,sp,48
    7d00:	f800283a 	ret
    7d04:	00800074 	movhi	r2,1
    7d08:	10bb1c04 	addi	r2,r2,-5008
    7d0c:	12400217 	ldw	r9,8(r2)
    7d10:	84cd883a 	add	r6,r16,r19
    7d14:	802b883a 	mov	r21,r16
    7d18:	3240b926 	beq	r6,r9,8000 <_realloc_r+0x408>
    7d1c:	31400117 	ldw	r5,4(r6)
    7d20:	00bfff84 	movi	r2,-2
    7d24:	2884703a 	and	r2,r5,r2
    7d28:	1185883a 	add	r2,r2,r6
    7d2c:	10c00117 	ldw	r3,4(r2)
    7d30:	18c0004c 	andi	r3,r3,1
    7d34:	1807003a 	cmpeq	r3,r3,zero
    7d38:	1800a326 	beq	r3,zero,7fc8 <_realloc_r+0x3d0>
    7d3c:	2908703a 	and	r4,r5,r4
    7d40:	9929883a 	add	r20,r19,r4
    7d44:	a1c0a30e 	bge	r20,r7,7fd4 <_realloc_r+0x3dc>
    7d48:	4080004c 	andi	r2,r8,1
    7d4c:	1000551e 	bne	r2,zero,7ea4 <_realloc_r+0x2ac>
    7d50:	80800017 	ldw	r2,0(r16)
    7d54:	80afc83a 	sub	r23,r16,r2
    7d58:	b8c00117 	ldw	r3,4(r23)
    7d5c:	00bfff04 	movi	r2,-4
    7d60:	1884703a 	and	r2,r3,r2
    7d64:	30002e26 	beq	r6,zero,7e20 <_realloc_r+0x228>
    7d68:	3240b926 	beq	r6,r9,8050 <_realloc_r+0x458>
    7d6c:	98a9883a 	add	r20,r19,r2
    7d70:	2509883a 	add	r4,r4,r20
    7d74:	d9000015 	stw	r4,0(sp)
    7d78:	21c02a16 	blt	r4,r7,7e24 <_realloc_r+0x22c>
    7d7c:	30800317 	ldw	r2,12(r6)
    7d80:	30c00217 	ldw	r3,8(r6)
    7d84:	01400904 	movi	r5,36
    7d88:	99bfff04 	addi	r6,r19,-4
    7d8c:	18800315 	stw	r2,12(r3)
    7d90:	10c00215 	stw	r3,8(r2)
    7d94:	b9000317 	ldw	r4,12(r23)
    7d98:	b8800217 	ldw	r2,8(r23)
    7d9c:	b82b883a 	mov	r21,r23
    7da0:	bc000204 	addi	r16,r23,8
    7da4:	20800215 	stw	r2,8(r4)
    7da8:	11000315 	stw	r4,12(r2)
    7dac:	2980e436 	bltu	r5,r6,8140 <_realloc_r+0x548>
    7db0:	008004c4 	movi	r2,19
    7db4:	9009883a 	mov	r4,r18
    7db8:	8011883a 	mov	r8,r16
    7dbc:	11800f2e 	bgeu	r2,r6,7dfc <_realloc_r+0x204>
    7dc0:	90800017 	ldw	r2,0(r18)
    7dc4:	ba000404 	addi	r8,r23,16
    7dc8:	91000204 	addi	r4,r18,8
    7dcc:	b8800215 	stw	r2,8(r23)
    7dd0:	90c00117 	ldw	r3,4(r18)
    7dd4:	008006c4 	movi	r2,27
    7dd8:	b8c00315 	stw	r3,12(r23)
    7ddc:	1180072e 	bgeu	r2,r6,7dfc <_realloc_r+0x204>
    7de0:	90c00217 	ldw	r3,8(r18)
    7de4:	ba000604 	addi	r8,r23,24
    7de8:	91000404 	addi	r4,r18,16
    7dec:	b8c00415 	stw	r3,16(r23)
    7df0:	90800317 	ldw	r2,12(r18)
    7df4:	b8800515 	stw	r2,20(r23)
    7df8:	3140e726 	beq	r6,r5,8198 <_realloc_r+0x5a0>
    7dfc:	20800017 	ldw	r2,0(r4)
    7e00:	dd000017 	ldw	r20,0(sp)
    7e04:	b80f883a 	mov	r7,r23
    7e08:	40800015 	stw	r2,0(r8)
    7e0c:	20c00117 	ldw	r3,4(r4)
    7e10:	40c00115 	stw	r3,4(r8)
    7e14:	20800217 	ldw	r2,8(r4)
    7e18:	40800215 	stw	r2,8(r8)
    7e1c:	003f9706 	br	7c7c <_realloc_r+0x84>
    7e20:	98a9883a 	add	r20,r19,r2
    7e24:	a1c01f16 	blt	r20,r7,7ea4 <_realloc_r+0x2ac>
    7e28:	b8c00317 	ldw	r3,12(r23)
    7e2c:	b8800217 	ldw	r2,8(r23)
    7e30:	99bfff04 	addi	r6,r19,-4
    7e34:	01400904 	movi	r5,36
    7e38:	b82b883a 	mov	r21,r23
    7e3c:	18800215 	stw	r2,8(r3)
    7e40:	10c00315 	stw	r3,12(r2)
    7e44:	bc000204 	addi	r16,r23,8
    7e48:	2980c336 	bltu	r5,r6,8158 <_realloc_r+0x560>
    7e4c:	008004c4 	movi	r2,19
    7e50:	9009883a 	mov	r4,r18
    7e54:	8011883a 	mov	r8,r16
    7e58:	11800f2e 	bgeu	r2,r6,7e98 <_realloc_r+0x2a0>
    7e5c:	90800017 	ldw	r2,0(r18)
    7e60:	ba000404 	addi	r8,r23,16
    7e64:	91000204 	addi	r4,r18,8
    7e68:	b8800215 	stw	r2,8(r23)
    7e6c:	90c00117 	ldw	r3,4(r18)
    7e70:	008006c4 	movi	r2,27
    7e74:	b8c00315 	stw	r3,12(r23)
    7e78:	1180072e 	bgeu	r2,r6,7e98 <_realloc_r+0x2a0>
    7e7c:	90c00217 	ldw	r3,8(r18)
    7e80:	ba000604 	addi	r8,r23,24
    7e84:	91000404 	addi	r4,r18,16
    7e88:	b8c00415 	stw	r3,16(r23)
    7e8c:	90800317 	ldw	r2,12(r18)
    7e90:	b8800515 	stw	r2,20(r23)
    7e94:	3140c726 	beq	r6,r5,81b4 <_realloc_r+0x5bc>
    7e98:	20800017 	ldw	r2,0(r4)
    7e9c:	b80f883a 	mov	r7,r23
    7ea0:	003fd906 	br	7e08 <_realloc_r+0x210>
    7ea4:	880b883a 	mov	r5,r17
    7ea8:	b009883a 	mov	r4,r22
    7eac:	00061300 	call	6130 <_malloc_r>
    7eb0:	1023883a 	mov	r17,r2
    7eb4:	10002526 	beq	r2,zero,7f4c <_realloc_r+0x354>
    7eb8:	80800117 	ldw	r2,4(r16)
    7ebc:	00ffff84 	movi	r3,-2
    7ec0:	893ffe04 	addi	r4,r17,-8
    7ec4:	10c4703a 	and	r2,r2,r3
    7ec8:	8085883a 	add	r2,r16,r2
    7ecc:	20809526 	beq	r4,r2,8124 <_realloc_r+0x52c>
    7ed0:	99bfff04 	addi	r6,r19,-4
    7ed4:	01c00904 	movi	r7,36
    7ed8:	39804536 	bltu	r7,r6,7ff0 <_realloc_r+0x3f8>
    7edc:	008004c4 	movi	r2,19
    7ee0:	9009883a 	mov	r4,r18
    7ee4:	880b883a 	mov	r5,r17
    7ee8:	11800f2e 	bgeu	r2,r6,7f28 <_realloc_r+0x330>
    7eec:	90800017 	ldw	r2,0(r18)
    7ef0:	89400204 	addi	r5,r17,8
    7ef4:	91000204 	addi	r4,r18,8
    7ef8:	88800015 	stw	r2,0(r17)
    7efc:	90c00117 	ldw	r3,4(r18)
    7f00:	008006c4 	movi	r2,27
    7f04:	88c00115 	stw	r3,4(r17)
    7f08:	1180072e 	bgeu	r2,r6,7f28 <_realloc_r+0x330>
    7f0c:	90c00217 	ldw	r3,8(r18)
    7f10:	89400404 	addi	r5,r17,16
    7f14:	91000404 	addi	r4,r18,16
    7f18:	88c00215 	stw	r3,8(r17)
    7f1c:	90800317 	ldw	r2,12(r18)
    7f20:	88800315 	stw	r2,12(r17)
    7f24:	31c09126 	beq	r6,r7,816c <_realloc_r+0x574>
    7f28:	20800017 	ldw	r2,0(r4)
    7f2c:	28800015 	stw	r2,0(r5)
    7f30:	20c00117 	ldw	r3,4(r4)
    7f34:	28c00115 	stw	r3,4(r5)
    7f38:	20800217 	ldw	r2,8(r4)
    7f3c:	28800215 	stw	r2,8(r5)
    7f40:	900b883a 	mov	r5,r18
    7f44:	b009883a 	mov	r4,r22
    7f48:	00055a80 	call	55a8 <_free_r>
    7f4c:	b009883a 	mov	r4,r22
    7f50:	000a3100 	call	a310 <__malloc_unlock>
    7f54:	003f5e06 	br	7cd0 <_realloc_r+0xd8>
    7f58:	300b883a 	mov	r5,r6
    7f5c:	dfc00b17 	ldw	ra,44(sp)
    7f60:	df000a17 	ldw	fp,40(sp)
    7f64:	ddc00917 	ldw	r23,36(sp)
    7f68:	dd800817 	ldw	r22,32(sp)
    7f6c:	dd400717 	ldw	r21,28(sp)
    7f70:	dd000617 	ldw	r20,24(sp)
    7f74:	dcc00517 	ldw	r19,20(sp)
    7f78:	dc800417 	ldw	r18,16(sp)
    7f7c:	dc400317 	ldw	r17,12(sp)
    7f80:	dc000217 	ldw	r16,8(sp)
    7f84:	dec00c04 	addi	sp,sp,48
    7f88:	00061301 	jmpi	6130 <_malloc_r>
    7f8c:	38800117 	ldw	r2,4(r7)
    7f90:	e54b883a 	add	r5,fp,r21
    7f94:	31000054 	ori	r4,r6,1
    7f98:	1080004c 	andi	r2,r2,1
    7f9c:	1704b03a 	or	r2,r2,fp
    7fa0:	38800115 	stw	r2,4(r7)
    7fa4:	29000115 	stw	r4,4(r5)
    7fa8:	2987883a 	add	r3,r5,r6
    7fac:	18800117 	ldw	r2,4(r3)
    7fb0:	29400204 	addi	r5,r5,8
    7fb4:	b009883a 	mov	r4,r22
    7fb8:	10800054 	ori	r2,r2,1
    7fbc:	18800115 	stw	r2,4(r3)
    7fc0:	00055a80 	call	55a8 <_free_r>
    7fc4:	003f3806 	br	7ca8 <_realloc_r+0xb0>
    7fc8:	000d883a 	mov	r6,zero
    7fcc:	0009883a 	mov	r4,zero
    7fd0:	003f5d06 	br	7d48 <_realloc_r+0x150>
    7fd4:	30c00217 	ldw	r3,8(r6)
    7fd8:	30800317 	ldw	r2,12(r6)
    7fdc:	800f883a 	mov	r7,r16
    7fe0:	84000204 	addi	r16,r16,8
    7fe4:	10c00215 	stw	r3,8(r2)
    7fe8:	18800315 	stw	r2,12(r3)
    7fec:	003f2306 	br	7c7c <_realloc_r+0x84>
    7ff0:	8809883a 	mov	r4,r17
    7ff4:	900b883a 	mov	r5,r18
    7ff8:	00069f40 	call	69f4 <memmove>
    7ffc:	003fd006 	br	7f40 <_realloc_r+0x348>
    8000:	30800117 	ldw	r2,4(r6)
    8004:	e0c00404 	addi	r3,fp,16
    8008:	1108703a 	and	r4,r2,r4
    800c:	9905883a 	add	r2,r19,r4
    8010:	10ff4d16 	blt	r2,r3,7d48 <_realloc_r+0x150>
    8014:	1705c83a 	sub	r2,r2,fp
    8018:	870b883a 	add	r5,r16,fp
    801c:	10800054 	ori	r2,r2,1
    8020:	28800115 	stw	r2,4(r5)
    8024:	80c00117 	ldw	r3,4(r16)
    8028:	00800074 	movhi	r2,1
    802c:	10bb1c04 	addi	r2,r2,-5008
    8030:	b009883a 	mov	r4,r22
    8034:	18c0004c 	andi	r3,r3,1
    8038:	e0c6b03a 	or	r3,fp,r3
    803c:	11400215 	stw	r5,8(r2)
    8040:	80c00115 	stw	r3,4(r16)
    8044:	000a3100 	call	a310 <__malloc_unlock>
    8048:	84400204 	addi	r17,r16,8
    804c:	003f2006 	br	7cd0 <_realloc_r+0xd8>
    8050:	98a9883a 	add	r20,r19,r2
    8054:	2509883a 	add	r4,r4,r20
    8058:	e0800404 	addi	r2,fp,16
    805c:	d9000115 	stw	r4,4(sp)
    8060:	20bf7016 	blt	r4,r2,7e24 <_realloc_r+0x22c>
    8064:	b8c00317 	ldw	r3,12(r23)
    8068:	b8800217 	ldw	r2,8(r23)
    806c:	99bfff04 	addi	r6,r19,-4
    8070:	01400904 	movi	r5,36
    8074:	18800215 	stw	r2,8(r3)
    8078:	10c00315 	stw	r3,12(r2)
    807c:	bc400204 	addi	r17,r23,8
    8080:	29804136 	bltu	r5,r6,8188 <_realloc_r+0x590>
    8084:	008004c4 	movi	r2,19
    8088:	9009883a 	mov	r4,r18
    808c:	880f883a 	mov	r7,r17
    8090:	11800f2e 	bgeu	r2,r6,80d0 <_realloc_r+0x4d8>
    8094:	90800017 	ldw	r2,0(r18)
    8098:	b9c00404 	addi	r7,r23,16
    809c:	91000204 	addi	r4,r18,8
    80a0:	b8800215 	stw	r2,8(r23)
    80a4:	90c00117 	ldw	r3,4(r18)
    80a8:	008006c4 	movi	r2,27
    80ac:	b8c00315 	stw	r3,12(r23)
    80b0:	1180072e 	bgeu	r2,r6,80d0 <_realloc_r+0x4d8>
    80b4:	90c00217 	ldw	r3,8(r18)
    80b8:	b9c00604 	addi	r7,r23,24
    80bc:	91000404 	addi	r4,r18,16
    80c0:	b8c00415 	stw	r3,16(r23)
    80c4:	90800317 	ldw	r2,12(r18)
    80c8:	b8800515 	stw	r2,20(r23)
    80cc:	31404026 	beq	r6,r5,81d0 <_realloc_r+0x5d8>
    80d0:	20800017 	ldw	r2,0(r4)
    80d4:	38800015 	stw	r2,0(r7)
    80d8:	20c00117 	ldw	r3,4(r4)
    80dc:	38c00115 	stw	r3,4(r7)
    80e0:	20800217 	ldw	r2,8(r4)
    80e4:	38800215 	stw	r2,8(r7)
    80e8:	d8c00117 	ldw	r3,4(sp)
    80ec:	bf0b883a 	add	r5,r23,fp
    80f0:	b009883a 	mov	r4,r22
    80f4:	1f05c83a 	sub	r2,r3,fp
    80f8:	10800054 	ori	r2,r2,1
    80fc:	28800115 	stw	r2,4(r5)
    8100:	b8c00117 	ldw	r3,4(r23)
    8104:	00800074 	movhi	r2,1
    8108:	10bb1c04 	addi	r2,r2,-5008
    810c:	11400215 	stw	r5,8(r2)
    8110:	18c0004c 	andi	r3,r3,1
    8114:	e0c6b03a 	or	r3,fp,r3
    8118:	b8c00115 	stw	r3,4(r23)
    811c:	000a3100 	call	a310 <__malloc_unlock>
    8120:	003eeb06 	br	7cd0 <_realloc_r+0xd8>
    8124:	20800117 	ldw	r2,4(r4)
    8128:	00ffff04 	movi	r3,-4
    812c:	800f883a 	mov	r7,r16
    8130:	10c4703a 	and	r2,r2,r3
    8134:	98a9883a 	add	r20,r19,r2
    8138:	84000204 	addi	r16,r16,8
    813c:	003ecf06 	br	7c7c <_realloc_r+0x84>
    8140:	900b883a 	mov	r5,r18
    8144:	8009883a 	mov	r4,r16
    8148:	00069f40 	call	69f4 <memmove>
    814c:	dd000017 	ldw	r20,0(sp)
    8150:	b80f883a 	mov	r7,r23
    8154:	003ec906 	br	7c7c <_realloc_r+0x84>
    8158:	900b883a 	mov	r5,r18
    815c:	8009883a 	mov	r4,r16
    8160:	00069f40 	call	69f4 <memmove>
    8164:	b80f883a 	mov	r7,r23
    8168:	003ec406 	br	7c7c <_realloc_r+0x84>
    816c:	90c00417 	ldw	r3,16(r18)
    8170:	89400604 	addi	r5,r17,24
    8174:	91000604 	addi	r4,r18,24
    8178:	88c00415 	stw	r3,16(r17)
    817c:	90800517 	ldw	r2,20(r18)
    8180:	88800515 	stw	r2,20(r17)
    8184:	003f6806 	br	7f28 <_realloc_r+0x330>
    8188:	900b883a 	mov	r5,r18
    818c:	8809883a 	mov	r4,r17
    8190:	00069f40 	call	69f4 <memmove>
    8194:	003fd406 	br	80e8 <_realloc_r+0x4f0>
    8198:	90c00417 	ldw	r3,16(r18)
    819c:	91000604 	addi	r4,r18,24
    81a0:	ba000804 	addi	r8,r23,32
    81a4:	b8c00615 	stw	r3,24(r23)
    81a8:	90800517 	ldw	r2,20(r18)
    81ac:	b8800715 	stw	r2,28(r23)
    81b0:	003f1206 	br	7dfc <_realloc_r+0x204>
    81b4:	90c00417 	ldw	r3,16(r18)
    81b8:	91000604 	addi	r4,r18,24
    81bc:	ba000804 	addi	r8,r23,32
    81c0:	b8c00615 	stw	r3,24(r23)
    81c4:	90800517 	ldw	r2,20(r18)
    81c8:	b8800715 	stw	r2,28(r23)
    81cc:	003f3206 	br	7e98 <_realloc_r+0x2a0>
    81d0:	90c00417 	ldw	r3,16(r18)
    81d4:	91000604 	addi	r4,r18,24
    81d8:	b9c00804 	addi	r7,r23,32
    81dc:	b8c00615 	stw	r3,24(r23)
    81e0:	90800517 	ldw	r2,20(r18)
    81e4:	b8800715 	stw	r2,28(r23)
    81e8:	003fb906 	br	80d0 <_realloc_r+0x4d8>

000081ec <__isinfd>:
    81ec:	200d883a 	mov	r6,r4
    81f0:	0109c83a 	sub	r4,zero,r4
    81f4:	2188b03a 	or	r4,r4,r6
    81f8:	2008d7fa 	srli	r4,r4,31
    81fc:	00a00034 	movhi	r2,32768
    8200:	10bfffc4 	addi	r2,r2,-1
    8204:	1144703a 	and	r2,r2,r5
    8208:	2088b03a 	or	r4,r4,r2
    820c:	009ffc34 	movhi	r2,32752
    8210:	1105c83a 	sub	r2,r2,r4
    8214:	0087c83a 	sub	r3,zero,r2
    8218:	10c4b03a 	or	r2,r2,r3
    821c:	1004d7fa 	srli	r2,r2,31
    8220:	00c00044 	movi	r3,1
    8224:	1885c83a 	sub	r2,r3,r2
    8228:	f800283a 	ret

0000822c <__isnand>:
    822c:	200d883a 	mov	r6,r4
    8230:	0109c83a 	sub	r4,zero,r4
    8234:	2188b03a 	or	r4,r4,r6
    8238:	2008d7fa 	srli	r4,r4,31
    823c:	00a00034 	movhi	r2,32768
    8240:	10bfffc4 	addi	r2,r2,-1
    8244:	1144703a 	and	r2,r2,r5
    8248:	2088b03a 	or	r4,r4,r2
    824c:	009ffc34 	movhi	r2,32752
    8250:	1105c83a 	sub	r2,r2,r4
    8254:	1004d7fa 	srli	r2,r2,31
    8258:	f800283a 	ret

0000825c <_sbrk_r>:
    825c:	defffd04 	addi	sp,sp,-12
    8260:	dc000015 	stw	r16,0(sp)
    8264:	04000074 	movhi	r16,1
    8268:	8401e004 	addi	r16,r16,1920
    826c:	dc400115 	stw	r17,4(sp)
    8270:	80000015 	stw	zero,0(r16)
    8274:	2023883a 	mov	r17,r4
    8278:	2809883a 	mov	r4,r5
    827c:	dfc00215 	stw	ra,8(sp)
    8280:	000a52c0 	call	a52c <sbrk>
    8284:	1007883a 	mov	r3,r2
    8288:	00bfffc4 	movi	r2,-1
    828c:	18800626 	beq	r3,r2,82a8 <_sbrk_r+0x4c>
    8290:	1805883a 	mov	r2,r3
    8294:	dfc00217 	ldw	ra,8(sp)
    8298:	dc400117 	ldw	r17,4(sp)
    829c:	dc000017 	ldw	r16,0(sp)
    82a0:	dec00304 	addi	sp,sp,12
    82a4:	f800283a 	ret
    82a8:	80800017 	ldw	r2,0(r16)
    82ac:	103ff826 	beq	r2,zero,8290 <_sbrk_r+0x34>
    82b0:	88800015 	stw	r2,0(r17)
    82b4:	1805883a 	mov	r2,r3
    82b8:	dfc00217 	ldw	ra,8(sp)
    82bc:	dc400117 	ldw	r17,4(sp)
    82c0:	dc000017 	ldw	r16,0(sp)
    82c4:	dec00304 	addi	sp,sp,12
    82c8:	f800283a 	ret

000082cc <__sclose>:
    82cc:	2940038f 	ldh	r5,14(r5)
    82d0:	00086881 	jmpi	8688 <_close_r>

000082d4 <__sseek>:
    82d4:	defffe04 	addi	sp,sp,-8
    82d8:	dc000015 	stw	r16,0(sp)
    82dc:	2821883a 	mov	r16,r5
    82e0:	2940038f 	ldh	r5,14(r5)
    82e4:	dfc00115 	stw	ra,4(sp)
    82e8:	00089000 	call	8900 <_lseek_r>
    82ec:	1007883a 	mov	r3,r2
    82f0:	00bfffc4 	movi	r2,-1
    82f4:	18800926 	beq	r3,r2,831c <__sseek+0x48>
    82f8:	8080030b 	ldhu	r2,12(r16)
    82fc:	80c01415 	stw	r3,80(r16)
    8300:	10840014 	ori	r2,r2,4096
    8304:	8080030d 	sth	r2,12(r16)
    8308:	1805883a 	mov	r2,r3
    830c:	dfc00117 	ldw	ra,4(sp)
    8310:	dc000017 	ldw	r16,0(sp)
    8314:	dec00204 	addi	sp,sp,8
    8318:	f800283a 	ret
    831c:	8080030b 	ldhu	r2,12(r16)
    8320:	10bbffcc 	andi	r2,r2,61439
    8324:	8080030d 	sth	r2,12(r16)
    8328:	1805883a 	mov	r2,r3
    832c:	dfc00117 	ldw	ra,4(sp)
    8330:	dc000017 	ldw	r16,0(sp)
    8334:	dec00204 	addi	sp,sp,8
    8338:	f800283a 	ret

0000833c <__swrite>:
    833c:	2880030b 	ldhu	r2,12(r5)
    8340:	defffb04 	addi	sp,sp,-20
    8344:	dcc00315 	stw	r19,12(sp)
    8348:	1080400c 	andi	r2,r2,256
    834c:	dc800215 	stw	r18,8(sp)
    8350:	dc400115 	stw	r17,4(sp)
    8354:	dc000015 	stw	r16,0(sp)
    8358:	3027883a 	mov	r19,r6
    835c:	3825883a 	mov	r18,r7
    8360:	dfc00415 	stw	ra,16(sp)
    8364:	2821883a 	mov	r16,r5
    8368:	000d883a 	mov	r6,zero
    836c:	01c00084 	movi	r7,2
    8370:	2023883a 	mov	r17,r4
    8374:	10000226 	beq	r2,zero,8380 <__swrite+0x44>
    8378:	2940038f 	ldh	r5,14(r5)
    837c:	00089000 	call	8900 <_lseek_r>
    8380:	8080030b 	ldhu	r2,12(r16)
    8384:	8140038f 	ldh	r5,14(r16)
    8388:	8809883a 	mov	r4,r17
    838c:	10bbffcc 	andi	r2,r2,61439
    8390:	980d883a 	mov	r6,r19
    8394:	900f883a 	mov	r7,r18
    8398:	8080030d 	sth	r2,12(r16)
    839c:	dfc00417 	ldw	ra,16(sp)
    83a0:	dcc00317 	ldw	r19,12(sp)
    83a4:	dc800217 	ldw	r18,8(sp)
    83a8:	dc400117 	ldw	r17,4(sp)
    83ac:	dc000017 	ldw	r16,0(sp)
    83b0:	dec00504 	addi	sp,sp,20
    83b4:	00085481 	jmpi	8548 <_write_r>

000083b8 <__sread>:
    83b8:	defffe04 	addi	sp,sp,-8
    83bc:	dc000015 	stw	r16,0(sp)
    83c0:	2821883a 	mov	r16,r5
    83c4:	2940038f 	ldh	r5,14(r5)
    83c8:	dfc00115 	stw	ra,4(sp)
    83cc:	00089780 	call	8978 <_read_r>
    83d0:	1007883a 	mov	r3,r2
    83d4:	10000816 	blt	r2,zero,83f8 <__sread+0x40>
    83d8:	80801417 	ldw	r2,80(r16)
    83dc:	10c5883a 	add	r2,r2,r3
    83e0:	80801415 	stw	r2,80(r16)
    83e4:	1805883a 	mov	r2,r3
    83e8:	dfc00117 	ldw	ra,4(sp)
    83ec:	dc000017 	ldw	r16,0(sp)
    83f0:	dec00204 	addi	sp,sp,8
    83f4:	f800283a 	ret
    83f8:	8080030b 	ldhu	r2,12(r16)
    83fc:	10bbffcc 	andi	r2,r2,61439
    8400:	8080030d 	sth	r2,12(r16)
    8404:	1805883a 	mov	r2,r3
    8408:	dfc00117 	ldw	ra,4(sp)
    840c:	dc000017 	ldw	r16,0(sp)
    8410:	dec00204 	addi	sp,sp,8
    8414:	f800283a 	ret

00008418 <strcmp>:
    8418:	2144b03a 	or	r2,r4,r5
    841c:	108000cc 	andi	r2,r2,3
    8420:	10001d1e 	bne	r2,zero,8498 <strcmp+0x80>
    8424:	200f883a 	mov	r7,r4
    8428:	28800017 	ldw	r2,0(r5)
    842c:	21000017 	ldw	r4,0(r4)
    8430:	280d883a 	mov	r6,r5
    8434:	2080161e 	bne	r4,r2,8490 <strcmp+0x78>
    8438:	023fbff4 	movhi	r8,65279
    843c:	423fbfc4 	addi	r8,r8,-257
    8440:	2207883a 	add	r3,r4,r8
    8444:	01602074 	movhi	r5,32897
    8448:	29602004 	addi	r5,r5,-32640
    844c:	1946703a 	and	r3,r3,r5
    8450:	0104303a 	nor	r2,zero,r4
    8454:	10c4703a 	and	r2,r2,r3
    8458:	10001c1e 	bne	r2,zero,84cc <strcmp+0xb4>
    845c:	4013883a 	mov	r9,r8
    8460:	2811883a 	mov	r8,r5
    8464:	00000106 	br	846c <strcmp+0x54>
    8468:	1800181e 	bne	r3,zero,84cc <strcmp+0xb4>
    846c:	39c00104 	addi	r7,r7,4
    8470:	39000017 	ldw	r4,0(r7)
    8474:	31800104 	addi	r6,r6,4
    8478:	31400017 	ldw	r5,0(r6)
    847c:	2245883a 	add	r2,r4,r9
    8480:	1204703a 	and	r2,r2,r8
    8484:	0106303a 	nor	r3,zero,r4
    8488:	1886703a 	and	r3,r3,r2
    848c:	217ff626 	beq	r4,r5,8468 <strcmp+0x50>
    8490:	3809883a 	mov	r4,r7
    8494:	300b883a 	mov	r5,r6
    8498:	20c00007 	ldb	r3,0(r4)
    849c:	1800051e 	bne	r3,zero,84b4 <strcmp+0x9c>
    84a0:	00000606 	br	84bc <strcmp+0xa4>
    84a4:	21000044 	addi	r4,r4,1
    84a8:	20c00007 	ldb	r3,0(r4)
    84ac:	29400044 	addi	r5,r5,1
    84b0:	18000226 	beq	r3,zero,84bc <strcmp+0xa4>
    84b4:	28800007 	ldb	r2,0(r5)
    84b8:	18bffa26 	beq	r3,r2,84a4 <strcmp+0x8c>
    84bc:	20c00003 	ldbu	r3,0(r4)
    84c0:	28800003 	ldbu	r2,0(r5)
    84c4:	1885c83a 	sub	r2,r3,r2
    84c8:	f800283a 	ret
    84cc:	0005883a 	mov	r2,zero
    84d0:	f800283a 	ret

000084d4 <strlen>:
    84d4:	208000cc 	andi	r2,r4,3
    84d8:	2011883a 	mov	r8,r4
    84dc:	1000161e 	bne	r2,zero,8538 <strlen+0x64>
    84e0:	20c00017 	ldw	r3,0(r4)
    84e4:	017fbff4 	movhi	r5,65279
    84e8:	297fbfc4 	addi	r5,r5,-257
    84ec:	01e02074 	movhi	r7,32897
    84f0:	39e02004 	addi	r7,r7,-32640
    84f4:	1945883a 	add	r2,r3,r5
    84f8:	11c4703a 	and	r2,r2,r7
    84fc:	00c6303a 	nor	r3,zero,r3
    8500:	1886703a 	and	r3,r3,r2
    8504:	18000c1e 	bne	r3,zero,8538 <strlen+0x64>
    8508:	280d883a 	mov	r6,r5
    850c:	380b883a 	mov	r5,r7
    8510:	21000104 	addi	r4,r4,4
    8514:	20800017 	ldw	r2,0(r4)
    8518:	1187883a 	add	r3,r2,r6
    851c:	1946703a 	and	r3,r3,r5
    8520:	0084303a 	nor	r2,zero,r2
    8524:	10c4703a 	and	r2,r2,r3
    8528:	103ff926 	beq	r2,zero,8510 <strlen+0x3c>
    852c:	20800007 	ldb	r2,0(r4)
    8530:	10000326 	beq	r2,zero,8540 <strlen+0x6c>
    8534:	21000044 	addi	r4,r4,1
    8538:	20800007 	ldb	r2,0(r4)
    853c:	103ffd1e 	bne	r2,zero,8534 <strlen+0x60>
    8540:	2205c83a 	sub	r2,r4,r8
    8544:	f800283a 	ret

00008548 <_write_r>:
    8548:	defffd04 	addi	sp,sp,-12
    854c:	dc000015 	stw	r16,0(sp)
    8550:	04000074 	movhi	r16,1
    8554:	8401e004 	addi	r16,r16,1920
    8558:	dc400115 	stw	r17,4(sp)
    855c:	80000015 	stw	zero,0(r16)
    8560:	2023883a 	mov	r17,r4
    8564:	2809883a 	mov	r4,r5
    8568:	300b883a 	mov	r5,r6
    856c:	380d883a 	mov	r6,r7
    8570:	dfc00215 	stw	ra,8(sp)
    8574:	000a5e80 	call	a5e8 <write>
    8578:	1007883a 	mov	r3,r2
    857c:	00bfffc4 	movi	r2,-1
    8580:	18800626 	beq	r3,r2,859c <_write_r+0x54>
    8584:	1805883a 	mov	r2,r3
    8588:	dfc00217 	ldw	ra,8(sp)
    858c:	dc400117 	ldw	r17,4(sp)
    8590:	dc000017 	ldw	r16,0(sp)
    8594:	dec00304 	addi	sp,sp,12
    8598:	f800283a 	ret
    859c:	80800017 	ldw	r2,0(r16)
    85a0:	103ff826 	beq	r2,zero,8584 <_write_r+0x3c>
    85a4:	88800015 	stw	r2,0(r17)
    85a8:	1805883a 	mov	r2,r3
    85ac:	dfc00217 	ldw	ra,8(sp)
    85b0:	dc400117 	ldw	r17,4(sp)
    85b4:	dc000017 	ldw	r16,0(sp)
    85b8:	dec00304 	addi	sp,sp,12
    85bc:	f800283a 	ret

000085c0 <_calloc_r>:
    85c0:	defffe04 	addi	sp,sp,-8
    85c4:	dc400015 	stw	r17,0(sp)
    85c8:	2023883a 	mov	r17,r4
    85cc:	2809883a 	mov	r4,r5
    85d0:	300b883a 	mov	r5,r6
    85d4:	dfc00115 	stw	ra,4(sp)
    85d8:	00016340 	call	1634 <__mulsi3>
    85dc:	100b883a 	mov	r5,r2
    85e0:	8809883a 	mov	r4,r17
    85e4:	00061300 	call	6130 <_malloc_r>
    85e8:	1023883a 	mov	r17,r2
    85ec:	01c00904 	movi	r7,36
    85f0:	10000d26 	beq	r2,zero,8628 <_calloc_r+0x68>
    85f4:	10ffff17 	ldw	r3,-4(r2)
    85f8:	1009883a 	mov	r4,r2
    85fc:	00bfff04 	movi	r2,-4
    8600:	1886703a 	and	r3,r3,r2
    8604:	1887883a 	add	r3,r3,r2
    8608:	180d883a 	mov	r6,r3
    860c:	000b883a 	mov	r5,zero
    8610:	38c01736 	bltu	r7,r3,8670 <_calloc_r+0xb0>
    8614:	008004c4 	movi	r2,19
    8618:	10c00836 	bltu	r2,r3,863c <_calloc_r+0x7c>
    861c:	20000215 	stw	zero,8(r4)
    8620:	20000015 	stw	zero,0(r4)
    8624:	20000115 	stw	zero,4(r4)
    8628:	8805883a 	mov	r2,r17
    862c:	dfc00117 	ldw	ra,4(sp)
    8630:	dc400017 	ldw	r17,0(sp)
    8634:	dec00204 	addi	sp,sp,8
    8638:	f800283a 	ret
    863c:	008006c4 	movi	r2,27
    8640:	88000015 	stw	zero,0(r17)
    8644:	88000115 	stw	zero,4(r17)
    8648:	89000204 	addi	r4,r17,8
    864c:	10fff32e 	bgeu	r2,r3,861c <_calloc_r+0x5c>
    8650:	88000215 	stw	zero,8(r17)
    8654:	88000315 	stw	zero,12(r17)
    8658:	89000404 	addi	r4,r17,16
    865c:	19ffef1e 	bne	r3,r7,861c <_calloc_r+0x5c>
    8660:	89000604 	addi	r4,r17,24
    8664:	88000415 	stw	zero,16(r17)
    8668:	88000515 	stw	zero,20(r17)
    866c:	003feb06 	br	861c <_calloc_r+0x5c>
    8670:	0006ad40 	call	6ad4 <memset>
    8674:	8805883a 	mov	r2,r17
    8678:	dfc00117 	ldw	ra,4(sp)
    867c:	dc400017 	ldw	r17,0(sp)
    8680:	dec00204 	addi	sp,sp,8
    8684:	f800283a 	ret

00008688 <_close_r>:
    8688:	defffd04 	addi	sp,sp,-12
    868c:	dc000015 	stw	r16,0(sp)
    8690:	04000074 	movhi	r16,1
    8694:	8401e004 	addi	r16,r16,1920
    8698:	dc400115 	stw	r17,4(sp)
    869c:	80000015 	stw	zero,0(r16)
    86a0:	2023883a 	mov	r17,r4
    86a4:	2809883a 	mov	r4,r5
    86a8:	dfc00215 	stw	ra,8(sp)
    86ac:	0009d480 	call	9d48 <close>
    86b0:	1007883a 	mov	r3,r2
    86b4:	00bfffc4 	movi	r2,-1
    86b8:	18800626 	beq	r3,r2,86d4 <_close_r+0x4c>
    86bc:	1805883a 	mov	r2,r3
    86c0:	dfc00217 	ldw	ra,8(sp)
    86c4:	dc400117 	ldw	r17,4(sp)
    86c8:	dc000017 	ldw	r16,0(sp)
    86cc:	dec00304 	addi	sp,sp,12
    86d0:	f800283a 	ret
    86d4:	80800017 	ldw	r2,0(r16)
    86d8:	103ff826 	beq	r2,zero,86bc <_close_r+0x34>
    86dc:	88800015 	stw	r2,0(r17)
    86e0:	1805883a 	mov	r2,r3
    86e4:	dfc00217 	ldw	ra,8(sp)
    86e8:	dc400117 	ldw	r17,4(sp)
    86ec:	dc000017 	ldw	r16,0(sp)
    86f0:	dec00304 	addi	sp,sp,12
    86f4:	f800283a 	ret

000086f8 <_fclose_r>:
    86f8:	defffc04 	addi	sp,sp,-16
    86fc:	dc400115 	stw	r17,4(sp)
    8700:	dc000015 	stw	r16,0(sp)
    8704:	dfc00315 	stw	ra,12(sp)
    8708:	dc800215 	stw	r18,8(sp)
    870c:	2821883a 	mov	r16,r5
    8710:	2023883a 	mov	r17,r4
    8714:	28002926 	beq	r5,zero,87bc <_fclose_r+0xc4>
    8718:	00051e00 	call	51e0 <__sfp_lock_acquire>
    871c:	88000226 	beq	r17,zero,8728 <_fclose_r+0x30>
    8720:	88800e17 	ldw	r2,56(r17)
    8724:	10002d26 	beq	r2,zero,87dc <_fclose_r+0xe4>
    8728:	8080030f 	ldh	r2,12(r16)
    872c:	10002226 	beq	r2,zero,87b8 <_fclose_r+0xc0>
    8730:	8809883a 	mov	r4,r17
    8734:	800b883a 	mov	r5,r16
    8738:	0004f580 	call	4f58 <_fflush_r>
    873c:	1025883a 	mov	r18,r2
    8740:	80800b17 	ldw	r2,44(r16)
    8744:	10000426 	beq	r2,zero,8758 <_fclose_r+0x60>
    8748:	81400717 	ldw	r5,28(r16)
    874c:	8809883a 	mov	r4,r17
    8750:	103ee83a 	callr	r2
    8754:	10002a16 	blt	r2,zero,8800 <_fclose_r+0x108>
    8758:	8080030b 	ldhu	r2,12(r16)
    875c:	1080200c 	andi	r2,r2,128
    8760:	1000231e 	bne	r2,zero,87f0 <_fclose_r+0xf8>
    8764:	81400c17 	ldw	r5,48(r16)
    8768:	28000526 	beq	r5,zero,8780 <_fclose_r+0x88>
    876c:	80801004 	addi	r2,r16,64
    8770:	28800226 	beq	r5,r2,877c <_fclose_r+0x84>
    8774:	8809883a 	mov	r4,r17
    8778:	00055a80 	call	55a8 <_free_r>
    877c:	80000c15 	stw	zero,48(r16)
    8780:	81401117 	ldw	r5,68(r16)
    8784:	28000326 	beq	r5,zero,8794 <_fclose_r+0x9c>
    8788:	8809883a 	mov	r4,r17
    878c:	00055a80 	call	55a8 <_free_r>
    8790:	80001115 	stw	zero,68(r16)
    8794:	8000030d 	sth	zero,12(r16)
    8798:	00051e40 	call	51e4 <__sfp_lock_release>
    879c:	9005883a 	mov	r2,r18
    87a0:	dfc00317 	ldw	ra,12(sp)
    87a4:	dc800217 	ldw	r18,8(sp)
    87a8:	dc400117 	ldw	r17,4(sp)
    87ac:	dc000017 	ldw	r16,0(sp)
    87b0:	dec00404 	addi	sp,sp,16
    87b4:	f800283a 	ret
    87b8:	00051e40 	call	51e4 <__sfp_lock_release>
    87bc:	0025883a 	mov	r18,zero
    87c0:	9005883a 	mov	r2,r18
    87c4:	dfc00317 	ldw	ra,12(sp)
    87c8:	dc800217 	ldw	r18,8(sp)
    87cc:	dc400117 	ldw	r17,4(sp)
    87d0:	dc000017 	ldw	r16,0(sp)
    87d4:	dec00404 	addi	sp,sp,16
    87d8:	f800283a 	ret
    87dc:	8809883a 	mov	r4,r17
    87e0:	00051f00 	call	51f0 <__sinit>
    87e4:	8080030f 	ldh	r2,12(r16)
    87e8:	103fd11e 	bne	r2,zero,8730 <_fclose_r+0x38>
    87ec:	003ff206 	br	87b8 <_fclose_r+0xc0>
    87f0:	81400417 	ldw	r5,16(r16)
    87f4:	8809883a 	mov	r4,r17
    87f8:	00055a80 	call	55a8 <_free_r>
    87fc:	003fd906 	br	8764 <_fclose_r+0x6c>
    8800:	04bfffc4 	movi	r18,-1
    8804:	003fd406 	br	8758 <_fclose_r+0x60>

00008808 <fclose>:
    8808:	00800074 	movhi	r2,1
    880c:	1081c804 	addi	r2,r2,1824
    8810:	200b883a 	mov	r5,r4
    8814:	11000017 	ldw	r4,0(r2)
    8818:	00086f81 	jmpi	86f8 <_fclose_r>

0000881c <_fstat_r>:
    881c:	defffd04 	addi	sp,sp,-12
    8820:	dc000015 	stw	r16,0(sp)
    8824:	04000074 	movhi	r16,1
    8828:	8401e004 	addi	r16,r16,1920
    882c:	dc400115 	stw	r17,4(sp)
    8830:	80000015 	stw	zero,0(r16)
    8834:	2023883a 	mov	r17,r4
    8838:	2809883a 	mov	r4,r5
    883c:	300b883a 	mov	r5,r6
    8840:	dfc00215 	stw	ra,8(sp)
    8844:	0009ed40 	call	9ed4 <fstat>
    8848:	1007883a 	mov	r3,r2
    884c:	00bfffc4 	movi	r2,-1
    8850:	18800626 	beq	r3,r2,886c <_fstat_r+0x50>
    8854:	1805883a 	mov	r2,r3
    8858:	dfc00217 	ldw	ra,8(sp)
    885c:	dc400117 	ldw	r17,4(sp)
    8860:	dc000017 	ldw	r16,0(sp)
    8864:	dec00304 	addi	sp,sp,12
    8868:	f800283a 	ret
    886c:	80800017 	ldw	r2,0(r16)
    8870:	103ff826 	beq	r2,zero,8854 <_fstat_r+0x38>
    8874:	88800015 	stw	r2,0(r17)
    8878:	1805883a 	mov	r2,r3
    887c:	dfc00217 	ldw	ra,8(sp)
    8880:	dc400117 	ldw	r17,4(sp)
    8884:	dc000017 	ldw	r16,0(sp)
    8888:	dec00304 	addi	sp,sp,12
    888c:	f800283a 	ret

00008890 <_isatty_r>:
    8890:	defffd04 	addi	sp,sp,-12
    8894:	dc000015 	stw	r16,0(sp)
    8898:	04000074 	movhi	r16,1
    889c:	8401e004 	addi	r16,r16,1920
    88a0:	dc400115 	stw	r17,4(sp)
    88a4:	80000015 	stw	zero,0(r16)
    88a8:	2023883a 	mov	r17,r4
    88ac:	2809883a 	mov	r4,r5
    88b0:	dfc00215 	stw	ra,8(sp)
    88b4:	000a00c0 	call	a00c <isatty>
    88b8:	1007883a 	mov	r3,r2
    88bc:	00bfffc4 	movi	r2,-1
    88c0:	18800626 	beq	r3,r2,88dc <_isatty_r+0x4c>
    88c4:	1805883a 	mov	r2,r3
    88c8:	dfc00217 	ldw	ra,8(sp)
    88cc:	dc400117 	ldw	r17,4(sp)
    88d0:	dc000017 	ldw	r16,0(sp)
    88d4:	dec00304 	addi	sp,sp,12
    88d8:	f800283a 	ret
    88dc:	80800017 	ldw	r2,0(r16)
    88e0:	103ff826 	beq	r2,zero,88c4 <_isatty_r+0x34>
    88e4:	88800015 	stw	r2,0(r17)
    88e8:	1805883a 	mov	r2,r3
    88ec:	dfc00217 	ldw	ra,8(sp)
    88f0:	dc400117 	ldw	r17,4(sp)
    88f4:	dc000017 	ldw	r16,0(sp)
    88f8:	dec00304 	addi	sp,sp,12
    88fc:	f800283a 	ret

00008900 <_lseek_r>:
    8900:	defffd04 	addi	sp,sp,-12
    8904:	dc000015 	stw	r16,0(sp)
    8908:	04000074 	movhi	r16,1
    890c:	8401e004 	addi	r16,r16,1920
    8910:	dc400115 	stw	r17,4(sp)
    8914:	80000015 	stw	zero,0(r16)
    8918:	2023883a 	mov	r17,r4
    891c:	2809883a 	mov	r4,r5
    8920:	300b883a 	mov	r5,r6
    8924:	380d883a 	mov	r6,r7
    8928:	dfc00215 	stw	ra,8(sp)
    892c:	000a1300 	call	a130 <lseek>
    8930:	1007883a 	mov	r3,r2
    8934:	00bfffc4 	movi	r2,-1
    8938:	18800626 	beq	r3,r2,8954 <_lseek_r+0x54>
    893c:	1805883a 	mov	r2,r3
    8940:	dfc00217 	ldw	ra,8(sp)
    8944:	dc400117 	ldw	r17,4(sp)
    8948:	dc000017 	ldw	r16,0(sp)
    894c:	dec00304 	addi	sp,sp,12
    8950:	f800283a 	ret
    8954:	80800017 	ldw	r2,0(r16)
    8958:	103ff826 	beq	r2,zero,893c <_lseek_r+0x3c>
    895c:	88800015 	stw	r2,0(r17)
    8960:	1805883a 	mov	r2,r3
    8964:	dfc00217 	ldw	ra,8(sp)
    8968:	dc400117 	ldw	r17,4(sp)
    896c:	dc000017 	ldw	r16,0(sp)
    8970:	dec00304 	addi	sp,sp,12
    8974:	f800283a 	ret

00008978 <_read_r>:
    8978:	defffd04 	addi	sp,sp,-12
    897c:	dc000015 	stw	r16,0(sp)
    8980:	04000074 	movhi	r16,1
    8984:	8401e004 	addi	r16,r16,1920
    8988:	dc400115 	stw	r17,4(sp)
    898c:	80000015 	stw	zero,0(r16)
    8990:	2023883a 	mov	r17,r4
    8994:	2809883a 	mov	r4,r5
    8998:	300b883a 	mov	r5,r6
    899c:	380d883a 	mov	r6,r7
    89a0:	dfc00215 	stw	ra,8(sp)
    89a4:	000a3300 	call	a330 <read>
    89a8:	1007883a 	mov	r3,r2
    89ac:	00bfffc4 	movi	r2,-1
    89b0:	18800626 	beq	r3,r2,89cc <_read_r+0x54>
    89b4:	1805883a 	mov	r2,r3
    89b8:	dfc00217 	ldw	ra,8(sp)
    89bc:	dc400117 	ldw	r17,4(sp)
    89c0:	dc000017 	ldw	r16,0(sp)
    89c4:	dec00304 	addi	sp,sp,12
    89c8:	f800283a 	ret
    89cc:	80800017 	ldw	r2,0(r16)
    89d0:	103ff826 	beq	r2,zero,89b4 <_read_r+0x3c>
    89d4:	88800015 	stw	r2,0(r17)
    89d8:	1805883a 	mov	r2,r3
    89dc:	dfc00217 	ldw	ra,8(sp)
    89e0:	dc400117 	ldw	r17,4(sp)
    89e4:	dc000017 	ldw	r16,0(sp)
    89e8:	dec00304 	addi	sp,sp,12
    89ec:	f800283a 	ret

000089f0 <__udivdi3>:
    89f0:	defff104 	addi	sp,sp,-60
    89f4:	0015883a 	mov	r10,zero
    89f8:	2005883a 	mov	r2,r4
    89fc:	3011883a 	mov	r8,r6
    8a00:	df000d15 	stw	fp,52(sp)
    8a04:	dd400a15 	stw	r21,40(sp)
    8a08:	dcc00815 	stw	r19,32(sp)
    8a0c:	dfc00e15 	stw	ra,56(sp)
    8a10:	ddc00c15 	stw	r23,48(sp)
    8a14:	dd800b15 	stw	r22,44(sp)
    8a18:	dd000915 	stw	r20,36(sp)
    8a1c:	dc800715 	stw	r18,28(sp)
    8a20:	dc400615 	stw	r17,24(sp)
    8a24:	dc000515 	stw	r16,20(sp)
    8a28:	da800315 	stw	r10,12(sp)
    8a2c:	4027883a 	mov	r19,r8
    8a30:	1039883a 	mov	fp,r2
    8a34:	282b883a 	mov	r21,r5
    8a38:	da800415 	stw	r10,16(sp)
    8a3c:	3800401e 	bne	r7,zero,8b40 <__udivdi3+0x150>
    8a40:	2a006536 	bltu	r5,r8,8bd8 <__udivdi3+0x1e8>
    8a44:	4000b526 	beq	r8,zero,8d1c <__udivdi3+0x32c>
    8a48:	00bfffd4 	movui	r2,65535
    8a4c:	14c0ad36 	bltu	r2,r19,8d04 <__udivdi3+0x314>
    8a50:	00803fc4 	movi	r2,255
    8a54:	14c15e36 	bltu	r2,r19,8fd0 <__udivdi3+0x5e0>
    8a58:	000b883a 	mov	r5,zero
    8a5c:	0005883a 	mov	r2,zero
    8a60:	9884d83a 	srl	r2,r19,r2
    8a64:	01000074 	movhi	r4,1
    8a68:	21392b04 	addi	r4,r4,-6996
    8a6c:	01800804 	movi	r6,32
    8a70:	1105883a 	add	r2,r2,r4
    8a74:	10c00003 	ldbu	r3,0(r2)
    8a78:	28c7883a 	add	r3,r5,r3
    8a7c:	30e9c83a 	sub	r20,r6,r3
    8a80:	a0010a1e 	bne	r20,zero,8eac <__udivdi3+0x4bc>
    8a84:	982ed43a 	srli	r23,r19,16
    8a88:	acebc83a 	sub	r21,r21,r19
    8a8c:	9dbfffcc 	andi	r22,r19,65535
    8a90:	05000044 	movi	r20,1
    8a94:	a809883a 	mov	r4,r21
    8a98:	b80b883a 	mov	r5,r23
    8a9c:	0009c700 	call	9c70 <__udivsi3>
    8aa0:	100b883a 	mov	r5,r2
    8aa4:	b009883a 	mov	r4,r22
    8aa8:	1021883a 	mov	r16,r2
    8aac:	00016340 	call	1634 <__mulsi3>
    8ab0:	a809883a 	mov	r4,r21
    8ab4:	b80b883a 	mov	r5,r23
    8ab8:	1023883a 	mov	r17,r2
    8abc:	0009c780 	call	9c78 <__umodsi3>
    8ac0:	1004943a 	slli	r2,r2,16
    8ac4:	e006d43a 	srli	r3,fp,16
    8ac8:	10c4b03a 	or	r2,r2,r3
    8acc:	1440042e 	bgeu	r2,r17,8ae0 <__udivdi3+0xf0>
    8ad0:	14c5883a 	add	r2,r2,r19
    8ad4:	843fffc4 	addi	r16,r16,-1
    8ad8:	14c00136 	bltu	r2,r19,8ae0 <__udivdi3+0xf0>
    8adc:	14415c36 	bltu	r2,r17,9050 <__udivdi3+0x660>
    8ae0:	1463c83a 	sub	r17,r2,r17
    8ae4:	8809883a 	mov	r4,r17
    8ae8:	b80b883a 	mov	r5,r23
    8aec:	0009c700 	call	9c70 <__udivsi3>
    8af0:	100b883a 	mov	r5,r2
    8af4:	b009883a 	mov	r4,r22
    8af8:	102b883a 	mov	r21,r2
    8afc:	00016340 	call	1634 <__mulsi3>
    8b00:	8809883a 	mov	r4,r17
    8b04:	b80b883a 	mov	r5,r23
    8b08:	1025883a 	mov	r18,r2
    8b0c:	0009c780 	call	9c78 <__umodsi3>
    8b10:	1004943a 	slli	r2,r2,16
    8b14:	e0ffffcc 	andi	r3,fp,65535
    8b18:	10c4b03a 	or	r2,r2,r3
    8b1c:	1480042e 	bgeu	r2,r18,8b30 <__udivdi3+0x140>
    8b20:	9885883a 	add	r2,r19,r2
    8b24:	ad7fffc4 	addi	r21,r21,-1
    8b28:	14c00136 	bltu	r2,r19,8b30 <__udivdi3+0x140>
    8b2c:	14813c36 	bltu	r2,r18,9020 <__udivdi3+0x630>
    8b30:	8004943a 	slli	r2,r16,16
    8b34:	a009883a 	mov	r4,r20
    8b38:	a884b03a 	or	r2,r21,r2
    8b3c:	00001506 	br	8b94 <__udivdi3+0x1a4>
    8b40:	380d883a 	mov	r6,r7
    8b44:	29c06c36 	bltu	r5,r7,8cf8 <__udivdi3+0x308>
    8b48:	00bfffd4 	movui	r2,65535
    8b4c:	11c06436 	bltu	r2,r7,8ce0 <__udivdi3+0x2f0>
    8b50:	00803fc4 	movi	r2,255
    8b54:	11c11836 	bltu	r2,r7,8fb8 <__udivdi3+0x5c8>
    8b58:	000b883a 	mov	r5,zero
    8b5c:	0005883a 	mov	r2,zero
    8b60:	3084d83a 	srl	r2,r6,r2
    8b64:	01000074 	movhi	r4,1
    8b68:	21392b04 	addi	r4,r4,-6996
    8b6c:	01c00804 	movi	r7,32
    8b70:	1105883a 	add	r2,r2,r4
    8b74:	10c00003 	ldbu	r3,0(r2)
    8b78:	28c7883a 	add	r3,r5,r3
    8b7c:	38edc83a 	sub	r22,r7,r3
    8b80:	b000731e 	bne	r22,zero,8d50 <__udivdi3+0x360>
    8b84:	35400136 	bltu	r6,r21,8b8c <__udivdi3+0x19c>
    8b88:	e4c05b36 	bltu	fp,r19,8cf8 <__udivdi3+0x308>
    8b8c:	00800044 	movi	r2,1
    8b90:	0009883a 	mov	r4,zero
    8b94:	d8800315 	stw	r2,12(sp)
    8b98:	d9400317 	ldw	r5,12(sp)
    8b9c:	2007883a 	mov	r3,r4
    8ba0:	d9000415 	stw	r4,16(sp)
    8ba4:	2805883a 	mov	r2,r5
    8ba8:	dfc00e17 	ldw	ra,56(sp)
    8bac:	df000d17 	ldw	fp,52(sp)
    8bb0:	ddc00c17 	ldw	r23,48(sp)
    8bb4:	dd800b17 	ldw	r22,44(sp)
    8bb8:	dd400a17 	ldw	r21,40(sp)
    8bbc:	dd000917 	ldw	r20,36(sp)
    8bc0:	dcc00817 	ldw	r19,32(sp)
    8bc4:	dc800717 	ldw	r18,28(sp)
    8bc8:	dc400617 	ldw	r17,24(sp)
    8bcc:	dc000517 	ldw	r16,20(sp)
    8bd0:	dec00f04 	addi	sp,sp,60
    8bd4:	f800283a 	ret
    8bd8:	00bfffd4 	movui	r2,65535
    8bdc:	12005636 	bltu	r2,r8,8d38 <__udivdi3+0x348>
    8be0:	00803fc4 	movi	r2,255
    8be4:	12010036 	bltu	r2,r8,8fe8 <__udivdi3+0x5f8>
    8be8:	000b883a 	mov	r5,zero
    8bec:	0005883a 	mov	r2,zero
    8bf0:	9884d83a 	srl	r2,r19,r2
    8bf4:	01000074 	movhi	r4,1
    8bf8:	21392b04 	addi	r4,r4,-6996
    8bfc:	01800804 	movi	r6,32
    8c00:	1105883a 	add	r2,r2,r4
    8c04:	10c00003 	ldbu	r3,0(r2)
    8c08:	28c7883a 	add	r3,r5,r3
    8c0c:	30cbc83a 	sub	r5,r6,r3
    8c10:	28000626 	beq	r5,zero,8c2c <__udivdi3+0x23c>
    8c14:	3145c83a 	sub	r2,r6,r5
    8c18:	e084d83a 	srl	r2,fp,r2
    8c1c:	a946983a 	sll	r3,r21,r5
    8c20:	e178983a 	sll	fp,fp,r5
    8c24:	9966983a 	sll	r19,r19,r5
    8c28:	18aab03a 	or	r21,r3,r2
    8c2c:	982ed43a 	srli	r23,r19,16
    8c30:	a809883a 	mov	r4,r21
    8c34:	9cbfffcc 	andi	r18,r19,65535
    8c38:	b80b883a 	mov	r5,r23
    8c3c:	0009c700 	call	9c70 <__udivsi3>
    8c40:	100b883a 	mov	r5,r2
    8c44:	9009883a 	mov	r4,r18
    8c48:	1021883a 	mov	r16,r2
    8c4c:	00016340 	call	1634 <__mulsi3>
    8c50:	a809883a 	mov	r4,r21
    8c54:	b80b883a 	mov	r5,r23
    8c58:	1023883a 	mov	r17,r2
    8c5c:	0009c780 	call	9c78 <__umodsi3>
    8c60:	1004943a 	slli	r2,r2,16
    8c64:	e006d43a 	srli	r3,fp,16
    8c68:	10c4b03a 	or	r2,r2,r3
    8c6c:	1440042e 	bgeu	r2,r17,8c80 <__udivdi3+0x290>
    8c70:	14c5883a 	add	r2,r2,r19
    8c74:	843fffc4 	addi	r16,r16,-1
    8c78:	14c00136 	bltu	r2,r19,8c80 <__udivdi3+0x290>
    8c7c:	1440ea36 	bltu	r2,r17,9028 <__udivdi3+0x638>
    8c80:	1463c83a 	sub	r17,r2,r17
    8c84:	8809883a 	mov	r4,r17
    8c88:	b80b883a 	mov	r5,r23
    8c8c:	0009c700 	call	9c70 <__udivsi3>
    8c90:	100b883a 	mov	r5,r2
    8c94:	9009883a 	mov	r4,r18
    8c98:	102b883a 	mov	r21,r2
    8c9c:	00016340 	call	1634 <__mulsi3>
    8ca0:	8809883a 	mov	r4,r17
    8ca4:	b80b883a 	mov	r5,r23
    8ca8:	1025883a 	mov	r18,r2
    8cac:	0009c780 	call	9c78 <__umodsi3>
    8cb0:	1004943a 	slli	r2,r2,16
    8cb4:	e0ffffcc 	andi	r3,fp,65535
    8cb8:	10c4b03a 	or	r2,r2,r3
    8cbc:	1480042e 	bgeu	r2,r18,8cd0 <__udivdi3+0x2e0>
    8cc0:	9885883a 	add	r2,r19,r2
    8cc4:	ad7fffc4 	addi	r21,r21,-1
    8cc8:	14c00136 	bltu	r2,r19,8cd0 <__udivdi3+0x2e0>
    8ccc:	1480d936 	bltu	r2,r18,9034 <__udivdi3+0x644>
    8cd0:	8004943a 	slli	r2,r16,16
    8cd4:	0009883a 	mov	r4,zero
    8cd8:	a884b03a 	or	r2,r21,r2
    8cdc:	003fad06 	br	8b94 <__udivdi3+0x1a4>
    8ce0:	00804034 	movhi	r2,256
    8ce4:	10bfffc4 	addi	r2,r2,-1
    8ce8:	11c0b636 	bltu	r2,r7,8fc4 <__udivdi3+0x5d4>
    8cec:	01400404 	movi	r5,16
    8cf0:	2805883a 	mov	r2,r5
    8cf4:	003f9a06 	br	8b60 <__udivdi3+0x170>
    8cf8:	0005883a 	mov	r2,zero
    8cfc:	0009883a 	mov	r4,zero
    8d00:	003fa406 	br	8b94 <__udivdi3+0x1a4>
    8d04:	00804034 	movhi	r2,256
    8d08:	10bfffc4 	addi	r2,r2,-1
    8d0c:	14c0b336 	bltu	r2,r19,8fdc <__udivdi3+0x5ec>
    8d10:	01400404 	movi	r5,16
    8d14:	2805883a 	mov	r2,r5
    8d18:	003f5106 	br	8a60 <__udivdi3+0x70>
    8d1c:	01000044 	movi	r4,1
    8d20:	000b883a 	mov	r5,zero
    8d24:	0009c700 	call	9c70 <__udivsi3>
    8d28:	1027883a 	mov	r19,r2
    8d2c:	00bfffd4 	movui	r2,65535
    8d30:	14fff436 	bltu	r2,r19,8d04 <__udivdi3+0x314>
    8d34:	003f4606 	br	8a50 <__udivdi3+0x60>
    8d38:	00804034 	movhi	r2,256
    8d3c:	10bfffc4 	addi	r2,r2,-1
    8d40:	1200ac36 	bltu	r2,r8,8ff4 <__udivdi3+0x604>
    8d44:	01400404 	movi	r5,16
    8d48:	2805883a 	mov	r2,r5
    8d4c:	003fa806 	br	8bf0 <__udivdi3+0x200>
    8d50:	3d85c83a 	sub	r2,r7,r22
    8d54:	3588983a 	sll	r4,r6,r22
    8d58:	9886d83a 	srl	r3,r19,r2
    8d5c:	a8a2d83a 	srl	r17,r21,r2
    8d60:	e084d83a 	srl	r2,fp,r2
    8d64:	20eeb03a 	or	r23,r4,r3
    8d68:	b824d43a 	srli	r18,r23,16
    8d6c:	ad86983a 	sll	r3,r21,r22
    8d70:	8809883a 	mov	r4,r17
    8d74:	900b883a 	mov	r5,r18
    8d78:	1886b03a 	or	r3,r3,r2
    8d7c:	d8c00115 	stw	r3,4(sp)
    8d80:	bc3fffcc 	andi	r16,r23,65535
    8d84:	0009c700 	call	9c70 <__udivsi3>
    8d88:	100b883a 	mov	r5,r2
    8d8c:	8009883a 	mov	r4,r16
    8d90:	1029883a 	mov	r20,r2
    8d94:	00016340 	call	1634 <__mulsi3>
    8d98:	900b883a 	mov	r5,r18
    8d9c:	8809883a 	mov	r4,r17
    8da0:	102b883a 	mov	r21,r2
    8da4:	0009c780 	call	9c78 <__umodsi3>
    8da8:	d9400117 	ldw	r5,4(sp)
    8dac:	1004943a 	slli	r2,r2,16
    8db0:	9da6983a 	sll	r19,r19,r22
    8db4:	2806d43a 	srli	r3,r5,16
    8db8:	10c4b03a 	or	r2,r2,r3
    8dbc:	1540032e 	bgeu	r2,r21,8dcc <__udivdi3+0x3dc>
    8dc0:	15c5883a 	add	r2,r2,r23
    8dc4:	a53fffc4 	addi	r20,r20,-1
    8dc8:	15c0912e 	bgeu	r2,r23,9010 <__udivdi3+0x620>
    8dcc:	1563c83a 	sub	r17,r2,r21
    8dd0:	8809883a 	mov	r4,r17
    8dd4:	900b883a 	mov	r5,r18
    8dd8:	0009c700 	call	9c70 <__udivsi3>
    8ddc:	100b883a 	mov	r5,r2
    8de0:	8009883a 	mov	r4,r16
    8de4:	102b883a 	mov	r21,r2
    8de8:	00016340 	call	1634 <__mulsi3>
    8dec:	8809883a 	mov	r4,r17
    8df0:	900b883a 	mov	r5,r18
    8df4:	1021883a 	mov	r16,r2
    8df8:	0009c780 	call	9c78 <__umodsi3>
    8dfc:	da800117 	ldw	r10,4(sp)
    8e00:	1004943a 	slli	r2,r2,16
    8e04:	50ffffcc 	andi	r3,r10,65535
    8e08:	10c6b03a 	or	r3,r2,r3
    8e0c:	1c00032e 	bgeu	r3,r16,8e1c <__udivdi3+0x42c>
    8e10:	1dc7883a 	add	r3,r3,r23
    8e14:	ad7fffc4 	addi	r21,r21,-1
    8e18:	1dc0792e 	bgeu	r3,r23,9000 <__udivdi3+0x610>
    8e1c:	a004943a 	slli	r2,r20,16
    8e20:	982ed43a 	srli	r23,r19,16
    8e24:	9cffffcc 	andi	r19,r19,65535
    8e28:	a8a4b03a 	or	r18,r21,r2
    8e2c:	947fffcc 	andi	r17,r18,65535
    8e30:	902ad43a 	srli	r21,r18,16
    8e34:	8809883a 	mov	r4,r17
    8e38:	980b883a 	mov	r5,r19
    8e3c:	1c21c83a 	sub	r16,r3,r16
    8e40:	00016340 	call	1634 <__mulsi3>
    8e44:	8809883a 	mov	r4,r17
    8e48:	b80b883a 	mov	r5,r23
    8e4c:	1029883a 	mov	r20,r2
    8e50:	00016340 	call	1634 <__mulsi3>
    8e54:	980b883a 	mov	r5,r19
    8e58:	a809883a 	mov	r4,r21
    8e5c:	1023883a 	mov	r17,r2
    8e60:	00016340 	call	1634 <__mulsi3>
    8e64:	a809883a 	mov	r4,r21
    8e68:	b80b883a 	mov	r5,r23
    8e6c:	1027883a 	mov	r19,r2
    8e70:	00016340 	call	1634 <__mulsi3>
    8e74:	1009883a 	mov	r4,r2
    8e78:	a004d43a 	srli	r2,r20,16
    8e7c:	8ce3883a 	add	r17,r17,r19
    8e80:	1447883a 	add	r3,r2,r17
    8e84:	1cc0022e 	bgeu	r3,r19,8e90 <__udivdi3+0x4a0>
    8e88:	00800074 	movhi	r2,1
    8e8c:	2089883a 	add	r4,r4,r2
    8e90:	1804d43a 	srli	r2,r3,16
    8e94:	2085883a 	add	r2,r4,r2
    8e98:	80804436 	bltu	r16,r2,8fac <__udivdi3+0x5bc>
    8e9c:	80803e26 	beq	r16,r2,8f98 <__udivdi3+0x5a8>
    8ea0:	9005883a 	mov	r2,r18
    8ea4:	0009883a 	mov	r4,zero
    8ea8:	003f3a06 	br	8b94 <__udivdi3+0x1a4>
    8eac:	9d26983a 	sll	r19,r19,r20
    8eb0:	3505c83a 	sub	r2,r6,r20
    8eb4:	a8a2d83a 	srl	r17,r21,r2
    8eb8:	982ed43a 	srli	r23,r19,16
    8ebc:	e084d83a 	srl	r2,fp,r2
    8ec0:	ad06983a 	sll	r3,r21,r20
    8ec4:	8809883a 	mov	r4,r17
    8ec8:	b80b883a 	mov	r5,r23
    8ecc:	1886b03a 	or	r3,r3,r2
    8ed0:	d8c00015 	stw	r3,0(sp)
    8ed4:	9dbfffcc 	andi	r22,r19,65535
    8ed8:	0009c700 	call	9c70 <__udivsi3>
    8edc:	100b883a 	mov	r5,r2
    8ee0:	b009883a 	mov	r4,r22
    8ee4:	d8800215 	stw	r2,8(sp)
    8ee8:	00016340 	call	1634 <__mulsi3>
    8eec:	8809883a 	mov	r4,r17
    8ef0:	b80b883a 	mov	r5,r23
    8ef4:	102b883a 	mov	r21,r2
    8ef8:	0009c780 	call	9c78 <__umodsi3>
    8efc:	d9000017 	ldw	r4,0(sp)
    8f00:	1004943a 	slli	r2,r2,16
    8f04:	2006d43a 	srli	r3,r4,16
    8f08:	10c4b03a 	or	r2,r2,r3
    8f0c:	1540052e 	bgeu	r2,r21,8f24 <__udivdi3+0x534>
    8f10:	d9400217 	ldw	r5,8(sp)
    8f14:	14c5883a 	add	r2,r2,r19
    8f18:	297fffc4 	addi	r5,r5,-1
    8f1c:	d9400215 	stw	r5,8(sp)
    8f20:	14c0462e 	bgeu	r2,r19,903c <__udivdi3+0x64c>
    8f24:	1563c83a 	sub	r17,r2,r21
    8f28:	8809883a 	mov	r4,r17
    8f2c:	b80b883a 	mov	r5,r23
    8f30:	0009c700 	call	9c70 <__udivsi3>
    8f34:	100b883a 	mov	r5,r2
    8f38:	b009883a 	mov	r4,r22
    8f3c:	1025883a 	mov	r18,r2
    8f40:	00016340 	call	1634 <__mulsi3>
    8f44:	8809883a 	mov	r4,r17
    8f48:	b80b883a 	mov	r5,r23
    8f4c:	1021883a 	mov	r16,r2
    8f50:	0009c780 	call	9c78 <__umodsi3>
    8f54:	da800017 	ldw	r10,0(sp)
    8f58:	1004943a 	slli	r2,r2,16
    8f5c:	50ffffcc 	andi	r3,r10,65535
    8f60:	10c6b03a 	or	r3,r2,r3
    8f64:	1c00062e 	bgeu	r3,r16,8f80 <__udivdi3+0x590>
    8f68:	1cc7883a 	add	r3,r3,r19
    8f6c:	94bfffc4 	addi	r18,r18,-1
    8f70:	1cc00336 	bltu	r3,r19,8f80 <__udivdi3+0x590>
    8f74:	1c00022e 	bgeu	r3,r16,8f80 <__udivdi3+0x590>
    8f78:	94bfffc4 	addi	r18,r18,-1
    8f7c:	1cc7883a 	add	r3,r3,r19
    8f80:	d9000217 	ldw	r4,8(sp)
    8f84:	e538983a 	sll	fp,fp,r20
    8f88:	1c2bc83a 	sub	r21,r3,r16
    8f8c:	2004943a 	slli	r2,r4,16
    8f90:	90a8b03a 	or	r20,r18,r2
    8f94:	003ebf06 	br	8a94 <__udivdi3+0xa4>
    8f98:	1804943a 	slli	r2,r3,16
    8f9c:	e588983a 	sll	r4,fp,r22
    8fa0:	a0ffffcc 	andi	r3,r20,65535
    8fa4:	10c5883a 	add	r2,r2,r3
    8fa8:	20bfbd2e 	bgeu	r4,r2,8ea0 <__udivdi3+0x4b0>
    8fac:	90bfffc4 	addi	r2,r18,-1
    8fb0:	0009883a 	mov	r4,zero
    8fb4:	003ef706 	br	8b94 <__udivdi3+0x1a4>
    8fb8:	01400204 	movi	r5,8
    8fbc:	2805883a 	mov	r2,r5
    8fc0:	003ee706 	br	8b60 <__udivdi3+0x170>
    8fc4:	01400604 	movi	r5,24
    8fc8:	2805883a 	mov	r2,r5
    8fcc:	003ee406 	br	8b60 <__udivdi3+0x170>
    8fd0:	01400204 	movi	r5,8
    8fd4:	2805883a 	mov	r2,r5
    8fd8:	003ea106 	br	8a60 <__udivdi3+0x70>
    8fdc:	01400604 	movi	r5,24
    8fe0:	2805883a 	mov	r2,r5
    8fe4:	003e9e06 	br	8a60 <__udivdi3+0x70>
    8fe8:	01400204 	movi	r5,8
    8fec:	2805883a 	mov	r2,r5
    8ff0:	003eff06 	br	8bf0 <__udivdi3+0x200>
    8ff4:	01400604 	movi	r5,24
    8ff8:	2805883a 	mov	r2,r5
    8ffc:	003efc06 	br	8bf0 <__udivdi3+0x200>
    9000:	1c3f862e 	bgeu	r3,r16,8e1c <__udivdi3+0x42c>
    9004:	1dc7883a 	add	r3,r3,r23
    9008:	ad7fffc4 	addi	r21,r21,-1
    900c:	003f8306 	br	8e1c <__udivdi3+0x42c>
    9010:	157f6e2e 	bgeu	r2,r21,8dcc <__udivdi3+0x3dc>
    9014:	a53fffc4 	addi	r20,r20,-1
    9018:	15c5883a 	add	r2,r2,r23
    901c:	003f6b06 	br	8dcc <__udivdi3+0x3dc>
    9020:	ad7fffc4 	addi	r21,r21,-1
    9024:	003ec206 	br	8b30 <__udivdi3+0x140>
    9028:	843fffc4 	addi	r16,r16,-1
    902c:	14c5883a 	add	r2,r2,r19
    9030:	003f1306 	br	8c80 <__udivdi3+0x290>
    9034:	ad7fffc4 	addi	r21,r21,-1
    9038:	003f2506 	br	8cd0 <__udivdi3+0x2e0>
    903c:	157fb92e 	bgeu	r2,r21,8f24 <__udivdi3+0x534>
    9040:	297fffc4 	addi	r5,r5,-1
    9044:	14c5883a 	add	r2,r2,r19
    9048:	d9400215 	stw	r5,8(sp)
    904c:	003fb506 	br	8f24 <__udivdi3+0x534>
    9050:	843fffc4 	addi	r16,r16,-1
    9054:	14c5883a 	add	r2,r2,r19
    9058:	003ea106 	br	8ae0 <__udivdi3+0xf0>

0000905c <__umoddi3>:
    905c:	defff004 	addi	sp,sp,-64
    9060:	3011883a 	mov	r8,r6
    9064:	000d883a 	mov	r6,zero
    9068:	dd400b15 	stw	r21,44(sp)
    906c:	dcc00915 	stw	r19,36(sp)
    9070:	dc000615 	stw	r16,24(sp)
    9074:	dfc00f15 	stw	ra,60(sp)
    9078:	df000e15 	stw	fp,56(sp)
    907c:	ddc00d15 	stw	r23,52(sp)
    9080:	dd800c15 	stw	r22,48(sp)
    9084:	dd000a15 	stw	r20,40(sp)
    9088:	dc800815 	stw	r18,32(sp)
    908c:	dc400715 	stw	r17,28(sp)
    9090:	2817883a 	mov	r11,r5
    9094:	d9800415 	stw	r6,16(sp)
    9098:	4027883a 	mov	r19,r8
    909c:	d9800515 	stw	r6,20(sp)
    90a0:	2021883a 	mov	r16,r4
    90a4:	282b883a 	mov	r21,r5
    90a8:	38002c1e 	bne	r7,zero,915c <__umoddi3+0x100>
    90ac:	2a005636 	bltu	r5,r8,9208 <__umoddi3+0x1ac>
    90b0:	40009a26 	beq	r8,zero,931c <__umoddi3+0x2c0>
    90b4:	00bfffd4 	movui	r2,65535
    90b8:	14c09236 	bltu	r2,r19,9304 <__umoddi3+0x2a8>
    90bc:	00803fc4 	movi	r2,255
    90c0:	14c15c36 	bltu	r2,r19,9634 <__umoddi3+0x5d8>
    90c4:	000b883a 	mov	r5,zero
    90c8:	0005883a 	mov	r2,zero
    90cc:	9884d83a 	srl	r2,r19,r2
    90d0:	01000074 	movhi	r4,1
    90d4:	21392b04 	addi	r4,r4,-6996
    90d8:	01800804 	movi	r6,32
    90dc:	1105883a 	add	r2,r2,r4
    90e0:	10c00003 	ldbu	r3,0(r2)
    90e4:	28c7883a 	add	r3,r5,r3
    90e8:	30e5c83a 	sub	r18,r6,r3
    90ec:	9000a41e 	bne	r18,zero,9380 <__umoddi3+0x324>
    90f0:	982ed43a 	srli	r23,r19,16
    90f4:	acebc83a 	sub	r21,r21,r19
    90f8:	9d3fffcc 	andi	r20,r19,65535
    90fc:	002d883a 	mov	r22,zero
    9100:	a809883a 	mov	r4,r21
    9104:	b80b883a 	mov	r5,r23
    9108:	0009c700 	call	9c70 <__udivsi3>
    910c:	100b883a 	mov	r5,r2
    9110:	a009883a 	mov	r4,r20
    9114:	00016340 	call	1634 <__mulsi3>
    9118:	a809883a 	mov	r4,r21
    911c:	b80b883a 	mov	r5,r23
    9120:	1023883a 	mov	r17,r2
    9124:	0009c780 	call	9c78 <__umodsi3>
    9128:	1004943a 	slli	r2,r2,16
    912c:	8006d43a 	srli	r3,r16,16
    9130:	10c4b03a 	or	r2,r2,r3
    9134:	1440032e 	bgeu	r2,r17,9144 <__umoddi3+0xe8>
    9138:	14c5883a 	add	r2,r2,r19
    913c:	14c00136 	bltu	r2,r19,9144 <__umoddi3+0xe8>
    9140:	14415836 	bltu	r2,r17,96a4 <__umoddi3+0x648>
    9144:	1463c83a 	sub	r17,r2,r17
    9148:	8809883a 	mov	r4,r17
    914c:	b80b883a 	mov	r5,r23
    9150:	0009c700 	call	9c70 <__udivsi3>
    9154:	a009883a 	mov	r4,r20
    9158:	00005306 	br	92a8 <__umoddi3+0x24c>
    915c:	380d883a 	mov	r6,r7
    9160:	29c0132e 	bgeu	r5,r7,91b0 <__umoddi3+0x154>
    9164:	d9000415 	stw	r4,16(sp)
    9168:	d9400515 	stw	r5,20(sp)
    916c:	d9400417 	ldw	r5,16(sp)
    9170:	5813883a 	mov	r9,r11
    9174:	2811883a 	mov	r8,r5
    9178:	4005883a 	mov	r2,r8
    917c:	4807883a 	mov	r3,r9
    9180:	dfc00f17 	ldw	ra,60(sp)
    9184:	df000e17 	ldw	fp,56(sp)
    9188:	ddc00d17 	ldw	r23,52(sp)
    918c:	dd800c17 	ldw	r22,48(sp)
    9190:	dd400b17 	ldw	r21,44(sp)
    9194:	dd000a17 	ldw	r20,40(sp)
    9198:	dcc00917 	ldw	r19,36(sp)
    919c:	dc800817 	ldw	r18,32(sp)
    91a0:	dc400717 	ldw	r17,28(sp)
    91a4:	dc000617 	ldw	r16,24(sp)
    91a8:	dec01004 	addi	sp,sp,64
    91ac:	f800283a 	ret
    91b0:	00bfffd4 	movui	r2,65535
    91b4:	11c06636 	bltu	r2,r7,9350 <__umoddi3+0x2f4>
    91b8:	00803fc4 	movi	r2,255
    91bc:	11c12036 	bltu	r2,r7,9640 <__umoddi3+0x5e4>
    91c0:	000b883a 	mov	r5,zero
    91c4:	0005883a 	mov	r2,zero
    91c8:	3084d83a 	srl	r2,r6,r2
    91cc:	01000074 	movhi	r4,1
    91d0:	21392b04 	addi	r4,r4,-6996
    91d4:	01c00804 	movi	r7,32
    91d8:	1105883a 	add	r2,r2,r4
    91dc:	10c00003 	ldbu	r3,0(r2)
    91e0:	28c7883a 	add	r3,r5,r3
    91e4:	38e5c83a 	sub	r18,r7,r3
    91e8:	9000941e 	bne	r18,zero,943c <__umoddi3+0x3e0>
    91ec:	35405e36 	bltu	r6,r21,9368 <__umoddi3+0x30c>
    91f0:	84c05d2e 	bgeu	r16,r19,9368 <__umoddi3+0x30c>
    91f4:	8011883a 	mov	r8,r16
    91f8:	a813883a 	mov	r9,r21
    91fc:	dc000415 	stw	r16,16(sp)
    9200:	dd400515 	stw	r21,20(sp)
    9204:	003fdc06 	br	9178 <__umoddi3+0x11c>
    9208:	00bfffd4 	movui	r2,65535
    920c:	12004a36 	bltu	r2,r8,9338 <__umoddi3+0x2dc>
    9210:	00803fc4 	movi	r2,255
    9214:	12010d36 	bltu	r2,r8,964c <__umoddi3+0x5f0>
    9218:	000b883a 	mov	r5,zero
    921c:	0005883a 	mov	r2,zero
    9220:	9884d83a 	srl	r2,r19,r2
    9224:	01000074 	movhi	r4,1
    9228:	21392b04 	addi	r4,r4,-6996
    922c:	01800804 	movi	r6,32
    9230:	1105883a 	add	r2,r2,r4
    9234:	10c00003 	ldbu	r3,0(r2)
    9238:	28c7883a 	add	r3,r5,r3
    923c:	30c7c83a 	sub	r3,r6,r3
    9240:	1800dc1e 	bne	r3,zero,95b4 <__umoddi3+0x558>
    9244:	002d883a 	mov	r22,zero
    9248:	982ed43a 	srli	r23,r19,16
    924c:	a809883a 	mov	r4,r21
    9250:	9cbfffcc 	andi	r18,r19,65535
    9254:	b80b883a 	mov	r5,r23
    9258:	0009c700 	call	9c70 <__udivsi3>
    925c:	100b883a 	mov	r5,r2
    9260:	9009883a 	mov	r4,r18
    9264:	00016340 	call	1634 <__mulsi3>
    9268:	a809883a 	mov	r4,r21
    926c:	b80b883a 	mov	r5,r23
    9270:	1023883a 	mov	r17,r2
    9274:	0009c780 	call	9c78 <__umodsi3>
    9278:	1004943a 	slli	r2,r2,16
    927c:	8006d43a 	srli	r3,r16,16
    9280:	10c4b03a 	or	r2,r2,r3
    9284:	1440032e 	bgeu	r2,r17,9294 <__umoddi3+0x238>
    9288:	14c5883a 	add	r2,r2,r19
    928c:	14c00136 	bltu	r2,r19,9294 <__umoddi3+0x238>
    9290:	14410236 	bltu	r2,r17,969c <__umoddi3+0x640>
    9294:	1463c83a 	sub	r17,r2,r17
    9298:	8809883a 	mov	r4,r17
    929c:	b80b883a 	mov	r5,r23
    92a0:	0009c700 	call	9c70 <__udivsi3>
    92a4:	9009883a 	mov	r4,r18
    92a8:	100b883a 	mov	r5,r2
    92ac:	00016340 	call	1634 <__mulsi3>
    92b0:	8809883a 	mov	r4,r17
    92b4:	b80b883a 	mov	r5,r23
    92b8:	102b883a 	mov	r21,r2
    92bc:	0009c780 	call	9c78 <__umodsi3>
    92c0:	1004943a 	slli	r2,r2,16
    92c4:	80ffffcc 	andi	r3,r16,65535
    92c8:	10c4b03a 	or	r2,r2,r3
    92cc:	1540042e 	bgeu	r2,r21,92e0 <__umoddi3+0x284>
    92d0:	14c5883a 	add	r2,r2,r19
    92d4:	14c00236 	bltu	r2,r19,92e0 <__umoddi3+0x284>
    92d8:	1540012e 	bgeu	r2,r21,92e0 <__umoddi3+0x284>
    92dc:	14c5883a 	add	r2,r2,r19
    92e0:	1545c83a 	sub	r2,r2,r21
    92e4:	1584d83a 	srl	r2,r2,r22
    92e8:	0013883a 	mov	r9,zero
    92ec:	d8800415 	stw	r2,16(sp)
    92f0:	d8c00417 	ldw	r3,16(sp)
    92f4:	0005883a 	mov	r2,zero
    92f8:	d8800515 	stw	r2,20(sp)
    92fc:	1811883a 	mov	r8,r3
    9300:	003f9d06 	br	9178 <__umoddi3+0x11c>
    9304:	00804034 	movhi	r2,256
    9308:	10bfffc4 	addi	r2,r2,-1
    930c:	14c0c636 	bltu	r2,r19,9628 <__umoddi3+0x5cc>
    9310:	01400404 	movi	r5,16
    9314:	2805883a 	mov	r2,r5
    9318:	003f6c06 	br	90cc <__umoddi3+0x70>
    931c:	01000044 	movi	r4,1
    9320:	000b883a 	mov	r5,zero
    9324:	0009c700 	call	9c70 <__udivsi3>
    9328:	1027883a 	mov	r19,r2
    932c:	00bfffd4 	movui	r2,65535
    9330:	14fff436 	bltu	r2,r19,9304 <__umoddi3+0x2a8>
    9334:	003f6106 	br	90bc <__umoddi3+0x60>
    9338:	00804034 	movhi	r2,256
    933c:	10bfffc4 	addi	r2,r2,-1
    9340:	1200c536 	bltu	r2,r8,9658 <__umoddi3+0x5fc>
    9344:	01400404 	movi	r5,16
    9348:	2805883a 	mov	r2,r5
    934c:	003fb406 	br	9220 <__umoddi3+0x1c4>
    9350:	00804034 	movhi	r2,256
    9354:	10bfffc4 	addi	r2,r2,-1
    9358:	11c0c236 	bltu	r2,r7,9664 <__umoddi3+0x608>
    935c:	01400404 	movi	r5,16
    9360:	2805883a 	mov	r2,r5
    9364:	003f9806 	br	91c8 <__umoddi3+0x16c>
    9368:	84c9c83a 	sub	r4,r16,r19
    936c:	8105803a 	cmpltu	r2,r16,r4
    9370:	a987c83a 	sub	r3,r21,r6
    9374:	18abc83a 	sub	r21,r3,r2
    9378:	2021883a 	mov	r16,r4
    937c:	003f9d06 	br	91f4 <__umoddi3+0x198>
    9380:	9ca6983a 	sll	r19,r19,r18
    9384:	3485c83a 	sub	r2,r6,r18
    9388:	a8a2d83a 	srl	r17,r21,r2
    938c:	982ed43a 	srli	r23,r19,16
    9390:	ac86983a 	sll	r3,r21,r18
    9394:	8084d83a 	srl	r2,r16,r2
    9398:	8809883a 	mov	r4,r17
    939c:	b80b883a 	mov	r5,r23
    93a0:	18b8b03a 	or	fp,r3,r2
    93a4:	9d3fffcc 	andi	r20,r19,65535
    93a8:	0009c700 	call	9c70 <__udivsi3>
    93ac:	100b883a 	mov	r5,r2
    93b0:	a009883a 	mov	r4,r20
    93b4:	00016340 	call	1634 <__mulsi3>
    93b8:	8809883a 	mov	r4,r17
    93bc:	b80b883a 	mov	r5,r23
    93c0:	102b883a 	mov	r21,r2
    93c4:	0009c780 	call	9c78 <__umodsi3>
    93c8:	1004943a 	slli	r2,r2,16
    93cc:	e006d43a 	srli	r3,fp,16
    93d0:	902d883a 	mov	r22,r18
    93d4:	10c4b03a 	or	r2,r2,r3
    93d8:	1540022e 	bgeu	r2,r21,93e4 <__umoddi3+0x388>
    93dc:	14c5883a 	add	r2,r2,r19
    93e0:	14c0ab2e 	bgeu	r2,r19,9690 <__umoddi3+0x634>
    93e4:	1563c83a 	sub	r17,r2,r21
    93e8:	8809883a 	mov	r4,r17
    93ec:	b80b883a 	mov	r5,r23
    93f0:	0009c700 	call	9c70 <__udivsi3>
    93f4:	100b883a 	mov	r5,r2
    93f8:	a009883a 	mov	r4,r20
    93fc:	00016340 	call	1634 <__mulsi3>
    9400:	8809883a 	mov	r4,r17
    9404:	b80b883a 	mov	r5,r23
    9408:	102b883a 	mov	r21,r2
    940c:	0009c780 	call	9c78 <__umodsi3>
    9410:	1004943a 	slli	r2,r2,16
    9414:	e0ffffcc 	andi	r3,fp,65535
    9418:	10c4b03a 	or	r2,r2,r3
    941c:	1540042e 	bgeu	r2,r21,9430 <__umoddi3+0x3d4>
    9420:	14c5883a 	add	r2,r2,r19
    9424:	14c00236 	bltu	r2,r19,9430 <__umoddi3+0x3d4>
    9428:	1540012e 	bgeu	r2,r21,9430 <__umoddi3+0x3d4>
    942c:	14c5883a 	add	r2,r2,r19
    9430:	84a0983a 	sll	r16,r16,r18
    9434:	156bc83a 	sub	r21,r2,r21
    9438:	003f3106 	br	9100 <__umoddi3+0xa4>
    943c:	3c8fc83a 	sub	r7,r7,r18
    9440:	3486983a 	sll	r3,r6,r18
    9444:	99c4d83a 	srl	r2,r19,r7
    9448:	a9e2d83a 	srl	r17,r21,r7
    944c:	ac8c983a 	sll	r6,r21,r18
    9450:	18acb03a 	or	r22,r3,r2
    9454:	b02ed43a 	srli	r23,r22,16
    9458:	81c4d83a 	srl	r2,r16,r7
    945c:	8809883a 	mov	r4,r17
    9460:	b80b883a 	mov	r5,r23
    9464:	308cb03a 	or	r6,r6,r2
    9468:	d9c00315 	stw	r7,12(sp)
    946c:	d9800215 	stw	r6,8(sp)
    9470:	b53fffcc 	andi	r20,r22,65535
    9474:	0009c700 	call	9c70 <__udivsi3>
    9478:	100b883a 	mov	r5,r2
    947c:	a009883a 	mov	r4,r20
    9480:	1039883a 	mov	fp,r2
    9484:	00016340 	call	1634 <__mulsi3>
    9488:	8809883a 	mov	r4,r17
    948c:	b80b883a 	mov	r5,r23
    9490:	102b883a 	mov	r21,r2
    9494:	0009c780 	call	9c78 <__umodsi3>
    9498:	d9000217 	ldw	r4,8(sp)
    949c:	1004943a 	slli	r2,r2,16
    94a0:	9ca6983a 	sll	r19,r19,r18
    94a4:	2006d43a 	srli	r3,r4,16
    94a8:	84a0983a 	sll	r16,r16,r18
    94ac:	dcc00015 	stw	r19,0(sp)
    94b0:	10c4b03a 	or	r2,r2,r3
    94b4:	dc000115 	stw	r16,4(sp)
    94b8:	1540032e 	bgeu	r2,r21,94c8 <__umoddi3+0x46c>
    94bc:	1585883a 	add	r2,r2,r22
    94c0:	e73fffc4 	addi	fp,fp,-1
    94c4:	15806e2e 	bgeu	r2,r22,9680 <__umoddi3+0x624>
    94c8:	1563c83a 	sub	r17,r2,r21
    94cc:	8809883a 	mov	r4,r17
    94d0:	b80b883a 	mov	r5,r23
    94d4:	0009c700 	call	9c70 <__udivsi3>
    94d8:	100b883a 	mov	r5,r2
    94dc:	a009883a 	mov	r4,r20
    94e0:	1021883a 	mov	r16,r2
    94e4:	00016340 	call	1634 <__mulsi3>
    94e8:	b80b883a 	mov	r5,r23
    94ec:	8809883a 	mov	r4,r17
    94f0:	1029883a 	mov	r20,r2
    94f4:	0009c780 	call	9c78 <__umodsi3>
    94f8:	d9400217 	ldw	r5,8(sp)
    94fc:	1004943a 	slli	r2,r2,16
    9500:	28ffffcc 	andi	r3,r5,65535
    9504:	10c4b03a 	or	r2,r2,r3
    9508:	1500032e 	bgeu	r2,r20,9518 <__umoddi3+0x4bc>
    950c:	1585883a 	add	r2,r2,r22
    9510:	843fffc4 	addi	r16,r16,-1
    9514:	1580562e 	bgeu	r2,r22,9670 <__umoddi3+0x614>
    9518:	d9800017 	ldw	r6,0(sp)
    951c:	e022943a 	slli	r17,fp,16
    9520:	302ed43a 	srli	r23,r6,16
    9524:	8462b03a 	or	r17,r16,r17
    9528:	34ffffcc 	andi	r19,r6,65535
    952c:	882ad43a 	srli	r21,r17,16
    9530:	8c7fffcc 	andi	r17,r17,65535
    9534:	8809883a 	mov	r4,r17
    9538:	980b883a 	mov	r5,r19
    953c:	1521c83a 	sub	r16,r2,r20
    9540:	00016340 	call	1634 <__mulsi3>
    9544:	8809883a 	mov	r4,r17
    9548:	b80b883a 	mov	r5,r23
    954c:	1029883a 	mov	r20,r2
    9550:	00016340 	call	1634 <__mulsi3>
    9554:	980b883a 	mov	r5,r19
    9558:	a809883a 	mov	r4,r21
    955c:	1023883a 	mov	r17,r2
    9560:	00016340 	call	1634 <__mulsi3>
    9564:	a809883a 	mov	r4,r21
    9568:	b80b883a 	mov	r5,r23
    956c:	1027883a 	mov	r19,r2
    9570:	00016340 	call	1634 <__mulsi3>
    9574:	100b883a 	mov	r5,r2
    9578:	a004d43a 	srli	r2,r20,16
    957c:	8ce3883a 	add	r17,r17,r19
    9580:	1449883a 	add	r4,r2,r17
    9584:	24c0022e 	bgeu	r4,r19,9590 <__umoddi3+0x534>
    9588:	00800074 	movhi	r2,1
    958c:	288b883a 	add	r5,r5,r2
    9590:	2004d43a 	srli	r2,r4,16
    9594:	2008943a 	slli	r4,r4,16
    9598:	a0ffffcc 	andi	r3,r20,65535
    959c:	288d883a 	add	r6,r5,r2
    95a0:	20c9883a 	add	r4,r4,r3
    95a4:	81800b36 	bltu	r16,r6,95d4 <__umoddi3+0x578>
    95a8:	81804026 	beq	r16,r6,96ac <__umoddi3+0x650>
    95ac:	818dc83a 	sub	r6,r16,r6
    95b0:	00000f06 	br	95f0 <__umoddi3+0x594>
    95b4:	30c5c83a 	sub	r2,r6,r3
    95b8:	182d883a 	mov	r22,r3
    95bc:	8084d83a 	srl	r2,r16,r2
    95c0:	a8c6983a 	sll	r3,r21,r3
    95c4:	9da6983a 	sll	r19,r19,r22
    95c8:	85a0983a 	sll	r16,r16,r22
    95cc:	18aab03a 	or	r21,r3,r2
    95d0:	003f1d06 	br	9248 <__umoddi3+0x1ec>
    95d4:	d8c00017 	ldw	r3,0(sp)
    95d8:	20c5c83a 	sub	r2,r4,r3
    95dc:	2089803a 	cmpltu	r4,r4,r2
    95e0:	3587c83a 	sub	r3,r6,r22
    95e4:	1907c83a 	sub	r3,r3,r4
    95e8:	80cdc83a 	sub	r6,r16,r3
    95ec:	1009883a 	mov	r4,r2
    95f0:	d9400117 	ldw	r5,4(sp)
    95f4:	2905c83a 	sub	r2,r5,r4
    95f8:	2887803a 	cmpltu	r3,r5,r2
    95fc:	30c7c83a 	sub	r3,r6,r3
    9600:	d9800317 	ldw	r6,12(sp)
    9604:	1484d83a 	srl	r2,r2,r18
    9608:	1988983a 	sll	r4,r3,r6
    960c:	1c86d83a 	srl	r3,r3,r18
    9610:	2088b03a 	or	r4,r4,r2
    9614:	2011883a 	mov	r8,r4
    9618:	1813883a 	mov	r9,r3
    961c:	d9000415 	stw	r4,16(sp)
    9620:	d8c00515 	stw	r3,20(sp)
    9624:	003ed406 	br	9178 <__umoddi3+0x11c>
    9628:	01400604 	movi	r5,24
    962c:	2805883a 	mov	r2,r5
    9630:	003ea606 	br	90cc <__umoddi3+0x70>
    9634:	01400204 	movi	r5,8
    9638:	2805883a 	mov	r2,r5
    963c:	003ea306 	br	90cc <__umoddi3+0x70>
    9640:	01400204 	movi	r5,8
    9644:	2805883a 	mov	r2,r5
    9648:	003edf06 	br	91c8 <__umoddi3+0x16c>
    964c:	01400204 	movi	r5,8
    9650:	2805883a 	mov	r2,r5
    9654:	003ef206 	br	9220 <__umoddi3+0x1c4>
    9658:	01400604 	movi	r5,24
    965c:	2805883a 	mov	r2,r5
    9660:	003eef06 	br	9220 <__umoddi3+0x1c4>
    9664:	01400604 	movi	r5,24
    9668:	2805883a 	mov	r2,r5
    966c:	003ed606 	br	91c8 <__umoddi3+0x16c>
    9670:	153fa92e 	bgeu	r2,r20,9518 <__umoddi3+0x4bc>
    9674:	843fffc4 	addi	r16,r16,-1
    9678:	1585883a 	add	r2,r2,r22
    967c:	003fa606 	br	9518 <__umoddi3+0x4bc>
    9680:	157f912e 	bgeu	r2,r21,94c8 <__umoddi3+0x46c>
    9684:	e73fffc4 	addi	fp,fp,-1
    9688:	1585883a 	add	r2,r2,r22
    968c:	003f8e06 	br	94c8 <__umoddi3+0x46c>
    9690:	157f542e 	bgeu	r2,r21,93e4 <__umoddi3+0x388>
    9694:	14c5883a 	add	r2,r2,r19
    9698:	003f5206 	br	93e4 <__umoddi3+0x388>
    969c:	14c5883a 	add	r2,r2,r19
    96a0:	003efc06 	br	9294 <__umoddi3+0x238>
    96a4:	14c5883a 	add	r2,r2,r19
    96a8:	003ea606 	br	9144 <__umoddi3+0xe8>
    96ac:	d8800117 	ldw	r2,4(sp)
    96b0:	113fc836 	bltu	r2,r4,95d4 <__umoddi3+0x578>
    96b4:	000d883a 	mov	r6,zero
    96b8:	003fcd06 	br	95f0 <__umoddi3+0x594>

000096bc <__eqdf2>:
    96bc:	deffef04 	addi	sp,sp,-68
    96c0:	dc400f15 	stw	r17,60(sp)
    96c4:	dc400404 	addi	r17,sp,16
    96c8:	2005883a 	mov	r2,r4
    96cc:	2807883a 	mov	r3,r5
    96d0:	dc000e15 	stw	r16,56(sp)
    96d4:	d809883a 	mov	r4,sp
    96d8:	880b883a 	mov	r5,r17
    96dc:	dc000904 	addi	r16,sp,36
    96e0:	d8c00115 	stw	r3,4(sp)
    96e4:	d8800015 	stw	r2,0(sp)
    96e8:	d9800215 	stw	r6,8(sp)
    96ec:	dfc01015 	stw	ra,64(sp)
    96f0:	d9c00315 	stw	r7,12(sp)
    96f4:	00014fc0 	call	14fc <__unpack_d>
    96f8:	d9000204 	addi	r4,sp,8
    96fc:	800b883a 	mov	r5,r16
    9700:	00014fc0 	call	14fc <__unpack_d>
    9704:	d8800417 	ldw	r2,16(sp)
    9708:	00c00044 	movi	r3,1
    970c:	180d883a 	mov	r6,r3
    9710:	1880062e 	bgeu	r3,r2,972c <__eqdf2+0x70>
    9714:	d8800917 	ldw	r2,36(sp)
    9718:	8809883a 	mov	r4,r17
    971c:	800b883a 	mov	r5,r16
    9720:	1880022e 	bgeu	r3,r2,972c <__eqdf2+0x70>
    9724:	0009c800 	call	9c80 <__fpcmp_parts_d>
    9728:	100d883a 	mov	r6,r2
    972c:	3005883a 	mov	r2,r6
    9730:	dfc01017 	ldw	ra,64(sp)
    9734:	dc400f17 	ldw	r17,60(sp)
    9738:	dc000e17 	ldw	r16,56(sp)
    973c:	dec01104 	addi	sp,sp,68
    9740:	f800283a 	ret

00009744 <__nedf2>:
    9744:	deffef04 	addi	sp,sp,-68
    9748:	dc400f15 	stw	r17,60(sp)
    974c:	dc400404 	addi	r17,sp,16
    9750:	2005883a 	mov	r2,r4
    9754:	2807883a 	mov	r3,r5
    9758:	dc000e15 	stw	r16,56(sp)
    975c:	d809883a 	mov	r4,sp
    9760:	880b883a 	mov	r5,r17
    9764:	dc000904 	addi	r16,sp,36
    9768:	d8c00115 	stw	r3,4(sp)
    976c:	d8800015 	stw	r2,0(sp)
    9770:	d9800215 	stw	r6,8(sp)
    9774:	dfc01015 	stw	ra,64(sp)
    9778:	d9c00315 	stw	r7,12(sp)
    977c:	00014fc0 	call	14fc <__unpack_d>
    9780:	d9000204 	addi	r4,sp,8
    9784:	800b883a 	mov	r5,r16
    9788:	00014fc0 	call	14fc <__unpack_d>
    978c:	d8800417 	ldw	r2,16(sp)
    9790:	00c00044 	movi	r3,1
    9794:	180d883a 	mov	r6,r3
    9798:	1880062e 	bgeu	r3,r2,97b4 <__nedf2+0x70>
    979c:	d8800917 	ldw	r2,36(sp)
    97a0:	8809883a 	mov	r4,r17
    97a4:	800b883a 	mov	r5,r16
    97a8:	1880022e 	bgeu	r3,r2,97b4 <__nedf2+0x70>
    97ac:	0009c800 	call	9c80 <__fpcmp_parts_d>
    97b0:	100d883a 	mov	r6,r2
    97b4:	3005883a 	mov	r2,r6
    97b8:	dfc01017 	ldw	ra,64(sp)
    97bc:	dc400f17 	ldw	r17,60(sp)
    97c0:	dc000e17 	ldw	r16,56(sp)
    97c4:	dec01104 	addi	sp,sp,68
    97c8:	f800283a 	ret

000097cc <__gtdf2>:
    97cc:	deffef04 	addi	sp,sp,-68
    97d0:	dc400f15 	stw	r17,60(sp)
    97d4:	dc400404 	addi	r17,sp,16
    97d8:	2005883a 	mov	r2,r4
    97dc:	2807883a 	mov	r3,r5
    97e0:	dc000e15 	stw	r16,56(sp)
    97e4:	d809883a 	mov	r4,sp
    97e8:	880b883a 	mov	r5,r17
    97ec:	dc000904 	addi	r16,sp,36
    97f0:	d8c00115 	stw	r3,4(sp)
    97f4:	d8800015 	stw	r2,0(sp)
    97f8:	d9800215 	stw	r6,8(sp)
    97fc:	dfc01015 	stw	ra,64(sp)
    9800:	d9c00315 	stw	r7,12(sp)
    9804:	00014fc0 	call	14fc <__unpack_d>
    9808:	d9000204 	addi	r4,sp,8
    980c:	800b883a 	mov	r5,r16
    9810:	00014fc0 	call	14fc <__unpack_d>
    9814:	d8800417 	ldw	r2,16(sp)
    9818:	00c00044 	movi	r3,1
    981c:	01bfffc4 	movi	r6,-1
    9820:	1880062e 	bgeu	r3,r2,983c <__gtdf2+0x70>
    9824:	d8800917 	ldw	r2,36(sp)
    9828:	8809883a 	mov	r4,r17
    982c:	800b883a 	mov	r5,r16
    9830:	1880022e 	bgeu	r3,r2,983c <__gtdf2+0x70>
    9834:	0009c800 	call	9c80 <__fpcmp_parts_d>
    9838:	100d883a 	mov	r6,r2
    983c:	3005883a 	mov	r2,r6
    9840:	dfc01017 	ldw	ra,64(sp)
    9844:	dc400f17 	ldw	r17,60(sp)
    9848:	dc000e17 	ldw	r16,56(sp)
    984c:	dec01104 	addi	sp,sp,68
    9850:	f800283a 	ret

00009854 <__gedf2>:
    9854:	deffef04 	addi	sp,sp,-68
    9858:	dc400f15 	stw	r17,60(sp)
    985c:	dc400404 	addi	r17,sp,16
    9860:	2005883a 	mov	r2,r4
    9864:	2807883a 	mov	r3,r5
    9868:	dc000e15 	stw	r16,56(sp)
    986c:	d809883a 	mov	r4,sp
    9870:	880b883a 	mov	r5,r17
    9874:	dc000904 	addi	r16,sp,36
    9878:	d8c00115 	stw	r3,4(sp)
    987c:	d8800015 	stw	r2,0(sp)
    9880:	d9800215 	stw	r6,8(sp)
    9884:	dfc01015 	stw	ra,64(sp)
    9888:	d9c00315 	stw	r7,12(sp)
    988c:	00014fc0 	call	14fc <__unpack_d>
    9890:	d9000204 	addi	r4,sp,8
    9894:	800b883a 	mov	r5,r16
    9898:	00014fc0 	call	14fc <__unpack_d>
    989c:	d8800417 	ldw	r2,16(sp)
    98a0:	00c00044 	movi	r3,1
    98a4:	01bfffc4 	movi	r6,-1
    98a8:	1880062e 	bgeu	r3,r2,98c4 <__gedf2+0x70>
    98ac:	d8800917 	ldw	r2,36(sp)
    98b0:	8809883a 	mov	r4,r17
    98b4:	800b883a 	mov	r5,r16
    98b8:	1880022e 	bgeu	r3,r2,98c4 <__gedf2+0x70>
    98bc:	0009c800 	call	9c80 <__fpcmp_parts_d>
    98c0:	100d883a 	mov	r6,r2
    98c4:	3005883a 	mov	r2,r6
    98c8:	dfc01017 	ldw	ra,64(sp)
    98cc:	dc400f17 	ldw	r17,60(sp)
    98d0:	dc000e17 	ldw	r16,56(sp)
    98d4:	dec01104 	addi	sp,sp,68
    98d8:	f800283a 	ret

000098dc <__ltdf2>:
    98dc:	deffef04 	addi	sp,sp,-68
    98e0:	dc400f15 	stw	r17,60(sp)
    98e4:	dc400404 	addi	r17,sp,16
    98e8:	2005883a 	mov	r2,r4
    98ec:	2807883a 	mov	r3,r5
    98f0:	dc000e15 	stw	r16,56(sp)
    98f4:	d809883a 	mov	r4,sp
    98f8:	880b883a 	mov	r5,r17
    98fc:	dc000904 	addi	r16,sp,36
    9900:	d8c00115 	stw	r3,4(sp)
    9904:	d8800015 	stw	r2,0(sp)
    9908:	d9800215 	stw	r6,8(sp)
    990c:	dfc01015 	stw	ra,64(sp)
    9910:	d9c00315 	stw	r7,12(sp)
    9914:	00014fc0 	call	14fc <__unpack_d>
    9918:	d9000204 	addi	r4,sp,8
    991c:	800b883a 	mov	r5,r16
    9920:	00014fc0 	call	14fc <__unpack_d>
    9924:	d8800417 	ldw	r2,16(sp)
    9928:	00c00044 	movi	r3,1
    992c:	180d883a 	mov	r6,r3
    9930:	1880062e 	bgeu	r3,r2,994c <__ltdf2+0x70>
    9934:	d8800917 	ldw	r2,36(sp)
    9938:	8809883a 	mov	r4,r17
    993c:	800b883a 	mov	r5,r16
    9940:	1880022e 	bgeu	r3,r2,994c <__ltdf2+0x70>
    9944:	0009c800 	call	9c80 <__fpcmp_parts_d>
    9948:	100d883a 	mov	r6,r2
    994c:	3005883a 	mov	r2,r6
    9950:	dfc01017 	ldw	ra,64(sp)
    9954:	dc400f17 	ldw	r17,60(sp)
    9958:	dc000e17 	ldw	r16,56(sp)
    995c:	dec01104 	addi	sp,sp,68
    9960:	f800283a 	ret

00009964 <__floatsidf>:
    9964:	2006d7fa 	srli	r3,r4,31
    9968:	defff604 	addi	sp,sp,-40
    996c:	008000c4 	movi	r2,3
    9970:	dfc00915 	stw	ra,36(sp)
    9974:	dcc00815 	stw	r19,32(sp)
    9978:	dc800715 	stw	r18,28(sp)
    997c:	dc400615 	stw	r17,24(sp)
    9980:	dc000515 	stw	r16,20(sp)
    9984:	d8800015 	stw	r2,0(sp)
    9988:	d8c00115 	stw	r3,4(sp)
    998c:	20000f1e 	bne	r4,zero,99cc <__floatsidf+0x68>
    9990:	00800084 	movi	r2,2
    9994:	d8800015 	stw	r2,0(sp)
    9998:	d809883a 	mov	r4,sp
    999c:	00011e80 	call	11e8 <__pack_d>
    99a0:	1009883a 	mov	r4,r2
    99a4:	180b883a 	mov	r5,r3
    99a8:	2005883a 	mov	r2,r4
    99ac:	2807883a 	mov	r3,r5
    99b0:	dfc00917 	ldw	ra,36(sp)
    99b4:	dcc00817 	ldw	r19,32(sp)
    99b8:	dc800717 	ldw	r18,28(sp)
    99bc:	dc400617 	ldw	r17,24(sp)
    99c0:	dc000517 	ldw	r16,20(sp)
    99c4:	dec00a04 	addi	sp,sp,40
    99c8:	f800283a 	ret
    99cc:	00800f04 	movi	r2,60
    99d0:	1807003a 	cmpeq	r3,r3,zero
    99d4:	d8800215 	stw	r2,8(sp)
    99d8:	18001126 	beq	r3,zero,9a20 <__floatsidf+0xbc>
    99dc:	0027883a 	mov	r19,zero
    99e0:	2025883a 	mov	r18,r4
    99e4:	d9000315 	stw	r4,12(sp)
    99e8:	dcc00415 	stw	r19,16(sp)
    99ec:	00011680 	call	1168 <__clzsi2>
    99f0:	11000744 	addi	r4,r2,29
    99f4:	013fe80e 	bge	zero,r4,9998 <__floatsidf+0x34>
    99f8:	10bfff44 	addi	r2,r2,-3
    99fc:	10000c16 	blt	r2,zero,9a30 <__floatsidf+0xcc>
    9a00:	90a2983a 	sll	r17,r18,r2
    9a04:	0021883a 	mov	r16,zero
    9a08:	d8800217 	ldw	r2,8(sp)
    9a0c:	dc400415 	stw	r17,16(sp)
    9a10:	dc000315 	stw	r16,12(sp)
    9a14:	1105c83a 	sub	r2,r2,r4
    9a18:	d8800215 	stw	r2,8(sp)
    9a1c:	003fde06 	br	9998 <__floatsidf+0x34>
    9a20:	00a00034 	movhi	r2,32768
    9a24:	20800a26 	beq	r4,r2,9a50 <__floatsidf+0xec>
    9a28:	0109c83a 	sub	r4,zero,r4
    9a2c:	003feb06 	br	99dc <__floatsidf+0x78>
    9a30:	9006d07a 	srli	r3,r18,1
    9a34:	008007c4 	movi	r2,31
    9a38:	1105c83a 	sub	r2,r2,r4
    9a3c:	1886d83a 	srl	r3,r3,r2
    9a40:	9922983a 	sll	r17,r19,r4
    9a44:	9120983a 	sll	r16,r18,r4
    9a48:	1c62b03a 	or	r17,r3,r17
    9a4c:	003fee06 	br	9a08 <__floatsidf+0xa4>
    9a50:	0009883a 	mov	r4,zero
    9a54:	01707834 	movhi	r5,49632
    9a58:	003fd306 	br	99a8 <__floatsidf+0x44>

00009a5c <__fixdfsi>:
    9a5c:	defff804 	addi	sp,sp,-32
    9a60:	2005883a 	mov	r2,r4
    9a64:	2807883a 	mov	r3,r5
    9a68:	d809883a 	mov	r4,sp
    9a6c:	d9400204 	addi	r5,sp,8
    9a70:	d8c00115 	stw	r3,4(sp)
    9a74:	d8800015 	stw	r2,0(sp)
    9a78:	dfc00715 	stw	ra,28(sp)
    9a7c:	00014fc0 	call	14fc <__unpack_d>
    9a80:	d8c00217 	ldw	r3,8(sp)
    9a84:	00800084 	movi	r2,2
    9a88:	1880051e 	bne	r3,r2,9aa0 <__fixdfsi+0x44>
    9a8c:	0007883a 	mov	r3,zero
    9a90:	1805883a 	mov	r2,r3
    9a94:	dfc00717 	ldw	ra,28(sp)
    9a98:	dec00804 	addi	sp,sp,32
    9a9c:	f800283a 	ret
    9aa0:	00800044 	movi	r2,1
    9aa4:	10fff92e 	bgeu	r2,r3,9a8c <__fixdfsi+0x30>
    9aa8:	00800104 	movi	r2,4
    9aac:	18800426 	beq	r3,r2,9ac0 <__fixdfsi+0x64>
    9ab0:	d8c00417 	ldw	r3,16(sp)
    9ab4:	183ff516 	blt	r3,zero,9a8c <__fixdfsi+0x30>
    9ab8:	00800784 	movi	r2,30
    9abc:	10c0080e 	bge	r2,r3,9ae0 <__fixdfsi+0x84>
    9ac0:	d8800317 	ldw	r2,12(sp)
    9ac4:	1000121e 	bne	r2,zero,9b10 <__fixdfsi+0xb4>
    9ac8:	00e00034 	movhi	r3,32768
    9acc:	18ffffc4 	addi	r3,r3,-1
    9ad0:	1805883a 	mov	r2,r3
    9ad4:	dfc00717 	ldw	ra,28(sp)
    9ad8:	dec00804 	addi	sp,sp,32
    9adc:	f800283a 	ret
    9ae0:	00800f04 	movi	r2,60
    9ae4:	10d1c83a 	sub	r8,r2,r3
    9ae8:	40bff804 	addi	r2,r8,-32
    9aec:	d9800517 	ldw	r6,20(sp)
    9af0:	d9c00617 	ldw	r7,24(sp)
    9af4:	10000816 	blt	r2,zero,9b18 <__fixdfsi+0xbc>
    9af8:	3888d83a 	srl	r4,r7,r2
    9afc:	d8800317 	ldw	r2,12(sp)
    9b00:	2007883a 	mov	r3,r4
    9b04:	103fe226 	beq	r2,zero,9a90 <__fixdfsi+0x34>
    9b08:	0107c83a 	sub	r3,zero,r4
    9b0c:	003fe006 	br	9a90 <__fixdfsi+0x34>
    9b10:	00e00034 	movhi	r3,32768
    9b14:	003fde06 	br	9a90 <__fixdfsi+0x34>
    9b18:	39c7883a 	add	r3,r7,r7
    9b1c:	008007c4 	movi	r2,31
    9b20:	1205c83a 	sub	r2,r2,r8
    9b24:	1886983a 	sll	r3,r3,r2
    9b28:	3208d83a 	srl	r4,r6,r8
    9b2c:	1908b03a 	or	r4,r3,r4
    9b30:	003ff206 	br	9afc <__fixdfsi+0xa0>

00009b34 <udivmodsi4>:
    9b34:	29001b2e 	bgeu	r5,r4,9ba4 <udivmodsi4+0x70>
    9b38:	28001a16 	blt	r5,zero,9ba4 <udivmodsi4+0x70>
    9b3c:	00800044 	movi	r2,1
    9b40:	0007883a 	mov	r3,zero
    9b44:	01c007c4 	movi	r7,31
    9b48:	00000306 	br	9b58 <udivmodsi4+0x24>
    9b4c:	19c01326 	beq	r3,r7,9b9c <udivmodsi4+0x68>
    9b50:	18c00044 	addi	r3,r3,1
    9b54:	28000416 	blt	r5,zero,9b68 <udivmodsi4+0x34>
    9b58:	294b883a 	add	r5,r5,r5
    9b5c:	1085883a 	add	r2,r2,r2
    9b60:	293ffa36 	bltu	r5,r4,9b4c <udivmodsi4+0x18>
    9b64:	10000d26 	beq	r2,zero,9b9c <udivmodsi4+0x68>
    9b68:	0007883a 	mov	r3,zero
    9b6c:	21400236 	bltu	r4,r5,9b78 <udivmodsi4+0x44>
    9b70:	2149c83a 	sub	r4,r4,r5
    9b74:	1886b03a 	or	r3,r3,r2
    9b78:	1004d07a 	srli	r2,r2,1
    9b7c:	280ad07a 	srli	r5,r5,1
    9b80:	103ffa1e 	bne	r2,zero,9b6c <udivmodsi4+0x38>
    9b84:	30000226 	beq	r6,zero,9b90 <udivmodsi4+0x5c>
    9b88:	2005883a 	mov	r2,r4
    9b8c:	f800283a 	ret
    9b90:	1809883a 	mov	r4,r3
    9b94:	2005883a 	mov	r2,r4
    9b98:	f800283a 	ret
    9b9c:	0007883a 	mov	r3,zero
    9ba0:	003ff806 	br	9b84 <udivmodsi4+0x50>
    9ba4:	00800044 	movi	r2,1
    9ba8:	0007883a 	mov	r3,zero
    9bac:	003fef06 	br	9b6c <udivmodsi4+0x38>

00009bb0 <__divsi3>:
    9bb0:	defffe04 	addi	sp,sp,-8
    9bb4:	dc000015 	stw	r16,0(sp)
    9bb8:	dfc00115 	stw	ra,4(sp)
    9bbc:	0021883a 	mov	r16,zero
    9bc0:	20000c16 	blt	r4,zero,9bf4 <__divsi3+0x44>
    9bc4:	000d883a 	mov	r6,zero
    9bc8:	28000e16 	blt	r5,zero,9c04 <__divsi3+0x54>
    9bcc:	0009b340 	call	9b34 <udivmodsi4>
    9bd0:	1007883a 	mov	r3,r2
    9bd4:	8005003a 	cmpeq	r2,r16,zero
    9bd8:	1000011e 	bne	r2,zero,9be0 <__divsi3+0x30>
    9bdc:	00c7c83a 	sub	r3,zero,r3
    9be0:	1805883a 	mov	r2,r3
    9be4:	dfc00117 	ldw	ra,4(sp)
    9be8:	dc000017 	ldw	r16,0(sp)
    9bec:	dec00204 	addi	sp,sp,8
    9bf0:	f800283a 	ret
    9bf4:	0109c83a 	sub	r4,zero,r4
    9bf8:	04000044 	movi	r16,1
    9bfc:	000d883a 	mov	r6,zero
    9c00:	283ff20e 	bge	r5,zero,9bcc <__divsi3+0x1c>
    9c04:	014bc83a 	sub	r5,zero,r5
    9c08:	8021003a 	cmpeq	r16,r16,zero
    9c0c:	003fef06 	br	9bcc <__divsi3+0x1c>

00009c10 <__modsi3>:
    9c10:	deffff04 	addi	sp,sp,-4
    9c14:	dfc00015 	stw	ra,0(sp)
    9c18:	01800044 	movi	r6,1
    9c1c:	2807883a 	mov	r3,r5
    9c20:	20000416 	blt	r4,zero,9c34 <__modsi3+0x24>
    9c24:	28000c16 	blt	r5,zero,9c58 <__modsi3+0x48>
    9c28:	dfc00017 	ldw	ra,0(sp)
    9c2c:	dec00104 	addi	sp,sp,4
    9c30:	0009b341 	jmpi	9b34 <udivmodsi4>
    9c34:	0109c83a 	sub	r4,zero,r4
    9c38:	28000b16 	blt	r5,zero,9c68 <__modsi3+0x58>
    9c3c:	180b883a 	mov	r5,r3
    9c40:	01800044 	movi	r6,1
    9c44:	0009b340 	call	9b34 <udivmodsi4>
    9c48:	0085c83a 	sub	r2,zero,r2
    9c4c:	dfc00017 	ldw	ra,0(sp)
    9c50:	dec00104 	addi	sp,sp,4
    9c54:	f800283a 	ret
    9c58:	014bc83a 	sub	r5,zero,r5
    9c5c:	dfc00017 	ldw	ra,0(sp)
    9c60:	dec00104 	addi	sp,sp,4
    9c64:	0009b341 	jmpi	9b34 <udivmodsi4>
    9c68:	0147c83a 	sub	r3,zero,r5
    9c6c:	003ff306 	br	9c3c <__modsi3+0x2c>

00009c70 <__udivsi3>:
    9c70:	000d883a 	mov	r6,zero
    9c74:	0009b341 	jmpi	9b34 <udivmodsi4>

00009c78 <__umodsi3>:
    9c78:	01800044 	movi	r6,1
    9c7c:	0009b341 	jmpi	9b34 <udivmodsi4>

00009c80 <__fpcmp_parts_d>:
    9c80:	21800017 	ldw	r6,0(r4)
    9c84:	00c00044 	movi	r3,1
    9c88:	19800a2e 	bgeu	r3,r6,9cb4 <__fpcmp_parts_d+0x34>
    9c8c:	28800017 	ldw	r2,0(r5)
    9c90:	1880082e 	bgeu	r3,r2,9cb4 <__fpcmp_parts_d+0x34>
    9c94:	00c00104 	movi	r3,4
    9c98:	30c02626 	beq	r6,r3,9d34 <__fpcmp_parts_d+0xb4>
    9c9c:	10c02226 	beq	r2,r3,9d28 <__fpcmp_parts_d+0xa8>
    9ca0:	00c00084 	movi	r3,2
    9ca4:	30c00526 	beq	r6,r3,9cbc <__fpcmp_parts_d+0x3c>
    9ca8:	10c0071e 	bne	r2,r3,9cc8 <__fpcmp_parts_d+0x48>
    9cac:	20800117 	ldw	r2,4(r4)
    9cb0:	1000091e 	bne	r2,zero,9cd8 <__fpcmp_parts_d+0x58>
    9cb4:	00800044 	movi	r2,1
    9cb8:	f800283a 	ret
    9cbc:	10c01a1e 	bne	r2,r3,9d28 <__fpcmp_parts_d+0xa8>
    9cc0:	0005883a 	mov	r2,zero
    9cc4:	f800283a 	ret
    9cc8:	22000117 	ldw	r8,4(r4)
    9ccc:	28800117 	ldw	r2,4(r5)
    9cd0:	40800326 	beq	r8,r2,9ce0 <__fpcmp_parts_d+0x60>
    9cd4:	403ff726 	beq	r8,zero,9cb4 <__fpcmp_parts_d+0x34>
    9cd8:	00bfffc4 	movi	r2,-1
    9cdc:	f800283a 	ret
    9ce0:	20c00217 	ldw	r3,8(r4)
    9ce4:	28800217 	ldw	r2,8(r5)
    9ce8:	10fffa16 	blt	r2,r3,9cd4 <__fpcmp_parts_d+0x54>
    9cec:	18800916 	blt	r3,r2,9d14 <__fpcmp_parts_d+0x94>
    9cf0:	21c00417 	ldw	r7,16(r4)
    9cf4:	28c00417 	ldw	r3,16(r5)
    9cf8:	21800317 	ldw	r6,12(r4)
    9cfc:	28800317 	ldw	r2,12(r5)
    9d00:	19fff436 	bltu	r3,r7,9cd4 <__fpcmp_parts_d+0x54>
    9d04:	38c00526 	beq	r7,r3,9d1c <__fpcmp_parts_d+0x9c>
    9d08:	38c00236 	bltu	r7,r3,9d14 <__fpcmp_parts_d+0x94>
    9d0c:	19ffec1e 	bne	r3,r7,9cc0 <__fpcmp_parts_d+0x40>
    9d10:	30bfeb2e 	bgeu	r6,r2,9cc0 <__fpcmp_parts_d+0x40>
    9d14:	403fe71e 	bne	r8,zero,9cb4 <__fpcmp_parts_d+0x34>
    9d18:	003fef06 	br	9cd8 <__fpcmp_parts_d+0x58>
    9d1c:	11bffa2e 	bgeu	r2,r6,9d08 <__fpcmp_parts_d+0x88>
    9d20:	403fe426 	beq	r8,zero,9cb4 <__fpcmp_parts_d+0x34>
    9d24:	003fec06 	br	9cd8 <__fpcmp_parts_d+0x58>
    9d28:	28800117 	ldw	r2,4(r5)
    9d2c:	103fe11e 	bne	r2,zero,9cb4 <__fpcmp_parts_d+0x34>
    9d30:	003fe906 	br	9cd8 <__fpcmp_parts_d+0x58>
    9d34:	11bfdd1e 	bne	r2,r6,9cac <__fpcmp_parts_d+0x2c>
    9d38:	28c00117 	ldw	r3,4(r5)
    9d3c:	20800117 	ldw	r2,4(r4)
    9d40:	1885c83a 	sub	r2,r3,r2
    9d44:	f800283a 	ret

00009d48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d48:	defff804 	addi	sp,sp,-32
    9d4c:	dfc00715 	stw	ra,28(sp)
    9d50:	df000615 	stw	fp,24(sp)
    9d54:	df000604 	addi	fp,sp,24
    9d58:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9d5c:	e0bffc17 	ldw	r2,-16(fp)
    9d60:	1004803a 	cmplt	r2,r2,zero
    9d64:	1000091e 	bne	r2,zero,9d8c <close+0x44>
    9d68:	e13ffc17 	ldw	r4,-16(fp)
    9d6c:	01400304 	movi	r5,12
    9d70:	00016340 	call	1634 <__mulsi3>
    9d74:	1007883a 	mov	r3,r2
    9d78:	00800074 	movhi	r2,1
    9d7c:	10bc2804 	addi	r2,r2,-3936
    9d80:	1887883a 	add	r3,r3,r2
    9d84:	e0ffff15 	stw	r3,-4(fp)
    9d88:	00000106 	br	9d90 <close+0x48>
    9d8c:	e03fff15 	stw	zero,-4(fp)
    9d90:	e0bfff17 	ldw	r2,-4(fp)
    9d94:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9d98:	e0bffb17 	ldw	r2,-20(fp)
    9d9c:	1005003a 	cmpeq	r2,r2,zero
    9da0:	10001d1e 	bne	r2,zero,9e18 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9da4:	e0bffb17 	ldw	r2,-20(fp)
    9da8:	10800017 	ldw	r2,0(r2)
    9dac:	10800417 	ldw	r2,16(r2)
    9db0:	1005003a 	cmpeq	r2,r2,zero
    9db4:	1000071e 	bne	r2,zero,9dd4 <close+0x8c>
    9db8:	e0bffb17 	ldw	r2,-20(fp)
    9dbc:	10800017 	ldw	r2,0(r2)
    9dc0:	10800417 	ldw	r2,16(r2)
    9dc4:	e13ffb17 	ldw	r4,-20(fp)
    9dc8:	103ee83a 	callr	r2
    9dcc:	e0bffe15 	stw	r2,-8(fp)
    9dd0:	00000106 	br	9dd8 <close+0x90>
    9dd4:	e03ffe15 	stw	zero,-8(fp)
    9dd8:	e0bffe17 	ldw	r2,-8(fp)
    9ddc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9de0:	e13ffc17 	ldw	r4,-16(fp)
    9de4:	000a4b40 	call	a4b4 <alt_release_fd>
    if (rval < 0)
    9de8:	e0bffa17 	ldw	r2,-24(fp)
    9dec:	1004403a 	cmpge	r2,r2,zero
    9df0:	1000071e 	bne	r2,zero,9e10 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9df4:	0009e480 	call	9e48 <alt_get_errno>
    9df8:	e0fffa17 	ldw	r3,-24(fp)
    9dfc:	00c7c83a 	sub	r3,zero,r3
    9e00:	10c00015 	stw	r3,0(r2)
      return -1;
    9e04:	00bfffc4 	movi	r2,-1
    9e08:	e0bffd15 	stw	r2,-12(fp)
    9e0c:	00000806 	br	9e30 <close+0xe8>
    }
    return 0;
    9e10:	e03ffd15 	stw	zero,-12(fp)
    9e14:	00000606 	br	9e30 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9e18:	0009e480 	call	9e48 <alt_get_errno>
    9e1c:	1007883a 	mov	r3,r2
    9e20:	00801444 	movi	r2,81
    9e24:	18800015 	stw	r2,0(r3)
    return -1;
    9e28:	00bfffc4 	movi	r2,-1
    9e2c:	e0bffd15 	stw	r2,-12(fp)
    9e30:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9e34:	e037883a 	mov	sp,fp
    9e38:	dfc00117 	ldw	ra,4(sp)
    9e3c:	df000017 	ldw	fp,0(sp)
    9e40:	dec00204 	addi	sp,sp,8
    9e44:	f800283a 	ret

00009e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e48:	defffd04 	addi	sp,sp,-12
    9e4c:	dfc00215 	stw	ra,8(sp)
    9e50:	df000115 	stw	fp,4(sp)
    9e54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e58:	00800074 	movhi	r2,1
    9e5c:	1081d304 	addi	r2,r2,1868
    9e60:	10800017 	ldw	r2,0(r2)
    9e64:	1005003a 	cmpeq	r2,r2,zero
    9e68:	1000061e 	bne	r2,zero,9e84 <alt_get_errno+0x3c>
    9e6c:	00800074 	movhi	r2,1
    9e70:	1081d304 	addi	r2,r2,1868
    9e74:	10800017 	ldw	r2,0(r2)
    9e78:	103ee83a 	callr	r2
    9e7c:	e0bfff15 	stw	r2,-4(fp)
    9e80:	00000306 	br	9e90 <alt_get_errno+0x48>
    9e84:	00800074 	movhi	r2,1
    9e88:	1081e004 	addi	r2,r2,1920
    9e8c:	e0bfff15 	stw	r2,-4(fp)
    9e90:	e0bfff17 	ldw	r2,-4(fp)
}
    9e94:	e037883a 	mov	sp,fp
    9e98:	dfc00117 	ldw	ra,4(sp)
    9e9c:	df000017 	ldw	fp,0(sp)
    9ea0:	dec00204 	addi	sp,sp,8
    9ea4:	f800283a 	ret

00009ea8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9ea8:	defffc04 	addi	sp,sp,-16
    9eac:	df000315 	stw	fp,12(sp)
    9eb0:	df000304 	addi	fp,sp,12
    9eb4:	e13ffd15 	stw	r4,-12(fp)
    9eb8:	e17ffe15 	stw	r5,-8(fp)
    9ebc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9ec0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ec4:	e037883a 	mov	sp,fp
    9ec8:	df000017 	ldw	fp,0(sp)
    9ecc:	dec00104 	addi	sp,sp,4
    9ed0:	f800283a 	ret

00009ed4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9ed4:	defff904 	addi	sp,sp,-28
    9ed8:	dfc00615 	stw	ra,24(sp)
    9edc:	df000515 	stw	fp,20(sp)
    9ee0:	df000504 	addi	fp,sp,20
    9ee4:	e13ffc15 	stw	r4,-16(fp)
    9ee8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9eec:	e0bffc17 	ldw	r2,-16(fp)
    9ef0:	1004803a 	cmplt	r2,r2,zero
    9ef4:	1000091e 	bne	r2,zero,9f1c <fstat+0x48>
    9ef8:	e13ffc17 	ldw	r4,-16(fp)
    9efc:	01400304 	movi	r5,12
    9f00:	00016340 	call	1634 <__mulsi3>
    9f04:	1007883a 	mov	r3,r2
    9f08:	00800074 	movhi	r2,1
    9f0c:	10bc2804 	addi	r2,r2,-3936
    9f10:	1887883a 	add	r3,r3,r2
    9f14:	e0ffff15 	stw	r3,-4(fp)
    9f18:	00000106 	br	9f20 <fstat+0x4c>
    9f1c:	e03fff15 	stw	zero,-4(fp)
    9f20:	e0bfff17 	ldw	r2,-4(fp)
    9f24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9f28:	e0bffb17 	ldw	r2,-20(fp)
    9f2c:	1005003a 	cmpeq	r2,r2,zero
    9f30:	1000121e 	bne	r2,zero,9f7c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9f34:	e0bffb17 	ldw	r2,-20(fp)
    9f38:	10800017 	ldw	r2,0(r2)
    9f3c:	10800817 	ldw	r2,32(r2)
    9f40:	1005003a 	cmpeq	r2,r2,zero
    9f44:	1000081e 	bne	r2,zero,9f68 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    9f48:	e0bffb17 	ldw	r2,-20(fp)
    9f4c:	10800017 	ldw	r2,0(r2)
    9f50:	10800817 	ldw	r2,32(r2)
    9f54:	e13ffb17 	ldw	r4,-20(fp)
    9f58:	e17ffd17 	ldw	r5,-12(fp)
    9f5c:	103ee83a 	callr	r2
    9f60:	e0bffe15 	stw	r2,-8(fp)
    9f64:	00000b06 	br	9f94 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9f68:	e0fffd17 	ldw	r3,-12(fp)
    9f6c:	00880004 	movi	r2,8192
    9f70:	18800115 	stw	r2,4(r3)
      return 0;
    9f74:	e03ffe15 	stw	zero,-8(fp)
    9f78:	00000606 	br	9f94 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9f7c:	0009fac0 	call	9fac <alt_get_errno>
    9f80:	1007883a 	mov	r3,r2
    9f84:	00801444 	movi	r2,81
    9f88:	18800015 	stw	r2,0(r3)
    return -1;
    9f8c:	00bfffc4 	movi	r2,-1
    9f90:	e0bffe15 	stw	r2,-8(fp)
    9f94:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9f98:	e037883a 	mov	sp,fp
    9f9c:	dfc00117 	ldw	ra,4(sp)
    9fa0:	df000017 	ldw	fp,0(sp)
    9fa4:	dec00204 	addi	sp,sp,8
    9fa8:	f800283a 	ret

00009fac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9fac:	defffd04 	addi	sp,sp,-12
    9fb0:	dfc00215 	stw	ra,8(sp)
    9fb4:	df000115 	stw	fp,4(sp)
    9fb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9fbc:	00800074 	movhi	r2,1
    9fc0:	1081d304 	addi	r2,r2,1868
    9fc4:	10800017 	ldw	r2,0(r2)
    9fc8:	1005003a 	cmpeq	r2,r2,zero
    9fcc:	1000061e 	bne	r2,zero,9fe8 <alt_get_errno+0x3c>
    9fd0:	00800074 	movhi	r2,1
    9fd4:	1081d304 	addi	r2,r2,1868
    9fd8:	10800017 	ldw	r2,0(r2)
    9fdc:	103ee83a 	callr	r2
    9fe0:	e0bfff15 	stw	r2,-4(fp)
    9fe4:	00000306 	br	9ff4 <alt_get_errno+0x48>
    9fe8:	00800074 	movhi	r2,1
    9fec:	1081e004 	addi	r2,r2,1920
    9ff0:	e0bfff15 	stw	r2,-4(fp)
    9ff4:	e0bfff17 	ldw	r2,-4(fp)
}
    9ff8:	e037883a 	mov	sp,fp
    9ffc:	dfc00117 	ldw	ra,4(sp)
    a000:	df000017 	ldw	fp,0(sp)
    a004:	dec00204 	addi	sp,sp,8
    a008:	f800283a 	ret

0000a00c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a00c:	deffeb04 	addi	sp,sp,-84
    a010:	dfc01415 	stw	ra,80(sp)
    a014:	df001315 	stw	fp,76(sp)
    a018:	df001304 	addi	fp,sp,76
    a01c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a020:	e0bffd17 	ldw	r2,-12(fp)
    a024:	1004803a 	cmplt	r2,r2,zero
    a028:	1000091e 	bne	r2,zero,a050 <isatty+0x44>
    a02c:	e13ffd17 	ldw	r4,-12(fp)
    a030:	01400304 	movi	r5,12
    a034:	00016340 	call	1634 <__mulsi3>
    a038:	1007883a 	mov	r3,r2
    a03c:	00800074 	movhi	r2,1
    a040:	10bc2804 	addi	r2,r2,-3936
    a044:	1887883a 	add	r3,r3,r2
    a048:	e0ffff15 	stw	r3,-4(fp)
    a04c:	00000106 	br	a054 <isatty+0x48>
    a050:	e03fff15 	stw	zero,-4(fp)
    a054:	e0bfff17 	ldw	r2,-4(fp)
    a058:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a05c:	e0bfed17 	ldw	r2,-76(fp)
    a060:	1005003a 	cmpeq	r2,r2,zero
    a064:	10000f1e 	bne	r2,zero,a0a4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a068:	e0bfed17 	ldw	r2,-76(fp)
    a06c:	10800017 	ldw	r2,0(r2)
    a070:	10800817 	ldw	r2,32(r2)
    a074:	1004c03a 	cmpne	r2,r2,zero
    a078:	1000031e 	bne	r2,zero,a088 <isatty+0x7c>
    {
      return 1;
    a07c:	00800044 	movi	r2,1
    a080:	e0bffe15 	stw	r2,-8(fp)
    a084:	00000c06 	br	a0b8 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a088:	e17fee04 	addi	r5,fp,-72
    a08c:	e13ffd17 	ldw	r4,-12(fp)
    a090:	0009ed40 	call	9ed4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a094:	e0bfef17 	ldw	r2,-68(fp)
    a098:	10880020 	cmpeqi	r2,r2,8192
    a09c:	e0bffe15 	stw	r2,-8(fp)
    a0a0:	00000506 	br	a0b8 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a0a4:	000a0d00 	call	a0d0 <alt_get_errno>
    a0a8:	1007883a 	mov	r3,r2
    a0ac:	00801444 	movi	r2,81
    a0b0:	18800015 	stw	r2,0(r3)
    return 0;
    a0b4:	e03ffe15 	stw	zero,-8(fp)
    a0b8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a0bc:	e037883a 	mov	sp,fp
    a0c0:	dfc00117 	ldw	ra,4(sp)
    a0c4:	df000017 	ldw	fp,0(sp)
    a0c8:	dec00204 	addi	sp,sp,8
    a0cc:	f800283a 	ret

0000a0d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a0d0:	defffd04 	addi	sp,sp,-12
    a0d4:	dfc00215 	stw	ra,8(sp)
    a0d8:	df000115 	stw	fp,4(sp)
    a0dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a0e0:	00800074 	movhi	r2,1
    a0e4:	1081d304 	addi	r2,r2,1868
    a0e8:	10800017 	ldw	r2,0(r2)
    a0ec:	1005003a 	cmpeq	r2,r2,zero
    a0f0:	1000061e 	bne	r2,zero,a10c <alt_get_errno+0x3c>
    a0f4:	00800074 	movhi	r2,1
    a0f8:	1081d304 	addi	r2,r2,1868
    a0fc:	10800017 	ldw	r2,0(r2)
    a100:	103ee83a 	callr	r2
    a104:	e0bfff15 	stw	r2,-4(fp)
    a108:	00000306 	br	a118 <alt_get_errno+0x48>
    a10c:	00800074 	movhi	r2,1
    a110:	1081e004 	addi	r2,r2,1920
    a114:	e0bfff15 	stw	r2,-4(fp)
    a118:	e0bfff17 	ldw	r2,-4(fp)
}
    a11c:	e037883a 	mov	sp,fp
    a120:	dfc00117 	ldw	ra,4(sp)
    a124:	df000017 	ldw	fp,0(sp)
    a128:	dec00204 	addi	sp,sp,8
    a12c:	f800283a 	ret

0000a130 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a130:	defff804 	addi	sp,sp,-32
    a134:	dfc00715 	stw	ra,28(sp)
    a138:	df000615 	stw	fp,24(sp)
    a13c:	df000604 	addi	fp,sp,24
    a140:	e13ffc15 	stw	r4,-16(fp)
    a144:	e17ffd15 	stw	r5,-12(fp)
    a148:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a14c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a150:	e0bffc17 	ldw	r2,-16(fp)
    a154:	1004803a 	cmplt	r2,r2,zero
    a158:	1000091e 	bne	r2,zero,a180 <lseek+0x50>
    a15c:	e13ffc17 	ldw	r4,-16(fp)
    a160:	01400304 	movi	r5,12
    a164:	00016340 	call	1634 <__mulsi3>
    a168:	1007883a 	mov	r3,r2
    a16c:	00800074 	movhi	r2,1
    a170:	10bc2804 	addi	r2,r2,-3936
    a174:	1887883a 	add	r3,r3,r2
    a178:	e0ffff15 	stw	r3,-4(fp)
    a17c:	00000106 	br	a184 <lseek+0x54>
    a180:	e03fff15 	stw	zero,-4(fp)
    a184:	e0bfff17 	ldw	r2,-4(fp)
    a188:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a18c:	e0bffb17 	ldw	r2,-20(fp)
    a190:	1005003a 	cmpeq	r2,r2,zero
    a194:	1000111e 	bne	r2,zero,a1dc <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a198:	e0bffb17 	ldw	r2,-20(fp)
    a19c:	10800017 	ldw	r2,0(r2)
    a1a0:	10800717 	ldw	r2,28(r2)
    a1a4:	1005003a 	cmpeq	r2,r2,zero
    a1a8:	1000091e 	bne	r2,zero,a1d0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a1ac:	e0bffb17 	ldw	r2,-20(fp)
    a1b0:	10800017 	ldw	r2,0(r2)
    a1b4:	10800717 	ldw	r2,28(r2)
    a1b8:	e13ffb17 	ldw	r4,-20(fp)
    a1bc:	e17ffd17 	ldw	r5,-12(fp)
    a1c0:	e1bffe17 	ldw	r6,-8(fp)
    a1c4:	103ee83a 	callr	r2
    a1c8:	e0bffa15 	stw	r2,-24(fp)
    a1cc:	00000506 	br	a1e4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a1d0:	00bfde84 	movi	r2,-134
    a1d4:	e0bffa15 	stw	r2,-24(fp)
    a1d8:	00000206 	br	a1e4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    a1dc:	00bfebc4 	movi	r2,-81
    a1e0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a1e4:	e0bffa17 	ldw	r2,-24(fp)
    a1e8:	1004403a 	cmpge	r2,r2,zero
    a1ec:	1000071e 	bne	r2,zero,a20c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    a1f0:	000a2240 	call	a224 <alt_get_errno>
    a1f4:	1007883a 	mov	r3,r2
    a1f8:	e0bffa17 	ldw	r2,-24(fp)
    a1fc:	0085c83a 	sub	r2,zero,r2
    a200:	18800015 	stw	r2,0(r3)
    rc = -1;
    a204:	00bfffc4 	movi	r2,-1
    a208:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a20c:	e0bffa17 	ldw	r2,-24(fp)
}
    a210:	e037883a 	mov	sp,fp
    a214:	dfc00117 	ldw	ra,4(sp)
    a218:	df000017 	ldw	fp,0(sp)
    a21c:	dec00204 	addi	sp,sp,8
    a220:	f800283a 	ret

0000a224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a224:	defffd04 	addi	sp,sp,-12
    a228:	dfc00215 	stw	ra,8(sp)
    a22c:	df000115 	stw	fp,4(sp)
    a230:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a234:	00800074 	movhi	r2,1
    a238:	1081d304 	addi	r2,r2,1868
    a23c:	10800017 	ldw	r2,0(r2)
    a240:	1005003a 	cmpeq	r2,r2,zero
    a244:	1000061e 	bne	r2,zero,a260 <alt_get_errno+0x3c>
    a248:	00800074 	movhi	r2,1
    a24c:	1081d304 	addi	r2,r2,1868
    a250:	10800017 	ldw	r2,0(r2)
    a254:	103ee83a 	callr	r2
    a258:	e0bfff15 	stw	r2,-4(fp)
    a25c:	00000306 	br	a26c <alt_get_errno+0x48>
    a260:	00800074 	movhi	r2,1
    a264:	1081e004 	addi	r2,r2,1920
    a268:	e0bfff15 	stw	r2,-4(fp)
    a26c:	e0bfff17 	ldw	r2,-4(fp)
}
    a270:	e037883a 	mov	sp,fp
    a274:	dfc00117 	ldw	ra,4(sp)
    a278:	df000017 	ldw	fp,0(sp)
    a27c:	dec00204 	addi	sp,sp,8
    a280:	f800283a 	ret

0000a284 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a284:	defffd04 	addi	sp,sp,-12
    a288:	dfc00215 	stw	ra,8(sp)
    a28c:	df000115 	stw	fp,4(sp)
    a290:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a294:	0009883a 	mov	r4,zero
    a298:	000a76c0 	call	a76c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a29c:	000a7a00 	call	a7a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a2a0:	01000074 	movhi	r4,1
    a2a4:	2139ec04 	addi	r4,r4,-6224
    a2a8:	01400074 	movhi	r5,1
    a2ac:	2979ec04 	addi	r5,r5,-6224
    a2b0:	01800074 	movhi	r6,1
    a2b4:	31b9ec04 	addi	r6,r6,-6224
    a2b8:	000d6a80 	call	d6a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a2bc:	000d16c0 	call	d16c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a2c0:	01000074 	movhi	r4,1
    a2c4:	21347404 	addi	r4,r4,-11824
    a2c8:	000e0840 	call	e084 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a2cc:	d1201a17 	ldw	r4,-32664(gp)
    a2d0:	d1601b17 	ldw	r5,-32660(gp)
    a2d4:	d1a01c17 	ldw	r6,-32656(gp)
    a2d8:	00002e00 	call	2e0 <main>
    a2dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a2e0:	01000044 	movi	r4,1
    a2e4:	0009d480 	call	9d48 <close>
  exit (result);
    a2e8:	e13fff17 	ldw	r4,-4(fp)
    a2ec:	000e0980 	call	e098 <exit>

0000a2f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a2f0:	defffe04 	addi	sp,sp,-8
    a2f4:	df000115 	stw	fp,4(sp)
    a2f8:	df000104 	addi	fp,sp,4
    a2fc:	e13fff15 	stw	r4,-4(fp)
}
    a300:	e037883a 	mov	sp,fp
    a304:	df000017 	ldw	fp,0(sp)
    a308:	dec00104 	addi	sp,sp,4
    a30c:	f800283a 	ret

0000a310 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a310:	defffe04 	addi	sp,sp,-8
    a314:	df000115 	stw	fp,4(sp)
    a318:	df000104 	addi	fp,sp,4
    a31c:	e13fff15 	stw	r4,-4(fp)
}
    a320:	e037883a 	mov	sp,fp
    a324:	df000017 	ldw	fp,0(sp)
    a328:	dec00104 	addi	sp,sp,4
    a32c:	f800283a 	ret

0000a330 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a330:	defff704 	addi	sp,sp,-36
    a334:	dfc00815 	stw	ra,32(sp)
    a338:	df000715 	stw	fp,28(sp)
    a33c:	df000704 	addi	fp,sp,28
    a340:	e13ffb15 	stw	r4,-20(fp)
    a344:	e17ffc15 	stw	r5,-16(fp)
    a348:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a34c:	e0bffb17 	ldw	r2,-20(fp)
    a350:	1004803a 	cmplt	r2,r2,zero
    a354:	1000091e 	bne	r2,zero,a37c <read+0x4c>
    a358:	e13ffb17 	ldw	r4,-20(fp)
    a35c:	01400304 	movi	r5,12
    a360:	00016340 	call	1634 <__mulsi3>
    a364:	1007883a 	mov	r3,r2
    a368:	00800074 	movhi	r2,1
    a36c:	10bc2804 	addi	r2,r2,-3936
    a370:	1887883a 	add	r3,r3,r2
    a374:	e0ffff15 	stw	r3,-4(fp)
    a378:	00000106 	br	a380 <read+0x50>
    a37c:	e03fff15 	stw	zero,-4(fp)
    a380:	e0bfff17 	ldw	r2,-4(fp)
    a384:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a388:	e0bffa17 	ldw	r2,-24(fp)
    a38c:	1005003a 	cmpeq	r2,r2,zero
    a390:	1000241e 	bne	r2,zero,a424 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a394:	e0bffa17 	ldw	r2,-24(fp)
    a398:	10800217 	ldw	r2,8(r2)
    a39c:	108000cc 	andi	r2,r2,3
    a3a0:	10800060 	cmpeqi	r2,r2,1
    a3a4:	10001a1e 	bne	r2,zero,a410 <read+0xe0>
    a3a8:	e0bffa17 	ldw	r2,-24(fp)
    a3ac:	10800017 	ldw	r2,0(r2)
    a3b0:	10800517 	ldw	r2,20(r2)
    a3b4:	1005003a 	cmpeq	r2,r2,zero
    a3b8:	1000151e 	bne	r2,zero,a410 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a3bc:	e0bffa17 	ldw	r2,-24(fp)
    a3c0:	10800017 	ldw	r2,0(r2)
    a3c4:	10800517 	ldw	r2,20(r2)
    a3c8:	e17ffc17 	ldw	r5,-16(fp)
    a3cc:	e1bffd17 	ldw	r6,-12(fp)
    a3d0:	e13ffa17 	ldw	r4,-24(fp)
    a3d4:	103ee83a 	callr	r2
    a3d8:	e0bff915 	stw	r2,-28(fp)
    a3dc:	e0bff917 	ldw	r2,-28(fp)
    a3e0:	1004403a 	cmpge	r2,r2,zero
    a3e4:	1000071e 	bne	r2,zero,a404 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    a3e8:	000a4540 	call	a454 <alt_get_errno>
    a3ec:	e0fff917 	ldw	r3,-28(fp)
    a3f0:	00c7c83a 	sub	r3,zero,r3
    a3f4:	10c00015 	stw	r3,0(r2)
          return -1;
    a3f8:	00bfffc4 	movi	r2,-1
    a3fc:	e0bffe15 	stw	r2,-8(fp)
    a400:	00000e06 	br	a43c <read+0x10c>
        }
        return rval;
    a404:	e0bff917 	ldw	r2,-28(fp)
    a408:	e0bffe15 	stw	r2,-8(fp)
    a40c:	00000b06 	br	a43c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a410:	000a4540 	call	a454 <alt_get_errno>
    a414:	1007883a 	mov	r3,r2
    a418:	00800344 	movi	r2,13
    a41c:	18800015 	stw	r2,0(r3)
    a420:	00000406 	br	a434 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a424:	000a4540 	call	a454 <alt_get_errno>
    a428:	1007883a 	mov	r3,r2
    a42c:	00801444 	movi	r2,81
    a430:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a434:	00bfffc4 	movi	r2,-1
    a438:	e0bffe15 	stw	r2,-8(fp)
    a43c:	e0bffe17 	ldw	r2,-8(fp)
}
    a440:	e037883a 	mov	sp,fp
    a444:	dfc00117 	ldw	ra,4(sp)
    a448:	df000017 	ldw	fp,0(sp)
    a44c:	dec00204 	addi	sp,sp,8
    a450:	f800283a 	ret

0000a454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a454:	defffd04 	addi	sp,sp,-12
    a458:	dfc00215 	stw	ra,8(sp)
    a45c:	df000115 	stw	fp,4(sp)
    a460:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a464:	00800074 	movhi	r2,1
    a468:	1081d304 	addi	r2,r2,1868
    a46c:	10800017 	ldw	r2,0(r2)
    a470:	1005003a 	cmpeq	r2,r2,zero
    a474:	1000061e 	bne	r2,zero,a490 <alt_get_errno+0x3c>
    a478:	00800074 	movhi	r2,1
    a47c:	1081d304 	addi	r2,r2,1868
    a480:	10800017 	ldw	r2,0(r2)
    a484:	103ee83a 	callr	r2
    a488:	e0bfff15 	stw	r2,-4(fp)
    a48c:	00000306 	br	a49c <alt_get_errno+0x48>
    a490:	00800074 	movhi	r2,1
    a494:	1081e004 	addi	r2,r2,1920
    a498:	e0bfff15 	stw	r2,-4(fp)
    a49c:	e0bfff17 	ldw	r2,-4(fp)
}
    a4a0:	e037883a 	mov	sp,fp
    a4a4:	dfc00117 	ldw	ra,4(sp)
    a4a8:	df000017 	ldw	fp,0(sp)
    a4ac:	dec00204 	addi	sp,sp,8
    a4b0:	f800283a 	ret

0000a4b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a4b4:	defffc04 	addi	sp,sp,-16
    a4b8:	dfc00315 	stw	ra,12(sp)
    a4bc:	df000215 	stw	fp,8(sp)
    a4c0:	dc000115 	stw	r16,4(sp)
    a4c4:	df000104 	addi	fp,sp,4
    a4c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a4cc:	e0bfff17 	ldw	r2,-4(fp)
    a4d0:	108000d0 	cmplti	r2,r2,3
    a4d4:	10000f1e 	bne	r2,zero,a514 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a4d8:	e13fff17 	ldw	r4,-4(fp)
    a4dc:	04000074 	movhi	r16,1
    a4e0:	843c2804 	addi	r16,r16,-3936
    a4e4:	01400304 	movi	r5,12
    a4e8:	00016340 	call	1634 <__mulsi3>
    a4ec:	1405883a 	add	r2,r2,r16
    a4f0:	10800204 	addi	r2,r2,8
    a4f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a4f8:	e13fff17 	ldw	r4,-4(fp)
    a4fc:	04000074 	movhi	r16,1
    a500:	843c2804 	addi	r16,r16,-3936
    a504:	01400304 	movi	r5,12
    a508:	00016340 	call	1634 <__mulsi3>
    a50c:	1405883a 	add	r2,r2,r16
    a510:	10000015 	stw	zero,0(r2)
  }
}
    a514:	e037883a 	mov	sp,fp
    a518:	dfc00217 	ldw	ra,8(sp)
    a51c:	df000117 	ldw	fp,4(sp)
    a520:	dc000017 	ldw	r16,0(sp)
    a524:	dec00304 	addi	sp,sp,12
    a528:	f800283a 	ret

0000a52c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a52c:	defff804 	addi	sp,sp,-32
    a530:	df000715 	stw	fp,28(sp)
    a534:	df000704 	addi	fp,sp,28
    a538:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a53c:	0005303a 	rdctl	r2,status
    a540:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a544:	e0fffb17 	ldw	r3,-20(fp)
    a548:	00bfff84 	movi	r2,-2
    a54c:	1884703a 	and	r2,r3,r2
    a550:	1001703a 	wrctl	status,r2
  
  return context;
    a554:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a558:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a55c:	d0a00d17 	ldw	r2,-32716(gp)
    a560:	10c000c4 	addi	r3,r2,3
    a564:	00bfff04 	movi	r2,-4
    a568:	1884703a 	and	r2,r3,r2
    a56c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a570:	d0e00d17 	ldw	r3,-32716(gp)
    a574:	e0bffe17 	ldw	r2,-8(fp)
    a578:	1887883a 	add	r3,r3,r2
    a57c:	00808034 	movhi	r2,512
    a580:	10800004 	addi	r2,r2,0
    a584:	10c0072e 	bgeu	r2,r3,a5a4 <sbrk+0x78>
    a588:	e0bffd17 	ldw	r2,-12(fp)
    a58c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a590:	e0bffa17 	ldw	r2,-24(fp)
    a594:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a598:	00bfffc4 	movi	r2,-1
    a59c:	e0bfff15 	stw	r2,-4(fp)
    a5a0:	00000c06 	br	a5d4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a5a4:	d0a00d17 	ldw	r2,-32716(gp)
    a5a8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a5ac:	d0e00d17 	ldw	r3,-32716(gp)
    a5b0:	e0bffe17 	ldw	r2,-8(fp)
    a5b4:	1885883a 	add	r2,r3,r2
    a5b8:	d0a00d15 	stw	r2,-32716(gp)
    a5bc:	e0bffd17 	ldw	r2,-12(fp)
    a5c0:	e0bff915 	stw	r2,-28(fp)
    a5c4:	e0bff917 	ldw	r2,-28(fp)
    a5c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a5cc:	e0bffc17 	ldw	r2,-16(fp)
    a5d0:	e0bfff15 	stw	r2,-4(fp)
    a5d4:	e0bfff17 	ldw	r2,-4(fp)
} 
    a5d8:	e037883a 	mov	sp,fp
    a5dc:	df000017 	ldw	fp,0(sp)
    a5e0:	dec00104 	addi	sp,sp,4
    a5e4:	f800283a 	ret

0000a5e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a5e8:	defff704 	addi	sp,sp,-36
    a5ec:	dfc00815 	stw	ra,32(sp)
    a5f0:	df000715 	stw	fp,28(sp)
    a5f4:	df000704 	addi	fp,sp,28
    a5f8:	e13ffb15 	stw	r4,-20(fp)
    a5fc:	e17ffc15 	stw	r5,-16(fp)
    a600:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a604:	e0bffb17 	ldw	r2,-20(fp)
    a608:	1004803a 	cmplt	r2,r2,zero
    a60c:	1000091e 	bne	r2,zero,a634 <write+0x4c>
    a610:	e13ffb17 	ldw	r4,-20(fp)
    a614:	01400304 	movi	r5,12
    a618:	00016340 	call	1634 <__mulsi3>
    a61c:	1007883a 	mov	r3,r2
    a620:	00800074 	movhi	r2,1
    a624:	10bc2804 	addi	r2,r2,-3936
    a628:	1887883a 	add	r3,r3,r2
    a62c:	e0ffff15 	stw	r3,-4(fp)
    a630:	00000106 	br	a638 <write+0x50>
    a634:	e03fff15 	stw	zero,-4(fp)
    a638:	e0bfff17 	ldw	r2,-4(fp)
    a63c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a640:	e0bffa17 	ldw	r2,-24(fp)
    a644:	1005003a 	cmpeq	r2,r2,zero
    a648:	1000241e 	bne	r2,zero,a6dc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a64c:	e0bffa17 	ldw	r2,-24(fp)
    a650:	10800217 	ldw	r2,8(r2)
    a654:	108000cc 	andi	r2,r2,3
    a658:	1005003a 	cmpeq	r2,r2,zero
    a65c:	10001a1e 	bne	r2,zero,a6c8 <write+0xe0>
    a660:	e0bffa17 	ldw	r2,-24(fp)
    a664:	10800017 	ldw	r2,0(r2)
    a668:	10800617 	ldw	r2,24(r2)
    a66c:	1005003a 	cmpeq	r2,r2,zero
    a670:	1000151e 	bne	r2,zero,a6c8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a674:	e0bffa17 	ldw	r2,-24(fp)
    a678:	10800017 	ldw	r2,0(r2)
    a67c:	10800617 	ldw	r2,24(r2)
    a680:	e17ffc17 	ldw	r5,-16(fp)
    a684:	e1bffd17 	ldw	r6,-12(fp)
    a688:	e13ffa17 	ldw	r4,-24(fp)
    a68c:	103ee83a 	callr	r2
    a690:	e0bff915 	stw	r2,-28(fp)
    a694:	e0bff917 	ldw	r2,-28(fp)
    a698:	1004403a 	cmpge	r2,r2,zero
    a69c:	1000071e 	bne	r2,zero,a6bc <write+0xd4>
      {
        ALT_ERRNO = -rval;
    a6a0:	000a70c0 	call	a70c <alt_get_errno>
    a6a4:	e0fff917 	ldw	r3,-28(fp)
    a6a8:	00c7c83a 	sub	r3,zero,r3
    a6ac:	10c00015 	stw	r3,0(r2)
        return -1;
    a6b0:	00bfffc4 	movi	r2,-1
    a6b4:	e0bffe15 	stw	r2,-8(fp)
    a6b8:	00000e06 	br	a6f4 <write+0x10c>
      }
      return rval;
    a6bc:	e0bff917 	ldw	r2,-28(fp)
    a6c0:	e0bffe15 	stw	r2,-8(fp)
    a6c4:	00000b06 	br	a6f4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a6c8:	000a70c0 	call	a70c <alt_get_errno>
    a6cc:	1007883a 	mov	r3,r2
    a6d0:	00800344 	movi	r2,13
    a6d4:	18800015 	stw	r2,0(r3)
    a6d8:	00000406 	br	a6ec <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a6dc:	000a70c0 	call	a70c <alt_get_errno>
    a6e0:	1007883a 	mov	r3,r2
    a6e4:	00801444 	movi	r2,81
    a6e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a6ec:	00bfffc4 	movi	r2,-1
    a6f0:	e0bffe15 	stw	r2,-8(fp)
    a6f4:	e0bffe17 	ldw	r2,-8(fp)
}
    a6f8:	e037883a 	mov	sp,fp
    a6fc:	dfc00117 	ldw	ra,4(sp)
    a700:	df000017 	ldw	fp,0(sp)
    a704:	dec00204 	addi	sp,sp,8
    a708:	f800283a 	ret

0000a70c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a70c:	defffd04 	addi	sp,sp,-12
    a710:	dfc00215 	stw	ra,8(sp)
    a714:	df000115 	stw	fp,4(sp)
    a718:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a71c:	00800074 	movhi	r2,1
    a720:	1081d304 	addi	r2,r2,1868
    a724:	10800017 	ldw	r2,0(r2)
    a728:	1005003a 	cmpeq	r2,r2,zero
    a72c:	1000061e 	bne	r2,zero,a748 <alt_get_errno+0x3c>
    a730:	00800074 	movhi	r2,1
    a734:	1081d304 	addi	r2,r2,1868
    a738:	10800017 	ldw	r2,0(r2)
    a73c:	103ee83a 	callr	r2
    a740:	e0bfff15 	stw	r2,-4(fp)
    a744:	00000306 	br	a754 <alt_get_errno+0x48>
    a748:	00800074 	movhi	r2,1
    a74c:	1081e004 	addi	r2,r2,1920
    a750:	e0bfff15 	stw	r2,-4(fp)
    a754:	e0bfff17 	ldw	r2,-4(fp)
}
    a758:	e037883a 	mov	sp,fp
    a75c:	dfc00117 	ldw	ra,4(sp)
    a760:	df000017 	ldw	fp,0(sp)
    a764:	dec00204 	addi	sp,sp,8
    a768:	f800283a 	ret

0000a76c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a76c:	defffd04 	addi	sp,sp,-12
    a770:	dfc00215 	stw	ra,8(sp)
    a774:	df000115 	stw	fp,4(sp)
    a778:	df000104 	addi	fp,sp,4
    a77c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    a780:	000dba80 	call	dba8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a784:	00800044 	movi	r2,1
    a788:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a78c:	e037883a 	mov	sp,fp
    a790:	dfc00117 	ldw	ra,4(sp)
    a794:	df000017 	ldw	fp,0(sp)
    a798:	dec00204 	addi	sp,sp,8
    a79c:	f800283a 	ret

0000a7a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a7a0:	defffe04 	addi	sp,sp,-8
    a7a4:	dfc00115 	stw	ra,4(sp)
    a7a8:	df000015 	stw	fp,0(sp)
    a7ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    a7b0:	01008074 	movhi	r4,513
    a7b4:	2128b804 	addi	r4,r4,-23840
    a7b8:	000b883a 	mov	r5,zero
    a7bc:	000d883a 	mov	r6,zero
    a7c0:	01c0fa04 	movi	r7,1000
    a7c4:	000bdf00 	call	bdf0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    a7c8:	01000074 	movhi	r4,1
    a7cc:	213c8804 	addi	r4,r4,-3552
    a7d0:	000a8f00 	call	a8f0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    a7d4:	01000074 	movhi	r4,1
    a7d8:	213cc404 	addi	r4,r4,-3312
    a7dc:	000b883a 	mov	r5,zero
    a7e0:	018000c4 	movi	r6,3
    a7e4:	000b41c0 	call	b41c <altera_avalon_jtag_uart_init>
    a7e8:	01000074 	movhi	r4,1
    a7ec:	213cba04 	addi	r4,r4,-3352
    a7f0:	000a8b80 	call	a8b8 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    a7f4:	00c08074 	movhi	r3,513
    a7f8:	18e80004 	addi	r3,r3,-24576
    a7fc:	00800044 	movi	r2,1
    a800:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
    a804:	01000074 	movhi	r4,1
    a808:	2100dc04 	addi	r4,r4,880
    a80c:	000b883a 	mov	r5,zero
    a810:	01800184 	movi	r6,6
    a814:	000bf780 	call	bf78 <altera_avalon_uart_init>
    a818:	01000074 	movhi	r4,1
    a81c:	2100d204 	addi	r4,r4,840
    a820:	000a8b80 	call	a8b8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
    a824:	01000074 	movhi	r4,1
    a828:	21010d04 	addi	r4,r4,1076
    a82c:	000b883a 	mov	r5,zero
    a830:	018001c4 	movi	r6,7
    a834:	000bf780 	call	bf78 <altera_avalon_uart_init>
    a838:	01000074 	movhi	r4,1
    a83c:	21010304 	addi	r4,r4,1036
    a840:	000a8b80 	call	a8b8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
    a844:	01000074 	movhi	r4,1
    a848:	21013e04 	addi	r4,r4,1272
    a84c:	000b883a 	mov	r5,zero
    a850:	01800204 	movi	r6,8
    a854:	000bf780 	call	bf78 <altera_avalon_uart_init>
    a858:	01000074 	movhi	r4,1
    a85c:	21013404 	addi	r4,r4,1232
    a860:	000a8b80 	call	a8b8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
    a864:	01000074 	movhi	r4,1
    a868:	21016f04 	addi	r4,r4,1468
    a86c:	000b883a 	mov	r5,zero
    a870:	01800244 	movi	r6,9
    a874:	000bf780 	call	bf78 <altera_avalon_uart_init>
    a878:	01000074 	movhi	r4,1
    a87c:	21016504 	addi	r4,r4,1428
    a880:	000a8b80 	call	a8b8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    a884:	01000074 	movhi	r4,1
    a888:	2101a004 	addi	r4,r4,1664
    a88c:	000b883a 	mov	r5,zero
    a890:	01800104 	movi	r6,4
    a894:	000bf780 	call	bf78 <altera_avalon_uart_init>
    a898:	01000074 	movhi	r4,1
    a89c:	21019604 	addi	r4,r4,1624
    a8a0:	000a8b80 	call	a8b8 <alt_dev_reg>
}
    a8a4:	e037883a 	mov	sp,fp
    a8a8:	dfc00117 	ldw	ra,4(sp)
    a8ac:	df000017 	ldw	fp,0(sp)
    a8b0:	dec00204 	addi	sp,sp,8
    a8b4:	f800283a 	ret

0000a8b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a8b8:	defffd04 	addi	sp,sp,-12
    a8bc:	dfc00215 	stw	ra,8(sp)
    a8c0:	df000115 	stw	fp,4(sp)
    a8c4:	df000104 	addi	fp,sp,4
    a8c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a8cc:	e13fff17 	ldw	r4,-4(fp)
    a8d0:	01400074 	movhi	r5,1
    a8d4:	2941d004 	addi	r5,r5,1856
    a8d8:	000d0580 	call	d058 <alt_dev_llist_insert>
}
    a8dc:	e037883a 	mov	sp,fp
    a8e0:	dfc00117 	ldw	ra,4(sp)
    a8e4:	df000017 	ldw	fp,0(sp)
    a8e8:	dec00204 	addi	sp,sp,8
    a8ec:	f800283a 	ret

0000a8f0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    a8f0:	defffc04 	addi	sp,sp,-16
    a8f4:	dfc00315 	stw	ra,12(sp)
    a8f8:	df000215 	stw	fp,8(sp)
    a8fc:	df000204 	addi	fp,sp,8
    a900:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    a904:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    a908:	e13fff17 	ldw	r4,-4(fp)
    a90c:	000a97c0 	call	a97c <alt_epcs_flash_query>
    a910:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    a914:	e0bffe17 	ldw	r2,-8(fp)
    a918:	1004c03a 	cmpne	r2,r2,zero
    a91c:	1000031e 	bne	r2,zero,a92c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    a920:	e13fff17 	ldw	r4,-4(fp)
    a924:	000a9440 	call	a944 <alt_flash_device_register>
    a928:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    a92c:	e0bffe17 	ldw	r2,-8(fp)
}
    a930:	e037883a 	mov	sp,fp
    a934:	dfc00117 	ldw	ra,4(sp)
    a938:	df000017 	ldw	fp,0(sp)
    a93c:	dec00204 	addi	sp,sp,8
    a940:	f800283a 	ret

0000a944 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    a944:	defffd04 	addi	sp,sp,-12
    a948:	dfc00215 	stw	ra,8(sp)
    a94c:	df000115 	stw	fp,4(sp)
    a950:	df000104 	addi	fp,sp,4
    a954:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    a958:	e13fff17 	ldw	r4,-4(fp)
    a95c:	01400074 	movhi	r5,1
    a960:	2941d504 	addi	r5,r5,1876
    a964:	000d0580 	call	d058 <alt_dev_llist_insert>
}
    a968:	e037883a 	mov	sp,fp
    a96c:	dfc00117 	ldw	ra,4(sp)
    a970:	df000017 	ldw	fp,0(sp)
    a974:	dec00204 	addi	sp,sp,8
    a978:	f800283a 	ret

0000a97c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    a97c:	defffc04 	addi	sp,sp,-16
    a980:	dfc00315 	stw	ra,12(sp)
    a984:	df000215 	stw	fp,8(sp)
    a988:	df000204 	addi	fp,sp,8
    a98c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    a990:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    a994:	e0bfff17 	ldw	r2,-4(fp)
    a998:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    a99c:	e0bfff17 	ldw	r2,-4(fp)
    a9a0:	11002d17 	ldw	r4,180(r2)
    a9a4:	000cd680 	call	cd68 <epcs_read_electronic_signature>
    a9a8:	10c03fcc 	andi	r3,r2,255
    a9ac:	e0bfff17 	ldw	r2,-4(fp)
    a9b0:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    a9b4:	e0bfff17 	ldw	r2,-4(fp)
    a9b8:	10802f17 	ldw	r2,188(r2)
    a9bc:	10800598 	cmpnei	r2,r2,22
    a9c0:	10000a1e 	bne	r2,zero,a9ec <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    a9c4:	e0ffff17 	ldw	r3,-4(fp)
    a9c8:	00802034 	movhi	r2,128
    a9cc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
    a9d0:	e0ffff17 	ldw	r3,-4(fp)
    a9d4:	00802004 	movi	r2,128
    a9d8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    a9dc:	e0ffff17 	ldw	r3,-4(fp)
    a9e0:	00800074 	movhi	r2,1
    a9e4:	18801015 	stw	r2,64(r3)
    a9e8:	00007306 	br	abb8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    a9ec:	e0bfff17 	ldw	r2,-4(fp)
    a9f0:	10802f17 	ldw	r2,188(r2)
    a9f4:	10800518 	cmpnei	r2,r2,20
    a9f8:	10000a1e 	bne	r2,zero,aa24 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    a9fc:	e0ffff17 	ldw	r3,-4(fp)
    aa00:	00800834 	movhi	r2,32
    aa04:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
    aa08:	e0ffff17 	ldw	r3,-4(fp)
    aa0c:	00800804 	movi	r2,32
    aa10:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    aa14:	e0ffff17 	ldw	r3,-4(fp)
    aa18:	00800074 	movhi	r2,1
    aa1c:	18801015 	stw	r2,64(r3)
    aa20:	00006506 	br	abb8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    aa24:	e0bfff17 	ldw	r2,-4(fp)
    aa28:	10802f17 	ldw	r2,188(r2)
    aa2c:	108004d8 	cmpnei	r2,r2,19
    aa30:	10000a1e 	bne	r2,zero,aa5c <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    aa34:	e0ffff17 	ldw	r3,-4(fp)
    aa38:	00800434 	movhi	r2,16
    aa3c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
    aa40:	e0ffff17 	ldw	r3,-4(fp)
    aa44:	00800404 	movi	r2,16
    aa48:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    aa4c:	e0ffff17 	ldw	r3,-4(fp)
    aa50:	00800074 	movhi	r2,1
    aa54:	18801015 	stw	r2,64(r3)
    aa58:	00005706 	br	abb8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    aa5c:	e0bfff17 	ldw	r2,-4(fp)
    aa60:	10802f17 	ldw	r2,188(r2)
    aa64:	10800498 	cmpnei	r2,r2,18
    aa68:	10000a1e 	bne	r2,zero,aa94 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    aa6c:	e0ffff17 	ldw	r3,-4(fp)
    aa70:	00800234 	movhi	r2,8
    aa74:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
    aa78:	e0ffff17 	ldw	r3,-4(fp)
    aa7c:	00800204 	movi	r2,8
    aa80:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    aa84:	e0ffff17 	ldw	r3,-4(fp)
    aa88:	00800074 	movhi	r2,1
    aa8c:	18801015 	stw	r2,64(r3)
    aa90:	00004906 	br	abb8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    aa94:	e0bfff17 	ldw	r2,-4(fp)
    aa98:	10802f17 	ldw	r2,188(r2)
    aa9c:	10800418 	cmpnei	r2,r2,16
    aaa0:	10000a1e 	bne	r2,zero,aacc <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    aaa4:	e0ffff17 	ldw	r3,-4(fp)
    aaa8:	008000b4 	movhi	r2,2
    aaac:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
    aab0:	e0ffff17 	ldw	r3,-4(fp)
    aab4:	00800104 	movi	r2,4
    aab8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
    aabc:	e0ffff17 	ldw	r3,-4(fp)
    aac0:	00a00014 	movui	r2,32768
    aac4:	18801015 	stw	r2,64(r3)
    aac8:	00003b06 	br	abb8 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    aacc:	e0bfff17 	ldw	r2,-4(fp)
    aad0:	11002d17 	ldw	r4,180(r2)
    aad4:	000cdd40 	call	cdd4 <epcs_read_device_id>
    aad8:	1007883a 	mov	r3,r2
    aadc:	e0bfff17 	ldw	r2,-4(fp)
    aae0:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    aae4:	e0bfff17 	ldw	r2,-4(fp)
    aae8:	10c02f17 	ldw	r3,188(r2)
    aaec:	00804034 	movhi	r2,256
    aaf0:	10bfffc4 	addi	r2,r2,-1
    aaf4:	1886703a 	and	r3,r3,r2
    aaf8:	00800874 	movhi	r2,33
    aafc:	10ae8604 	addi	r2,r2,-17896
    ab00:	18800a1e 	bne	r3,r2,ab2c <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    ab04:	e0ffff17 	ldw	r3,-4(fp)
    ab08:	00804034 	movhi	r2,256
    ab0c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    ab10:	e0ffff17 	ldw	r3,-4(fp)
    ab14:	00804004 	movi	r2,256
    ab18:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ab1c:	e0ffff17 	ldw	r3,-4(fp)
    ab20:	00800074 	movhi	r2,1
    ab24:	18801015 	stw	r2,64(r3)
    ab28:	00002306 	br	abb8 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    ab2c:	e0bfff17 	ldw	r2,-4(fp)
    ab30:	10802f17 	ldw	r2,188(r2)
    ab34:	10803fcc 	andi	r2,r2,255
    ab38:	10800618 	cmpnei	r2,r2,24
    ab3c:	10000a1e 	bne	r2,zero,ab68 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    ab40:	e0ffff17 	ldw	r3,-4(fp)
    ab44:	00804034 	movhi	r2,256
    ab48:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
    ab4c:	e0ffff17 	ldw	r3,-4(fp)
    ab50:	00801004 	movi	r2,64
    ab54:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
    ab58:	e0ffff17 	ldw	r3,-4(fp)
    ab5c:	00800134 	movhi	r2,4
    ab60:	18801015 	stw	r2,64(r3)
    ab64:	00001406 	br	abb8 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    ab68:	e0bfff17 	ldw	r2,-4(fp)
    ab6c:	10802f17 	ldw	r2,188(r2)
    ab70:	10803fcc 	andi	r2,r2,255
    ab74:	10800658 	cmpnei	r2,r2,25
    ab78:	10000d1e 	bne	r2,zero,abb0 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    ab7c:	e0ffff17 	ldw	r3,-4(fp)
    ab80:	00808034 	movhi	r2,512
    ab84:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    ab88:	e0ffff17 	ldw	r3,-4(fp)
    ab8c:	00808004 	movi	r2,512
    ab90:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ab94:	e0ffff17 	ldw	r3,-4(fp)
    ab98:	00800074 	movhi	r2,1
    ab9c:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    aba0:	e0ffff17 	ldw	r3,-4(fp)
    aba4:	00800044 	movi	r2,1
    aba8:	18803115 	stw	r2,196(r3)
    abac:	00000206 	br	abb8 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    abb0:	00bffb44 	movi	r2,-19
    abb4:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    abb8:	e0bfff17 	ldw	r2,-4(fp)
    abbc:	10800e17 	ldw	r2,56(r2)
    abc0:	1007883a 	mov	r3,r2
    abc4:	e0bfff17 	ldw	r2,-4(fp)
    abc8:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
    abcc:	e0ffff17 	ldw	r3,-4(fp)
    abd0:	00800044 	movi	r2,1
    abd4:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
    abd8:	e0bfff17 	ldw	r2,-4(fp)
    abdc:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    abe0:	e0ffff17 	ldw	r3,-4(fp)
    abe4:	00804004 	movi	r2,256
    abe8:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
    abec:	e0bffe17 	ldw	r2,-8(fp)
}
    abf0:	e037883a 	mov	sp,fp
    abf4:	dfc00117 	ldw	ra,4(sp)
    abf8:	df000017 	ldw	fp,0(sp)
    abfc:	dec00204 	addi	sp,sp,8
    ac00:	f800283a 	ret

0000ac04 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    ac04:	deffeb04 	addi	sp,sp,-84
    ac08:	dfc01415 	stw	ra,80(sp)
    ac0c:	df001315 	stw	fp,76(sp)
    ac10:	df001304 	addi	fp,sp,76
    ac14:	e13ff915 	stw	r4,-28(fp)
    ac18:	e17ffa15 	stw	r5,-24(fp)
    ac1c:	e1bffb15 	stw	r6,-20(fp)
    ac20:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    ac24:	00800804 	movi	r2,32
    ac28:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
    ac2c:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
    ac30:	00002c06 	br	ace4 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    ac34:	e0bff017 	ldw	r2,-64(fp)
    ac38:	e0bfff15 	stw	r2,-4(fp)
    ac3c:	e0fffc17 	ldw	r3,-16(fp)
    ac40:	e0fffe15 	stw	r3,-8(fp)
    ac44:	e0bfff17 	ldw	r2,-4(fp)
    ac48:	e0fffe17 	ldw	r3,-8(fp)
    ac4c:	10c0022e 	bgeu	r2,r3,ac58 <alt_epcs_flash_memcmp+0x54>
    ac50:	e0bfff17 	ldw	r2,-4(fp)
    ac54:	e0bffe15 	stw	r2,-8(fp)
    ac58:	e0fffe17 	ldw	r3,-8(fp)
    ac5c:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    ac60:	e0fffb17 	ldw	r3,-20(fp)
    ac64:	e0bfef17 	ldw	r2,-68(fp)
    ac68:	188b883a 	add	r5,r3,r2
    ac6c:	e1bff104 	addi	r6,fp,-60
    ac70:	e13ff917 	ldw	r4,-28(fp)
    ac74:	e1ffee17 	ldw	r7,-72(fp)
    ac78:	000b23c0 	call	b23c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    ac7c:	1004403a 	cmpge	r2,r2,zero
    ac80:	1000031e 	bne	r2,zero,ac90 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    ac84:	00bfffc4 	movi	r2,-1
    ac88:	e0bffd15 	stw	r2,-12(fp)
    ac8c:	00001906 	br	acf4 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    ac90:	e0fffa17 	ldw	r3,-24(fp)
    ac94:	e0bfef17 	ldw	r2,-68(fp)
    ac98:	1889883a 	add	r4,r3,r2
    ac9c:	e1bfee17 	ldw	r6,-72(fp)
    aca0:	e17ff104 	addi	r5,fp,-60
    aca4:	000e0d00 	call	e0d0 <memcmp>
    aca8:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
    acac:	e0bfed17 	ldw	r2,-76(fp)
    acb0:	1005003a 	cmpeq	r2,r2,zero
    acb4:	1000031e 	bne	r2,zero,acc4 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
    acb8:	e0ffed17 	ldw	r3,-76(fp)
    acbc:	e0fffd15 	stw	r3,-12(fp)
    acc0:	00000c06 	br	acf4 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
    acc4:	e0ffee17 	ldw	r3,-72(fp)
    acc8:	e0bffc17 	ldw	r2,-16(fp)
    accc:	10c5c83a 	sub	r2,r2,r3
    acd0:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
    acd4:	e0ffef17 	ldw	r3,-68(fp)
    acd8:	e0bfee17 	ldw	r2,-72(fp)
    acdc:	1885883a 	add	r2,r3,r2
    ace0:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    ace4:	e0bffc17 	ldw	r2,-16(fp)
    ace8:	1004c03a 	cmpne	r2,r2,zero
    acec:	103fd11e 	bne	r2,zero,ac34 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    acf0:	e03ffd15 	stw	zero,-12(fp)
    acf4:	e0bffd17 	ldw	r2,-12(fp)
}
    acf8:	e037883a 	mov	sp,fp
    acfc:	dfc00117 	ldw	ra,4(sp)
    ad00:	df000017 	ldw	fp,0(sp)
    ad04:	dec00204 	addi	sp,sp,8
    ad08:	f800283a 	ret

0000ad0c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    ad0c:	defff204 	addi	sp,sp,-56
    ad10:	dfc00d15 	stw	ra,52(sp)
    ad14:	df000c15 	stw	fp,48(sp)
    ad18:	df000c04 	addi	fp,sp,48
    ad1c:	e13ffa15 	stw	r4,-24(fp)
    ad20:	e17ffb15 	stw	r5,-20(fp)
    ad24:	e1bffc15 	stw	r6,-16(fp)
    ad28:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
    ad2c:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    ad30:	e03ff815 	stw	zero,-32(fp)
    ad34:	00008b06 	br	af64 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    ad38:	e0bff817 	ldw	r2,-32(fp)
    ad3c:	e0fffa17 	ldw	r3,-24(fp)
    ad40:	1004913a 	slli	r2,r2,4
    ad44:	10c5883a 	add	r2,r2,r3
    ad48:	10800d04 	addi	r2,r2,52
    ad4c:	10c00017 	ldw	r3,0(r2)
    ad50:	e0bffb17 	ldw	r2,-20(fp)
    ad54:	10c08016 	blt	r2,r3,af58 <alt_epcs_flash_write+0x24c>
    ad58:	e0bff817 	ldw	r2,-32(fp)
    ad5c:	e0fffa17 	ldw	r3,-24(fp)
    ad60:	1004913a 	slli	r2,r2,4
    ad64:	10c5883a 	add	r2,r2,r3
    ad68:	10800d04 	addi	r2,r2,52
    ad6c:	11000017 	ldw	r4,0(r2)
    ad70:	e0bff817 	ldw	r2,-32(fp)
    ad74:	e0fffa17 	ldw	r3,-24(fp)
    ad78:	1004913a 	slli	r2,r2,4
    ad7c:	10c5883a 	add	r2,r2,r3
    ad80:	10800e04 	addi	r2,r2,56
    ad84:	10800017 	ldw	r2,0(r2)
    ad88:	2087883a 	add	r3,r4,r2
    ad8c:	e0bffb17 	ldw	r2,-20(fp)
    ad90:	10c0710e 	bge	r2,r3,af58 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    ad94:	e0bff817 	ldw	r2,-32(fp)
    ad98:	e0fffa17 	ldw	r3,-24(fp)
    ad9c:	1004913a 	slli	r2,r2,4
    ada0:	10c5883a 	add	r2,r2,r3
    ada4:	10800d04 	addi	r2,r2,52
    ada8:	10800017 	ldw	r2,0(r2)
    adac:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    adb0:	e03ff715 	stw	zero,-36(fp)
    adb4:	00006006 	br	af38 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
    adb8:	e0fffb17 	ldw	r3,-20(fp)
    adbc:	e0bff517 	ldw	r2,-44(fp)
    adc0:	18805116 	blt	r3,r2,af08 <alt_epcs_flash_write+0x1fc>
    adc4:	e0bff817 	ldw	r2,-32(fp)
    adc8:	e0fffa17 	ldw	r3,-24(fp)
    adcc:	1004913a 	slli	r2,r2,4
    add0:	10c5883a 	add	r2,r2,r3
    add4:	10801004 	addi	r2,r2,64
    add8:	10c00017 	ldw	r3,0(r2)
    addc:	e0bff517 	ldw	r2,-44(fp)
    ade0:	1887883a 	add	r3,r3,r2
    ade4:	e0bffb17 	ldw	r2,-20(fp)
    ade8:	10c0470e 	bge	r2,r3,af08 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    adec:	e0bff817 	ldw	r2,-32(fp)
    adf0:	e0fffa17 	ldw	r3,-24(fp)
    adf4:	1004913a 	slli	r2,r2,4
    adf8:	10c5883a 	add	r2,r2,r3
    adfc:	10801004 	addi	r2,r2,64
    ae00:	10c00017 	ldw	r3,0(r2)
    ae04:	e0bff517 	ldw	r2,-44(fp)
    ae08:	1887883a 	add	r3,r3,r2
    ae0c:	e0bffb17 	ldw	r2,-20(fp)
    ae10:	1885c83a 	sub	r2,r3,r2
    ae14:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    ae18:	e0bff617 	ldw	r2,-40(fp)
    ae1c:	e0bfff15 	stw	r2,-4(fp)
    ae20:	e0fffd17 	ldw	r3,-12(fp)
    ae24:	e0fffe15 	stw	r3,-8(fp)
    ae28:	e0bfff17 	ldw	r2,-4(fp)
    ae2c:	e0fffe17 	ldw	r3,-8(fp)
    ae30:	10c0020e 	bge	r2,r3,ae3c <alt_epcs_flash_write+0x130>
    ae34:	e0bfff17 	ldw	r2,-4(fp)
    ae38:	e0bffe15 	stw	r2,-8(fp)
    ae3c:	e0fffe17 	ldw	r3,-8(fp)
    ae40:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    ae44:	e1fff617 	ldw	r7,-40(fp)
    ae48:	e13ffa17 	ldw	r4,-24(fp)
    ae4c:	e17ffc17 	ldw	r5,-16(fp)
    ae50:	e1bffb17 	ldw	r6,-20(fp)
    ae54:	000ac040 	call	ac04 <alt_epcs_flash_memcmp>
    ae58:	1005003a 	cmpeq	r2,r2,zero
    ae5c:	1000131e 	bne	r2,zero,aeac <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    ae60:	e0bffa17 	ldw	r2,-24(fp)
    ae64:	10800817 	ldw	r2,32(r2)
    ae68:	e13ffa17 	ldw	r4,-24(fp)
    ae6c:	e17ff517 	ldw	r5,-44(fp)
    ae70:	103ee83a 	callr	r2
    ae74:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
    ae78:	e0bff917 	ldw	r2,-28(fp)
    ae7c:	1004c03a 	cmpne	r2,r2,zero
    ae80:	10000a1e 	bne	r2,zero,aeac <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
    ae84:	e0bffa17 	ldw	r2,-24(fp)
    ae88:	10c00917 	ldw	r3,36(r2)
    ae8c:	e0bff617 	ldw	r2,-40(fp)
    ae90:	d8800015 	stw	r2,0(sp)
    ae94:	e13ffa17 	ldw	r4,-24(fp)
    ae98:	e17ff517 	ldw	r5,-44(fp)
    ae9c:	e1bffb17 	ldw	r6,-20(fp)
    aea0:	e1fffc17 	ldw	r7,-16(fp)
    aea4:	183ee83a 	callr	r3
    aea8:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    aeac:	e0fffd17 	ldw	r3,-12(fp)
    aeb0:	e0bff617 	ldw	r2,-40(fp)
    aeb4:	18802f26 	beq	r3,r2,af74 <alt_epcs_flash_write+0x268>
    aeb8:	e0bff917 	ldw	r2,-28(fp)
    aebc:	1004c03a 	cmpne	r2,r2,zero
    aec0:	10002c1e 	bne	r2,zero,af74 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
    aec4:	e0fffd17 	ldw	r3,-12(fp)
    aec8:	e0bff617 	ldw	r2,-40(fp)
    aecc:	1885c83a 	sub	r2,r3,r2
    aed0:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    aed4:	e0bff817 	ldw	r2,-32(fp)
    aed8:	e0fffa17 	ldw	r3,-24(fp)
    aedc:	1004913a 	slli	r2,r2,4
    aee0:	10c5883a 	add	r2,r2,r3
    aee4:	10801004 	addi	r2,r2,64
    aee8:	10c00017 	ldw	r3,0(r2)
    aeec:	e0bff517 	ldw	r2,-44(fp)
    aef0:	1885883a 	add	r2,r3,r2
    aef4:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    aef8:	e0fffc17 	ldw	r3,-16(fp)
    aefc:	e0bff617 	ldw	r2,-40(fp)
    af00:	1885883a 	add	r2,r3,r2
    af04:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    af08:	e0bff817 	ldw	r2,-32(fp)
    af0c:	e0fffa17 	ldw	r3,-24(fp)
    af10:	1004913a 	slli	r2,r2,4
    af14:	10c5883a 	add	r2,r2,r3
    af18:	10801004 	addi	r2,r2,64
    af1c:	10c00017 	ldw	r3,0(r2)
    af20:	e0bff517 	ldw	r2,-44(fp)
    af24:	10c5883a 	add	r2,r2,r3
    af28:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    af2c:	e0bff717 	ldw	r2,-36(fp)
    af30:	10800044 	addi	r2,r2,1
    af34:	e0bff715 	stw	r2,-36(fp)
    af38:	e0bff817 	ldw	r2,-32(fp)
    af3c:	e0fffa17 	ldw	r3,-24(fp)
    af40:	1004913a 	slli	r2,r2,4
    af44:	10c5883a 	add	r2,r2,r3
    af48:	10800f04 	addi	r2,r2,60
    af4c:	10c00017 	ldw	r3,0(r2)
    af50:	e0bff717 	ldw	r2,-36(fp)
    af54:	10ff9816 	blt	r2,r3,adb8 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    af58:	e0bff817 	ldw	r2,-32(fp)
    af5c:	10800044 	addi	r2,r2,1
    af60:	e0bff815 	stw	r2,-32(fp)
    af64:	e0bffa17 	ldw	r2,-24(fp)
    af68:	10c00c17 	ldw	r3,48(r2)
    af6c:	e0bff817 	ldw	r2,-32(fp)
    af70:	10ff7116 	blt	r2,r3,ad38 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    af74:	e0bff917 	ldw	r2,-28(fp)
}
    af78:	e037883a 	mov	sp,fp
    af7c:	dfc00117 	ldw	ra,4(sp)
    af80:	df000017 	ldw	fp,0(sp)
    af84:	dec00204 	addi	sp,sp,8
    af88:	f800283a 	ret

0000af8c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    af8c:	defffa04 	addi	sp,sp,-24
    af90:	df000515 	stw	fp,20(sp)
    af94:	df000504 	addi	fp,sp,20
    af98:	e13ffd15 	stw	r4,-12(fp)
    af9c:	e17ffe15 	stw	r5,-8(fp)
    afa0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    afa4:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    afa8:	e0bffd17 	ldw	r2,-12(fp)
    afac:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
    afb0:	e0bffb17 	ldw	r2,-20(fp)
    afb4:	10c00c17 	ldw	r3,48(r2)
    afb8:	e0bfff17 	ldw	r2,-4(fp)
    afbc:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    afc0:	e0bffb17 	ldw	r2,-20(fp)
    afc4:	10800c17 	ldw	r2,48(r2)
    afc8:	1004c03a 	cmpne	r2,r2,zero
    afcc:	1000031e 	bne	r2,zero,afdc <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
    afd0:	00bffec4 	movi	r2,-5
    afd4:	e0bffc15 	stw	r2,-16(fp)
    afd8:	00000b06 	br	b008 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    afdc:	e0bffb17 	ldw	r2,-20(fp)
    afe0:	10800c17 	ldw	r2,48(r2)
    afe4:	10800250 	cmplti	r2,r2,9
    afe8:	1000031e 	bne	r2,zero,aff8 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
    afec:	00bffd04 	movi	r2,-12
    aff0:	e0bffc15 	stw	r2,-16(fp)
    aff4:	00000406 	br	b008 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
    aff8:	e0bffb17 	ldw	r2,-20(fp)
    affc:	10c00d04 	addi	r3,r2,52
    b000:	e0bffe17 	ldw	r2,-8(fp)
    b004:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    b008:	e0bffc17 	ldw	r2,-16(fp)
}
    b00c:	e037883a 	mov	sp,fp
    b010:	df000017 	ldw	fp,0(sp)
    b014:	dec00104 	addi	sp,sp,4
    b018:	f800283a 	ret

0000b01c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    b01c:	defffa04 	addi	sp,sp,-24
    b020:	dfc00515 	stw	ra,20(sp)
    b024:	df000415 	stw	fp,16(sp)
    b028:	df000404 	addi	fp,sp,16
    b02c:	e13ffe15 	stw	r4,-8(fp)
    b030:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    b034:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b038:	e0bffe17 	ldw	r2,-8(fp)
    b03c:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    b040:	e13ffe17 	ldw	r4,-8(fp)
    b044:	e17fff17 	ldw	r5,-4(fp)
    b048:	000b08c0 	call	b08c <alt_epcs_test_address>
    b04c:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
    b050:	e0bffd17 	ldw	r2,-12(fp)
    b054:	1004803a 	cmplt	r2,r2,zero
    b058:	1000061e 	bne	r2,zero,b074 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    b05c:	e0bffc17 	ldw	r2,-16(fp)
    b060:	11002d17 	ldw	r4,180(r2)
    b064:	e17fff17 	ldw	r5,-4(fp)
    b068:	e0bffc17 	ldw	r2,-16(fp)
    b06c:	11803117 	ldw	r6,196(r2)
    b070:	000c8900 	call	c890 <epcs_sector_erase>
  }
  return ret_code;
    b074:	e0bffd17 	ldw	r2,-12(fp)
}
    b078:	e037883a 	mov	sp,fp
    b07c:	dfc00117 	ldw	ra,4(sp)
    b080:	df000017 	ldw	fp,0(sp)
    b084:	dec00204 	addi	sp,sp,8
    b088:	f800283a 	ret

0000b08c <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    b08c:	defff904 	addi	sp,sp,-28
    b090:	df000615 	stw	fp,24(sp)
    b094:	df000604 	addi	fp,sp,24
    b098:	e13ffe15 	stw	r4,-8(fp)
    b09c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    b0a0:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b0a4:	e0bffe17 	ldw	r2,-8(fp)
    b0a8:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    b0ac:	e0bffc17 	ldw	r2,-16(fp)
    b0b0:	10800c17 	ldw	r2,48(r2)
    b0b4:	10bfffc4 	addi	r2,r2,-1
    b0b8:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    b0bc:	e0bffb17 	ldw	r2,-20(fp)
    b0c0:	e0fffc17 	ldw	r3,-16(fp)
    b0c4:	1004913a 	slli	r2,r2,4
    b0c8:	10c5883a 	add	r2,r2,r3
    b0cc:	10800d04 	addi	r2,r2,52
    b0d0:	11000017 	ldw	r4,0(r2)
    b0d4:	e0bffb17 	ldw	r2,-20(fp)
    b0d8:	e0fffc17 	ldw	r3,-16(fp)
    b0dc:	1004913a 	slli	r2,r2,4
    b0e0:	10c5883a 	add	r2,r2,r3
    b0e4:	10800e04 	addi	r2,r2,56
    b0e8:	10800017 	ldw	r2,0(r2)
    b0ec:	2085883a 	add	r2,r4,r2
    b0f0:	10bfffc4 	addi	r2,r2,-1
    b0f4:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
    b0f8:	e0ffff17 	ldw	r3,-4(fp)
    b0fc:	e0bffa17 	ldw	r2,-24(fp)
    b100:	10c0022e 	bgeu	r2,r3,b10c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    b104:	00bffec4 	movi	r2,-5
    b108:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
    b10c:	e0bffd17 	ldw	r2,-12(fp)
}
    b110:	e037883a 	mov	sp,fp
    b114:	df000017 	ldw	fp,0(sp)
    b118:	dec00104 	addi	sp,sp,4
    b11c:	f800283a 	ret

0000b120 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    b120:	defff204 	addi	sp,sp,-56
    b124:	dfc00d15 	stw	ra,52(sp)
    b128:	df000c15 	stw	fp,48(sp)
    b12c:	df000c04 	addi	fp,sp,48
    b130:	e13ffa15 	stw	r4,-24(fp)
    b134:	e17ffb15 	stw	r5,-20(fp)
    b138:	e1bffc15 	stw	r6,-16(fp)
    b13c:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b140:	e0bffa17 	ldw	r2,-24(fp)
    b144:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    b148:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    b14c:	e13ffa17 	ldw	r4,-24(fp)
    b150:	e17ffc17 	ldw	r5,-16(fp)
    b154:	000b08c0 	call	b08c <alt_epcs_test_address>
    b158:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    b15c:	e0bff917 	ldw	r2,-28(fp)
    b160:	1004803a 	cmplt	r2,r2,zero
    b164:	10002f1e 	bne	r2,zero,b224 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    b168:	00002b06 	br	b218 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    b16c:	e0bff817 	ldw	r2,-32(fp)
    b170:	10c03017 	ldw	r3,192(r2)
    b174:	e0bffc17 	ldw	r2,-16(fp)
    b178:	1887883a 	add	r3,r3,r2
    b17c:	e0bff817 	ldw	r2,-32(fp)
    b180:	10803017 	ldw	r2,192(r2)
    b184:	0085c83a 	sub	r2,zero,r2
    b188:	1884703a 	and	r2,r3,r2
    b18c:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    b190:	e0fff517 	ldw	r3,-44(fp)
    b194:	e0bffc17 	ldw	r2,-16(fp)
    b198:	1885c83a 	sub	r2,r3,r2
    b19c:	e0c00217 	ldw	r3,8(fp)
    b1a0:	e0ffff15 	stw	r3,-4(fp)
    b1a4:	e0bffe15 	stw	r2,-8(fp)
    b1a8:	e0bfff17 	ldw	r2,-4(fp)
    b1ac:	e0fffe17 	ldw	r3,-8(fp)
    b1b0:	10c0020e 	bge	r2,r3,b1bc <alt_epcs_flash_write_block+0x9c>
    b1b4:	e0bfff17 	ldw	r2,-4(fp)
    b1b8:	e0bffe15 	stw	r2,-8(fp)
    b1bc:	e0fffe17 	ldw	r3,-8(fp)
    b1c0:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    b1c4:	e0bff817 	ldw	r2,-32(fp)
    b1c8:	11002d17 	ldw	r4,180(r2)
    b1cc:	e0fffd17 	ldw	r3,-12(fp)
    b1d0:	e0bff717 	ldw	r2,-36(fp)
    b1d4:	188d883a 	add	r6,r3,r2
    b1d8:	e0bff817 	ldw	r2,-32(fp)
    b1dc:	10803117 	ldw	r2,196(r2)
    b1e0:	d8800015 	stw	r2,0(sp)
    b1e4:	e17ffc17 	ldw	r5,-16(fp)
    b1e8:	e1fff617 	ldw	r7,-40(fp)
    b1ec:	000cbf80 	call	cbf8 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    b1f0:	e0c00217 	ldw	r3,8(fp)
    b1f4:	e0bff617 	ldw	r2,-40(fp)
    b1f8:	1885c83a 	sub	r2,r3,r2
    b1fc:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    b200:	e0fff717 	ldw	r3,-36(fp)
    b204:	e0bff617 	ldw	r2,-40(fp)
    b208:	1885883a 	add	r2,r3,r2
    b20c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    b210:	e0bff517 	ldw	r2,-44(fp)
    b214:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    b218:	e0800217 	ldw	r2,8(fp)
    b21c:	1004c03a 	cmpne	r2,r2,zero
    b220:	103fd21e 	bne	r2,zero,b16c <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    b224:	e0bff917 	ldw	r2,-28(fp)
}
    b228:	e037883a 	mov	sp,fp
    b22c:	dfc00117 	ldw	ra,4(sp)
    b230:	df000017 	ldw	fp,0(sp)
    b234:	dec00204 	addi	sp,sp,8
    b238:	f800283a 	ret

0000b23c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    b23c:	defff704 	addi	sp,sp,-36
    b240:	dfc00815 	stw	ra,32(sp)
    b244:	df000715 	stw	fp,28(sp)
    b248:	df000704 	addi	fp,sp,28
    b24c:	e13ffc15 	stw	r4,-16(fp)
    b250:	e17ffd15 	stw	r5,-12(fp)
    b254:	e1bffe15 	stw	r6,-8(fp)
    b258:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    b25c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b260:	e0bffc17 	ldw	r2,-16(fp)
    b264:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    b268:	e13ffc17 	ldw	r4,-16(fp)
    b26c:	e17ffd17 	ldw	r5,-12(fp)
    b270:	000b08c0 	call	b08c <alt_epcs_test_address>
    b274:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
    b278:	e0bffb17 	ldw	r2,-20(fp)
    b27c:	1004803a 	cmplt	r2,r2,zero
    b280:	10000e1e 	bne	r2,zero,b2bc <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    b284:	e0bffa17 	ldw	r2,-24(fp)
    b288:	11002d17 	ldw	r4,180(r2)
    b28c:	e1bffe17 	ldw	r6,-8(fp)
    b290:	e0bffa17 	ldw	r2,-24(fp)
    b294:	10803117 	ldw	r2,196(r2)
    b298:	d8800015 	stw	r2,0(sp)
    b29c:	e17ffd17 	ldw	r5,-12(fp)
    b2a0:	e1ffff17 	ldw	r7,-4(fp)
    b2a4:	000c9f80 	call	c9f8 <epcs_read_buffer>
    b2a8:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    b2ac:	e0fffb17 	ldw	r3,-20(fp)
    b2b0:	e0bfff17 	ldw	r2,-4(fp)
    b2b4:	1880011e 	bne	r3,r2,b2bc <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    b2b8:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
    b2bc:	e0bffb17 	ldw	r2,-20(fp)
}
    b2c0:	e037883a 	mov	sp,fp
    b2c4:	dfc00117 	ldw	ra,4(sp)
    b2c8:	df000017 	ldw	fp,0(sp)
    b2cc:	dec00204 	addi	sp,sp,8
    b2d0:	f800283a 	ret

0000b2d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b2d4:	defffa04 	addi	sp,sp,-24
    b2d8:	dfc00515 	stw	ra,20(sp)
    b2dc:	df000415 	stw	fp,16(sp)
    b2e0:	df000404 	addi	fp,sp,16
    b2e4:	e13ffd15 	stw	r4,-12(fp)
    b2e8:	e17ffe15 	stw	r5,-8(fp)
    b2ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b2f0:	e0bffd17 	ldw	r2,-12(fp)
    b2f4:	10800017 	ldw	r2,0(r2)
    b2f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b2fc:	e0bffc17 	ldw	r2,-16(fp)
    b300:	11000a04 	addi	r4,r2,40
    b304:	e0bffd17 	ldw	r2,-12(fp)
    b308:	11c00217 	ldw	r7,8(r2)
    b30c:	e17ffe17 	ldw	r5,-8(fp)
    b310:	e1bfff17 	ldw	r6,-4(fp)
    b314:	000b91c0 	call	b91c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b318:	e037883a 	mov	sp,fp
    b31c:	dfc00117 	ldw	ra,4(sp)
    b320:	df000017 	ldw	fp,0(sp)
    b324:	dec00204 	addi	sp,sp,8
    b328:	f800283a 	ret

0000b32c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b32c:	defffa04 	addi	sp,sp,-24
    b330:	dfc00515 	stw	ra,20(sp)
    b334:	df000415 	stw	fp,16(sp)
    b338:	df000404 	addi	fp,sp,16
    b33c:	e13ffd15 	stw	r4,-12(fp)
    b340:	e17ffe15 	stw	r5,-8(fp)
    b344:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b348:	e0bffd17 	ldw	r2,-12(fp)
    b34c:	10800017 	ldw	r2,0(r2)
    b350:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b354:	e0bffc17 	ldw	r2,-16(fp)
    b358:	11000a04 	addi	r4,r2,40
    b35c:	e0bffd17 	ldw	r2,-12(fp)
    b360:	11c00217 	ldw	r7,8(r2)
    b364:	e17ffe17 	ldw	r5,-8(fp)
    b368:	e1bfff17 	ldw	r6,-4(fp)
    b36c:	000bb400 	call	bb40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b370:	e037883a 	mov	sp,fp
    b374:	dfc00117 	ldw	ra,4(sp)
    b378:	df000017 	ldw	fp,0(sp)
    b37c:	dec00204 	addi	sp,sp,8
    b380:	f800283a 	ret

0000b384 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b384:	defffc04 	addi	sp,sp,-16
    b388:	dfc00315 	stw	ra,12(sp)
    b38c:	df000215 	stw	fp,8(sp)
    b390:	df000204 	addi	fp,sp,8
    b394:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b398:	e0bfff17 	ldw	r2,-4(fp)
    b39c:	10800017 	ldw	r2,0(r2)
    b3a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b3a4:	e0bffe17 	ldw	r2,-8(fp)
    b3a8:	11000a04 	addi	r4,r2,40
    b3ac:	e0bfff17 	ldw	r2,-4(fp)
    b3b0:	11400217 	ldw	r5,8(r2)
    b3b4:	000b7b40 	call	b7b4 <altera_avalon_jtag_uart_close>
}
    b3b8:	e037883a 	mov	sp,fp
    b3bc:	dfc00117 	ldw	ra,4(sp)
    b3c0:	df000017 	ldw	fp,0(sp)
    b3c4:	dec00204 	addi	sp,sp,8
    b3c8:	f800283a 	ret

0000b3cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b3cc:	defffa04 	addi	sp,sp,-24
    b3d0:	dfc00515 	stw	ra,20(sp)
    b3d4:	df000415 	stw	fp,16(sp)
    b3d8:	df000404 	addi	fp,sp,16
    b3dc:	e13ffd15 	stw	r4,-12(fp)
    b3e0:	e17ffe15 	stw	r5,-8(fp)
    b3e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b3e8:	e0bffd17 	ldw	r2,-12(fp)
    b3ec:	10800017 	ldw	r2,0(r2)
    b3f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b3f4:	e0bffc17 	ldw	r2,-16(fp)
    b3f8:	11000a04 	addi	r4,r2,40
    b3fc:	e17ffe17 	ldw	r5,-8(fp)
    b400:	e1bfff17 	ldw	r6,-4(fp)
    b404:	000b8280 	call	b828 <altera_avalon_jtag_uart_ioctl>
}
    b408:	e037883a 	mov	sp,fp
    b40c:	dfc00117 	ldw	ra,4(sp)
    b410:	df000017 	ldw	fp,0(sp)
    b414:	dec00204 	addi	sp,sp,8
    b418:	f800283a 	ret

0000b41c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b41c:	defffa04 	addi	sp,sp,-24
    b420:	dfc00515 	stw	ra,20(sp)
    b424:	df000415 	stw	fp,16(sp)
    b428:	df000404 	addi	fp,sp,16
    b42c:	e13ffd15 	stw	r4,-12(fp)
    b430:	e17ffe15 	stw	r5,-8(fp)
    b434:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b438:	e0fffd17 	ldw	r3,-12(fp)
    b43c:	00800044 	movi	r2,1
    b440:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b444:	e0bffd17 	ldw	r2,-12(fp)
    b448:	10800017 	ldw	r2,0(r2)
    b44c:	11000104 	addi	r4,r2,4
    b450:	e0bffd17 	ldw	r2,-12(fp)
    b454:	10800817 	ldw	r2,32(r2)
    b458:	1007883a 	mov	r3,r2
    b45c:	2005883a 	mov	r2,r4
    b460:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b464:	e13ffe17 	ldw	r4,-8(fp)
    b468:	e17fff17 	ldw	r5,-4(fp)
    b46c:	d8000015 	stw	zero,0(sp)
    b470:	01800074 	movhi	r6,1
    b474:	31ad3704 	addi	r6,r6,-19236
    b478:	e1fffd17 	ldw	r7,-12(fp)
    b47c:	000d3040 	call	d304 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b480:	e0bffd17 	ldw	r2,-12(fp)
    b484:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b488:	e0bffd17 	ldw	r2,-12(fp)
    b48c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b490:	00800074 	movhi	r2,1
    b494:	1081e504 	addi	r2,r2,1940
    b498:	10800017 	ldw	r2,0(r2)
    b49c:	100b883a 	mov	r5,r2
    b4a0:	01800074 	movhi	r6,1
    b4a4:	31adc104 	addi	r6,r6,-18684
    b4a8:	e1fffd17 	ldw	r7,-12(fp)
    b4ac:	000cf040 	call	cf04 <alt_alarm_start>
    b4b0:	1004403a 	cmpge	r2,r2,zero
    b4b4:	1000041e 	bne	r2,zero,b4c8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b4b8:	e0fffd17 	ldw	r3,-12(fp)
    b4bc:	00a00034 	movhi	r2,32768
    b4c0:	10bfffc4 	addi	r2,r2,-1
    b4c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b4c8:	e037883a 	mov	sp,fp
    b4cc:	dfc00117 	ldw	ra,4(sp)
    b4d0:	df000017 	ldw	fp,0(sp)
    b4d4:	dec00204 	addi	sp,sp,8
    b4d8:	f800283a 	ret

0000b4dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b4dc:	defff804 	addi	sp,sp,-32
    b4e0:	df000715 	stw	fp,28(sp)
    b4e4:	df000704 	addi	fp,sp,28
    b4e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b4ec:	e0bfff17 	ldw	r2,-4(fp)
    b4f0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b4f4:	e0bffe17 	ldw	r2,-8(fp)
    b4f8:	10800017 	ldw	r2,0(r2)
    b4fc:	e0bffd15 	stw	r2,-12(fp)
    b500:	00000006 	br	b504 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b504:	e0bffd17 	ldw	r2,-12(fp)
    b508:	10800104 	addi	r2,r2,4
    b50c:	10800037 	ldwio	r2,0(r2)
    b510:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b514:	e0bffc17 	ldw	r2,-16(fp)
    b518:	1080c00c 	andi	r2,r2,768
    b51c:	1005003a 	cmpeq	r2,r2,zero
    b520:	1000741e 	bne	r2,zero,b6f4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b524:	e0bffc17 	ldw	r2,-16(fp)
    b528:	1080400c 	andi	r2,r2,256
    b52c:	1005003a 	cmpeq	r2,r2,zero
    b530:	1000351e 	bne	r2,zero,b608 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b534:	00800074 	movhi	r2,1
    b538:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b53c:	e0bffe17 	ldw	r2,-8(fp)
    b540:	10800a17 	ldw	r2,40(r2)
    b544:	10800044 	addi	r2,r2,1
    b548:	1081ffcc 	andi	r2,r2,2047
    b54c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b550:	e0bffe17 	ldw	r2,-8(fp)
    b554:	10c00b17 	ldw	r3,44(r2)
    b558:	e0bffa17 	ldw	r2,-24(fp)
    b55c:	18801626 	beq	r3,r2,b5b8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b560:	e0bffd17 	ldw	r2,-12(fp)
    b564:	10800037 	ldwio	r2,0(r2)
    b568:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b56c:	e0bffb17 	ldw	r2,-20(fp)
    b570:	10a0000c 	andi	r2,r2,32768
    b574:	1005003a 	cmpeq	r2,r2,zero
    b578:	10000f1e 	bne	r2,zero,b5b8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b57c:	e0bffe17 	ldw	r2,-8(fp)
    b580:	10c00a17 	ldw	r3,40(r2)
    b584:	e0bffb17 	ldw	r2,-20(fp)
    b588:	1009883a 	mov	r4,r2
    b58c:	e0bffe17 	ldw	r2,-8(fp)
    b590:	1885883a 	add	r2,r3,r2
    b594:	10800e04 	addi	r2,r2,56
    b598:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b59c:	e0bffe17 	ldw	r2,-8(fp)
    b5a0:	10800a17 	ldw	r2,40(r2)
    b5a4:	10800044 	addi	r2,r2,1
    b5a8:	10c1ffcc 	andi	r3,r2,2047
    b5ac:	e0bffe17 	ldw	r2,-8(fp)
    b5b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b5b4:	003fe106 	br	b53c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b5b8:	e0bffb17 	ldw	r2,-20(fp)
    b5bc:	10bfffec 	andhi	r2,r2,65535
    b5c0:	1005003a 	cmpeq	r2,r2,zero
    b5c4:	1000101e 	bne	r2,zero,b608 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b5c8:	e0bffe17 	ldw	r2,-8(fp)
    b5cc:	10c00817 	ldw	r3,32(r2)
    b5d0:	00bfff84 	movi	r2,-2
    b5d4:	1886703a 	and	r3,r3,r2
    b5d8:	e0bffe17 	ldw	r2,-8(fp)
    b5dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b5e0:	e0bffd17 	ldw	r2,-12(fp)
    b5e4:	11000104 	addi	r4,r2,4
    b5e8:	e0bffe17 	ldw	r2,-8(fp)
    b5ec:	10800817 	ldw	r2,32(r2)
    b5f0:	1007883a 	mov	r3,r2
    b5f4:	2005883a 	mov	r2,r4
    b5f8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b5fc:	e0bffd17 	ldw	r2,-12(fp)
    b600:	10800104 	addi	r2,r2,4
    b604:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b608:	e0bffc17 	ldw	r2,-16(fp)
    b60c:	1080800c 	andi	r2,r2,512
    b610:	1005003a 	cmpeq	r2,r2,zero
    b614:	103fbb1e 	bne	r2,zero,b504 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b618:	e0bffc17 	ldw	r2,-16(fp)
    b61c:	10bfffec 	andhi	r2,r2,65535
    b620:	1004d43a 	srli	r2,r2,16
    b624:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b628:	00001506 	br	b680 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b62c:	e13ffd17 	ldw	r4,-12(fp)
    b630:	e0bffe17 	ldw	r2,-8(fp)
    b634:	10c00d17 	ldw	r3,52(r2)
    b638:	e0bffe17 	ldw	r2,-8(fp)
    b63c:	1885883a 	add	r2,r3,r2
    b640:	10820e04 	addi	r2,r2,2104
    b644:	10800003 	ldbu	r2,0(r2)
    b648:	10c03fcc 	andi	r3,r2,255
    b64c:	18c0201c 	xori	r3,r3,128
    b650:	18ffe004 	addi	r3,r3,-128
    b654:	2005883a 	mov	r2,r4
    b658:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b65c:	e0bffe17 	ldw	r2,-8(fp)
    b660:	10800d17 	ldw	r2,52(r2)
    b664:	10800044 	addi	r2,r2,1
    b668:	10c1ffcc 	andi	r3,r2,2047
    b66c:	e0bffe17 	ldw	r2,-8(fp)
    b670:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b674:	e0bff917 	ldw	r2,-28(fp)
    b678:	10bfffc4 	addi	r2,r2,-1
    b67c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b680:	e0bff917 	ldw	r2,-28(fp)
    b684:	1005003a 	cmpeq	r2,r2,zero
    b688:	1000051e 	bne	r2,zero,b6a0 <altera_avalon_jtag_uart_irq+0x1c4>
    b68c:	e0bffe17 	ldw	r2,-8(fp)
    b690:	10c00d17 	ldw	r3,52(r2)
    b694:	e0bffe17 	ldw	r2,-8(fp)
    b698:	10800c17 	ldw	r2,48(r2)
    b69c:	18bfe31e 	bne	r3,r2,b62c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b6a0:	e0bff917 	ldw	r2,-28(fp)
    b6a4:	1005003a 	cmpeq	r2,r2,zero
    b6a8:	103f961e 	bne	r2,zero,b504 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b6ac:	e0bffe17 	ldw	r2,-8(fp)
    b6b0:	10c00817 	ldw	r3,32(r2)
    b6b4:	00bfff44 	movi	r2,-3
    b6b8:	1886703a 	and	r3,r3,r2
    b6bc:	e0bffe17 	ldw	r2,-8(fp)
    b6c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b6c4:	e0bffe17 	ldw	r2,-8(fp)
    b6c8:	10800017 	ldw	r2,0(r2)
    b6cc:	11000104 	addi	r4,r2,4
    b6d0:	e0bffe17 	ldw	r2,-8(fp)
    b6d4:	10800817 	ldw	r2,32(r2)
    b6d8:	1007883a 	mov	r3,r2
    b6dc:	2005883a 	mov	r2,r4
    b6e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b6e4:	e0bffd17 	ldw	r2,-12(fp)
    b6e8:	10800104 	addi	r2,r2,4
    b6ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b6f0:	003f8406 	br	b504 <altera_avalon_jtag_uart_irq+0x28>
}
    b6f4:	e037883a 	mov	sp,fp
    b6f8:	df000017 	ldw	fp,0(sp)
    b6fc:	dec00104 	addi	sp,sp,4
    b700:	f800283a 	ret

0000b704 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b704:	defffc04 	addi	sp,sp,-16
    b708:	df000315 	stw	fp,12(sp)
    b70c:	df000304 	addi	fp,sp,12
    b710:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b714:	e0bfff17 	ldw	r2,-4(fp)
    b718:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b71c:	e0bffe17 	ldw	r2,-8(fp)
    b720:	10800017 	ldw	r2,0(r2)
    b724:	10800104 	addi	r2,r2,4
    b728:	10800037 	ldwio	r2,0(r2)
    b72c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b730:	e0bffd17 	ldw	r2,-12(fp)
    b734:	1081000c 	andi	r2,r2,1024
    b738:	1005003a 	cmpeq	r2,r2,zero
    b73c:	10000c1e 	bne	r2,zero,b770 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b740:	e0bffe17 	ldw	r2,-8(fp)
    b744:	10800017 	ldw	r2,0(r2)
    b748:	11000104 	addi	r4,r2,4
    b74c:	e0bffe17 	ldw	r2,-8(fp)
    b750:	10800817 	ldw	r2,32(r2)
    b754:	10810014 	ori	r2,r2,1024
    b758:	1007883a 	mov	r3,r2
    b75c:	2005883a 	mov	r2,r4
    b760:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b764:	e0bffe17 	ldw	r2,-8(fp)
    b768:	10000915 	stw	zero,36(r2)
    b76c:	00000a06 	br	b798 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b770:	e0bffe17 	ldw	r2,-8(fp)
    b774:	10c00917 	ldw	r3,36(r2)
    b778:	00a00034 	movhi	r2,32768
    b77c:	10bfff04 	addi	r2,r2,-4
    b780:	10c00536 	bltu	r2,r3,b798 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    b784:	e0bffe17 	ldw	r2,-8(fp)
    b788:	10800917 	ldw	r2,36(r2)
    b78c:	10c00044 	addi	r3,r2,1
    b790:	e0bffe17 	ldw	r2,-8(fp)
    b794:	10c00915 	stw	r3,36(r2)
    b798:	00800074 	movhi	r2,1
    b79c:	1081e504 	addi	r2,r2,1940
    b7a0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b7a4:	e037883a 	mov	sp,fp
    b7a8:	df000017 	ldw	fp,0(sp)
    b7ac:	dec00104 	addi	sp,sp,4
    b7b0:	f800283a 	ret

0000b7b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b7b4:	defffc04 	addi	sp,sp,-16
    b7b8:	df000315 	stw	fp,12(sp)
    b7bc:	df000304 	addi	fp,sp,12
    b7c0:	e13ffd15 	stw	r4,-12(fp)
    b7c4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b7c8:	00000706 	br	b7e8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b7cc:	e0bffe17 	ldw	r2,-8(fp)
    b7d0:	1090000c 	andi	r2,r2,16384
    b7d4:	1005003a 	cmpeq	r2,r2,zero
    b7d8:	1000031e 	bne	r2,zero,b7e8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    b7dc:	00bffd44 	movi	r2,-11
    b7e0:	e0bfff15 	stw	r2,-4(fp)
    b7e4:	00000b06 	br	b814 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b7e8:	e0bffd17 	ldw	r2,-12(fp)
    b7ec:	10c00d17 	ldw	r3,52(r2)
    b7f0:	e0bffd17 	ldw	r2,-12(fp)
    b7f4:	10800c17 	ldw	r2,48(r2)
    b7f8:	18800526 	beq	r3,r2,b810 <altera_avalon_jtag_uart_close+0x5c>
    b7fc:	e0bffd17 	ldw	r2,-12(fp)
    b800:	10c00917 	ldw	r3,36(r2)
    b804:	e0bffd17 	ldw	r2,-12(fp)
    b808:	10800117 	ldw	r2,4(r2)
    b80c:	18bfef36 	bltu	r3,r2,b7cc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b810:	e03fff15 	stw	zero,-4(fp)
    b814:	e0bfff17 	ldw	r2,-4(fp)
}
    b818:	e037883a 	mov	sp,fp
    b81c:	df000017 	ldw	fp,0(sp)
    b820:	dec00104 	addi	sp,sp,4
    b824:	f800283a 	ret

0000b828 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b828:	defff804 	addi	sp,sp,-32
    b82c:	df000715 	stw	fp,28(sp)
    b830:	df000704 	addi	fp,sp,28
    b834:	e13ffb15 	stw	r4,-20(fp)
    b838:	e17ffc15 	stw	r5,-16(fp)
    b83c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    b840:	00bff9c4 	movi	r2,-25
    b844:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    b848:	e0bffc17 	ldw	r2,-16(fp)
    b84c:	e0bfff15 	stw	r2,-4(fp)
    b850:	e0ffff17 	ldw	r3,-4(fp)
    b854:	189a8060 	cmpeqi	r2,r3,27137
    b858:	1000041e 	bne	r2,zero,b86c <altera_avalon_jtag_uart_ioctl+0x44>
    b85c:	e0ffff17 	ldw	r3,-4(fp)
    b860:	189a80a0 	cmpeqi	r2,r3,27138
    b864:	10001b1e 	bne	r2,zero,b8d4 <altera_avalon_jtag_uart_ioctl+0xac>
    b868:	00002706 	br	b908 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b86c:	e0bffb17 	ldw	r2,-20(fp)
    b870:	10c00117 	ldw	r3,4(r2)
    b874:	00a00034 	movhi	r2,32768
    b878:	10bfffc4 	addi	r2,r2,-1
    b87c:	18802226 	beq	r3,r2,b908 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    b880:	e0bffd17 	ldw	r2,-12(fp)
    b884:	10800017 	ldw	r2,0(r2)
    b888:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b88c:	e0bff917 	ldw	r2,-28(fp)
    b890:	10800090 	cmplti	r2,r2,2
    b894:	1000071e 	bne	r2,zero,b8b4 <altera_avalon_jtag_uart_ioctl+0x8c>
    b898:	e0fff917 	ldw	r3,-28(fp)
    b89c:	00a00034 	movhi	r2,32768
    b8a0:	10bfffc4 	addi	r2,r2,-1
    b8a4:	18800326 	beq	r3,r2,b8b4 <altera_avalon_jtag_uart_ioctl+0x8c>
    b8a8:	e0bff917 	ldw	r2,-28(fp)
    b8ac:	e0bffe15 	stw	r2,-8(fp)
    b8b0:	00000306 	br	b8c0 <altera_avalon_jtag_uart_ioctl+0x98>
    b8b4:	00e00034 	movhi	r3,32768
    b8b8:	18ffff84 	addi	r3,r3,-2
    b8bc:	e0fffe15 	stw	r3,-8(fp)
    b8c0:	e0bffb17 	ldw	r2,-20(fp)
    b8c4:	e0fffe17 	ldw	r3,-8(fp)
    b8c8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    b8cc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    b8d0:	00000d06 	br	b908 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b8d4:	e0bffb17 	ldw	r2,-20(fp)
    b8d8:	10c00117 	ldw	r3,4(r2)
    b8dc:	00a00034 	movhi	r2,32768
    b8e0:	10bfffc4 	addi	r2,r2,-1
    b8e4:	18800826 	beq	r3,r2,b908 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b8e8:	e13ffd17 	ldw	r4,-12(fp)
    b8ec:	e0bffb17 	ldw	r2,-20(fp)
    b8f0:	10c00917 	ldw	r3,36(r2)
    b8f4:	e0bffb17 	ldw	r2,-20(fp)
    b8f8:	10800117 	ldw	r2,4(r2)
    b8fc:	1885803a 	cmpltu	r2,r3,r2
    b900:	20800015 	stw	r2,0(r4)
      rc = 0;
    b904:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    b908:	e0bffa17 	ldw	r2,-24(fp)
}
    b90c:	e037883a 	mov	sp,fp
    b910:	df000017 	ldw	fp,0(sp)
    b914:	dec00104 	addi	sp,sp,4
    b918:	f800283a 	ret

0000b91c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b91c:	defff204 	addi	sp,sp,-56
    b920:	dfc00d15 	stw	ra,52(sp)
    b924:	df000c15 	stw	fp,48(sp)
    b928:	df000c04 	addi	fp,sp,48
    b92c:	e13ffb15 	stw	r4,-20(fp)
    b930:	e17ffc15 	stw	r5,-16(fp)
    b934:	e1bffd15 	stw	r6,-12(fp)
    b938:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    b93c:	e0bffc17 	ldw	r2,-16(fp)
    b940:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b944:	00004806 	br	ba68 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b948:	e0bffb17 	ldw	r2,-20(fp)
    b94c:	10800a17 	ldw	r2,40(r2)
    b950:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b954:	e0bffb17 	ldw	r2,-20(fp)
    b958:	10800b17 	ldw	r2,44(r2)
    b95c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    b960:	e0fff717 	ldw	r3,-36(fp)
    b964:	e0bff617 	ldw	r2,-40(fp)
    b968:	18800536 	bltu	r3,r2,b980 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b96c:	e0bff717 	ldw	r2,-36(fp)
    b970:	e0fff617 	ldw	r3,-40(fp)
    b974:	10c5c83a 	sub	r2,r2,r3
    b978:	e0bff815 	stw	r2,-32(fp)
    b97c:	00000406 	br	b990 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b980:	00820004 	movi	r2,2048
    b984:	e0fff617 	ldw	r3,-40(fp)
    b988:	10c5c83a 	sub	r2,r2,r3
    b98c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b990:	e0bff817 	ldw	r2,-32(fp)
    b994:	1005003a 	cmpeq	r2,r2,zero
    b998:	10001f1e 	bne	r2,zero,ba18 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    b99c:	e0fffd17 	ldw	r3,-12(fp)
    b9a0:	e0bff817 	ldw	r2,-32(fp)
    b9a4:	1880022e 	bgeu	r3,r2,b9b0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    b9a8:	e0bffd17 	ldw	r2,-12(fp)
    b9ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b9b0:	e0bffb17 	ldw	r2,-20(fp)
    b9b4:	10c00e04 	addi	r3,r2,56
    b9b8:	e0bff617 	ldw	r2,-40(fp)
    b9bc:	1887883a 	add	r3,r3,r2
    b9c0:	e0bffa17 	ldw	r2,-24(fp)
    b9c4:	1009883a 	mov	r4,r2
    b9c8:	180b883a 	mov	r5,r3
    b9cc:	e1bff817 	ldw	r6,-32(fp)
    b9d0:	00069540 	call	6954 <memcpy>
      ptr   += n;
    b9d4:	e0fff817 	ldw	r3,-32(fp)
    b9d8:	e0bffa17 	ldw	r2,-24(fp)
    b9dc:	10c5883a 	add	r2,r2,r3
    b9e0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b9e4:	e0fffd17 	ldw	r3,-12(fp)
    b9e8:	e0bff817 	ldw	r2,-32(fp)
    b9ec:	1885c83a 	sub	r2,r3,r2
    b9f0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b9f4:	e0fff617 	ldw	r3,-40(fp)
    b9f8:	e0bff817 	ldw	r2,-32(fp)
    b9fc:	1885883a 	add	r2,r3,r2
    ba00:	10c1ffcc 	andi	r3,r2,2047
    ba04:	e0bffb17 	ldw	r2,-20(fp)
    ba08:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ba0c:	e0bffd17 	ldw	r2,-12(fp)
    ba10:	10800048 	cmpgei	r2,r2,1
    ba14:	103fcc1e 	bne	r2,zero,b948 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    ba18:	e0fffa17 	ldw	r3,-24(fp)
    ba1c:	e0bffc17 	ldw	r2,-16(fp)
    ba20:	1880141e 	bne	r3,r2,ba74 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ba24:	e0bffe17 	ldw	r2,-8(fp)
    ba28:	1090000c 	andi	r2,r2,16384
    ba2c:	1004c03a 	cmpne	r2,r2,zero
    ba30:	1000101e 	bne	r2,zero,ba74 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ba34:	e0bffb17 	ldw	r2,-20(fp)
    ba38:	10c00a17 	ldw	r3,40(r2)
    ba3c:	e0bff717 	ldw	r2,-36(fp)
    ba40:	1880051e 	bne	r3,r2,ba58 <altera_avalon_jtag_uart_read+0x13c>
    ba44:	e0bffb17 	ldw	r2,-20(fp)
    ba48:	10c00917 	ldw	r3,36(r2)
    ba4c:	e0bffb17 	ldw	r2,-20(fp)
    ba50:	10800117 	ldw	r2,4(r2)
    ba54:	18bff736 	bltu	r3,r2,ba34 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ba58:	e0bffb17 	ldw	r2,-20(fp)
    ba5c:	10c00a17 	ldw	r3,40(r2)
    ba60:	e0bff717 	ldw	r2,-36(fp)
    ba64:	18800326 	beq	r3,r2,ba74 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ba68:	e0bffd17 	ldw	r2,-12(fp)
    ba6c:	10800048 	cmpgei	r2,r2,1
    ba70:	103fb51e 	bne	r2,zero,b948 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ba74:	e0fffa17 	ldw	r3,-24(fp)
    ba78:	e0bffc17 	ldw	r2,-16(fp)
    ba7c:	18801926 	beq	r3,r2,bae4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba80:	0005303a 	rdctl	r2,status
    ba84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba88:	e0fff517 	ldw	r3,-44(fp)
    ba8c:	00bfff84 	movi	r2,-2
    ba90:	1884703a 	and	r2,r3,r2
    ba94:	1001703a 	wrctl	status,r2
  
  return context;
    ba98:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ba9c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    baa0:	e0bffb17 	ldw	r2,-20(fp)
    baa4:	10800817 	ldw	r2,32(r2)
    baa8:	10c00054 	ori	r3,r2,1
    baac:	e0bffb17 	ldw	r2,-20(fp)
    bab0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bab4:	e0bffb17 	ldw	r2,-20(fp)
    bab8:	10800017 	ldw	r2,0(r2)
    babc:	11000104 	addi	r4,r2,4
    bac0:	e0bffb17 	ldw	r2,-20(fp)
    bac4:	10800817 	ldw	r2,32(r2)
    bac8:	1007883a 	mov	r3,r2
    bacc:	2005883a 	mov	r2,r4
    bad0:	10c00035 	stwio	r3,0(r2)
    bad4:	e0bff917 	ldw	r2,-28(fp)
    bad8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    badc:	e0bff417 	ldw	r2,-48(fp)
    bae0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bae4:	e0fffa17 	ldw	r3,-24(fp)
    bae8:	e0bffc17 	ldw	r2,-16(fp)
    baec:	18800526 	beq	r3,r2,bb04 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    baf0:	e0fffa17 	ldw	r3,-24(fp)
    baf4:	e0bffc17 	ldw	r2,-16(fp)
    baf8:	1887c83a 	sub	r3,r3,r2
    bafc:	e0ffff15 	stw	r3,-4(fp)
    bb00:	00000906 	br	bb28 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    bb04:	e0bffe17 	ldw	r2,-8(fp)
    bb08:	1090000c 	andi	r2,r2,16384
    bb0c:	1005003a 	cmpeq	r2,r2,zero
    bb10:	1000031e 	bne	r2,zero,bb20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    bb14:	00bffd44 	movi	r2,-11
    bb18:	e0bfff15 	stw	r2,-4(fp)
    bb1c:	00000206 	br	bb28 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    bb20:	00bffec4 	movi	r2,-5
    bb24:	e0bfff15 	stw	r2,-4(fp)
    bb28:	e0bfff17 	ldw	r2,-4(fp)
}
    bb2c:	e037883a 	mov	sp,fp
    bb30:	dfc00117 	ldw	ra,4(sp)
    bb34:	df000017 	ldw	fp,0(sp)
    bb38:	dec00204 	addi	sp,sp,8
    bb3c:	f800283a 	ret

0000bb40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bb40:	defff204 	addi	sp,sp,-56
    bb44:	dfc00d15 	stw	ra,52(sp)
    bb48:	df000c15 	stw	fp,48(sp)
    bb4c:	df000c04 	addi	fp,sp,48
    bb50:	e13ffb15 	stw	r4,-20(fp)
    bb54:	e17ffc15 	stw	r5,-16(fp)
    bb58:	e1bffd15 	stw	r6,-12(fp)
    bb5c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bb60:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bb64:	e0bffc17 	ldw	r2,-16(fp)
    bb68:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bb6c:	00003a06 	br	bc58 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    bb70:	e0bffb17 	ldw	r2,-20(fp)
    bb74:	10800c17 	ldw	r2,48(r2)
    bb78:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    bb7c:	e0bffb17 	ldw	r2,-20(fp)
    bb80:	10800d17 	ldw	r2,52(r2)
    bb84:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    bb88:	e0fffa17 	ldw	r3,-24(fp)
    bb8c:	e0bff917 	ldw	r2,-28(fp)
    bb90:	1880062e 	bgeu	r3,r2,bbac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    bb94:	e0fff917 	ldw	r3,-28(fp)
    bb98:	e0bffa17 	ldw	r2,-24(fp)
    bb9c:	1885c83a 	sub	r2,r3,r2
    bba0:	10bfffc4 	addi	r2,r2,-1
    bba4:	e0bff815 	stw	r2,-32(fp)
    bba8:	00000c06 	br	bbdc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    bbac:	e0bff917 	ldw	r2,-28(fp)
    bbb0:	1005003a 	cmpeq	r2,r2,zero
    bbb4:	1000051e 	bne	r2,zero,bbcc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    bbb8:	00820004 	movi	r2,2048
    bbbc:	e0fffa17 	ldw	r3,-24(fp)
    bbc0:	10c5c83a 	sub	r2,r2,r3
    bbc4:	e0bff815 	stw	r2,-32(fp)
    bbc8:	00000406 	br	bbdc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    bbcc:	0081ffc4 	movi	r2,2047
    bbd0:	e0fffa17 	ldw	r3,-24(fp)
    bbd4:	10c5c83a 	sub	r2,r2,r3
    bbd8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bbdc:	e0bff817 	ldw	r2,-32(fp)
    bbe0:	1005003a 	cmpeq	r2,r2,zero
    bbe4:	10001f1e 	bne	r2,zero,bc64 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    bbe8:	e0fffd17 	ldw	r3,-12(fp)
    bbec:	e0bff817 	ldw	r2,-32(fp)
    bbf0:	1880022e 	bgeu	r3,r2,bbfc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    bbf4:	e0bffd17 	ldw	r2,-12(fp)
    bbf8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    bbfc:	e0bffb17 	ldw	r2,-20(fp)
    bc00:	10c20e04 	addi	r3,r2,2104
    bc04:	e0bffa17 	ldw	r2,-24(fp)
    bc08:	1885883a 	add	r2,r3,r2
    bc0c:	e0fffc17 	ldw	r3,-16(fp)
    bc10:	1009883a 	mov	r4,r2
    bc14:	180b883a 	mov	r5,r3
    bc18:	e1bff817 	ldw	r6,-32(fp)
    bc1c:	00069540 	call	6954 <memcpy>
      ptr   += n;
    bc20:	e0fff817 	ldw	r3,-32(fp)
    bc24:	e0bffc17 	ldw	r2,-16(fp)
    bc28:	10c5883a 	add	r2,r2,r3
    bc2c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    bc30:	e0fffd17 	ldw	r3,-12(fp)
    bc34:	e0bff817 	ldw	r2,-32(fp)
    bc38:	1885c83a 	sub	r2,r3,r2
    bc3c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bc40:	e0fffa17 	ldw	r3,-24(fp)
    bc44:	e0bff817 	ldw	r2,-32(fp)
    bc48:	1885883a 	add	r2,r3,r2
    bc4c:	10c1ffcc 	andi	r3,r2,2047
    bc50:	e0bffb17 	ldw	r2,-20(fp)
    bc54:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bc58:	e0bffd17 	ldw	r2,-12(fp)
    bc5c:	10800048 	cmpgei	r2,r2,1
    bc60:	103fc31e 	bne	r2,zero,bb70 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc64:	0005303a 	rdctl	r2,status
    bc68:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc6c:	e0fff517 	ldw	r3,-44(fp)
    bc70:	00bfff84 	movi	r2,-2
    bc74:	1884703a 	and	r2,r3,r2
    bc78:	1001703a 	wrctl	status,r2
  
  return context;
    bc7c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    bc80:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bc84:	e0bffb17 	ldw	r2,-20(fp)
    bc88:	10800817 	ldw	r2,32(r2)
    bc8c:	10c00094 	ori	r3,r2,2
    bc90:	e0bffb17 	ldw	r2,-20(fp)
    bc94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bc98:	e0bffb17 	ldw	r2,-20(fp)
    bc9c:	10800017 	ldw	r2,0(r2)
    bca0:	11000104 	addi	r4,r2,4
    bca4:	e0bffb17 	ldw	r2,-20(fp)
    bca8:	10800817 	ldw	r2,32(r2)
    bcac:	1007883a 	mov	r3,r2
    bcb0:	2005883a 	mov	r2,r4
    bcb4:	10c00035 	stwio	r3,0(r2)
    bcb8:	e0bff717 	ldw	r2,-36(fp)
    bcbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bcc0:	e0bff417 	ldw	r2,-48(fp)
    bcc4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    bcc8:	e0bffd17 	ldw	r2,-12(fp)
    bccc:	10800050 	cmplti	r2,r2,1
    bcd0:	1000111e 	bne	r2,zero,bd18 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    bcd4:	e0bffe17 	ldw	r2,-8(fp)
    bcd8:	1090000c 	andi	r2,r2,16384
    bcdc:	1004c03a 	cmpne	r2,r2,zero
    bce0:	1000101e 	bne	r2,zero,bd24 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    bce4:	e0bffb17 	ldw	r2,-20(fp)
    bce8:	10c00d17 	ldw	r3,52(r2)
    bcec:	e0bff917 	ldw	r2,-28(fp)
    bcf0:	1880051e 	bne	r3,r2,bd08 <altera_avalon_jtag_uart_write+0x1c8>
    bcf4:	e0bffb17 	ldw	r2,-20(fp)
    bcf8:	10c00917 	ldw	r3,36(r2)
    bcfc:	e0bffb17 	ldw	r2,-20(fp)
    bd00:	10800117 	ldw	r2,4(r2)
    bd04:	18bff736 	bltu	r3,r2,bce4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    bd08:	e0bffb17 	ldw	r2,-20(fp)
    bd0c:	10c00d17 	ldw	r3,52(r2)
    bd10:	e0bff917 	ldw	r2,-28(fp)
    bd14:	18800326 	beq	r3,r2,bd24 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    bd18:	e0bffd17 	ldw	r2,-12(fp)
    bd1c:	10800048 	cmpgei	r2,r2,1
    bd20:	103fcd1e 	bne	r2,zero,bc58 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    bd24:	e0fffc17 	ldw	r3,-16(fp)
    bd28:	e0bff617 	ldw	r2,-40(fp)
    bd2c:	18800526 	beq	r3,r2,bd44 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    bd30:	e0fffc17 	ldw	r3,-16(fp)
    bd34:	e0bff617 	ldw	r2,-40(fp)
    bd38:	1887c83a 	sub	r3,r3,r2
    bd3c:	e0ffff15 	stw	r3,-4(fp)
    bd40:	00000906 	br	bd68 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    bd44:	e0bffe17 	ldw	r2,-8(fp)
    bd48:	1090000c 	andi	r2,r2,16384
    bd4c:	1005003a 	cmpeq	r2,r2,zero
    bd50:	1000031e 	bne	r2,zero,bd60 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    bd54:	00bffd44 	movi	r2,-11
    bd58:	e0bfff15 	stw	r2,-4(fp)
    bd5c:	00000206 	br	bd68 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    bd60:	00bffec4 	movi	r2,-5
    bd64:	e0bfff15 	stw	r2,-4(fp)
    bd68:	e0bfff17 	ldw	r2,-4(fp)
}
    bd6c:	e037883a 	mov	sp,fp
    bd70:	dfc00117 	ldw	ra,4(sp)
    bd74:	df000017 	ldw	fp,0(sp)
    bd78:	dec00204 	addi	sp,sp,8
    bd7c:	f800283a 	ret

0000bd80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    bd80:	defffa04 	addi	sp,sp,-24
    bd84:	dfc00515 	stw	ra,20(sp)
    bd88:	df000415 	stw	fp,16(sp)
    bd8c:	df000404 	addi	fp,sp,16
    bd90:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    bd94:	e0bfff17 	ldw	r2,-4(fp)
    bd98:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    bd9c:	e0bfff17 	ldw	r2,-4(fp)
    bda0:	10800104 	addi	r2,r2,4
    bda4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bda8:	0005303a 	rdctl	r2,status
    bdac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bdb0:	e0fffd17 	ldw	r3,-12(fp)
    bdb4:	00bfff84 	movi	r2,-2
    bdb8:	1884703a 	and	r2,r3,r2
    bdbc:	1001703a 	wrctl	status,r2
  
  return context;
    bdc0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    bdc4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    bdc8:	000da9c0 	call	da9c <alt_tick>
    bdcc:	e0bffe17 	ldw	r2,-8(fp)
    bdd0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bdd4:	e0bffc17 	ldw	r2,-16(fp)
    bdd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    bddc:	e037883a 	mov	sp,fp
    bde0:	dfc00117 	ldw	ra,4(sp)
    bde4:	df000017 	ldw	fp,0(sp)
    bde8:	dec00204 	addi	sp,sp,8
    bdec:	f800283a 	ret

0000bdf0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    bdf0:	defff804 	addi	sp,sp,-32
    bdf4:	dfc00715 	stw	ra,28(sp)
    bdf8:	df000615 	stw	fp,24(sp)
    bdfc:	df000604 	addi	fp,sp,24
    be00:	e13ffc15 	stw	r4,-16(fp)
    be04:	e17ffd15 	stw	r5,-12(fp)
    be08:	e1bffe15 	stw	r6,-8(fp)
    be0c:	e1ffff15 	stw	r7,-4(fp)
    be10:	e0bfff17 	ldw	r2,-4(fp)
    be14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    be18:	00800074 	movhi	r2,1
    be1c:	1081e504 	addi	r2,r2,1940
    be20:	10800017 	ldw	r2,0(r2)
    be24:	1004c03a 	cmpne	r2,r2,zero
    be28:	1000041e 	bne	r2,zero,be3c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    be2c:	00c00074 	movhi	r3,1
    be30:	18c1e504 	addi	r3,r3,1940
    be34:	e0bffb17 	ldw	r2,-20(fp)
    be38:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    be3c:	e0bffc17 	ldw	r2,-16(fp)
    be40:	10800104 	addi	r2,r2,4
    be44:	1007883a 	mov	r3,r2
    be48:	008001c4 	movi	r2,7
    be4c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    be50:	d8000015 	stw	zero,0(sp)
    be54:	e13ffd17 	ldw	r4,-12(fp)
    be58:	e17ffe17 	ldw	r5,-8(fp)
    be5c:	01800074 	movhi	r6,1
    be60:	31af6004 	addi	r6,r6,-17024
    be64:	e1fffc17 	ldw	r7,-16(fp)
    be68:	000d3040 	call	d304 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    be6c:	e037883a 	mov	sp,fp
    be70:	dfc00117 	ldw	ra,4(sp)
    be74:	df000017 	ldw	fp,0(sp)
    be78:	dec00204 	addi	sp,sp,8
    be7c:	f800283a 	ret

0000be80 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    be80:	defffa04 	addi	sp,sp,-24
    be84:	dfc00515 	stw	ra,20(sp)
    be88:	df000415 	stw	fp,16(sp)
    be8c:	df000404 	addi	fp,sp,16
    be90:	e13ffd15 	stw	r4,-12(fp)
    be94:	e17ffe15 	stw	r5,-8(fp)
    be98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    be9c:	e0bffd17 	ldw	r2,-12(fp)
    bea0:	10800017 	ldw	r2,0(r2)
    bea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    bea8:	e0bffc17 	ldw	r2,-16(fp)
    beac:	11000a04 	addi	r4,r2,40
    beb0:	e0bffd17 	ldw	r2,-12(fp)
    beb4:	11c00217 	ldw	r7,8(r2)
    beb8:	e17ffe17 	ldw	r5,-8(fp)
    bebc:	e1bfff17 	ldw	r6,-4(fp)
    bec0:	000c3780 	call	c378 <altera_avalon_uart_read>
      fd->fd_flags);
}
    bec4:	e037883a 	mov	sp,fp
    bec8:	dfc00117 	ldw	ra,4(sp)
    becc:	df000017 	ldw	fp,0(sp)
    bed0:	dec00204 	addi	sp,sp,8
    bed4:	f800283a 	ret

0000bed8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bed8:	defffa04 	addi	sp,sp,-24
    bedc:	dfc00515 	stw	ra,20(sp)
    bee0:	df000415 	stw	fp,16(sp)
    bee4:	df000404 	addi	fp,sp,16
    bee8:	e13ffd15 	stw	r4,-12(fp)
    beec:	e17ffe15 	stw	r5,-8(fp)
    bef0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    bef4:	e0bffd17 	ldw	r2,-12(fp)
    bef8:	10800017 	ldw	r2,0(r2)
    befc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    bf00:	e0bffc17 	ldw	r2,-16(fp)
    bf04:	11000a04 	addi	r4,r2,40
    bf08:	e0bffd17 	ldw	r2,-12(fp)
    bf0c:	11c00217 	ldw	r7,8(r2)
    bf10:	e17ffe17 	ldw	r5,-8(fp)
    bf14:	e1bfff17 	ldw	r6,-4(fp)
    bf18:	000c6080 	call	c608 <altera_avalon_uart_write>
      fd->fd_flags);
}
    bf1c:	e037883a 	mov	sp,fp
    bf20:	dfc00117 	ldw	ra,4(sp)
    bf24:	df000017 	ldw	fp,0(sp)
    bf28:	dec00204 	addi	sp,sp,8
    bf2c:	f800283a 	ret

0000bf30 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    bf30:	defffc04 	addi	sp,sp,-16
    bf34:	dfc00315 	stw	ra,12(sp)
    bf38:	df000215 	stw	fp,8(sp)
    bf3c:	df000204 	addi	fp,sp,8
    bf40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    bf44:	e0bfff17 	ldw	r2,-4(fp)
    bf48:	10800017 	ldw	r2,0(r2)
    bf4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    bf50:	e0bffe17 	ldw	r2,-8(fp)
    bf54:	11000a04 	addi	r4,r2,40
    bf58:	e0bfff17 	ldw	r2,-4(fp)
    bf5c:	11400217 	ldw	r5,8(r2)
    bf60:	000c3180 	call	c318 <altera_avalon_uart_close>
}
    bf64:	e037883a 	mov	sp,fp
    bf68:	dfc00117 	ldw	ra,4(sp)
    bf6c:	df000017 	ldw	fp,0(sp)
    bf70:	dec00204 	addi	sp,sp,8
    bf74:	f800283a 	ret

0000bf78 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    bf78:	defff704 	addi	sp,sp,-36
    bf7c:	dfc00815 	stw	ra,32(sp)
    bf80:	df000715 	stw	fp,28(sp)
    bf84:	df000704 	addi	fp,sp,28
    bf88:	e13ffc15 	stw	r4,-16(fp)
    bf8c:	e17ffd15 	stw	r5,-12(fp)
    bf90:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    bf94:	e0bffc17 	ldw	r2,-16(fp)
    bf98:	10800017 	ldw	r2,0(r2)
    bf9c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    bfa0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    bfa4:	1004c03a 	cmpne	r2,r2,zero
    bfa8:	1000061e 	bne	r2,zero,bfc4 <altera_avalon_uart_init+0x4c>
    bfac:	0005883a 	mov	r2,zero
    bfb0:	1004c03a 	cmpne	r2,r2,zero
    bfb4:	1000031e 	bne	r2,zero,bfc4 <altera_avalon_uart_init+0x4c>
    bfb8:	0005883a 	mov	r2,zero
    bfbc:	1005003a 	cmpeq	r2,r2,zero
    bfc0:	1000031e 	bne	r2,zero,bfd0 <altera_avalon_uart_init+0x58>
    bfc4:	00800044 	movi	r2,1
    bfc8:	e0bfff15 	stw	r2,-4(fp)
    bfcc:	00000106 	br	bfd4 <altera_avalon_uart_init+0x5c>
    bfd0:	e03fff15 	stw	zero,-4(fp)
    bfd4:	e0bfff17 	ldw	r2,-4(fp)
    bfd8:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    bfdc:	e0bffa17 	ldw	r2,-24(fp)
    bfe0:	1004c03a 	cmpne	r2,r2,zero
    bfe4:	1000111e 	bne	r2,zero,c02c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    bfe8:	e0fffc17 	ldw	r3,-16(fp)
    bfec:	00832004 	movi	r2,3200
    bff0:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    bff4:	e0bffb17 	ldw	r2,-20(fp)
    bff8:	11000304 	addi	r4,r2,12
    bffc:	e0bffc17 	ldw	r2,-16(fp)
    c000:	10800117 	ldw	r2,4(r2)
    c004:	1007883a 	mov	r3,r2
    c008:	2005883a 	mov	r2,r4
    c00c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    c010:	d8000015 	stw	zero,0(sp)
    c014:	e13ffd17 	ldw	r4,-12(fp)
    c018:	e17ffe17 	ldw	r5,-8(fp)
    c01c:	01800074 	movhi	r6,1
    c020:	31b01004 	addi	r6,r6,-16320
    c024:	e1fffc17 	ldw	r7,-16(fp)
    c028:	000d3040 	call	d304 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    c02c:	e037883a 	mov	sp,fp
    c030:	dfc00117 	ldw	ra,4(sp)
    c034:	df000017 	ldw	fp,0(sp)
    c038:	dec00204 	addi	sp,sp,8
    c03c:	f800283a 	ret

0000c040 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    c040:	defffa04 	addi	sp,sp,-24
    c044:	dfc00515 	stw	ra,20(sp)
    c048:	df000415 	stw	fp,16(sp)
    c04c:	df000404 	addi	fp,sp,16
    c050:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    c054:	e0bfff17 	ldw	r2,-4(fp)
    c058:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    c05c:	e0bffd17 	ldw	r2,-12(fp)
    c060:	10800017 	ldw	r2,0(r2)
    c064:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    c068:	e0bffc17 	ldw	r2,-16(fp)
    c06c:	10800204 	addi	r2,r2,8
    c070:	10800037 	ldwio	r2,0(r2)
    c074:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    c078:	e0bffc17 	ldw	r2,-16(fp)
    c07c:	10800204 	addi	r2,r2,8
    c080:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    c084:	e0bffc17 	ldw	r2,-16(fp)
    c088:	10800204 	addi	r2,r2,8
    c08c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    c090:	e0bffe17 	ldw	r2,-8(fp)
    c094:	1080200c 	andi	r2,r2,128
    c098:	1005003a 	cmpeq	r2,r2,zero
    c09c:	1000031e 	bne	r2,zero,c0ac <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    c0a0:	e13ffd17 	ldw	r4,-12(fp)
    c0a4:	e17ffe17 	ldw	r5,-8(fp)
    c0a8:	000c0dc0 	call	c0dc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    c0ac:	e0bffe17 	ldw	r2,-8(fp)
    c0b0:	1081100c 	andi	r2,r2,1088
    c0b4:	1005003a 	cmpeq	r2,r2,zero
    c0b8:	1000031e 	bne	r2,zero,c0c8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    c0bc:	e13ffd17 	ldw	r4,-12(fp)
    c0c0:	e17ffe17 	ldw	r5,-8(fp)
    c0c4:	000c1bc0 	call	c1bc <altera_avalon_uart_txirq>
  }
  

}
    c0c8:	e037883a 	mov	sp,fp
    c0cc:	dfc00117 	ldw	ra,4(sp)
    c0d0:	df000017 	ldw	fp,0(sp)
    c0d4:	dec00204 	addi	sp,sp,8
    c0d8:	f800283a 	ret

0000c0dc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    c0dc:	defffc04 	addi	sp,sp,-16
    c0e0:	df000315 	stw	fp,12(sp)
    c0e4:	df000304 	addi	fp,sp,12
    c0e8:	e13ffe15 	stw	r4,-8(fp)
    c0ec:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    c0f0:	e0bfff17 	ldw	r2,-4(fp)
    c0f4:	108000cc 	andi	r2,r2,3
    c0f8:	1004c03a 	cmpne	r2,r2,zero
    c0fc:	10002b1e 	bne	r2,zero,c1ac <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    c100:	e0bffe17 	ldw	r2,-8(fp)
    c104:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    c108:	e0bffe17 	ldw	r2,-8(fp)
    c10c:	10800317 	ldw	r2,12(r2)
    c110:	10800044 	addi	r2,r2,1
    c114:	10800fcc 	andi	r2,r2,63
    c118:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    c11c:	e0bffe17 	ldw	r2,-8(fp)
    c120:	11000317 	ldw	r4,12(r2)
    c124:	e0bffe17 	ldw	r2,-8(fp)
    c128:	10800017 	ldw	r2,0(r2)
    c12c:	10800037 	ldwio	r2,0(r2)
    c130:	1007883a 	mov	r3,r2
    c134:	e0bffe17 	ldw	r2,-8(fp)
    c138:	2085883a 	add	r2,r4,r2
    c13c:	10800704 	addi	r2,r2,28
    c140:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    c144:	e0fffe17 	ldw	r3,-8(fp)
    c148:	e0bffd17 	ldw	r2,-12(fp)
    c14c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    c150:	e0bffe17 	ldw	r2,-8(fp)
    c154:	10800317 	ldw	r2,12(r2)
    c158:	10800044 	addi	r2,r2,1
    c15c:	10800fcc 	andi	r2,r2,63
    c160:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    c164:	e0bffe17 	ldw	r2,-8(fp)
    c168:	10c00217 	ldw	r3,8(r2)
    c16c:	e0bffd17 	ldw	r2,-12(fp)
    c170:	18800e1e 	bne	r3,r2,c1ac <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    c174:	e0bffe17 	ldw	r2,-8(fp)
    c178:	10c00117 	ldw	r3,4(r2)
    c17c:	00bfdfc4 	movi	r2,-129
    c180:	1886703a 	and	r3,r3,r2
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    c18c:	e0bffe17 	ldw	r2,-8(fp)
    c190:	10800017 	ldw	r2,0(r2)
    c194:	11000304 	addi	r4,r2,12
    c198:	e0bffe17 	ldw	r2,-8(fp)
    c19c:	10800117 	ldw	r2,4(r2)
    c1a0:	1007883a 	mov	r3,r2
    c1a4:	2005883a 	mov	r2,r4
    c1a8:	10c00035 	stwio	r3,0(r2)
  }   
}
    c1ac:	e037883a 	mov	sp,fp
    c1b0:	df000017 	ldw	fp,0(sp)
    c1b4:	dec00104 	addi	sp,sp,4
    c1b8:	f800283a 	ret

0000c1bc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    c1bc:	defffd04 	addi	sp,sp,-12
    c1c0:	df000215 	stw	fp,8(sp)
    c1c4:	df000204 	addi	fp,sp,8
    c1c8:	e13ffe15 	stw	r4,-8(fp)
    c1cc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    c1d0:	e0bffe17 	ldw	r2,-8(fp)
    c1d4:	10c00417 	ldw	r3,16(r2)
    c1d8:	e0bffe17 	ldw	r2,-8(fp)
    c1dc:	10800517 	ldw	r2,20(r2)
    c1e0:	18803626 	beq	r3,r2,c2bc <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    c1e4:	e0bffe17 	ldw	r2,-8(fp)
    c1e8:	10800617 	ldw	r2,24(r2)
    c1ec:	1080008c 	andi	r2,r2,2
    c1f0:	1005003a 	cmpeq	r2,r2,zero
    c1f4:	1000041e 	bne	r2,zero,c208 <altera_avalon_uart_txirq+0x4c>
    c1f8:	e0bfff17 	ldw	r2,-4(fp)
    c1fc:	1082000c 	andi	r2,r2,2048
    c200:	1005003a 	cmpeq	r2,r2,zero
    c204:	10001e1e 	bne	r2,zero,c280 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    c208:	e0bffe17 	ldw	r2,-8(fp)
    c20c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    c210:	e0bffe17 	ldw	r2,-8(fp)
    c214:	10800017 	ldw	r2,0(r2)
    c218:	11000104 	addi	r4,r2,4
    c21c:	e0bffe17 	ldw	r2,-8(fp)
    c220:	10c00417 	ldw	r3,16(r2)
    c224:	e0bffe17 	ldw	r2,-8(fp)
    c228:	1885883a 	add	r2,r3,r2
    c22c:	10801704 	addi	r2,r2,92
    c230:	10800003 	ldbu	r2,0(r2)
    c234:	10c03fcc 	andi	r3,r2,255
    c238:	2005883a 	mov	r2,r4
    c23c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    c240:	e0bffe17 	ldw	r2,-8(fp)
    c244:	10800417 	ldw	r2,16(r2)
    c248:	10c00044 	addi	r3,r2,1
    c24c:	e0bffe17 	ldw	r2,-8(fp)
    c250:	10c00415 	stw	r3,16(r2)
    c254:	e0bffe17 	ldw	r2,-8(fp)
    c258:	10800417 	ldw	r2,16(r2)
    c25c:	10c00fcc 	andi	r3,r2,63
    c260:	e0bffe17 	ldw	r2,-8(fp)
    c264:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    c268:	e0bffe17 	ldw	r2,-8(fp)
    c26c:	10800117 	ldw	r2,4(r2)
    c270:	10c01014 	ori	r3,r2,64
    c274:	e0bffe17 	ldw	r2,-8(fp)
    c278:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    c27c:	00000f06 	br	c2bc <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    c280:	e0bffe17 	ldw	r2,-8(fp)
    c284:	10800017 	ldw	r2,0(r2)
    c288:	10800204 	addi	r2,r2,8
    c28c:	10800037 	ldwio	r2,0(r2)
    c290:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    c294:	e0bfff17 	ldw	r2,-4(fp)
    c298:	1082000c 	andi	r2,r2,2048
    c29c:	1004c03a 	cmpne	r2,r2,zero
    c2a0:	1000061e 	bne	r2,zero,c2bc <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    c2a4:	e0bffe17 	ldw	r2,-8(fp)
    c2a8:	10c00117 	ldw	r3,4(r2)
    c2ac:	00bfefc4 	movi	r2,-65
    c2b0:	1886703a 	and	r3,r3,r2
    c2b4:	e0bffe17 	ldw	r2,-8(fp)
    c2b8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    c2bc:	e0bffe17 	ldw	r2,-8(fp)
    c2c0:	10c00417 	ldw	r3,16(r2)
    c2c4:	e0bffe17 	ldw	r2,-8(fp)
    c2c8:	10800517 	ldw	r2,20(r2)
    c2cc:	1880061e 	bne	r3,r2,c2e8 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    c2d0:	e0bffe17 	ldw	r2,-8(fp)
    c2d4:	10c00117 	ldw	r3,4(r2)
    c2d8:	00beefc4 	movi	r2,-1089
    c2dc:	1886703a 	and	r3,r3,r2
    c2e0:	e0bffe17 	ldw	r2,-8(fp)
    c2e4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    c2e8:	e0bffe17 	ldw	r2,-8(fp)
    c2ec:	10800017 	ldw	r2,0(r2)
    c2f0:	11000304 	addi	r4,r2,12
    c2f4:	e0bffe17 	ldw	r2,-8(fp)
    c2f8:	10800117 	ldw	r2,4(r2)
    c2fc:	1007883a 	mov	r3,r2
    c300:	2005883a 	mov	r2,r4
    c304:	10c00035 	stwio	r3,0(r2)
}
    c308:	e037883a 	mov	sp,fp
    c30c:	df000017 	ldw	fp,0(sp)
    c310:	dec00104 	addi	sp,sp,4
    c314:	f800283a 	ret

0000c318 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    c318:	defffc04 	addi	sp,sp,-16
    c31c:	df000315 	stw	fp,12(sp)
    c320:	df000304 	addi	fp,sp,12
    c324:	e13ffd15 	stw	r4,-12(fp)
    c328:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    c32c:	00000706 	br	c34c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c330:	e0bffe17 	ldw	r2,-8(fp)
    c334:	1090000c 	andi	r2,r2,16384
    c338:	1005003a 	cmpeq	r2,r2,zero
    c33c:	1000031e 	bne	r2,zero,c34c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    c340:	00bffd44 	movi	r2,-11
    c344:	e0bfff15 	stw	r2,-4(fp)
    c348:	00000606 	br	c364 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    c34c:	e0bffd17 	ldw	r2,-12(fp)
    c350:	10c00417 	ldw	r3,16(r2)
    c354:	e0bffd17 	ldw	r2,-12(fp)
    c358:	10800517 	ldw	r2,20(r2)
    c35c:	18bff41e 	bne	r3,r2,c330 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c360:	e03fff15 	stw	zero,-4(fp)
    c364:	e0bfff17 	ldw	r2,-4(fp)
}
    c368:	e037883a 	mov	sp,fp
    c36c:	df000017 	ldw	fp,0(sp)
    c370:	dec00104 	addi	sp,sp,4
    c374:	f800283a 	ret

0000c378 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    c378:	defff004 	addi	sp,sp,-64
    c37c:	dfc00f15 	stw	ra,60(sp)
    c380:	df000e15 	stw	fp,56(sp)
    c384:	df000e04 	addi	fp,sp,56
    c388:	e13ffb15 	stw	r4,-20(fp)
    c38c:	e17ffc15 	stw	r5,-16(fp)
    c390:	e1bffd15 	stw	r6,-12(fp)
    c394:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    c398:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    c39c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    c3a0:	e0bffe17 	ldw	r2,-8(fp)
    c3a4:	1090000c 	andi	r2,r2,16384
    c3a8:	1005003a 	cmpeq	r2,r2,zero
    c3ac:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    c3b0:	e0bffb17 	ldw	r2,-20(fp)
    c3b4:	10800217 	ldw	r2,8(r2)
    c3b8:	10800044 	addi	r2,r2,1
    c3bc:	10800fcc 	andi	r2,r2,63
    c3c0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    c3c4:	00001906 	br	c42c <altera_avalon_uart_read+0xb4>
    {
      count++;
    c3c8:	e0bff617 	ldw	r2,-40(fp)
    c3cc:	10800044 	addi	r2,r2,1
    c3d0:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    c3d4:	e0bffb17 	ldw	r2,-20(fp)
    c3d8:	10c00217 	ldw	r3,8(r2)
    c3dc:	e0bffb17 	ldw	r2,-20(fp)
    c3e0:	1885883a 	add	r2,r3,r2
    c3e4:	10800704 	addi	r2,r2,28
    c3e8:	10800003 	ldbu	r2,0(r2)
    c3ec:	1007883a 	mov	r3,r2
    c3f0:	e0bffc17 	ldw	r2,-16(fp)
    c3f4:	10c00005 	stb	r3,0(r2)
    c3f8:	e0bffc17 	ldw	r2,-16(fp)
    c3fc:	10800044 	addi	r2,r2,1
    c400:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    c404:	e0bffb17 	ldw	r2,-20(fp)
    c408:	10800217 	ldw	r2,8(r2)
    c40c:	10c00044 	addi	r3,r2,1
    c410:	e0bffb17 	ldw	r2,-20(fp)
    c414:	10c00215 	stw	r3,8(r2)
    c418:	e0bffb17 	ldw	r2,-20(fp)
    c41c:	10800217 	ldw	r2,8(r2)
    c420:	10c00fcc 	andi	r3,r2,63
    c424:	e0bffb17 	ldw	r2,-20(fp)
    c428:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    c42c:	e0fff617 	ldw	r3,-40(fp)
    c430:	e0bffd17 	ldw	r2,-12(fp)
    c434:	1880050e 	bge	r3,r2,c44c <altera_avalon_uart_read+0xd4>
    c438:	e0bffb17 	ldw	r2,-20(fp)
    c43c:	10c00217 	ldw	r3,8(r2)
    c440:	e0bffb17 	ldw	r2,-20(fp)
    c444:	10800317 	ldw	r2,12(r2)
    c448:	18bfdf1e 	bne	r3,r2,c3c8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    c44c:	e0bff617 	ldw	r2,-40(fp)
    c450:	1004c03a 	cmpne	r2,r2,zero
    c454:	1000271e 	bne	r2,zero,c4f4 <altera_avalon_uart_read+0x17c>
    c458:	e0bffb17 	ldw	r2,-20(fp)
    c45c:	10c00217 	ldw	r3,8(r2)
    c460:	e0bffb17 	ldw	r2,-20(fp)
    c464:	10800317 	ldw	r2,12(r2)
    c468:	1880221e 	bne	r3,r2,c4f4 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    c46c:	e0bff917 	ldw	r2,-28(fp)
    c470:	1004c03a 	cmpne	r2,r2,zero
    c474:	1000061e 	bne	r2,zero,c490 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    c478:	000c5a80 	call	c5a8 <alt_get_errno>
    c47c:	00c002c4 	movi	r3,11
    c480:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    c484:	00800044 	movi	r2,1
    c488:	e0bff705 	stb	r2,-36(fp)
        break;
    c48c:	00001f06 	br	c50c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c490:	0005303a 	rdctl	r2,status
    c494:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c498:	e0fff517 	ldw	r3,-44(fp)
    c49c:	00bfff84 	movi	r2,-2
    c4a0:	1884703a 	and	r2,r3,r2
    c4a4:	1001703a 	wrctl	status,r2
  
  return context;
    c4a8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    c4ac:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    c4b0:	e0bffb17 	ldw	r2,-20(fp)
    c4b4:	10800117 	ldw	r2,4(r2)
    c4b8:	10c02014 	ori	r3,r2,128
    c4bc:	e0bffb17 	ldw	r2,-20(fp)
    c4c0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    c4c4:	e0bffb17 	ldw	r2,-20(fp)
    c4c8:	10800017 	ldw	r2,0(r2)
    c4cc:	11000304 	addi	r4,r2,12
    c4d0:	e0bffb17 	ldw	r2,-20(fp)
    c4d4:	10800117 	ldw	r2,4(r2)
    c4d8:	1007883a 	mov	r3,r2
    c4dc:	2005883a 	mov	r2,r4
    c4e0:	10c00035 	stwio	r3,0(r2)
    c4e4:	e0bffa17 	ldw	r2,-24(fp)
    c4e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c4ec:	e0bff417 	ldw	r2,-48(fp)
    c4f0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    c4f4:	e0bff617 	ldw	r2,-40(fp)
    c4f8:	1004c03a 	cmpne	r2,r2,zero
    c4fc:	1000031e 	bne	r2,zero,c50c <altera_avalon_uart_read+0x194>
    c500:	e0bffd17 	ldw	r2,-12(fp)
    c504:	1004c03a 	cmpne	r2,r2,zero
    c508:	103fc81e 	bne	r2,zero,c42c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c50c:	0005303a 	rdctl	r2,status
    c510:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c514:	e0fff317 	ldw	r3,-52(fp)
    c518:	00bfff84 	movi	r2,-2
    c51c:	1884703a 	and	r2,r3,r2
    c520:	1001703a 	wrctl	status,r2
  
  return context;
    c524:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    c528:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    c52c:	e0bffb17 	ldw	r2,-20(fp)
    c530:	10800117 	ldw	r2,4(r2)
    c534:	10c02014 	ori	r3,r2,128
    c538:	e0bffb17 	ldw	r2,-20(fp)
    c53c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    c540:	e0bffb17 	ldw	r2,-20(fp)
    c544:	10800017 	ldw	r2,0(r2)
    c548:	11000304 	addi	r4,r2,12
    c54c:	e0bffb17 	ldw	r2,-20(fp)
    c550:	10800117 	ldw	r2,4(r2)
    c554:	1007883a 	mov	r3,r2
    c558:	2005883a 	mov	r2,r4
    c55c:	10c00035 	stwio	r3,0(r2)
    c560:	e0bffa17 	ldw	r2,-24(fp)
    c564:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c568:	e0bff217 	ldw	r2,-56(fp)
    c56c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    c570:	e0bff703 	ldbu	r2,-36(fp)
    c574:	1005003a 	cmpeq	r2,r2,zero
    c578:	1000031e 	bne	r2,zero,c588 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    c57c:	00bffd04 	movi	r2,-12
    c580:	e0bfff15 	stw	r2,-4(fp)
    c584:	00000206 	br	c590 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    c588:	e0bff617 	ldw	r2,-40(fp)
    c58c:	e0bfff15 	stw	r2,-4(fp)
    c590:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    c594:	e037883a 	mov	sp,fp
    c598:	dfc00117 	ldw	ra,4(sp)
    c59c:	df000017 	ldw	fp,0(sp)
    c5a0:	dec00204 	addi	sp,sp,8
    c5a4:	f800283a 	ret

0000c5a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c5a8:	defffd04 	addi	sp,sp,-12
    c5ac:	dfc00215 	stw	ra,8(sp)
    c5b0:	df000115 	stw	fp,4(sp)
    c5b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c5b8:	00800074 	movhi	r2,1
    c5bc:	1081d304 	addi	r2,r2,1868
    c5c0:	10800017 	ldw	r2,0(r2)
    c5c4:	1005003a 	cmpeq	r2,r2,zero
    c5c8:	1000061e 	bne	r2,zero,c5e4 <alt_get_errno+0x3c>
    c5cc:	00800074 	movhi	r2,1
    c5d0:	1081d304 	addi	r2,r2,1868
    c5d4:	10800017 	ldw	r2,0(r2)
    c5d8:	103ee83a 	callr	r2
    c5dc:	e0bfff15 	stw	r2,-4(fp)
    c5e0:	00000306 	br	c5f0 <alt_get_errno+0x48>
    c5e4:	00800074 	movhi	r2,1
    c5e8:	1081e004 	addi	r2,r2,1920
    c5ec:	e0bfff15 	stw	r2,-4(fp)
    c5f0:	e0bfff17 	ldw	r2,-4(fp)
}
    c5f4:	e037883a 	mov	sp,fp
    c5f8:	dfc00117 	ldw	ra,4(sp)
    c5fc:	df000017 	ldw	fp,0(sp)
    c600:	dec00204 	addi	sp,sp,8
    c604:	f800283a 	ret

0000c608 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    c608:	defff204 	addi	sp,sp,-56
    c60c:	dfc00d15 	stw	ra,52(sp)
    c610:	df000c15 	stw	fp,48(sp)
    c614:	df000c04 	addi	fp,sp,48
    c618:	e13ffc15 	stw	r4,-16(fp)
    c61c:	e17ffd15 	stw	r5,-12(fp)
    c620:	e1bffe15 	stw	r6,-8(fp)
    c624:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    c628:	e0bffe17 	ldw	r2,-8(fp)
    c62c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    c630:	e0bfff17 	ldw	r2,-4(fp)
    c634:	1090000c 	andi	r2,r2,16384
    c638:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    c63c:	00004006 	br	c740 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    c640:	e0bffc17 	ldw	r2,-16(fp)
    c644:	10800517 	ldw	r2,20(r2)
    c648:	10800044 	addi	r2,r2,1
    c64c:	10800fcc 	andi	r2,r2,63
    c650:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    c654:	e0bffc17 	ldw	r2,-16(fp)
    c658:	10c00417 	ldw	r3,16(r2)
    c65c:	e0bff917 	ldw	r2,-28(fp)
    c660:	1880251e 	bne	r3,r2,c6f8 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    c664:	e0bffa17 	ldw	r2,-24(fp)
    c668:	1005003a 	cmpeq	r2,r2,zero
    c66c:	1000051e 	bne	r2,zero,c684 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    c670:	000c7d00 	call	c7d0 <alt_get_errno>
    c674:	1007883a 	mov	r3,r2
    c678:	008002c4 	movi	r2,11
    c67c:	18800015 	stw	r2,0(r3)
        break;
    c680:	00003206 	br	c74c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c684:	0005303a 	rdctl	r2,status
    c688:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c68c:	e0fff717 	ldw	r3,-36(fp)
    c690:	00bfff84 	movi	r2,-2
    c694:	1884703a 	and	r2,r3,r2
    c698:	1001703a 	wrctl	status,r2
  
  return context;
    c69c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    c6a0:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    c6a4:	e0bffc17 	ldw	r2,-16(fp)
    c6a8:	10800117 	ldw	r2,4(r2)
    c6ac:	10c11014 	ori	r3,r2,1088
    c6b0:	e0bffc17 	ldw	r2,-16(fp)
    c6b4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    c6b8:	e0bffc17 	ldw	r2,-16(fp)
    c6bc:	10800017 	ldw	r2,0(r2)
    c6c0:	11000304 	addi	r4,r2,12
    c6c4:	e0bffc17 	ldw	r2,-16(fp)
    c6c8:	10800117 	ldw	r2,4(r2)
    c6cc:	1007883a 	mov	r3,r2
    c6d0:	2005883a 	mov	r2,r4
    c6d4:	10c00035 	stwio	r3,0(r2)
    c6d8:	e0bffb17 	ldw	r2,-20(fp)
    c6dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6e0:	e0bff617 	ldw	r2,-40(fp)
    c6e4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    c6e8:	e0bffc17 	ldw	r2,-16(fp)
    c6ec:	10c00417 	ldw	r3,16(r2)
    c6f0:	e0bff917 	ldw	r2,-28(fp)
    c6f4:	18bffc26 	beq	r3,r2,c6e8 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    c6f8:	e0bff817 	ldw	r2,-32(fp)
    c6fc:	10bfffc4 	addi	r2,r2,-1
    c700:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    c704:	e0bffc17 	ldw	r2,-16(fp)
    c708:	10c00517 	ldw	r3,20(r2)
    c70c:	e0bffd17 	ldw	r2,-12(fp)
    c710:	10800003 	ldbu	r2,0(r2)
    c714:	1009883a 	mov	r4,r2
    c718:	e0bffc17 	ldw	r2,-16(fp)
    c71c:	1885883a 	add	r2,r3,r2
    c720:	10801704 	addi	r2,r2,92
    c724:	11000005 	stb	r4,0(r2)
    c728:	e0bffd17 	ldw	r2,-12(fp)
    c72c:	10800044 	addi	r2,r2,1
    c730:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    c734:	e0fffc17 	ldw	r3,-16(fp)
    c738:	e0bff917 	ldw	r2,-28(fp)
    c73c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    c740:	e0bff817 	ldw	r2,-32(fp)
    c744:	1004c03a 	cmpne	r2,r2,zero
    c748:	103fbd1e 	bne	r2,zero,c640 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c74c:	0005303a 	rdctl	r2,status
    c750:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c754:	e0fff517 	ldw	r3,-44(fp)
    c758:	00bfff84 	movi	r2,-2
    c75c:	1884703a 	and	r2,r3,r2
    c760:	1001703a 	wrctl	status,r2
  
  return context;
    c764:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    c768:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	10800117 	ldw	r2,4(r2)
    c774:	10c11014 	ori	r3,r2,1088
    c778:	e0bffc17 	ldw	r2,-16(fp)
    c77c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    c780:	e0bffc17 	ldw	r2,-16(fp)
    c784:	10800017 	ldw	r2,0(r2)
    c788:	11000304 	addi	r4,r2,12
    c78c:	e0bffc17 	ldw	r2,-16(fp)
    c790:	10800117 	ldw	r2,4(r2)
    c794:	1007883a 	mov	r3,r2
    c798:	2005883a 	mov	r2,r4
    c79c:	10c00035 	stwio	r3,0(r2)
    c7a0:	e0bffb17 	ldw	r2,-20(fp)
    c7a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c7a8:	e0bff417 	ldw	r2,-48(fp)
    c7ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    c7b0:	e0fffe17 	ldw	r3,-8(fp)
    c7b4:	e0bff817 	ldw	r2,-32(fp)
    c7b8:	1885c83a 	sub	r2,r3,r2
}
    c7bc:	e037883a 	mov	sp,fp
    c7c0:	dfc00117 	ldw	ra,4(sp)
    c7c4:	df000017 	ldw	fp,0(sp)
    c7c8:	dec00204 	addi	sp,sp,8
    c7cc:	f800283a 	ret

0000c7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c7d0:	defffd04 	addi	sp,sp,-12
    c7d4:	dfc00215 	stw	ra,8(sp)
    c7d8:	df000115 	stw	fp,4(sp)
    c7dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c7e0:	00800074 	movhi	r2,1
    c7e4:	1081d304 	addi	r2,r2,1868
    c7e8:	10800017 	ldw	r2,0(r2)
    c7ec:	1005003a 	cmpeq	r2,r2,zero
    c7f0:	1000061e 	bne	r2,zero,c80c <alt_get_errno+0x3c>
    c7f4:	00800074 	movhi	r2,1
    c7f8:	1081d304 	addi	r2,r2,1868
    c7fc:	10800017 	ldw	r2,0(r2)
    c800:	103ee83a 	callr	r2
    c804:	e0bfff15 	stw	r2,-4(fp)
    c808:	00000306 	br	c818 <alt_get_errno+0x48>
    c80c:	00800074 	movhi	r2,1
    c810:	1081e004 	addi	r2,r2,1920
    c814:	e0bfff15 	stw	r2,-4(fp)
    c818:	e0bfff17 	ldw	r2,-4(fp)
}
    c81c:	e037883a 	mov	sp,fp
    c820:	dfc00117 	ldw	ra,4(sp)
    c824:	df000017 	ldw	fp,0(sp)
    c828:	dec00204 	addi	sp,sp,8
    c82c:	f800283a 	ret

0000c830 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    c830:	defff904 	addi	sp,sp,-28
    c834:	dfc00615 	stw	ra,24(sp)
    c838:	df000515 	stw	fp,20(sp)
    c83c:	df000504 	addi	fp,sp,20
    c840:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    c844:	00800144 	movi	r2,5
    c848:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    c84c:	00800044 	movi	r2,1
    c850:	d8800015 	stw	r2,0(sp)
    c854:	e0bffe44 	addi	r2,fp,-7
    c858:	d8800115 	stw	r2,4(sp)
    c85c:	d8000215 	stw	zero,8(sp)
    c860:	e13fff17 	ldw	r4,-4(fp)
    c864:	000b883a 	mov	r5,zero
    c868:	01800044 	movi	r6,1
    c86c:	e1fffe04 	addi	r7,fp,-8
    c870:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    c874:	e0bffe43 	ldbu	r2,-7(fp)
    c878:	10803fcc 	andi	r2,r2,255
}
    c87c:	e037883a 	mov	sp,fp
    c880:	dfc00117 	ldw	ra,4(sp)
    c884:	df000017 	ldw	fp,0(sp)
    c888:	dec00204 	addi	sp,sp,8
    c88c:	f800283a 	ret

0000c890 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    c890:	defff604 	addi	sp,sp,-40
    c894:	dfc00915 	stw	ra,36(sp)
    c898:	df000815 	stw	fp,32(sp)
    c89c:	df000804 	addi	fp,sp,32
    c8a0:	e13ffd15 	stw	r4,-12(fp)
    c8a4:	e17ffe15 	stw	r5,-8(fp)
    c8a8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    c8ac:	e0bfff17 	ldw	r2,-4(fp)
    c8b0:	1005003a 	cmpeq	r2,r2,zero
    c8b4:	1000121e 	bne	r2,zero,c900 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    c8b8:	00bff604 	movi	r2,-40
    c8bc:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    c8c0:	e0bffe17 	ldw	r2,-8(fp)
    c8c4:	1004d63a 	srli	r2,r2,24
    c8c8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    c8cc:	e0bffe17 	ldw	r2,-8(fp)
    c8d0:	1004d43a 	srli	r2,r2,16
    c8d4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    c8d8:	e0bffe17 	ldw	r2,-8(fp)
    c8dc:	1004d23a 	srli	r2,r2,8
    c8e0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    c8e4:	e0bffe17 	ldw	r2,-8(fp)
    c8e8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    c8ec:	00800144 	movi	r2,5
    c8f0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    c8f4:	e13ffd17 	ldw	r4,-12(fp)
    c8f8:	000ce540 	call	ce54 <epcs_enter_4_bytes_mode>
    c8fc:	00000c06 	br	c930 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
    c900:	00bff604 	movi	r2,-40
    c904:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    c908:	e0bffe17 	ldw	r2,-8(fp)
    c90c:	1004d43a 	srli	r2,r2,16
    c910:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    c914:	e0bffe17 	ldw	r2,-8(fp)
    c918:	1004d23a 	srli	r2,r2,8
    c91c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    c920:	e0bffe17 	ldw	r2,-8(fp)
    c924:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    c928:	00800104 	movi	r2,4
    c92c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    c930:	e13ffd17 	ldw	r4,-12(fp)
    c934:	000cb440 	call	cb44 <epcs_write_enable>

  alt_avalon_spi_command(
    c938:	e1bffb03 	ldbu	r6,-20(fp)
    c93c:	e1fffb44 	addi	r7,fp,-19
    c940:	d8000015 	stw	zero,0(sp)
    c944:	d8000115 	stw	zero,4(sp)
    c948:	d8000215 	stw	zero,8(sp)
    c94c:	e13ffd17 	ldw	r4,-12(fp)
    c950:	000b883a 	mov	r5,zero
    c954:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    c958:	e13ffd17 	ldw	r4,-12(fp)
    c95c:	000c9880 	call	c988 <epcs_await_wip_released>

  if(four_bytes_mode)
    c960:	e0bfff17 	ldw	r2,-4(fp)
    c964:	1005003a 	cmpeq	r2,r2,zero
    c968:	1000021e 	bne	r2,zero,c974 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    c96c:	e13ffd17 	ldw	r4,-12(fp)
    c970:	000ceac0 	call	ceac <epcs_exit_4_bytes_mode>
  }
}
    c974:	e037883a 	mov	sp,fp
    c978:	dfc00117 	ldw	ra,4(sp)
    c97c:	df000017 	ldw	fp,0(sp)
    c980:	dec00204 	addi	sp,sp,8
    c984:	f800283a 	ret

0000c988 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    c988:	defffd04 	addi	sp,sp,-12
    c98c:	dfc00215 	stw	ra,8(sp)
    c990:	df000115 	stw	fp,4(sp)
    c994:	df000104 	addi	fp,sp,4
    c998:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    c99c:	e13fff17 	ldw	r4,-4(fp)
    c9a0:	000c9c00 	call	c9c0 <epcs_test_wip>
    c9a4:	1004c03a 	cmpne	r2,r2,zero
    c9a8:	103ffc1e 	bne	r2,zero,c99c <epcs_await_wip_released+0x14>
  {
  }
}
    c9ac:	e037883a 	mov	sp,fp
    c9b0:	dfc00117 	ldw	ra,4(sp)
    c9b4:	df000017 	ldw	fp,0(sp)
    c9b8:	dec00204 	addi	sp,sp,8
    c9bc:	f800283a 	ret

0000c9c0 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    c9c0:	defffd04 	addi	sp,sp,-12
    c9c4:	dfc00215 	stw	ra,8(sp)
    c9c8:	df000115 	stw	fp,4(sp)
    c9cc:	df000104 	addi	fp,sp,4
    c9d0:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    c9d4:	e13fff17 	ldw	r4,-4(fp)
    c9d8:	000c8300 	call	c830 <epcs_read_status_register>
    c9dc:	10803fcc 	andi	r2,r2,255
    c9e0:	1080004c 	andi	r2,r2,1
}
    c9e4:	e037883a 	mov	sp,fp
    c9e8:	dfc00117 	ldw	ra,4(sp)
    c9ec:	df000017 	ldw	fp,0(sp)
    c9f0:	dec00204 	addi	sp,sp,8
    c9f4:	f800283a 	ret

0000c9f8 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    c9f8:	defff404 	addi	sp,sp,-48
    c9fc:	dfc00b15 	stw	ra,44(sp)
    ca00:	df000a15 	stw	fp,40(sp)
    ca04:	df000a04 	addi	fp,sp,40
    ca08:	e13ffc15 	stw	r4,-16(fp)
    ca0c:	e17ffd15 	stw	r5,-12(fp)
    ca10:	e1bffe15 	stw	r6,-8(fp)
    ca14:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    ca18:	008000c4 	movi	r2,3
    ca1c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    ca20:	e0800217 	ldw	r2,8(fp)
    ca24:	1005003a 	cmpeq	r2,r2,zero
    ca28:	10001c1e 	bne	r2,zero,ca9c <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    ca2c:	e0bffd17 	ldw	r2,-12(fp)
    ca30:	1005d63a 	srai	r2,r2,24
    ca34:	1007883a 	mov	r3,r2
    ca38:	00bfffc4 	movi	r2,-1
    ca3c:	1884703a 	and	r2,r3,r2
    ca40:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    ca44:	e0bffd17 	ldw	r2,-12(fp)
    ca48:	1005d43a 	srai	r2,r2,16
    ca4c:	1007883a 	mov	r3,r2
    ca50:	00bfffc4 	movi	r2,-1
    ca54:	1884703a 	and	r2,r3,r2
    ca58:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    ca5c:	e0bffd17 	ldw	r2,-12(fp)
    ca60:	1005d23a 	srai	r2,r2,8
    ca64:	1007883a 	mov	r3,r2
    ca68:	00bfffc4 	movi	r2,-1
    ca6c:	1884703a 	and	r2,r3,r2
    ca70:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    ca74:	e0bffd17 	ldw	r2,-12(fp)
    ca78:	1007883a 	mov	r3,r2
    ca7c:	00bfffc4 	movi	r2,-1
    ca80:	1884703a 	and	r2,r3,r2
    ca84:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    ca88:	00800144 	movi	r2,5
    ca8c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    ca90:	e13ffc17 	ldw	r4,-16(fp)
    ca94:	000ce540 	call	ce54 <epcs_enter_4_bytes_mode>
    ca98:	00001306 	br	cae8 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    ca9c:	e0bffd17 	ldw	r2,-12(fp)
    caa0:	1005d43a 	srai	r2,r2,16
    caa4:	1007883a 	mov	r3,r2
    caa8:	00bfffc4 	movi	r2,-1
    caac:	1884703a 	and	r2,r3,r2
    cab0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    cab4:	e0bffd17 	ldw	r2,-12(fp)
    cab8:	1005d23a 	srai	r2,r2,8
    cabc:	1007883a 	mov	r3,r2
    cac0:	00bfffc4 	movi	r2,-1
    cac4:	1884703a 	and	r2,r3,r2
    cac8:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    cacc:	e0bffd17 	ldw	r2,-12(fp)
    cad0:	1007883a 	mov	r3,r2
    cad4:	00bfffc4 	movi	r2,-1
    cad8:	1884703a 	and	r2,r3,r2
    cadc:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    cae0:	00800104 	movi	r2,4
    cae4:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    cae8:	e13ffc17 	ldw	r4,-16(fp)
    caec:	000c9880 	call	c988 <epcs_await_wip_released>

  alt_avalon_spi_command(
    caf0:	e0bfff17 	ldw	r2,-4(fp)
    caf4:	e1fffa04 	addi	r7,fp,-24
    caf8:	d8800015 	stw	r2,0(sp)
    cafc:	e0bffe17 	ldw	r2,-8(fp)
    cb00:	d8800115 	stw	r2,4(sp)
    cb04:	d8000215 	stw	zero,8(sp)
    cb08:	e13ffc17 	ldw	r4,-16(fp)
    cb0c:	000b883a 	mov	r5,zero
    cb10:	e1bff917 	ldw	r6,-28(fp)
    cb14:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    cb18:	e0800217 	ldw	r2,8(fp)
    cb1c:	1005003a 	cmpeq	r2,r2,zero
    cb20:	1000021e 	bne	r2,zero,cb2c <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
    cb24:	e13ffc17 	ldw	r4,-16(fp)
    cb28:	000ceac0 	call	ceac <epcs_exit_4_bytes_mode>
  }

  return length;
    cb2c:	e0bfff17 	ldw	r2,-4(fp)
}
    cb30:	e037883a 	mov	sp,fp
    cb34:	dfc00117 	ldw	ra,4(sp)
    cb38:	df000017 	ldw	fp,0(sp)
    cb3c:	dec00204 	addi	sp,sp,8
    cb40:	f800283a 	ret

0000cb44 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    cb44:	defff904 	addi	sp,sp,-28
    cb48:	dfc00615 	stw	ra,24(sp)
    cb4c:	df000515 	stw	fp,20(sp)
    cb50:	df000504 	addi	fp,sp,20
    cb54:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    cb58:	00800184 	movi	r2,6
    cb5c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    cb60:	d8000015 	stw	zero,0(sp)
    cb64:	d8000115 	stw	zero,4(sp)
    cb68:	d8000215 	stw	zero,8(sp)
    cb6c:	e13fff17 	ldw	r4,-4(fp)
    cb70:	000b883a 	mov	r5,zero
    cb74:	01800044 	movi	r6,1
    cb78:	e1fffe04 	addi	r7,fp,-8
    cb7c:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    cb80:	e037883a 	mov	sp,fp
    cb84:	dfc00117 	ldw	ra,4(sp)
    cb88:	df000017 	ldw	fp,0(sp)
    cb8c:	dec00204 	addi	sp,sp,8
    cb90:	f800283a 	ret

0000cb94 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    cb94:	defff804 	addi	sp,sp,-32
    cb98:	dfc00715 	stw	ra,28(sp)
    cb9c:	df000615 	stw	fp,24(sp)
    cba0:	df000604 	addi	fp,sp,24
    cba4:	e13ffe15 	stw	r4,-8(fp)
    cba8:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    cbac:	00800044 	movi	r2,1
    cbb0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    cbb4:	e0bfff03 	ldbu	r2,-4(fp)
    cbb8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    cbbc:	d8000015 	stw	zero,0(sp)
    cbc0:	d8000115 	stw	zero,4(sp)
    cbc4:	d8000215 	stw	zero,8(sp)
    cbc8:	e13ffe17 	ldw	r4,-8(fp)
    cbcc:	000b883a 	mov	r5,zero
    cbd0:	01800084 	movi	r6,2
    cbd4:	e1fffd04 	addi	r7,fp,-12
    cbd8:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    cbdc:	e13ffe17 	ldw	r4,-8(fp)
    cbe0:	000c9880 	call	c988 <epcs_await_wip_released>
}
    cbe4:	e037883a 	mov	sp,fp
    cbe8:	dfc00117 	ldw	ra,4(sp)
    cbec:	df000017 	ldw	fp,0(sp)
    cbf0:	dec00204 	addi	sp,sp,8
    cbf4:	f800283a 	ret

0000cbf8 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    cbf8:	defff404 	addi	sp,sp,-48
    cbfc:	dfc00b15 	stw	ra,44(sp)
    cc00:	df000a15 	stw	fp,40(sp)
    cc04:	df000a04 	addi	fp,sp,40
    cc08:	e13ffc15 	stw	r4,-16(fp)
    cc0c:	e17ffd15 	stw	r5,-12(fp)
    cc10:	e1bffe15 	stw	r6,-8(fp)
    cc14:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    cc18:	00800084 	movi	r2,2
    cc1c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    cc20:	e0800217 	ldw	r2,8(fp)
    cc24:	1005003a 	cmpeq	r2,r2,zero
    cc28:	10001c1e 	bne	r2,zero,cc9c <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
    cc2c:	e0bffd17 	ldw	r2,-12(fp)
    cc30:	1005d63a 	srai	r2,r2,24
    cc34:	1007883a 	mov	r3,r2
    cc38:	00bfffc4 	movi	r2,-1
    cc3c:	1884703a 	and	r2,r3,r2
    cc40:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    cc44:	e0bffd17 	ldw	r2,-12(fp)
    cc48:	1005d43a 	srai	r2,r2,16
    cc4c:	1007883a 	mov	r3,r2
    cc50:	00bfffc4 	movi	r2,-1
    cc54:	1884703a 	and	r2,r3,r2
    cc58:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    cc5c:	e0bffd17 	ldw	r2,-12(fp)
    cc60:	1005d23a 	srai	r2,r2,8
    cc64:	1007883a 	mov	r3,r2
    cc68:	00bfffc4 	movi	r2,-1
    cc6c:	1884703a 	and	r2,r3,r2
    cc70:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    cc74:	e0bffd17 	ldw	r2,-12(fp)
    cc78:	1007883a 	mov	r3,r2
    cc7c:	00bfffc4 	movi	r2,-1
    cc80:	1884703a 	and	r2,r3,r2
    cc84:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    cc88:	00800144 	movi	r2,5
    cc8c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    cc90:	e13ffc17 	ldw	r4,-16(fp)
    cc94:	000ce540 	call	ce54 <epcs_enter_4_bytes_mode>
    cc98:	00001306 	br	cce8 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    cc9c:	e0bffd17 	ldw	r2,-12(fp)
    cca0:	1005d43a 	srai	r2,r2,16
    cca4:	1007883a 	mov	r3,r2
    cca8:	00bfffc4 	movi	r2,-1
    ccac:	1884703a 	and	r2,r3,r2
    ccb0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    ccb4:	e0bffd17 	ldw	r2,-12(fp)
    ccb8:	1005d23a 	srai	r2,r2,8
    ccbc:	1007883a 	mov	r3,r2
    ccc0:	00bfffc4 	movi	r2,-1
    ccc4:	1884703a 	and	r2,r3,r2
    ccc8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    cccc:	e0bffd17 	ldw	r2,-12(fp)
    ccd0:	1007883a 	mov	r3,r2
    ccd4:	00bfffc4 	movi	r2,-1
    ccd8:	1884703a 	and	r2,r3,r2
    ccdc:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    cce0:	00800104 	movi	r2,4
    cce4:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    cce8:	e13ffc17 	ldw	r4,-16(fp)
    ccec:	000cb440 	call	cb44 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    ccf0:	e1fffa04 	addi	r7,fp,-24
    ccf4:	d8000015 	stw	zero,0(sp)
    ccf8:	d8000115 	stw	zero,4(sp)
    ccfc:	00800044 	movi	r2,1
    cd00:	d8800215 	stw	r2,8(sp)
    cd04:	e13ffc17 	ldw	r4,-16(fp)
    cd08:	000b883a 	mov	r5,zero
    cd0c:	e1bff917 	ldw	r6,-28(fp)
    cd10:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    cd14:	e1bfff17 	ldw	r6,-4(fp)
    cd18:	d8000015 	stw	zero,0(sp)
    cd1c:	d8000115 	stw	zero,4(sp)
    cd20:	d8000215 	stw	zero,8(sp)
    cd24:	e13ffc17 	ldw	r4,-16(fp)
    cd28:	000b883a 	mov	r5,zero
    cd2c:	e1fffe17 	ldw	r7,-8(fp)
    cd30:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    cd34:	e13ffc17 	ldw	r4,-16(fp)
    cd38:	000c9880 	call	c988 <epcs_await_wip_released>

  if(four_bytes_mode)
    cd3c:	e0800217 	ldw	r2,8(fp)
    cd40:	1005003a 	cmpeq	r2,r2,zero
    cd44:	1000021e 	bne	r2,zero,cd50 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
    cd48:	e13ffc17 	ldw	r4,-16(fp)
    cd4c:	000ceac0 	call	ceac <epcs_exit_4_bytes_mode>
  }

  return length;
    cd50:	e0bfff17 	ldw	r2,-4(fp)
}
    cd54:	e037883a 	mov	sp,fp
    cd58:	dfc00117 	ldw	ra,4(sp)
    cd5c:	df000017 	ldw	fp,0(sp)
    cd60:	dec00204 	addi	sp,sp,8
    cd64:	f800283a 	ret

0000cd68 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    cd68:	defff804 	addi	sp,sp,-32
    cd6c:	dfc00715 	stw	ra,28(sp)
    cd70:	df000615 	stw	fp,24(sp)
    cd74:	df000604 	addi	fp,sp,24
    cd78:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    cd7c:	00bfeac4 	movi	r2,-85
    cd80:	e0bffd05 	stb	r2,-12(fp)
    cd84:	e03ffd45 	stb	zero,-11(fp)
    cd88:	e03ffd85 	stb	zero,-10(fp)
    cd8c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    cd90:	00800044 	movi	r2,1
    cd94:	d8800015 	stw	r2,0(sp)
    cd98:	e0bffe04 	addi	r2,fp,-8
    cd9c:	d8800115 	stw	r2,4(sp)
    cda0:	d8000215 	stw	zero,8(sp)
    cda4:	e13fff17 	ldw	r4,-4(fp)
    cda8:	000b883a 	mov	r5,zero
    cdac:	01800104 	movi	r6,4
    cdb0:	e1fffd04 	addi	r7,fp,-12
    cdb4:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    cdb8:	e0bffe03 	ldbu	r2,-8(fp)
    cdbc:	10803fcc 	andi	r2,r2,255
}
    cdc0:	e037883a 	mov	sp,fp
    cdc4:	dfc00117 	ldw	ra,4(sp)
    cdc8:	df000017 	ldw	fp,0(sp)
    cdcc:	dec00204 	addi	sp,sp,8
    cdd0:	f800283a 	ret

0000cdd4 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    cdd4:	defff904 	addi	sp,sp,-28
    cdd8:	dfc00615 	stw	ra,24(sp)
    cddc:	df000515 	stw	fp,20(sp)
    cde0:	df000504 	addi	fp,sp,20
    cde4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    cde8:	00bfe7c4 	movi	r2,-97
    cdec:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    cdf0:	008000c4 	movi	r2,3
    cdf4:	d8800015 	stw	r2,0(sp)
    cdf8:	e0bffe44 	addi	r2,fp,-7
    cdfc:	d8800115 	stw	r2,4(sp)
    ce00:	d8000215 	stw	zero,8(sp)
    ce04:	e13fff17 	ldw	r4,-4(fp)
    ce08:	000b883a 	mov	r5,zero
    ce0c:	01800044 	movi	r6,1
    ce10:	e1fffe04 	addi	r7,fp,-8
    ce14:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    ce18:	e0bffe43 	ldbu	r2,-7(fp)
    ce1c:	10803fcc 	andi	r2,r2,255
    ce20:	1006943a 	slli	r3,r2,16
    ce24:	e0bffe83 	ldbu	r2,-6(fp)
    ce28:	10803fcc 	andi	r2,r2,255
    ce2c:	1004923a 	slli	r2,r2,8
    ce30:	1886b03a 	or	r3,r3,r2
    ce34:	e0bffec3 	ldbu	r2,-5(fp)
    ce38:	10803fcc 	andi	r2,r2,255
    ce3c:	1884b03a 	or	r2,r3,r2
}
    ce40:	e037883a 	mov	sp,fp
    ce44:	dfc00117 	ldw	ra,4(sp)
    ce48:	df000017 	ldw	fp,0(sp)
    ce4c:	dec00204 	addi	sp,sp,8
    ce50:	f800283a 	ret

0000ce54 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    ce54:	defff904 	addi	sp,sp,-28
    ce58:	dfc00615 	stw	ra,24(sp)
    ce5c:	df000515 	stw	fp,20(sp)
    ce60:	df000504 	addi	fp,sp,20
    ce64:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    ce68:	00bfedc4 	movi	r2,-73
    ce6c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    ce70:	e13fff17 	ldw	r4,-4(fp)
    ce74:	000cb440 	call	cb44 <epcs_write_enable>

  alt_avalon_spi_command(
    ce78:	d8000015 	stw	zero,0(sp)
    ce7c:	d8000115 	stw	zero,4(sp)
    ce80:	d8000215 	stw	zero,8(sp)
    ce84:	e13fff17 	ldw	r4,-4(fp)
    ce88:	000b883a 	mov	r5,zero
    ce8c:	01800044 	movi	r6,1
    ce90:	e1fffe04 	addi	r7,fp,-8
    ce94:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    ce98:	e037883a 	mov	sp,fp
    ce9c:	dfc00117 	ldw	ra,4(sp)
    cea0:	df000017 	ldw	fp,0(sp)
    cea4:	dec00204 	addi	sp,sp,8
    cea8:	f800283a 	ret

0000ceac <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    ceac:	defff904 	addi	sp,sp,-28
    ceb0:	dfc00615 	stw	ra,24(sp)
    ceb4:	df000515 	stw	fp,20(sp)
    ceb8:	df000504 	addi	fp,sp,20
    cebc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    cec0:	00bffa44 	movi	r2,-23
    cec4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    cec8:	e13fff17 	ldw	r4,-4(fp)
    cecc:	000cb440 	call	cb44 <epcs_write_enable>

  alt_avalon_spi_command(
    ced0:	d8000015 	stw	zero,0(sp)
    ced4:	d8000115 	stw	zero,4(sp)
    ced8:	d8000215 	stw	zero,8(sp)
    cedc:	e13fff17 	ldw	r4,-4(fp)
    cee0:	000b883a 	mov	r5,zero
    cee4:	01800044 	movi	r6,1
    cee8:	e1fffe04 	addi	r7,fp,-8
    ceec:	000dbc80 	call	dbc8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    cef0:	e037883a 	mov	sp,fp
    cef4:	dfc00117 	ldw	ra,4(sp)
    cef8:	df000017 	ldw	fp,0(sp)
    cefc:	dec00204 	addi	sp,sp,8
    cf00:	f800283a 	ret

0000cf04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    cf04:	defff404 	addi	sp,sp,-48
    cf08:	df000b15 	stw	fp,44(sp)
    cf0c:	df000b04 	addi	fp,sp,44
    cf10:	e13ffb15 	stw	r4,-20(fp)
    cf14:	e17ffc15 	stw	r5,-16(fp)
    cf18:	e1bffd15 	stw	r6,-12(fp)
    cf1c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    cf20:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cf24:	00800074 	movhi	r2,1
    cf28:	1081e504 	addi	r2,r2,1940
    cf2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    cf30:	1005003a 	cmpeq	r2,r2,zero
    cf34:	1000411e 	bne	r2,zero,d03c <alt_alarm_start+0x138>
  {
    if (alarm)
    cf38:	e0bffb17 	ldw	r2,-20(fp)
    cf3c:	1005003a 	cmpeq	r2,r2,zero
    cf40:	10003b1e 	bne	r2,zero,d030 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    cf44:	e0fffb17 	ldw	r3,-20(fp)
    cf48:	e0bffd17 	ldw	r2,-12(fp)
    cf4c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    cf50:	e0fffb17 	ldw	r3,-20(fp)
    cf54:	e0bffe17 	ldw	r2,-8(fp)
    cf58:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf5c:	0005303a 	rdctl	r2,status
    cf60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf64:	e0fff817 	ldw	r3,-32(fp)
    cf68:	00bfff84 	movi	r2,-2
    cf6c:	1884703a 	and	r2,r3,r2
    cf70:	1001703a 	wrctl	status,r2
  
  return context;
    cf74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    cf78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    cf7c:	00800074 	movhi	r2,1
    cf80:	1081e604 	addi	r2,r2,1944
    cf84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    cf88:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    cf8c:	e0fffc17 	ldw	r3,-16(fp)
    cf90:	e0bff917 	ldw	r2,-28(fp)
    cf94:	1885883a 	add	r2,r3,r2
    cf98:	10c00044 	addi	r3,r2,1
    cf9c:	e0bffb17 	ldw	r2,-20(fp)
    cfa0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    cfa4:	e0bffb17 	ldw	r2,-20(fp)
    cfa8:	10c00217 	ldw	r3,8(r2)
    cfac:	e0bff917 	ldw	r2,-28(fp)
    cfb0:	1880042e 	bgeu	r3,r2,cfc4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    cfb4:	e0fffb17 	ldw	r3,-20(fp)
    cfb8:	00800044 	movi	r2,1
    cfbc:	18800405 	stb	r2,16(r3)
    cfc0:	00000206 	br	cfcc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    cfc4:	e0bffb17 	ldw	r2,-20(fp)
    cfc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    cfcc:	e0fffb17 	ldw	r3,-20(fp)
    cfd0:	00800074 	movhi	r2,1
    cfd4:	1081d804 	addi	r2,r2,1888
    cfd8:	e0bff615 	stw	r2,-40(fp)
    cfdc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cfe0:	e0fff717 	ldw	r3,-36(fp)
    cfe4:	e0bff617 	ldw	r2,-40(fp)
    cfe8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    cfec:	e0bff617 	ldw	r2,-40(fp)
    cff0:	10c00017 	ldw	r3,0(r2)
    cff4:	e0bff717 	ldw	r2,-36(fp)
    cff8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cffc:	e0bff617 	ldw	r2,-40(fp)
    d000:	10c00017 	ldw	r3,0(r2)
    d004:	e0bff717 	ldw	r2,-36(fp)
    d008:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d00c:	e0fff617 	ldw	r3,-40(fp)
    d010:	e0bff717 	ldw	r2,-36(fp)
    d014:	18800015 	stw	r2,0(r3)
    d018:	e0bffa17 	ldw	r2,-24(fp)
    d01c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d020:	e0bff517 	ldw	r2,-44(fp)
    d024:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d028:	e03fff15 	stw	zero,-4(fp)
    d02c:	00000506 	br	d044 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    d030:	00bffa84 	movi	r2,-22
    d034:	e0bfff15 	stw	r2,-4(fp)
    d038:	00000206 	br	d044 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    d03c:	00bfde84 	movi	r2,-134
    d040:	e0bfff15 	stw	r2,-4(fp)
    d044:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    d048:	e037883a 	mov	sp,fp
    d04c:	df000017 	ldw	fp,0(sp)
    d050:	dec00104 	addi	sp,sp,4
    d054:	f800283a 	ret

0000d058 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d058:	defff904 	addi	sp,sp,-28
    d05c:	dfc00615 	stw	ra,24(sp)
    d060:	df000515 	stw	fp,20(sp)
    d064:	df000504 	addi	fp,sp,20
    d068:	e13ffd15 	stw	r4,-12(fp)
    d06c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d070:	e0bffd17 	ldw	r2,-12(fp)
    d074:	1005003a 	cmpeq	r2,r2,zero
    d078:	1000041e 	bne	r2,zero,d08c <alt_dev_llist_insert+0x34>
    d07c:	e0bffd17 	ldw	r2,-12(fp)
    d080:	10800217 	ldw	r2,8(r2)
    d084:	1004c03a 	cmpne	r2,r2,zero
    d088:	1000071e 	bne	r2,zero,d0a8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    d08c:	000d10c0 	call	d10c <alt_get_errno>
    d090:	1007883a 	mov	r3,r2
    d094:	00800584 	movi	r2,22
    d098:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d09c:	00bffa84 	movi	r2,-22
    d0a0:	e0bfff15 	stw	r2,-4(fp)
    d0a4:	00001306 	br	d0f4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d0a8:	e0fffd17 	ldw	r3,-12(fp)
    d0ac:	e0bffe17 	ldw	r2,-8(fp)
    d0b0:	e0bffb15 	stw	r2,-20(fp)
    d0b4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d0b8:	e0fffc17 	ldw	r3,-16(fp)
    d0bc:	e0bffb17 	ldw	r2,-20(fp)
    d0c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d0c4:	e0bffb17 	ldw	r2,-20(fp)
    d0c8:	10c00017 	ldw	r3,0(r2)
    d0cc:	e0bffc17 	ldw	r2,-16(fp)
    d0d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d0d4:	e0bffb17 	ldw	r2,-20(fp)
    d0d8:	10c00017 	ldw	r3,0(r2)
    d0dc:	e0bffc17 	ldw	r2,-16(fp)
    d0e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d0e4:	e0fffb17 	ldw	r3,-20(fp)
    d0e8:	e0bffc17 	ldw	r2,-16(fp)
    d0ec:	18800015 	stw	r2,0(r3)

  return 0;  
    d0f0:	e03fff15 	stw	zero,-4(fp)
    d0f4:	e0bfff17 	ldw	r2,-4(fp)
}
    d0f8:	e037883a 	mov	sp,fp
    d0fc:	dfc00117 	ldw	ra,4(sp)
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00204 	addi	sp,sp,8
    d108:	f800283a 	ret

0000d10c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d10c:	defffd04 	addi	sp,sp,-12
    d110:	dfc00215 	stw	ra,8(sp)
    d114:	df000115 	stw	fp,4(sp)
    d118:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d11c:	00800074 	movhi	r2,1
    d120:	1081d304 	addi	r2,r2,1868
    d124:	10800017 	ldw	r2,0(r2)
    d128:	1005003a 	cmpeq	r2,r2,zero
    d12c:	1000061e 	bne	r2,zero,d148 <alt_get_errno+0x3c>
    d130:	00800074 	movhi	r2,1
    d134:	1081d304 	addi	r2,r2,1868
    d138:	10800017 	ldw	r2,0(r2)
    d13c:	103ee83a 	callr	r2
    d140:	e0bfff15 	stw	r2,-4(fp)
    d144:	00000306 	br	d154 <alt_get_errno+0x48>
    d148:	00800074 	movhi	r2,1
    d14c:	1081e004 	addi	r2,r2,1920
    d150:	e0bfff15 	stw	r2,-4(fp)
    d154:	e0bfff17 	ldw	r2,-4(fp)
}
    d158:	e037883a 	mov	sp,fp
    d15c:	dfc00117 	ldw	ra,4(sp)
    d160:	df000017 	ldw	fp,0(sp)
    d164:	dec00204 	addi	sp,sp,8
    d168:	f800283a 	ret

0000d16c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d16c:	defffd04 	addi	sp,sp,-12
    d170:	dfc00215 	stw	ra,8(sp)
    d174:	df000115 	stw	fp,4(sp)
    d178:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d17c:	00bfff04 	movi	r2,-4
    d180:	00c00074 	movhi	r3,1
    d184:	18f92404 	addi	r3,r3,-7024
    d188:	1885883a 	add	r2,r3,r2
    d18c:	e0bfff15 	stw	r2,-4(fp)
    d190:	00000606 	br	d1ac <_do_ctors+0x40>
        (*ctor) (); 
    d194:	e0bfff17 	ldw	r2,-4(fp)
    d198:	10800017 	ldw	r2,0(r2)
    d19c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d1a0:	e0bfff17 	ldw	r2,-4(fp)
    d1a4:	10bfff04 	addi	r2,r2,-4
    d1a8:	e0bfff15 	stw	r2,-4(fp)
    d1ac:	e0ffff17 	ldw	r3,-4(fp)
    d1b0:	00800074 	movhi	r2,1
    d1b4:	10b92304 	addi	r2,r2,-7028
    d1b8:	18bff62e 	bgeu	r3,r2,d194 <_do_ctors+0x28>
        (*ctor) (); 
}
    d1bc:	e037883a 	mov	sp,fp
    d1c0:	dfc00117 	ldw	ra,4(sp)
    d1c4:	df000017 	ldw	fp,0(sp)
    d1c8:	dec00204 	addi	sp,sp,8
    d1cc:	f800283a 	ret

0000d1d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d1d0:	defffd04 	addi	sp,sp,-12
    d1d4:	dfc00215 	stw	ra,8(sp)
    d1d8:	df000115 	stw	fp,4(sp)
    d1dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d1e0:	00bfff04 	movi	r2,-4
    d1e4:	00c00074 	movhi	r3,1
    d1e8:	18f92404 	addi	r3,r3,-7024
    d1ec:	1885883a 	add	r2,r3,r2
    d1f0:	e0bfff15 	stw	r2,-4(fp)
    d1f4:	00000606 	br	d210 <_do_dtors+0x40>
        (*dtor) (); 
    d1f8:	e0bfff17 	ldw	r2,-4(fp)
    d1fc:	10800017 	ldw	r2,0(r2)
    d200:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d204:	e0bfff17 	ldw	r2,-4(fp)
    d208:	10bfff04 	addi	r2,r2,-4
    d20c:	e0bfff15 	stw	r2,-4(fp)
    d210:	e0ffff17 	ldw	r3,-4(fp)
    d214:	00800074 	movhi	r2,1
    d218:	10b92404 	addi	r2,r2,-7024
    d21c:	18bff62e 	bgeu	r3,r2,d1f8 <_do_dtors+0x28>
        (*dtor) (); 
}
    d220:	e037883a 	mov	sp,fp
    d224:	dfc00117 	ldw	ra,4(sp)
    d228:	df000017 	ldw	fp,0(sp)
    d22c:	dec00204 	addi	sp,sp,8
    d230:	f800283a 	ret

0000d234 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    d234:	defffb04 	addi	sp,sp,-20
    d238:	dfc00415 	stw	ra,16(sp)
    d23c:	df000315 	stw	fp,12(sp)
    d240:	df000304 	addi	fp,sp,12
    d244:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    d248:	e13ffe17 	ldw	r4,-8(fp)
    d24c:	d1600e04 	addi	r5,gp,-32712
    d250:	000de000 	call	de00 <alt_find_dev>
    d254:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
    d258:	e0bffd17 	ldw	r2,-12(fp)
    d25c:	1005003a 	cmpeq	r2,r2,zero
    d260:	10000b1e 	bne	r2,zero,d290 <alt_flash_open_dev+0x5c>
    d264:	e0bffd17 	ldw	r2,-12(fp)
    d268:	10800317 	ldw	r2,12(r2)
    d26c:	1005003a 	cmpeq	r2,r2,zero
    d270:	1000071e 	bne	r2,zero,d290 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
    d274:	e0bffd17 	ldw	r2,-12(fp)
    d278:	10800317 	ldw	r2,12(r2)
    d27c:	e13ffd17 	ldw	r4,-12(fp)
    d280:	e17ffe17 	ldw	r5,-8(fp)
    d284:	103ee83a 	callr	r2
    d288:	e0bfff15 	stw	r2,-4(fp)
    d28c:	00000206 	br	d298 <alt_flash_open_dev+0x64>
  }

  return dev;
    d290:	e0bffd17 	ldw	r2,-12(fp)
    d294:	e0bfff15 	stw	r2,-4(fp)
    d298:	e0bfff17 	ldw	r2,-4(fp)
}
    d29c:	e037883a 	mov	sp,fp
    d2a0:	dfc00117 	ldw	ra,4(sp)
    d2a4:	df000017 	ldw	fp,0(sp)
    d2a8:	dec00204 	addi	sp,sp,8
    d2ac:	f800283a 	ret

0000d2b0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    d2b0:	defffd04 	addi	sp,sp,-12
    d2b4:	dfc00215 	stw	ra,8(sp)
    d2b8:	df000115 	stw	fp,4(sp)
    d2bc:	df000104 	addi	fp,sp,4
    d2c0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    d2c4:	e0bfff17 	ldw	r2,-4(fp)
    d2c8:	1005003a 	cmpeq	r2,r2,zero
    d2cc:	1000081e 	bne	r2,zero,d2f0 <alt_flash_close_dev+0x40>
    d2d0:	e0bfff17 	ldw	r2,-4(fp)
    d2d4:	10800417 	ldw	r2,16(r2)
    d2d8:	1005003a 	cmpeq	r2,r2,zero
    d2dc:	1000041e 	bne	r2,zero,d2f0 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
    d2e0:	e0bfff17 	ldw	r2,-4(fp)
    d2e4:	10800417 	ldw	r2,16(r2)
    d2e8:	e13fff17 	ldw	r4,-4(fp)
    d2ec:	103ee83a 	callr	r2
  }
  return;
}
    d2f0:	e037883a 	mov	sp,fp
    d2f4:	dfc00117 	ldw	ra,4(sp)
    d2f8:	df000017 	ldw	fp,0(sp)
    d2fc:	dec00204 	addi	sp,sp,8
    d300:	f800283a 	ret

0000d304 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d304:	defff904 	addi	sp,sp,-28
    d308:	dfc00615 	stw	ra,24(sp)
    d30c:	df000515 	stw	fp,20(sp)
    d310:	df000504 	addi	fp,sp,20
    d314:	e13ffc15 	stw	r4,-16(fp)
    d318:	e17ffd15 	stw	r5,-12(fp)
    d31c:	e1bffe15 	stw	r6,-8(fp)
    d320:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d324:	e0800217 	ldw	r2,8(fp)
    d328:	d8800015 	stw	r2,0(sp)
    d32c:	e13ffc17 	ldw	r4,-16(fp)
    d330:	e17ffd17 	ldw	r5,-12(fp)
    d334:	e1bffe17 	ldw	r6,-8(fp)
    d338:	e1ffff17 	ldw	r7,-4(fp)
    d33c:	000d4d80 	call	d4d8 <alt_iic_isr_register>
}  
    d340:	e037883a 	mov	sp,fp
    d344:	dfc00117 	ldw	ra,4(sp)
    d348:	df000017 	ldw	fp,0(sp)
    d34c:	dec00204 	addi	sp,sp,8
    d350:	f800283a 	ret

0000d354 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d354:	defff904 	addi	sp,sp,-28
    d358:	df000615 	stw	fp,24(sp)
    d35c:	df000604 	addi	fp,sp,24
    d360:	e13ffe15 	stw	r4,-8(fp)
    d364:	e17fff15 	stw	r5,-4(fp)
    d368:	e0bfff17 	ldw	r2,-4(fp)
    d36c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d370:	0005303a 	rdctl	r2,status
    d374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d378:	e0fffb17 	ldw	r3,-20(fp)
    d37c:	00bfff84 	movi	r2,-2
    d380:	1884703a 	and	r2,r3,r2
    d384:	1001703a 	wrctl	status,r2
  
  return context;
    d388:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d38c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    d390:	e0fffc17 	ldw	r3,-16(fp)
    d394:	00800044 	movi	r2,1
    d398:	10c4983a 	sll	r2,r2,r3
    d39c:	1007883a 	mov	r3,r2
    d3a0:	00800074 	movhi	r2,1
    d3a4:	1081e404 	addi	r2,r2,1936
    d3a8:	10800017 	ldw	r2,0(r2)
    d3ac:	1886b03a 	or	r3,r3,r2
    d3b0:	00800074 	movhi	r2,1
    d3b4:	1081e404 	addi	r2,r2,1936
    d3b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d3bc:	00800074 	movhi	r2,1
    d3c0:	1081e404 	addi	r2,r2,1936
    d3c4:	10800017 	ldw	r2,0(r2)
    d3c8:	100170fa 	wrctl	ienable,r2
    d3cc:	e0bffd17 	ldw	r2,-12(fp)
    d3d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d3d4:	e0bffa17 	ldw	r2,-24(fp)
    d3d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d3dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    d3e0:	e037883a 	mov	sp,fp
    d3e4:	df000017 	ldw	fp,0(sp)
    d3e8:	dec00104 	addi	sp,sp,4
    d3ec:	f800283a 	ret

0000d3f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d3f0:	defff904 	addi	sp,sp,-28
    d3f4:	df000615 	stw	fp,24(sp)
    d3f8:	df000604 	addi	fp,sp,24
    d3fc:	e13ffe15 	stw	r4,-8(fp)
    d400:	e17fff15 	stw	r5,-4(fp)
    d404:	e0bfff17 	ldw	r2,-4(fp)
    d408:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d40c:	0005303a 	rdctl	r2,status
    d410:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d414:	e0fffb17 	ldw	r3,-20(fp)
    d418:	00bfff84 	movi	r2,-2
    d41c:	1884703a 	and	r2,r3,r2
    d420:	1001703a 	wrctl	status,r2
  
  return context;
    d424:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d428:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    d42c:	e0fffc17 	ldw	r3,-16(fp)
    d430:	00800044 	movi	r2,1
    d434:	10c4983a 	sll	r2,r2,r3
    d438:	0084303a 	nor	r2,zero,r2
    d43c:	1007883a 	mov	r3,r2
    d440:	00800074 	movhi	r2,1
    d444:	1081e404 	addi	r2,r2,1936
    d448:	10800017 	ldw	r2,0(r2)
    d44c:	1886703a 	and	r3,r3,r2
    d450:	00800074 	movhi	r2,1
    d454:	1081e404 	addi	r2,r2,1936
    d458:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d45c:	00800074 	movhi	r2,1
    d460:	1081e404 	addi	r2,r2,1936
    d464:	10800017 	ldw	r2,0(r2)
    d468:	100170fa 	wrctl	ienable,r2
    d46c:	e0bffd17 	ldw	r2,-12(fp)
    d470:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d474:	e0bffa17 	ldw	r2,-24(fp)
    d478:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d47c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    d480:	e037883a 	mov	sp,fp
    d484:	df000017 	ldw	fp,0(sp)
    d488:	dec00104 	addi	sp,sp,4
    d48c:	f800283a 	ret

0000d490 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d490:	defffc04 	addi	sp,sp,-16
    d494:	df000315 	stw	fp,12(sp)
    d498:	df000304 	addi	fp,sp,12
    d49c:	e13ffe15 	stw	r4,-8(fp)
    d4a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d4a4:	000530fa 	rdctl	r2,ienable
    d4a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d4ac:	e0ffff17 	ldw	r3,-4(fp)
    d4b0:	00800044 	movi	r2,1
    d4b4:	10c4983a 	sll	r2,r2,r3
    d4b8:	1007883a 	mov	r3,r2
    d4bc:	e0bffd17 	ldw	r2,-12(fp)
    d4c0:	1884703a 	and	r2,r3,r2
    d4c4:	1004c03a 	cmpne	r2,r2,zero
}
    d4c8:	e037883a 	mov	sp,fp
    d4cc:	df000017 	ldw	fp,0(sp)
    d4d0:	dec00104 	addi	sp,sp,4
    d4d4:	f800283a 	ret

0000d4d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d4d8:	defff404 	addi	sp,sp,-48
    d4dc:	dfc00b15 	stw	ra,44(sp)
    d4e0:	df000a15 	stw	fp,40(sp)
    d4e4:	df000a04 	addi	fp,sp,40
    d4e8:	e13ffb15 	stw	r4,-20(fp)
    d4ec:	e17ffc15 	stw	r5,-16(fp)
    d4f0:	e1bffd15 	stw	r6,-12(fp)
    d4f4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    d4f8:	00bffa84 	movi	r2,-22
    d4fc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d500:	e0bffc17 	ldw	r2,-16(fp)
    d504:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d508:	e0bff917 	ldw	r2,-28(fp)
    d50c:	10800808 	cmpgei	r2,r2,32
    d510:	1000291e 	bne	r2,zero,d5b8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d514:	0005303a 	rdctl	r2,status
    d518:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d51c:	e0fff717 	ldw	r3,-36(fp)
    d520:	00bfff84 	movi	r2,-2
    d524:	1884703a 	and	r2,r3,r2
    d528:	1001703a 	wrctl	status,r2
  
  return context;
    d52c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d530:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    d534:	e0bff917 	ldw	r2,-28(fp)
    d538:	00c00074 	movhi	r3,1
    d53c:	18c1f104 	addi	r3,r3,1988
    d540:	100490fa 	slli	r2,r2,3
    d544:	10c7883a 	add	r3,r2,r3
    d548:	e0bffd17 	ldw	r2,-12(fp)
    d54c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    d550:	e0bff917 	ldw	r2,-28(fp)
    d554:	00c00074 	movhi	r3,1
    d558:	18c1f104 	addi	r3,r3,1988
    d55c:	100490fa 	slli	r2,r2,3
    d560:	10c5883a 	add	r2,r2,r3
    d564:	10c00104 	addi	r3,r2,4
    d568:	e0bffe17 	ldw	r2,-8(fp)
    d56c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d570:	e0bffd17 	ldw	r2,-12(fp)
    d574:	1005003a 	cmpeq	r2,r2,zero
    d578:	1000051e 	bne	r2,zero,d590 <alt_iic_isr_register+0xb8>
    d57c:	e17ff917 	ldw	r5,-28(fp)
    d580:	e13ffb17 	ldw	r4,-20(fp)
    d584:	000d3540 	call	d354 <alt_ic_irq_enable>
    d588:	e0bfff15 	stw	r2,-4(fp)
    d58c:	00000406 	br	d5a0 <alt_iic_isr_register+0xc8>
    d590:	e17ff917 	ldw	r5,-28(fp)
    d594:	e13ffb17 	ldw	r4,-20(fp)
    d598:	000d3f00 	call	d3f0 <alt_ic_irq_disable>
    d59c:	e0bfff15 	stw	r2,-4(fp)
    d5a0:	e0bfff17 	ldw	r2,-4(fp)
    d5a4:	e0bffa15 	stw	r2,-24(fp)
    d5a8:	e0bff817 	ldw	r2,-32(fp)
    d5ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5b0:	e0bff617 	ldw	r2,-40(fp)
    d5b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d5b8:	e0bffa17 	ldw	r2,-24(fp)
}
    d5bc:	e037883a 	mov	sp,fp
    d5c0:	dfc00117 	ldw	ra,4(sp)
    d5c4:	df000017 	ldw	fp,0(sp)
    d5c8:	dec00204 	addi	sp,sp,8
    d5cc:	f800283a 	ret

0000d5d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d5d0:	defff804 	addi	sp,sp,-32
    d5d4:	dfc00715 	stw	ra,28(sp)
    d5d8:	df000615 	stw	fp,24(sp)
    d5dc:	dc000515 	stw	r16,20(sp)
    d5e0:	df000504 	addi	fp,sp,20
    d5e4:	e13ffc15 	stw	r4,-16(fp)
    d5e8:	e17ffd15 	stw	r5,-12(fp)
    d5ec:	e1bffe15 	stw	r6,-8(fp)
    d5f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d5f4:	e13ffd17 	ldw	r4,-12(fp)
    d5f8:	e17ffe17 	ldw	r5,-8(fp)
    d5fc:	e1bfff17 	ldw	r6,-4(fp)
    d600:	000d8180 	call	d818 <open>
    d604:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d608:	e0bffb17 	ldw	r2,-20(fp)
    d60c:	1004803a 	cmplt	r2,r2,zero
    d610:	10001f1e 	bne	r2,zero,d690 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    d614:	e13ffb17 	ldw	r4,-20(fp)
    d618:	04000074 	movhi	r16,1
    d61c:	843c2804 	addi	r16,r16,-3936
    d620:	01400304 	movi	r5,12
    d624:	00016340 	call	1634 <__mulsi3>
    d628:	1405883a 	add	r2,r2,r16
    d62c:	10c00017 	ldw	r3,0(r2)
    d630:	e0bffc17 	ldw	r2,-16(fp)
    d634:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d638:	e13ffb17 	ldw	r4,-20(fp)
    d63c:	04000074 	movhi	r16,1
    d640:	843c2804 	addi	r16,r16,-3936
    d644:	01400304 	movi	r5,12
    d648:	00016340 	call	1634 <__mulsi3>
    d64c:	1405883a 	add	r2,r2,r16
    d650:	10800104 	addi	r2,r2,4
    d654:	10c00017 	ldw	r3,0(r2)
    d658:	e0bffc17 	ldw	r2,-16(fp)
    d65c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d660:	e13ffb17 	ldw	r4,-20(fp)
    d664:	04000074 	movhi	r16,1
    d668:	843c2804 	addi	r16,r16,-3936
    d66c:	01400304 	movi	r5,12
    d670:	00016340 	call	1634 <__mulsi3>
    d674:	1405883a 	add	r2,r2,r16
    d678:	10800204 	addi	r2,r2,8
    d67c:	10c00017 	ldw	r3,0(r2)
    d680:	e0bffc17 	ldw	r2,-16(fp)
    d684:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d688:	e13ffb17 	ldw	r4,-20(fp)
    d68c:	000a4b40 	call	a4b4 <alt_release_fd>
  }
} 
    d690:	e037883a 	mov	sp,fp
    d694:	dfc00217 	ldw	ra,8(sp)
    d698:	df000117 	ldw	fp,4(sp)
    d69c:	dc000017 	ldw	r16,0(sp)
    d6a0:	dec00304 	addi	sp,sp,12
    d6a4:	f800283a 	ret

0000d6a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d6a8:	defffb04 	addi	sp,sp,-20
    d6ac:	dfc00415 	stw	ra,16(sp)
    d6b0:	df000315 	stw	fp,12(sp)
    d6b4:	df000304 	addi	fp,sp,12
    d6b8:	e13ffd15 	stw	r4,-12(fp)
    d6bc:	e17ffe15 	stw	r5,-8(fp)
    d6c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d6c4:	01000074 	movhi	r4,1
    d6c8:	213c2b04 	addi	r4,r4,-3924
    d6cc:	e17ffd17 	ldw	r5,-12(fp)
    d6d0:	01800044 	movi	r6,1
    d6d4:	01c07fc4 	movi	r7,511
    d6d8:	000d5d00 	call	d5d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d6dc:	01000074 	movhi	r4,1
    d6e0:	213c2804 	addi	r4,r4,-3936
    d6e4:	e17ffe17 	ldw	r5,-8(fp)
    d6e8:	000d883a 	mov	r6,zero
    d6ec:	01c07fc4 	movi	r7,511
    d6f0:	000d5d00 	call	d5d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d6f4:	01000074 	movhi	r4,1
    d6f8:	213c2e04 	addi	r4,r4,-3912
    d6fc:	e17fff17 	ldw	r5,-4(fp)
    d700:	01800044 	movi	r6,1
    d704:	01c07fc4 	movi	r7,511
    d708:	000d5d00 	call	d5d0 <alt_open_fd>
}  
    d70c:	e037883a 	mov	sp,fp
    d710:	dfc00117 	ldw	ra,4(sp)
    d714:	df000017 	ldw	fp,0(sp)
    d718:	dec00204 	addi	sp,sp,8
    d71c:	f800283a 	ret

0000d720 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d720:	defffa04 	addi	sp,sp,-24
    d724:	dfc00515 	stw	ra,20(sp)
    d728:	df000415 	stw	fp,16(sp)
    d72c:	dc000315 	stw	r16,12(sp)
    d730:	df000304 	addi	fp,sp,12
    d734:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d738:	e0bffe17 	ldw	r2,-8(fp)
    d73c:	10800217 	ldw	r2,8(r2)
    d740:	10d00034 	orhi	r3,r2,16384
    d744:	e0bffe17 	ldw	r2,-8(fp)
    d748:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d74c:	e03ffd15 	stw	zero,-12(fp)
    d750:	00002306 	br	d7e0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d754:	e13ffd17 	ldw	r4,-12(fp)
    d758:	04000074 	movhi	r16,1
    d75c:	843c2804 	addi	r16,r16,-3936
    d760:	01400304 	movi	r5,12
    d764:	00016340 	call	1634 <__mulsi3>
    d768:	1405883a 	add	r2,r2,r16
    d76c:	10c00017 	ldw	r3,0(r2)
    d770:	e0bffe17 	ldw	r2,-8(fp)
    d774:	10800017 	ldw	r2,0(r2)
    d778:	1880161e 	bne	r3,r2,d7d4 <alt_file_locked+0xb4>
    d77c:	e13ffd17 	ldw	r4,-12(fp)
    d780:	04000074 	movhi	r16,1
    d784:	843c2804 	addi	r16,r16,-3936
    d788:	01400304 	movi	r5,12
    d78c:	00016340 	call	1634 <__mulsi3>
    d790:	1405883a 	add	r2,r2,r16
    d794:	10800204 	addi	r2,r2,8
    d798:	10800017 	ldw	r2,0(r2)
    d79c:	1004403a 	cmpge	r2,r2,zero
    d7a0:	10000c1e 	bne	r2,zero,d7d4 <alt_file_locked+0xb4>
    d7a4:	e13ffd17 	ldw	r4,-12(fp)
    d7a8:	01400304 	movi	r5,12
    d7ac:	00016340 	call	1634 <__mulsi3>
    d7b0:	1007883a 	mov	r3,r2
    d7b4:	00800074 	movhi	r2,1
    d7b8:	10bc2804 	addi	r2,r2,-3936
    d7bc:	1887883a 	add	r3,r3,r2
    d7c0:	e0bffe17 	ldw	r2,-8(fp)
    d7c4:	18800326 	beq	r3,r2,d7d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d7c8:	00bffcc4 	movi	r2,-13
    d7cc:	e0bfff15 	stw	r2,-4(fp)
    d7d0:	00000a06 	br	d7fc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d7d4:	e0bffd17 	ldw	r2,-12(fp)
    d7d8:	10800044 	addi	r2,r2,1
    d7dc:	e0bffd15 	stw	r2,-12(fp)
    d7e0:	00800074 	movhi	r2,1
    d7e4:	1081d204 	addi	r2,r2,1864
    d7e8:	10800017 	ldw	r2,0(r2)
    d7ec:	1007883a 	mov	r3,r2
    d7f0:	e0bffd17 	ldw	r2,-12(fp)
    d7f4:	18bfd72e 	bgeu	r3,r2,d754 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d7f8:	e03fff15 	stw	zero,-4(fp)
    d7fc:	e0bfff17 	ldw	r2,-4(fp)
}
    d800:	e037883a 	mov	sp,fp
    d804:	dfc00217 	ldw	ra,8(sp)
    d808:	df000117 	ldw	fp,4(sp)
    d80c:	dc000017 	ldw	r16,0(sp)
    d810:	dec00304 	addi	sp,sp,12
    d814:	f800283a 	ret

0000d818 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d818:	defff404 	addi	sp,sp,-48
    d81c:	dfc00b15 	stw	ra,44(sp)
    d820:	df000a15 	stw	fp,40(sp)
    d824:	df000a04 	addi	fp,sp,40
    d828:	e13ffb15 	stw	r4,-20(fp)
    d82c:	e17ffc15 	stw	r5,-16(fp)
    d830:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d834:	00bfffc4 	movi	r2,-1
    d838:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    d83c:	00bffb44 	movi	r2,-19
    d840:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    d844:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d848:	e13ffb17 	ldw	r4,-20(fp)
    d84c:	01400074 	movhi	r5,1
    d850:	2941d004 	addi	r5,r5,1856
    d854:	000de000 	call	de00 <alt_find_dev>
    d858:	e0bffa15 	stw	r2,-24(fp)
    d85c:	e0bffa17 	ldw	r2,-24(fp)
    d860:	1004c03a 	cmpne	r2,r2,zero
    d864:	1000051e 	bne	r2,zero,d87c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d868:	e13ffb17 	ldw	r4,-20(fp)
    d86c:	000de940 	call	de94 <alt_find_file>
    d870:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    d874:	00800044 	movi	r2,1
    d878:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d87c:	e0bffa17 	ldw	r2,-24(fp)
    d880:	1005003a 	cmpeq	r2,r2,zero
    d884:	1000311e 	bne	r2,zero,d94c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d888:	e13ffa17 	ldw	r4,-24(fp)
    d88c:	000dfb40 	call	dfb4 <alt_get_fd>
    d890:	e0bff815 	stw	r2,-32(fp)
    d894:	e0bff817 	ldw	r2,-32(fp)
    d898:	1004403a 	cmpge	r2,r2,zero
    d89c:	1000031e 	bne	r2,zero,d8ac <open+0x94>
    {
      status = index;
    d8a0:	e0bff817 	ldw	r2,-32(fp)
    d8a4:	e0bff715 	stw	r2,-36(fp)
    d8a8:	00002a06 	br	d954 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    d8ac:	e13ff817 	ldw	r4,-32(fp)
    d8b0:	01400304 	movi	r5,12
    d8b4:	00016340 	call	1634 <__mulsi3>
    d8b8:	1007883a 	mov	r3,r2
    d8bc:	00800074 	movhi	r2,1
    d8c0:	10bc2804 	addi	r2,r2,-3936
    d8c4:	1885883a 	add	r2,r3,r2
    d8c8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d8cc:	e0fffc17 	ldw	r3,-16(fp)
    d8d0:	00900034 	movhi	r2,16384
    d8d4:	10bfffc4 	addi	r2,r2,-1
    d8d8:	1886703a 	and	r3,r3,r2
    d8dc:	e0bff917 	ldw	r2,-28(fp)
    d8e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d8e4:	e0bff617 	ldw	r2,-40(fp)
    d8e8:	1004c03a 	cmpne	r2,r2,zero
    d8ec:	1000061e 	bne	r2,zero,d908 <open+0xf0>
    d8f0:	e13ff917 	ldw	r4,-28(fp)
    d8f4:	000d7200 	call	d720 <alt_file_locked>
    d8f8:	e0bff715 	stw	r2,-36(fp)
    d8fc:	e0bff717 	ldw	r2,-36(fp)
    d900:	1004803a 	cmplt	r2,r2,zero
    d904:	1000131e 	bne	r2,zero,d954 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d908:	e0bffa17 	ldw	r2,-24(fp)
    d90c:	10800317 	ldw	r2,12(r2)
    d910:	1005003a 	cmpeq	r2,r2,zero
    d914:	1000091e 	bne	r2,zero,d93c <open+0x124>
    d918:	e0bffa17 	ldw	r2,-24(fp)
    d91c:	10800317 	ldw	r2,12(r2)
    d920:	e13ff917 	ldw	r4,-28(fp)
    d924:	e17ffb17 	ldw	r5,-20(fp)
    d928:	e1bffc17 	ldw	r6,-16(fp)
    d92c:	e1fffd17 	ldw	r7,-12(fp)
    d930:	103ee83a 	callr	r2
    d934:	e0bfff15 	stw	r2,-4(fp)
    d938:	00000106 	br	d940 <open+0x128>
    d93c:	e03fff15 	stw	zero,-4(fp)
    d940:	e0bfff17 	ldw	r2,-4(fp)
    d944:	e0bff715 	stw	r2,-36(fp)
    d948:	00000206 	br	d954 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d94c:	00bffb44 	movi	r2,-19
    d950:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d954:	e0bff717 	ldw	r2,-36(fp)
    d958:	1004403a 	cmpge	r2,r2,zero
    d95c:	1000091e 	bne	r2,zero,d984 <open+0x16c>
  {
    alt_release_fd (index);  
    d960:	e13ff817 	ldw	r4,-32(fp)
    d964:	000a4b40 	call	a4b4 <alt_release_fd>
    ALT_ERRNO = -status;
    d968:	000d9a40 	call	d9a4 <alt_get_errno>
    d96c:	e0fff717 	ldw	r3,-36(fp)
    d970:	00c7c83a 	sub	r3,zero,r3
    d974:	10c00015 	stw	r3,0(r2)
    return -1;
    d978:	00bfffc4 	movi	r2,-1
    d97c:	e0bffe15 	stw	r2,-8(fp)
    d980:	00000206 	br	d98c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    d984:	e0bff817 	ldw	r2,-32(fp)
    d988:	e0bffe15 	stw	r2,-8(fp)
    d98c:	e0bffe17 	ldw	r2,-8(fp)
}
    d990:	e037883a 	mov	sp,fp
    d994:	dfc00117 	ldw	ra,4(sp)
    d998:	df000017 	ldw	fp,0(sp)
    d99c:	dec00204 	addi	sp,sp,8
    d9a0:	f800283a 	ret

0000d9a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d9a4:	defffd04 	addi	sp,sp,-12
    d9a8:	dfc00215 	stw	ra,8(sp)
    d9ac:	df000115 	stw	fp,4(sp)
    d9b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d9b4:	00800074 	movhi	r2,1
    d9b8:	1081d304 	addi	r2,r2,1868
    d9bc:	10800017 	ldw	r2,0(r2)
    d9c0:	1005003a 	cmpeq	r2,r2,zero
    d9c4:	1000061e 	bne	r2,zero,d9e0 <alt_get_errno+0x3c>
    d9c8:	00800074 	movhi	r2,1
    d9cc:	1081d304 	addi	r2,r2,1868
    d9d0:	10800017 	ldw	r2,0(r2)
    d9d4:	103ee83a 	callr	r2
    d9d8:	e0bfff15 	stw	r2,-4(fp)
    d9dc:	00000306 	br	d9ec <alt_get_errno+0x48>
    d9e0:	00800074 	movhi	r2,1
    d9e4:	1081e004 	addi	r2,r2,1920
    d9e8:	e0bfff15 	stw	r2,-4(fp)
    d9ec:	e0bfff17 	ldw	r2,-4(fp)
}
    d9f0:	e037883a 	mov	sp,fp
    d9f4:	dfc00117 	ldw	ra,4(sp)
    d9f8:	df000017 	ldw	fp,0(sp)
    d9fc:	dec00204 	addi	sp,sp,8
    da00:	f800283a 	ret

0000da04 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    da04:	defffa04 	addi	sp,sp,-24
    da08:	df000515 	stw	fp,20(sp)
    da0c:	df000504 	addi	fp,sp,20
    da10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da14:	0005303a 	rdctl	r2,status
    da18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da1c:	e0fffd17 	ldw	r3,-12(fp)
    da20:	00bfff84 	movi	r2,-2
    da24:	1884703a 	and	r2,r3,r2
    da28:	1001703a 	wrctl	status,r2
  
  return context;
    da2c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    da30:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    da34:	e0bfff17 	ldw	r2,-4(fp)
    da38:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    da3c:	e0bffc17 	ldw	r2,-16(fp)
    da40:	10c00017 	ldw	r3,0(r2)
    da44:	e0bffc17 	ldw	r2,-16(fp)
    da48:	10800117 	ldw	r2,4(r2)
    da4c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    da50:	e0bffc17 	ldw	r2,-16(fp)
    da54:	10c00117 	ldw	r3,4(r2)
    da58:	e0bffc17 	ldw	r2,-16(fp)
    da5c:	10800017 	ldw	r2,0(r2)
    da60:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    da64:	e0fffc17 	ldw	r3,-16(fp)
    da68:	e0bffc17 	ldw	r2,-16(fp)
    da6c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    da70:	e0fffc17 	ldw	r3,-16(fp)
    da74:	e0bffc17 	ldw	r2,-16(fp)
    da78:	18800015 	stw	r2,0(r3)
    da7c:	e0bffe17 	ldw	r2,-8(fp)
    da80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da84:	e0bffb17 	ldw	r2,-20(fp)
    da88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    da8c:	e037883a 	mov	sp,fp
    da90:	df000017 	ldw	fp,0(sp)
    da94:	dec00104 	addi	sp,sp,4
    da98:	f800283a 	ret

0000da9c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    da9c:	defffb04 	addi	sp,sp,-20
    daa0:	dfc00415 	stw	ra,16(sp)
    daa4:	df000315 	stw	fp,12(sp)
    daa8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    daac:	d0a01117 	ldw	r2,-32700(gp)
    dab0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    dab4:	d0a01f17 	ldw	r2,-32644(gp)
    dab8:	10800044 	addi	r2,r2,1
    dabc:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dac0:	00003106 	br	db88 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    dac4:	e0bffe17 	ldw	r2,-8(fp)
    dac8:	10800017 	ldw	r2,0(r2)
    dacc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dad0:	e0bffe17 	ldw	r2,-8(fp)
    dad4:	10800403 	ldbu	r2,16(r2)
    dad8:	10803fcc 	andi	r2,r2,255
    dadc:	1005003a 	cmpeq	r2,r2,zero
    dae0:	1000051e 	bne	r2,zero,daf8 <alt_tick+0x5c>
    dae4:	d0a01f17 	ldw	r2,-32644(gp)
    dae8:	1004c03a 	cmpne	r2,r2,zero
    daec:	1000021e 	bne	r2,zero,daf8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    daf0:	e0bffe17 	ldw	r2,-8(fp)
    daf4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    daf8:	e0bffe17 	ldw	r2,-8(fp)
    dafc:	10c00217 	ldw	r3,8(r2)
    db00:	d0a01f17 	ldw	r2,-32644(gp)
    db04:	10c01e36 	bltu	r2,r3,db80 <alt_tick+0xe4>
    db08:	e0bffe17 	ldw	r2,-8(fp)
    db0c:	10800403 	ldbu	r2,16(r2)
    db10:	10803fcc 	andi	r2,r2,255
    db14:	1004c03a 	cmpne	r2,r2,zero
    db18:	1000191e 	bne	r2,zero,db80 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    db1c:	e0bffe17 	ldw	r2,-8(fp)
    db20:	10c00317 	ldw	r3,12(r2)
    db24:	e0bffe17 	ldw	r2,-8(fp)
    db28:	11000517 	ldw	r4,20(r2)
    db2c:	183ee83a 	callr	r3
    db30:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    db34:	e0bffd17 	ldw	r2,-12(fp)
    db38:	1004c03a 	cmpne	r2,r2,zero
    db3c:	1000031e 	bne	r2,zero,db4c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    db40:	e13ffe17 	ldw	r4,-8(fp)
    db44:	000da040 	call	da04 <alt_alarm_stop>
    db48:	00000d06 	br	db80 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    db4c:	e0bffe17 	ldw	r2,-8(fp)
    db50:	10c00217 	ldw	r3,8(r2)
    db54:	e0bffd17 	ldw	r2,-12(fp)
    db58:	1887883a 	add	r3,r3,r2
    db5c:	e0bffe17 	ldw	r2,-8(fp)
    db60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    db64:	e0bffe17 	ldw	r2,-8(fp)
    db68:	10c00217 	ldw	r3,8(r2)
    db6c:	d0a01f17 	ldw	r2,-32644(gp)
    db70:	1880032e 	bgeu	r3,r2,db80 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    db74:	e0fffe17 	ldw	r3,-8(fp)
    db78:	00800044 	movi	r2,1
    db7c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    db80:	e0bfff17 	ldw	r2,-4(fp)
    db84:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    db88:	d0e01104 	addi	r3,gp,-32700
    db8c:	e0bffe17 	ldw	r2,-8(fp)
    db90:	10ffcc1e 	bne	r2,r3,dac4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    db94:	e037883a 	mov	sp,fp
    db98:	dfc00117 	ldw	ra,4(sp)
    db9c:	df000017 	ldw	fp,0(sp)
    dba0:	dec00204 	addi	sp,sp,8
    dba4:	f800283a 	ret

0000dba8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    dba8:	deffff04 	addi	sp,sp,-4
    dbac:	df000015 	stw	fp,0(sp)
    dbb0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    dbb4:	000170fa 	wrctl	ienable,zero
}
    dbb8:	e037883a 	mov	sp,fp
    dbbc:	df000017 	ldw	fp,0(sp)
    dbc0:	dec00104 	addi	sp,sp,4
    dbc4:	f800283a 	ret

0000dbc8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    dbc8:	defff404 	addi	sp,sp,-48
    dbcc:	df000b15 	stw	fp,44(sp)
    dbd0:	df000b04 	addi	fp,sp,44
    dbd4:	e13ffc15 	stw	r4,-16(fp)
    dbd8:	e17ffd15 	stw	r5,-12(fp)
    dbdc:	e1bffe15 	stw	r6,-8(fp)
    dbe0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    dbe4:	e0fffe17 	ldw	r3,-8(fp)
    dbe8:	e0bfff17 	ldw	r2,-4(fp)
    dbec:	10c5883a 	add	r2,r2,r3
    dbf0:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
    dbf4:	e0c00117 	ldw	r3,4(fp)
    dbf8:	e0800217 	ldw	r2,8(fp)
    dbfc:	10c5883a 	add	r2,r2,r3
    dc00:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
    dc04:	e0800117 	ldw	r2,4(fp)
    dc08:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
    dc0c:	e0bffe17 	ldw	r2,-8(fp)
    dc10:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    dc14:	00800044 	movi	r2,1
    dc18:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    dc1c:	e0bffc17 	ldw	r2,-16(fp)
    dc20:	11000504 	addi	r4,r2,20
    dc24:	e0fffd17 	ldw	r3,-12(fp)
    dc28:	00800044 	movi	r2,1
    dc2c:	10c6983a 	sll	r3,r2,r3
    dc30:	2005883a 	mov	r2,r4
    dc34:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    dc38:	e0800317 	ldw	r2,12(fp)
    dc3c:	1080008c 	andi	r2,r2,2
    dc40:	1004c03a 	cmpne	r2,r2,zero
    dc44:	1000051e 	bne	r2,zero,dc5c <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    dc48:	e0bffc17 	ldw	r2,-16(fp)
    dc4c:	10800304 	addi	r2,r2,12
    dc50:	1007883a 	mov	r3,r2
    dc54:	00810004 	movi	r2,1024
    dc58:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    dc5c:	e0bffc17 	ldw	r2,-16(fp)
    dc60:	10800037 	ldwio	r2,0(r2)
    dc64:	00000006 	br	dc68 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    dc68:	e0bffc17 	ldw	r2,-16(fp)
    dc6c:	10800204 	addi	r2,r2,8
    dc70:	10800037 	ldwio	r2,0(r2)
    dc74:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    dc78:	e0bff717 	ldw	r2,-36(fp)
    dc7c:	1080100c 	andi	r2,r2,64
    dc80:	1005003a 	cmpeq	r2,r2,zero
    dc84:	1000031e 	bne	r2,zero,dc94 <alt_avalon_spi_command+0xcc>
    dc88:	e0bff617 	ldw	r2,-40(fp)
    dc8c:	1004c03a 	cmpne	r2,r2,zero
    dc90:	1000041e 	bne	r2,zero,dca4 <alt_avalon_spi_command+0xdc>
    dc94:	e0bff717 	ldw	r2,-36(fp)
    dc98:	1080200c 	andi	r2,r2,128
    dc9c:	1005003a 	cmpeq	r2,r2,zero
    dca0:	103ff11e 	bne	r2,zero,dc68 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    dca4:	e0bff717 	ldw	r2,-36(fp)
    dca8:	1080100c 	andi	r2,r2,64
    dcac:	1005003a 	cmpeq	r2,r2,zero
    dcb0:	1000201e 	bne	r2,zero,dd34 <alt_avalon_spi_command+0x16c>
    dcb4:	e0bff617 	ldw	r2,-40(fp)
    dcb8:	10800050 	cmplti	r2,r2,1
    dcbc:	10001d1e 	bne	r2,zero,dd34 <alt_avalon_spi_command+0x16c>
    {
      credits--;
    dcc0:	e0bff617 	ldw	r2,-40(fp)
    dcc4:	10bfffc4 	addi	r2,r2,-1
    dcc8:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
    dccc:	e0ffff17 	ldw	r3,-4(fp)
    dcd0:	e0bffb17 	ldw	r2,-20(fp)
    dcd4:	18800b2e 	bgeu	r3,r2,dd04 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    dcd8:	e0bffc17 	ldw	r2,-16(fp)
    dcdc:	11000104 	addi	r4,r2,4
    dce0:	e0bfff17 	ldw	r2,-4(fp)
    dce4:	10800003 	ldbu	r2,0(r2)
    dce8:	10c03fcc 	andi	r3,r2,255
    dcec:	e0bfff17 	ldw	r2,-4(fp)
    dcf0:	10800044 	addi	r2,r2,1
    dcf4:	e0bfff15 	stw	r2,-4(fp)
    dcf8:	2005883a 	mov	r2,r4
    dcfc:	10c00035 	stwio	r3,0(r2)
    dd00:	00000c06 	br	dd34 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
    dd04:	e0bff917 	ldw	r2,-28(fp)
    dd08:	1005003a 	cmpeq	r2,r2,zero
    dd0c:	1000071e 	bne	r2,zero,dd2c <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
    dd10:	e0bff917 	ldw	r2,-28(fp)
    dd14:	10bfffc4 	addi	r2,r2,-1
    dd18:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    dd1c:	e0bffc17 	ldw	r2,-16(fp)
    dd20:	10800104 	addi	r2,r2,4
    dd24:	10000035 	stwio	zero,0(r2)
    dd28:	00000206 	br	dd34 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
    dd2c:	00bf0004 	movi	r2,-1024
    dd30:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    dd34:	e0bff717 	ldw	r2,-36(fp)
    dd38:	1080200c 	andi	r2,r2,128
    dd3c:	1005003a 	cmpeq	r2,r2,zero
    dd40:	103fc91e 	bne	r2,zero,dc68 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    dd44:	e0bffc17 	ldw	r2,-16(fp)
    dd48:	10800037 	ldwio	r2,0(r2)
    dd4c:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
    dd50:	e0bff817 	ldw	r2,-32(fp)
    dd54:	1005003a 	cmpeq	r2,r2,zero
    dd58:	1000041e 	bne	r2,zero,dd6c <alt_avalon_spi_command+0x1a4>
        read_ignore--;
    dd5c:	e0bff817 	ldw	r2,-32(fp)
    dd60:	10bfffc4 	addi	r2,r2,-1
    dd64:	e0bff815 	stw	r2,-32(fp)
    dd68:	00000706 	br	dd88 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
    dd6c:	e0bff517 	ldw	r2,-44(fp)
    dd70:	1007883a 	mov	r3,r2
    dd74:	e0800217 	ldw	r2,8(fp)
    dd78:	10c00005 	stb	r3,0(r2)
    dd7c:	e0800217 	ldw	r2,8(fp)
    dd80:	10800044 	addi	r2,r2,1
    dd84:	e0800215 	stw	r2,8(fp)
      credits++;
    dd88:	e0bff617 	ldw	r2,-40(fp)
    dd8c:	10800044 	addi	r2,r2,1
    dd90:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
    dd94:	e0bff817 	ldw	r2,-32(fp)
    dd98:	1004c03a 	cmpne	r2,r2,zero
    dd9c:	103fb21e 	bne	r2,zero,dc68 <alt_avalon_spi_command+0xa0>
    dda0:	e0c00217 	ldw	r3,8(fp)
    dda4:	e0bffa17 	ldw	r2,-24(fp)
    dda8:	18800126 	beq	r3,r2,ddb0 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
    ddac:	003fae06 	br	dc68 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    ddb0:	e0bffc17 	ldw	r2,-16(fp)
    ddb4:	10800204 	addi	r2,r2,8
    ddb8:	10800037 	ldwio	r2,0(r2)
    ddbc:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    ddc0:	e0bff717 	ldw	r2,-36(fp)
    ddc4:	1080080c 	andi	r2,r2,32
    ddc8:	1005003a 	cmpeq	r2,r2,zero
    ddcc:	103ff81e 	bne	r2,zero,ddb0 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    ddd0:	e0800317 	ldw	r2,12(fp)
    ddd4:	1080004c 	andi	r2,r2,1
    ddd8:	1004c03a 	cmpne	r2,r2,zero
    dddc:	1000031e 	bne	r2,zero,ddec <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    dde0:	e0bffc17 	ldw	r2,-16(fp)
    dde4:	10800304 	addi	r2,r2,12
    dde8:	10000035 	stwio	zero,0(r2)

  return read_length;
    ddec:	e0800117 	ldw	r2,4(fp)
}
    ddf0:	e037883a 	mov	sp,fp
    ddf4:	df000017 	ldw	fp,0(sp)
    ddf8:	dec00104 	addi	sp,sp,4
    ddfc:	f800283a 	ret

0000de00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    de00:	defff904 	addi	sp,sp,-28
    de04:	dfc00615 	stw	ra,24(sp)
    de08:	df000515 	stw	fp,20(sp)
    de0c:	df000504 	addi	fp,sp,20
    de10:	e13ffd15 	stw	r4,-12(fp)
    de14:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    de18:	e0bffe17 	ldw	r2,-8(fp)
    de1c:	10800017 	ldw	r2,0(r2)
    de20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    de24:	e13ffd17 	ldw	r4,-12(fp)
    de28:	00084d40 	call	84d4 <strlen>
    de2c:	10800044 	addi	r2,r2,1
    de30:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    de34:	00000d06 	br	de6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    de38:	e0bffc17 	ldw	r2,-16(fp)
    de3c:	11000217 	ldw	r4,8(r2)
    de40:	e1bffb17 	ldw	r6,-20(fp)
    de44:	e17ffd17 	ldw	r5,-12(fp)
    de48:	000e0d00 	call	e0d0 <memcmp>
    de4c:	1004c03a 	cmpne	r2,r2,zero
    de50:	1000031e 	bne	r2,zero,de60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    de54:	e0bffc17 	ldw	r2,-16(fp)
    de58:	e0bfff15 	stw	r2,-4(fp)
    de5c:	00000706 	br	de7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    de60:	e0bffc17 	ldw	r2,-16(fp)
    de64:	10800017 	ldw	r2,0(r2)
    de68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    de6c:	e0fffe17 	ldw	r3,-8(fp)
    de70:	e0bffc17 	ldw	r2,-16(fp)
    de74:	10fff01e 	bne	r2,r3,de38 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    de78:	e03fff15 	stw	zero,-4(fp)
    de7c:	e0bfff17 	ldw	r2,-4(fp)
}
    de80:	e037883a 	mov	sp,fp
    de84:	dfc00117 	ldw	ra,4(sp)
    de88:	df000017 	ldw	fp,0(sp)
    de8c:	dec00204 	addi	sp,sp,8
    de90:	f800283a 	ret

0000de94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    de94:	defffa04 	addi	sp,sp,-24
    de98:	dfc00515 	stw	ra,20(sp)
    de9c:	df000415 	stw	fp,16(sp)
    dea0:	df000404 	addi	fp,sp,16
    dea4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    dea8:	00800074 	movhi	r2,1
    deac:	1081ce04 	addi	r2,r2,1848
    deb0:	10800017 	ldw	r2,0(r2)
    deb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    deb8:	00003306 	br	df88 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    debc:	e0bffd17 	ldw	r2,-12(fp)
    dec0:	11000217 	ldw	r4,8(r2)
    dec4:	00084d40 	call	84d4 <strlen>
    dec8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    decc:	e0bffd17 	ldw	r2,-12(fp)
    ded0:	10c00217 	ldw	r3,8(r2)
    ded4:	e0bffc17 	ldw	r2,-16(fp)
    ded8:	1885883a 	add	r2,r3,r2
    dedc:	10bfffc4 	addi	r2,r2,-1
    dee0:	10800003 	ldbu	r2,0(r2)
    dee4:	10803fcc 	andi	r2,r2,255
    dee8:	1080201c 	xori	r2,r2,128
    deec:	10bfe004 	addi	r2,r2,-128
    def0:	10800bd8 	cmpnei	r2,r2,47
    def4:	1000031e 	bne	r2,zero,df04 <alt_find_file+0x70>
    {
      len -= 1;
    def8:	e0bffc17 	ldw	r2,-16(fp)
    defc:	10bfffc4 	addi	r2,r2,-1
    df00:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    df04:	e0bffc17 	ldw	r2,-16(fp)
    df08:	1007883a 	mov	r3,r2
    df0c:	e0bffe17 	ldw	r2,-8(fp)
    df10:	1885883a 	add	r2,r3,r2
    df14:	10800003 	ldbu	r2,0(r2)
    df18:	10803fcc 	andi	r2,r2,255
    df1c:	1080201c 	xori	r2,r2,128
    df20:	10bfe004 	addi	r2,r2,-128
    df24:	10800be0 	cmpeqi	r2,r2,47
    df28:	10000a1e 	bne	r2,zero,df54 <alt_find_file+0xc0>
    df2c:	e0bffc17 	ldw	r2,-16(fp)
    df30:	1007883a 	mov	r3,r2
    df34:	e0bffe17 	ldw	r2,-8(fp)
    df38:	1885883a 	add	r2,r3,r2
    df3c:	10800003 	ldbu	r2,0(r2)
    df40:	10803fcc 	andi	r2,r2,255
    df44:	1080201c 	xori	r2,r2,128
    df48:	10bfe004 	addi	r2,r2,-128
    df4c:	1004c03a 	cmpne	r2,r2,zero
    df50:	10000a1e 	bne	r2,zero,df7c <alt_find_file+0xe8>
    df54:	e0bffd17 	ldw	r2,-12(fp)
    df58:	11000217 	ldw	r4,8(r2)
    df5c:	e1bffc17 	ldw	r6,-16(fp)
    df60:	e17ffe17 	ldw	r5,-8(fp)
    df64:	000e0d00 	call	e0d0 <memcmp>
    df68:	1004c03a 	cmpne	r2,r2,zero
    df6c:	1000031e 	bne	r2,zero,df7c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    df70:	e0bffd17 	ldw	r2,-12(fp)
    df74:	e0bfff15 	stw	r2,-4(fp)
    df78:	00000806 	br	df9c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    df7c:	e0bffd17 	ldw	r2,-12(fp)
    df80:	10800017 	ldw	r2,0(r2)
    df84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    df88:	00c00074 	movhi	r3,1
    df8c:	18c1ce04 	addi	r3,r3,1848
    df90:	e0bffd17 	ldw	r2,-12(fp)
    df94:	10ffc91e 	bne	r2,r3,debc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    df98:	e03fff15 	stw	zero,-4(fp)
    df9c:	e0bfff17 	ldw	r2,-4(fp)
}
    dfa0:	e037883a 	mov	sp,fp
    dfa4:	dfc00117 	ldw	ra,4(sp)
    dfa8:	df000017 	ldw	fp,0(sp)
    dfac:	dec00204 	addi	sp,sp,8
    dfb0:	f800283a 	ret

0000dfb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    dfb4:	defffa04 	addi	sp,sp,-24
    dfb8:	dfc00515 	stw	ra,20(sp)
    dfbc:	df000415 	stw	fp,16(sp)
    dfc0:	dc000315 	stw	r16,12(sp)
    dfc4:	df000304 	addi	fp,sp,12
    dfc8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    dfcc:	00bffa04 	movi	r2,-24
    dfd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dfd4:	e03ffe15 	stw	zero,-8(fp)
    dfd8:	00002006 	br	e05c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    dfdc:	e13ffe17 	ldw	r4,-8(fp)
    dfe0:	04000074 	movhi	r16,1
    dfe4:	843c2804 	addi	r16,r16,-3936
    dfe8:	01400304 	movi	r5,12
    dfec:	00016340 	call	1634 <__mulsi3>
    dff0:	1405883a 	add	r2,r2,r16
    dff4:	10800017 	ldw	r2,0(r2)
    dff8:	1004c03a 	cmpne	r2,r2,zero
    dffc:	1000141e 	bne	r2,zero,e050 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    e000:	e13ffe17 	ldw	r4,-8(fp)
    e004:	04000074 	movhi	r16,1
    e008:	843c2804 	addi	r16,r16,-3936
    e00c:	01400304 	movi	r5,12
    e010:	00016340 	call	1634 <__mulsi3>
    e014:	1407883a 	add	r3,r2,r16
    e018:	e0bfff17 	ldw	r2,-4(fp)
    e01c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    e020:	00800074 	movhi	r2,1
    e024:	1081d204 	addi	r2,r2,1864
    e028:	10c00017 	ldw	r3,0(r2)
    e02c:	e0bffe17 	ldw	r2,-8(fp)
    e030:	1880040e 	bge	r3,r2,e044 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    e034:	00c00074 	movhi	r3,1
    e038:	18c1d204 	addi	r3,r3,1864
    e03c:	e0bffe17 	ldw	r2,-8(fp)
    e040:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    e044:	e0bffe17 	ldw	r2,-8(fp)
    e048:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e04c:	00000606 	br	e068 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e050:	e0bffe17 	ldw	r2,-8(fp)
    e054:	10800044 	addi	r2,r2,1
    e058:	e0bffe15 	stw	r2,-8(fp)
    e05c:	e0bffe17 	ldw	r2,-8(fp)
    e060:	10800810 	cmplti	r2,r2,32
    e064:	103fdd1e 	bne	r2,zero,dfdc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e068:	e0bffd17 	ldw	r2,-12(fp)
}
    e06c:	e037883a 	mov	sp,fp
    e070:	dfc00217 	ldw	ra,8(sp)
    e074:	df000117 	ldw	fp,4(sp)
    e078:	dc000017 	ldw	r16,0(sp)
    e07c:	dec00304 	addi	sp,sp,12
    e080:	f800283a 	ret

0000e084 <atexit>:
    e084:	200b883a 	mov	r5,r4
    e088:	000d883a 	mov	r6,zero
    e08c:	0009883a 	mov	r4,zero
    e090:	000f883a 	mov	r7,zero
    e094:	000e1441 	jmpi	e144 <__register_exitproc>

0000e098 <exit>:
    e098:	defffe04 	addi	sp,sp,-8
    e09c:	000b883a 	mov	r5,zero
    e0a0:	dc000015 	stw	r16,0(sp)
    e0a4:	dfc00115 	stw	ra,4(sp)
    e0a8:	2021883a 	mov	r16,r4
    e0ac:	000e27c0 	call	e27c <__call_exitprocs>
    e0b0:	00800074 	movhi	r2,1
    e0b4:	1081c904 	addi	r2,r2,1828
    e0b8:	11000017 	ldw	r4,0(r2)
    e0bc:	20800f17 	ldw	r2,60(r4)
    e0c0:	10000126 	beq	r2,zero,e0c8 <exit+0x30>
    e0c4:	103ee83a 	callr	r2
    e0c8:	8009883a 	mov	r4,r16
    e0cc:	000e46c0 	call	e46c <_exit>

0000e0d0 <memcmp>:
    e0d0:	00c000c4 	movi	r3,3
    e0d4:	1980032e 	bgeu	r3,r6,e0e4 <memcmp+0x14>
    e0d8:	2144b03a 	or	r2,r4,r5
    e0dc:	10c4703a 	and	r2,r2,r3
    e0e0:	10000f26 	beq	r2,zero,e120 <memcmp+0x50>
    e0e4:	31ffffc4 	addi	r7,r6,-1
    e0e8:	3000061e 	bne	r6,zero,e104 <memcmp+0x34>
    e0ec:	00000a06 	br	e118 <memcmp+0x48>
    e0f0:	39ffffc4 	addi	r7,r7,-1
    e0f4:	00bfffc4 	movi	r2,-1
    e0f8:	21000044 	addi	r4,r4,1
    e0fc:	29400044 	addi	r5,r5,1
    e100:	38800526 	beq	r7,r2,e118 <memcmp+0x48>
    e104:	20c00003 	ldbu	r3,0(r4)
    e108:	28800003 	ldbu	r2,0(r5)
    e10c:	18bff826 	beq	r3,r2,e0f0 <memcmp+0x20>
    e110:	1885c83a 	sub	r2,r3,r2
    e114:	f800283a 	ret
    e118:	0005883a 	mov	r2,zero
    e11c:	f800283a 	ret
    e120:	180f883a 	mov	r7,r3
    e124:	20c00017 	ldw	r3,0(r4)
    e128:	28800017 	ldw	r2,0(r5)
    e12c:	18bfed1e 	bne	r3,r2,e0e4 <memcmp+0x14>
    e130:	31bfff04 	addi	r6,r6,-4
    e134:	21000104 	addi	r4,r4,4
    e138:	29400104 	addi	r5,r5,4
    e13c:	39bff936 	bltu	r7,r6,e124 <memcmp+0x54>
    e140:	003fe806 	br	e0e4 <memcmp+0x14>

0000e144 <__register_exitproc>:
    e144:	defffa04 	addi	sp,sp,-24
    e148:	00800074 	movhi	r2,1
    e14c:	1081c904 	addi	r2,r2,1828
    e150:	dc000015 	stw	r16,0(sp)
    e154:	14000017 	ldw	r16,0(r2)
    e158:	dd000415 	stw	r20,16(sp)
    e15c:	2829883a 	mov	r20,r5
    e160:	81405217 	ldw	r5,328(r16)
    e164:	dcc00315 	stw	r19,12(sp)
    e168:	dc800215 	stw	r18,8(sp)
    e16c:	dc400115 	stw	r17,4(sp)
    e170:	dfc00515 	stw	ra,20(sp)
    e174:	2023883a 	mov	r17,r4
    e178:	3027883a 	mov	r19,r6
    e17c:	3825883a 	mov	r18,r7
    e180:	28002526 	beq	r5,zero,e218 <__register_exitproc+0xd4>
    e184:	29000117 	ldw	r4,4(r5)
    e188:	008007c4 	movi	r2,31
    e18c:	11002716 	blt	r2,r4,e22c <__register_exitproc+0xe8>
    e190:	8800101e 	bne	r17,zero,e1d4 <__register_exitproc+0x90>
    e194:	2105883a 	add	r2,r4,r4
    e198:	1085883a 	add	r2,r2,r2
    e19c:	20c00044 	addi	r3,r4,1
    e1a0:	1145883a 	add	r2,r2,r5
    e1a4:	0009883a 	mov	r4,zero
    e1a8:	15000215 	stw	r20,8(r2)
    e1ac:	28c00115 	stw	r3,4(r5)
    e1b0:	2005883a 	mov	r2,r4
    e1b4:	dfc00517 	ldw	ra,20(sp)
    e1b8:	dd000417 	ldw	r20,16(sp)
    e1bc:	dcc00317 	ldw	r19,12(sp)
    e1c0:	dc800217 	ldw	r18,8(sp)
    e1c4:	dc400117 	ldw	r17,4(sp)
    e1c8:	dc000017 	ldw	r16,0(sp)
    e1cc:	dec00604 	addi	sp,sp,24
    e1d0:	f800283a 	ret
    e1d4:	29802204 	addi	r6,r5,136
    e1d8:	00800044 	movi	r2,1
    e1dc:	110e983a 	sll	r7,r2,r4
    e1e0:	30c04017 	ldw	r3,256(r6)
    e1e4:	2105883a 	add	r2,r4,r4
    e1e8:	1085883a 	add	r2,r2,r2
    e1ec:	1185883a 	add	r2,r2,r6
    e1f0:	19c6b03a 	or	r3,r3,r7
    e1f4:	14802015 	stw	r18,128(r2)
    e1f8:	14c00015 	stw	r19,0(r2)
    e1fc:	00800084 	movi	r2,2
    e200:	30c04015 	stw	r3,256(r6)
    e204:	88bfe31e 	bne	r17,r2,e194 <__register_exitproc+0x50>
    e208:	30804117 	ldw	r2,260(r6)
    e20c:	11c4b03a 	or	r2,r2,r7
    e210:	30804115 	stw	r2,260(r6)
    e214:	003fdf06 	br	e194 <__register_exitproc+0x50>
    e218:	00800074 	movhi	r2,1
    e21c:	10823104 	addi	r2,r2,2244
    e220:	100b883a 	mov	r5,r2
    e224:	80805215 	stw	r2,328(r16)
    e228:	003fd606 	br	e184 <__register_exitproc+0x40>
    e22c:	00800034 	movhi	r2,0
    e230:	10800004 	addi	r2,r2,0
    e234:	1000021e 	bne	r2,zero,e240 <__register_exitproc+0xfc>
    e238:	013fffc4 	movi	r4,-1
    e23c:	003fdc06 	br	e1b0 <__register_exitproc+0x6c>
    e240:	01006404 	movi	r4,400
    e244:	103ee83a 	callr	r2
    e248:	1007883a 	mov	r3,r2
    e24c:	103ffa26 	beq	r2,zero,e238 <__register_exitproc+0xf4>
    e250:	80805217 	ldw	r2,328(r16)
    e254:	180b883a 	mov	r5,r3
    e258:	18000115 	stw	zero,4(r3)
    e25c:	18800015 	stw	r2,0(r3)
    e260:	80c05215 	stw	r3,328(r16)
    e264:	18006215 	stw	zero,392(r3)
    e268:	18006315 	stw	zero,396(r3)
    e26c:	0009883a 	mov	r4,zero
    e270:	883fc826 	beq	r17,zero,e194 <__register_exitproc+0x50>
    e274:	003fd706 	br	e1d4 <__register_exitproc+0x90>

0000e278 <register_fini>:
    e278:	f800283a 	ret

0000e27c <__call_exitprocs>:
    e27c:	00800074 	movhi	r2,1
    e280:	1081c904 	addi	r2,r2,1828
    e284:	10800017 	ldw	r2,0(r2)
    e288:	defff304 	addi	sp,sp,-52
    e28c:	df000b15 	stw	fp,44(sp)
    e290:	d8800115 	stw	r2,4(sp)
    e294:	00800034 	movhi	r2,0
    e298:	10800004 	addi	r2,r2,0
    e29c:	1005003a 	cmpeq	r2,r2,zero
    e2a0:	d8800215 	stw	r2,8(sp)
    e2a4:	d8800117 	ldw	r2,4(sp)
    e2a8:	dd400815 	stw	r21,32(sp)
    e2ac:	dd000715 	stw	r20,28(sp)
    e2b0:	10805204 	addi	r2,r2,328
    e2b4:	dfc00c15 	stw	ra,48(sp)
    e2b8:	ddc00a15 	stw	r23,40(sp)
    e2bc:	dd800915 	stw	r22,36(sp)
    e2c0:	dcc00615 	stw	r19,24(sp)
    e2c4:	dc800515 	stw	r18,20(sp)
    e2c8:	dc400415 	stw	r17,16(sp)
    e2cc:	dc000315 	stw	r16,12(sp)
    e2d0:	282b883a 	mov	r21,r5
    e2d4:	2039883a 	mov	fp,r4
    e2d8:	d8800015 	stw	r2,0(sp)
    e2dc:	2829003a 	cmpeq	r20,r5,zero
    e2e0:	d8800117 	ldw	r2,4(sp)
    e2e4:	14405217 	ldw	r17,328(r2)
    e2e8:	88001026 	beq	r17,zero,e32c <__call_exitprocs+0xb0>
    e2ec:	ddc00017 	ldw	r23,0(sp)
    e2f0:	88800117 	ldw	r2,4(r17)
    e2f4:	8c802204 	addi	r18,r17,136
    e2f8:	143fffc4 	addi	r16,r2,-1
    e2fc:	80000916 	blt	r16,zero,e324 <__call_exitprocs+0xa8>
    e300:	05bfffc4 	movi	r22,-1
    e304:	a000151e 	bne	r20,zero,e35c <__call_exitprocs+0xe0>
    e308:	8409883a 	add	r4,r16,r16
    e30c:	2105883a 	add	r2,r4,r4
    e310:	1485883a 	add	r2,r2,r18
    e314:	10c02017 	ldw	r3,128(r2)
    e318:	a8c01126 	beq	r21,r3,e360 <__call_exitprocs+0xe4>
    e31c:	843fffc4 	addi	r16,r16,-1
    e320:	85bff81e 	bne	r16,r22,e304 <__call_exitprocs+0x88>
    e324:	d8800217 	ldw	r2,8(sp)
    e328:	10003126 	beq	r2,zero,e3f0 <__call_exitprocs+0x174>
    e32c:	dfc00c17 	ldw	ra,48(sp)
    e330:	df000b17 	ldw	fp,44(sp)
    e334:	ddc00a17 	ldw	r23,40(sp)
    e338:	dd800917 	ldw	r22,36(sp)
    e33c:	dd400817 	ldw	r21,32(sp)
    e340:	dd000717 	ldw	r20,28(sp)
    e344:	dcc00617 	ldw	r19,24(sp)
    e348:	dc800517 	ldw	r18,20(sp)
    e34c:	dc400417 	ldw	r17,16(sp)
    e350:	dc000317 	ldw	r16,12(sp)
    e354:	dec00d04 	addi	sp,sp,52
    e358:	f800283a 	ret
    e35c:	8409883a 	add	r4,r16,r16
    e360:	88c00117 	ldw	r3,4(r17)
    e364:	2105883a 	add	r2,r4,r4
    e368:	1445883a 	add	r2,r2,r17
    e36c:	18ffffc4 	addi	r3,r3,-1
    e370:	11800217 	ldw	r6,8(r2)
    e374:	1c001526 	beq	r3,r16,e3cc <__call_exitprocs+0x150>
    e378:	10000215 	stw	zero,8(r2)
    e37c:	303fe726 	beq	r6,zero,e31c <__call_exitprocs+0xa0>
    e380:	00c00044 	movi	r3,1
    e384:	1c06983a 	sll	r3,r3,r16
    e388:	90804017 	ldw	r2,256(r18)
    e38c:	8cc00117 	ldw	r19,4(r17)
    e390:	1884703a 	and	r2,r3,r2
    e394:	10001426 	beq	r2,zero,e3e8 <__call_exitprocs+0x16c>
    e398:	90804117 	ldw	r2,260(r18)
    e39c:	1884703a 	and	r2,r3,r2
    e3a0:	10000c1e 	bne	r2,zero,e3d4 <__call_exitprocs+0x158>
    e3a4:	2105883a 	add	r2,r4,r4
    e3a8:	1485883a 	add	r2,r2,r18
    e3ac:	11400017 	ldw	r5,0(r2)
    e3b0:	e009883a 	mov	r4,fp
    e3b4:	303ee83a 	callr	r6
    e3b8:	88800117 	ldw	r2,4(r17)
    e3bc:	98bfc81e 	bne	r19,r2,e2e0 <__call_exitprocs+0x64>
    e3c0:	b8800017 	ldw	r2,0(r23)
    e3c4:	147fd526 	beq	r2,r17,e31c <__call_exitprocs+0xa0>
    e3c8:	003fc506 	br	e2e0 <__call_exitprocs+0x64>
    e3cc:	8c000115 	stw	r16,4(r17)
    e3d0:	003fea06 	br	e37c <__call_exitprocs+0x100>
    e3d4:	2105883a 	add	r2,r4,r4
    e3d8:	1485883a 	add	r2,r2,r18
    e3dc:	11000017 	ldw	r4,0(r2)
    e3e0:	303ee83a 	callr	r6
    e3e4:	003ff406 	br	e3b8 <__call_exitprocs+0x13c>
    e3e8:	303ee83a 	callr	r6
    e3ec:	003ff206 	br	e3b8 <__call_exitprocs+0x13c>
    e3f0:	88800117 	ldw	r2,4(r17)
    e3f4:	1000081e 	bne	r2,zero,e418 <__call_exitprocs+0x19c>
    e3f8:	89000017 	ldw	r4,0(r17)
    e3fc:	20000726 	beq	r4,zero,e41c <__call_exitprocs+0x1a0>
    e400:	b9000015 	stw	r4,0(r23)
    e404:	8809883a 	mov	r4,r17
    e408:	00000000 	call	0 <__alt_mem_sdram>
    e40c:	bc400017 	ldw	r17,0(r23)
    e410:	883fb71e 	bne	r17,zero,e2f0 <__call_exitprocs+0x74>
    e414:	003fc506 	br	e32c <__call_exitprocs+0xb0>
    e418:	89000017 	ldw	r4,0(r17)
    e41c:	882f883a 	mov	r23,r17
    e420:	2023883a 	mov	r17,r4
    e424:	883fb21e 	bne	r17,zero,e2f0 <__call_exitprocs+0x74>
    e428:	003fc006 	br	e32c <__call_exitprocs+0xb0>

0000e42c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    e42c:	defffd04 	addi	sp,sp,-12
    e430:	df000215 	stw	fp,8(sp)
    e434:	df000204 	addi	fp,sp,8
    e438:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    e43c:	e0bfff17 	ldw	r2,-4(fp)
    e440:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e444:	e0bffe17 	ldw	r2,-8(fp)
    e448:	1005003a 	cmpeq	r2,r2,zero
    e44c:	1000021e 	bne	r2,zero,e458 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    e450:	002af070 	cmpltui	zero,zero,43969
    e454:	00000106 	br	e45c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    e458:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    e45c:	e037883a 	mov	sp,fp
    e460:	df000017 	ldw	fp,0(sp)
    e464:	dec00104 	addi	sp,sp,4
    e468:	f800283a 	ret

0000e46c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e46c:	defffd04 	addi	sp,sp,-12
    e470:	dfc00215 	stw	ra,8(sp)
    e474:	df000115 	stw	fp,4(sp)
    e478:	df000104 	addi	fp,sp,4
    e47c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    e480:	e13fff17 	ldw	r4,-4(fp)
    e484:	000e42c0 	call	e42c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e488:	003fff06 	br	e488 <_exit+0x1c>
    e48c:	0000e278 	rdprs	zero,zero,905
