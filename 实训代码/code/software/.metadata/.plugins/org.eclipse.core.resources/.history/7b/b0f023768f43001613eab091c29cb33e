/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <io.h>
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include "ultrasound.c"
#include "system.h"
#include <stdlib.h>

/*
 * main.c
 *
 *  Created on: 07.11.2012
 *      Author: karl_ee
 */

#include "main.h"
#include <unistd.h>

#define Address0 NEW_ULTRASOUND0_BASE
#define Address1 NEW_ULTRASOUND1_BASE
#define Address2 NEW_ULTRASOUND2_BASE

//占空比=duty/period;0x1388是5000个系统时钟周期,CPU是50MHz;duty1是通道一；enable是使能信号，用二进制表示，11代表两个通道都打开
unsigned long phase1=0x0,phase2=0x000,duty1=0x9c4,duty2=0x9c4,period1=0x1388,enable1=0x1;//3e8\9c4\fa0（20%\50%\80%)
unsigned long phase3=0x0,phase4=0x000,duty3=0x9c4,duty4=0x9c4,period2=0x1388,enable2=0x1;

volatile static char mode = 1;

void initialize(void)
{
    //TODO set up interrupt handler for button presses
    //Do not use a while loop here!
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x02);
	alt_ic_isr_register(KEY_IRQ_INTERRUPT_CONTROLLER_ID, KEY_IRQ, callback_func, NULL, 0 );
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,1);
}


//TODO create interrupt callback function that reverses the sliding pattern
void callback_func(){
   //Now handle the actual button press
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 1);
	if(mode == 1)
		mode = 2;
	else
		mode=1;
}

void turn_left()
{
	duty2=0x9c4;
	duty3=0x9c4;
	enable1=0x2;
	enable2=0x1;
}

void turn_right()
{
	duty1=0x9c4;
	duty3=0x9c4;
	enable1=0x1;
	enable2=0x2;
}

void forward()
{
	duty1=0x9c4;
	duty3=0x9c4;
	enable1=0x1;
	enable2=0x1;
}

void backward()
{
	duty1=0x9c4;
	duty3=0x9c4;
	enable1=0x2;
	enable2=0x2;
}

void standby()
{
	enable1=0x0;
	enable2=0x0;
}

int main()
{
	 ultrasound_init(Address0);
	 ultrasound_init(Address1);
	 ultrasound_init(Address2);

	 initialize();//interrupts;

	 while(1)
	 {
		 printf("0 : %d\n",ultrasound_read(Address0, 0));
		 printf("1 : %d\n",ultrasound_read(Address1, 0));
		 printf("2 : %d\n \n",ultrasound_read(Address2, 0));
	 }

	while(1)
	{
		left_motor_setting(phase1,duty1,phase2,duty2,period1,enable1);//保留状态，一直按最近的状态执行
		right_motor_setting(phase3,duty3,phase4,duty4,period2,enable2);

		double left,right,front;
		left = (double)ultrasound_read(Address0, 0)/1000.0;
		right = (double)ultrasound_read(Address2, 0)/1000.0;
		front = (double)ultrasound_read(Address1, 0)/1000.0;

		if(mode==1)
		{
			if(front - 0.15<0.00001)
			{
				if(left - 0.15 < 0.00001)
				{
					turn_left();
					usleep(10);
				}
				else if(right - 0.15 < 0.00001)
				{
					turn_right();
					usleep(10);
				}
				else
				{
					backward();
					usleep(10);
				}
			}
		}
		else if(mode==2)
		{
			if(front - 3.0 <0.00001)
			{
				if(front - 1 <0.1 || 1 - front <0.1)
				{
					standby();
				}
				else if(front - 1 >0.1)
				{
					forward();
				}
				else if(1 - front <0.1)
				{
					backward();
				}
			}

			if(front - 3.0 >0.00001)
			{
				if(left - 3.0 <0.00001)
				{
					turn_left();
					usleep(10);
				}
				else if(right - 3.0 <0.00001)
				{
					turn_right();
					usleep(10);
				}
			}
		}


	}

}

//int main()
//{
//  while(1)
//  {
//	  int i=0;
//	  while(i<50)
//	  {
//		  IOWR(LED_BASE, 0, 0xff);
//		  IOWR(PIO_0_BASE, 0, 4);//4的二进制是100,对应第三位管脚5,导通
//		  i++;
//	  }
//	  while(i<100)
//	  {
//		  IOWR(LED_BASE, 0, 0);
//		  IOWR(PIO_0_BASE, 0, 0);
//		  i++;
//	  }
//  }
//
//  return 0;
//}
