
LED.elf:     file format elf32-littlenios2
LED.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006068 memsz 0x00006314 flags rwx
    LOAD off    0x00008000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004338  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c4  000044ec  000044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ad8  000045b0  000045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00006088  00006088  00007088  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005f0  00000000  00000000  00008028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ade  00000000  00000000  00008618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c8d6  00000000  00000000  000090f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e39  00000000  00000000  000159cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007c1d  00000000  00000000  00018805  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c9c  00000000  00000000  00020424  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000cdd  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013a2  00000000  00000000  00021d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00023140  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000070  00000000  00000000  00023150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00025194  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00025197  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000251a3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000251a4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000251a5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000251b0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000251bb  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  000251c6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000003  00000000  00000000  000251ce  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000e0f1e  00000000  00000000  000251d1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000044ec l    d  .rodata	00000000 .rodata
000045b0 l    d  .rwdata	00000000 .rwdata
00006088 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000045b0 l     O .rwdata	000000c8 epcs_flash_controller_0
00004678 l     O .rwdata	00001060 jtag_uart_0
000056d8 l     O .rwdata	000000c4 New_UltraSound0
0000579c l     O .rwdata	000000c4 New_UltraSound1
00005860 l     O .rwdata	000000c4 New_UltraSound2
00005924 l     O .rwdata	000000c4 New_UltraSound3
000059e8 l     O .rwdata	000000c4 uart_0
000005c4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00000688 l     F .text	00000288 alt_epcs_flash_query
00000650 l     F .text	00000038 alt_flash_device_register
00000910 l     F .text	00000108 alt_epcs_flash_memcmp
00000d98 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000011e8 l     F .text	00000228 altera_avalon_jtag_uart_irq
00001410 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001a8c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00001d4c l     F .text	0000009c altera_avalon_uart_irq
00001de8 l     F .text	000000e0 altera_avalon_uart_rxirq
00001ec8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000022b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000024dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
00002694 l     F .text	00000038 epcs_await_wip_released
000026cc l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002e64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002ec4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002fa4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00003468 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000035b8 l     F .text	000000f8 alt_file_locked
0000383c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00005c54 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000429c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00004488 l     F .text	00000040 alt_sim_halt
00000c98 g     F .text	00000090 alt_epcs_flash_get_info
0000040c g     F .text	0000006c alt_main
000060a4 g     O .bss	00000100 alt_irq
00000000  w      *UND*	00000000 __errno
0000259c g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
000060a0 g     O .bss	00000004 errno
0000608c g     O .bss	00000004 alt_argv
0000e054 g       *ABS*	00000000 _gp
00005ad4 g     O .rwdata	00000180 alt_fd_list
000028a0 g     F .text	00000064 epcs_write_status_register
00003d10 g     F .text	00000094 alt_find_dev
00004054 g     F .text	000000a0 memcpy
00003540 g     F .text	00000078 alt_io_redirect
000044ec g       *ABS*	00000000 __DTOR_END__
00000e2c g     F .text	0000011c alt_epcs_flash_write_block
00001628 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00006064 g     O .rwdata	00000004 alt_max_fd
00000d28 g     F .text	00000070 alt_epcs_flash_erase_block
00006084 g     O .rwdata	00000004 _global_impure_ptr
00002bb8 g     F .text	00000058 epcs_exit_4_bytes_mode
00006334 g       *ABS*	00000000 __bss_end
00003370 g     F .text	000000f8 alt_iic_isr_register
000039ac g     F .text	0000010c alt_tick
00001c84 g     F .text	000000c8 altera_avalon_uart_init
00003328 g     F .text	00000048 alt_ic_irq_enabled
00003914 g     F .text	00000098 alt_alarm_stop
00006094 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00005aac g     O .rwdata	00000028 alt_dev_null
0000605c g     O .rwdata	00000008 alt_dev_list
00002a74 g     F .text	0000006c epcs_read_electronic_signature
00006334 g       *ABS*	00000000 end
00002314 g     F .text	000001c8 altera_avalon_uart_write
00001128 g     F .text	000000c0 altera_avalon_jtag_uart_init
000044e8 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00001afc g     F .text	00000090 alt_avalon_timer_sc_init
00001be4 g     F .text	00000058 altera_avalon_uart_write_fd
00001c3c g     F .text	00000048 altera_avalon_uart_close_fd
0000184c g     F .text	00000240 altera_avalon_jtag_uart_write
000042a0 g     F .text	000001b0 __call_exitprocs
000001b4 g     F .text	00000038 _start
00006098 g     O .bss	00000004 _alt_tick_rate
00003ad8 g     F .text	00000238 alt_avalon_spi_command
0000609c g     O .bss	00000004 _alt_nticks
000004ac g     F .text	00000118 alt_sys_init
00004168 g     F .text	00000134 __register_exitproc
000014c0 g     F .text	00000074 altera_avalon_jtag_uart_close
00004450 g     F .text	00000038 __mulsi3
0000253c g     F .text	00000060 epcs_read_status_register
00000fe0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00003ec4 g     F .text	000000d0 alt_get_fd
00002ae0 g     F .text	00000080 epcs_read_device_id
00003fe0 g     F .text	00000074 memcmp
00001090 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00006334 g       *ABS*	00000000 __alt_stack_base
000010d8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00003da4 g     F .text	00000120 alt_find_file
00002ef0 g     F .text	000000b4 alt_dev_llist_insert
0000606c g     O .rwdata	00000008 alt_flash_dev_list
00006088 g       *ABS*	00000000 __bss_start
000001ec g     F .text	00000220 main
00006090 g     O .bss	00000004 alt_envp
00001038 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000061a4 g     O .bss	00000190 _atexit0
00006068 g     O .rwdata	00000004 alt_errno
000044ec g       *ABS*	00000000 __CTOR_END__
00000a18 g     F .text	00000280 alt_epcs_flash_write
000044ec g       *ABS*	00000000 __DTOR_LIST__
00000478 g     F .text	00000034 alt_irq_init
0000389c g     F .text	00000078 alt_release_fd
00003f94 g     F .text	00000014 atexit
00006080 g     O .rwdata	00000004 _impure_ptr
00006088 g     O .bss	00000004 alt_argc
00003068 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00006054 g     O .rwdata	00000008 alt_fs_list
00002704 g     F .text	0000014c epcs_read_buffer
000005fc g     F .text	00000054 alt_epcs_flash_init
0000319c g     F .text	00000050 alt_ic_isr_register
00006088 g       *ABS*	00000000 _edata
00001b8c g     F .text	00000058 altera_avalon_uart_read_fd
00006334 g       *ABS*	00000000 _end
000030cc g     F .text	0000007c alt_flash_open_dev
00001534 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00003288 g     F .text	000000a0 alt_ic_irq_disable
00002b60 g     F .text	00000058 epcs_enter_4_bytes_mode
00003ab8 g     F .text	00000020 altera_nios2_qsys_irq_init
00003fa8 g     F .text	00000038 exit
00003148 g     F .text	00000054 alt_flash_close_dev
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00002024 g     F .text	00000060 altera_avalon_uart_close
000044c8 g     F .text	00000020 _exit
00002c10 g     F .text	00000154 alt_alarm_start
000040f4 g     F .text	00000074 strlen
00002850 g     F .text	00000050 epcs_write_enable
000036b0 g     F .text	0000018c open
00006074 g     O .rwdata	00000004 alt_priority_mask
000031ec g     F .text	0000009c alt_ic_irq_enable
00002084 g     F .text	00000230 altera_avalon_uart_read
00000f48 g     F .text	00000098 alt_epcs_flash_read
00006078 g     O .rwdata	00000008 alt_alarm_list
00003004 g     F .text	00000064 _do_ctors
00002d64 g     F .text	00000100 close
00000000  w      *UND*	00000000 free
00002904 g     F .text	00000170 epcs_write_buffer



Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18d82904 	addi	r3,r3,24740
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18d82904 	addi	r3,r3,24740
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6b81514 	ori	gp,gp,57428
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10982214 	ori	r2,r2,24712

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18d8cd14 	ori	r3,r3,25396

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e4:	000040c0 	call	40c <alt_main>

000001e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1e8:	003fff06 	br	1e8 <alt_after_alt_main>

000001ec <main>:

#include "system.h"
#include "io.h"

int main()
{
     1ec:	defffc04 	addi	sp,sp,-16
     1f0:	df000315 	stw	fp,12(sp)
     1f4:	df000304 	addi	fp,sp,12
  unsigned char keys;
  // turn on the first led
  IOWR(LED_BASE,0,0x01);
     1f8:	00c08074 	movhi	r3,513
     1fc:	18e8f004 	addi	r3,r3,-23616
     200:	00800044 	movi	r2,1
     204:	18800035 	stwio	r2,0(r3)
//  IOWR(LED_BASE,0,0x20);
//  IOWR(LED_BASE,0,0x40);
//  IOWR(LED_BASE,0,0x80);
  while(1)
  {
	  keys=IORD(KEY_BASE,0);
     208:	00808074 	movhi	r2,513
     20c:	10a8ec04 	addi	r2,r2,-23632
     210:	10800037 	ldwio	r2,0(r2)
     214:	e0bfff05 	stb	r2,-4(fp)
	  int keys_state = IORD(KEY_BASE,0);
     218:	00808074 	movhi	r2,513
     21c:	10a8ec04 	addi	r2,r2,-23632
     220:	10800037 	ldwio	r2,0(r2)
     224:	e0bffe15 	stw	r2,-8(fp)
	  while(keys_state==1)//press key1,state is 0;do not press ,that is 1;same as key0;
     228:	00000406 	br	23c <main+0x50>
	  {
		  IOWR(LED_BASE,0,0xaa);
     22c:	00c08074 	movhi	r3,513
     230:	18e8f004 	addi	r3,r3,-23616
     234:	00802a84 	movi	r2,170
     238:	18800035 	stwio	r2,0(r3)
//  IOWR(LED_BASE,0,0x80);
  while(1)
  {
	  keys=IORD(KEY_BASE,0);
	  int keys_state = IORD(KEY_BASE,0);
	  while(keys_state==1)//press key1,state is 0;do not press ,that is 1;same as key0;
     23c:	e0bffe17 	ldw	r2,-8(fp)
     240:	10800060 	cmpeqi	r2,r2,1
     244:	103ff91e 	bne	r2,zero,22c <main+0x40>
	  {
		  IOWR(LED_BASE,0,0xaa);
	  }
	  keys_state = IORD(KEY_BASE,0);
     248:	00808074 	movhi	r2,513
     24c:	10a8ec04 	addi	r2,r2,-23632
     250:	10800037 	ldwio	r2,0(r2)
     254:	e0bffe15 	stw	r2,-8(fp)
	  while(keys_state==2)
     258:	00000406 	br	26c <main+0x80>
	  {
		  IOWR(LED_BASE,0,0x55);
     25c:	00c08074 	movhi	r3,513
     260:	18e8f004 	addi	r3,r3,-23616
     264:	00801544 	movi	r2,85
     268:	18800035 	stwio	r2,0(r3)
	  while(keys_state==1)//press key1,state is 0;do not press ,that is 1;same as key0;
	  {
		  IOWR(LED_BASE,0,0xaa);
	  }
	  keys_state = IORD(KEY_BASE,0);
	  while(keys_state==2)
     26c:	e0bffe17 	ldw	r2,-8(fp)
     270:	108000a0 	cmpeqi	r2,r2,2
     274:	103ff91e 	bne	r2,zero,25c <main+0x70>
	  {
		  IOWR(LED_BASE,0,0x55);
	  }
	  keys_state = IORD(KEY_BASE,0);
     278:	00808074 	movhi	r2,513
     27c:	10a8ec04 	addi	r2,r2,-23632
     280:	10800037 	ldwio	r2,0(r2)
     284:	e0bffe15 	stw	r2,-8(fp)


	  int i;
	  i=0;
     288:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     28c:	00000706 	br	2ac <main+0xc0>
	  {
		  IOWR(LED_BASE,0,0x80);
     290:	00c08074 	movhi	r3,513
     294:	18e8f004 	addi	r3,r3,-23616
     298:	00802004 	movi	r2,128
     29c:	18800035 	stwio	r2,0(r3)
		  i++;
     2a0:	e0bffd17 	ldw	r2,-12(fp)
     2a4:	10800044 	addi	r2,r2,1
     2a8:	e0bffd15 	stw	r2,-12(fp)
	  keys_state = IORD(KEY_BASE,0);


	  int i;
	  i=0;
	  while(i<50000)
     2ac:	e0fffd17 	ldw	r3,-12(fp)
     2b0:	00b0d3d4 	movui	r2,49999
     2b4:	10fff60e 	bge	r2,r3,290 <main+0xa4>
	  {
		  IOWR(LED_BASE,0,0x80);
		  i++;
	  }
	  i=0;
     2b8:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     2bc:	00000706 	br	2dc <main+0xf0>
	  {
		  IOWR(LED_BASE,0,0x40);
     2c0:	00c08074 	movhi	r3,513
     2c4:	18e8f004 	addi	r3,r3,-23616
     2c8:	00801004 	movi	r2,64
     2cc:	18800035 	stwio	r2,0(r3)
		  i++;
     2d0:	e0bffd17 	ldw	r2,-12(fp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	e0bffd15 	stw	r2,-12(fp)
	  {
		  IOWR(LED_BASE,0,0x80);
		  i++;
	  }
	  i=0;
	  while(i<50000)
     2dc:	e0fffd17 	ldw	r3,-12(fp)
     2e0:	00b0d3d4 	movui	r2,49999
     2e4:	10fff60e 	bge	r2,r3,2c0 <main+0xd4>
	  {
		  IOWR(LED_BASE,0,0x40);
		  i++;
	  }
	  i=0;
     2e8:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     2ec:	00000706 	br	30c <main+0x120>
	  {
		  IOWR(LED_BASE,0,0x20);
     2f0:	00c08074 	movhi	r3,513
     2f4:	18e8f004 	addi	r3,r3,-23616
     2f8:	00800804 	movi	r2,32
     2fc:	18800035 	stwio	r2,0(r3)
		  i++;
     300:	e0bffd17 	ldw	r2,-12(fp)
     304:	10800044 	addi	r2,r2,1
     308:	e0bffd15 	stw	r2,-12(fp)
	  {
		  IOWR(LED_BASE,0,0x40);
		  i++;
	  }
	  i=0;
	  while(i<50000)
     30c:	e0fffd17 	ldw	r3,-12(fp)
     310:	00b0d3d4 	movui	r2,49999
     314:	10fff60e 	bge	r2,r3,2f0 <main+0x104>
	  {
		  IOWR(LED_BASE,0,0x20);
		  i++;
	  }
	  i=0;
     318:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     31c:	00000706 	br	33c <main+0x150>
	  {
		  IOWR(LED_BASE,0,0x10);
     320:	00c08074 	movhi	r3,513
     324:	18e8f004 	addi	r3,r3,-23616
     328:	00800404 	movi	r2,16
     32c:	18800035 	stwio	r2,0(r3)
		  i++;
     330:	e0bffd17 	ldw	r2,-12(fp)
     334:	10800044 	addi	r2,r2,1
     338:	e0bffd15 	stw	r2,-12(fp)
	  {
		  IOWR(LED_BASE,0,0x20);
		  i++;
	  }
	  i=0;
	  while(i<50000)
     33c:	e0fffd17 	ldw	r3,-12(fp)
     340:	00b0d3d4 	movui	r2,49999
     344:	10fff60e 	bge	r2,r3,320 <main+0x134>
	  {
		  IOWR(LED_BASE,0,0x10);
		  i++;
	  }
	  i=0;
     348:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     34c:	00000706 	br	36c <main+0x180>
	  {
		  IOWR(LED_BASE,0,0x08);
     350:	00c08074 	movhi	r3,513
     354:	18e8f004 	addi	r3,r3,-23616
     358:	00800204 	movi	r2,8
     35c:	18800035 	stwio	r2,0(r3)
		  i++;
     360:	e0bffd17 	ldw	r2,-12(fp)
     364:	10800044 	addi	r2,r2,1
     368:	e0bffd15 	stw	r2,-12(fp)
	  {
		  IOWR(LED_BASE,0,0x10);
		  i++;
	  }
	  i=0;
	  while(i<50000)
     36c:	e0fffd17 	ldw	r3,-12(fp)
     370:	00b0d3d4 	movui	r2,49999
     374:	10fff60e 	bge	r2,r3,350 <main+0x164>
	  {
		  IOWR(LED_BASE,0,0x08);
		  i++;
	  }
	  i=0;
     378:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     37c:	00000706 	br	39c <main+0x1b0>
	  {
		  IOWR(LED_BASE,0,0x04);
     380:	00c08074 	movhi	r3,513
     384:	18e8f004 	addi	r3,r3,-23616
     388:	00800104 	movi	r2,4
     38c:	18800035 	stwio	r2,0(r3)
		  i++;
     390:	e0bffd17 	ldw	r2,-12(fp)
     394:	10800044 	addi	r2,r2,1
     398:	e0bffd15 	stw	r2,-12(fp)
	  {
		  IOWR(LED_BASE,0,0x08);
		  i++;
	  }
	  i=0;
	  while(i<50000)
     39c:	e0fffd17 	ldw	r3,-12(fp)
     3a0:	00b0d3d4 	movui	r2,49999
     3a4:	10fff60e 	bge	r2,r3,380 <main+0x194>
	  {
		  IOWR(LED_BASE,0,0x04);
		  i++;
	  }
	  i=0;
     3a8:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     3ac:	00000706 	br	3cc <main+0x1e0>
	  {
		  IOWR(LED_BASE,0,0x02);
     3b0:	00c08074 	movhi	r3,513
     3b4:	18e8f004 	addi	r3,r3,-23616
     3b8:	00800084 	movi	r2,2
     3bc:	18800035 	stwio	r2,0(r3)
		  i++;
     3c0:	e0bffd17 	ldw	r2,-12(fp)
     3c4:	10800044 	addi	r2,r2,1
     3c8:	e0bffd15 	stw	r2,-12(fp)
	  {
		  IOWR(LED_BASE,0,0x04);
		  i++;
	  }
	  i=0;
	  while(i<50000)
     3cc:	e0fffd17 	ldw	r3,-12(fp)
     3d0:	00b0d3d4 	movui	r2,49999
     3d4:	10fff60e 	bge	r2,r3,3b0 <main+0x1c4>
	  {
		  IOWR(LED_BASE,0,0x02);
		  i++;
	  }
	  i=0;
     3d8:	e03ffd15 	stw	zero,-12(fp)
	  while(i<50000)
     3dc:	00000706 	br	3fc <main+0x210>
	  {
		  IOWR(LED_BASE,0,0x01);
     3e0:	00c08074 	movhi	r3,513
     3e4:	18e8f004 	addi	r3,r3,-23616
     3e8:	00800044 	movi	r2,1
     3ec:	18800035 	stwio	r2,0(r3)
		  i++;
     3f0:	e0bffd17 	ldw	r2,-12(fp)
     3f4:	10800044 	addi	r2,r2,1
     3f8:	e0bffd15 	stw	r2,-12(fp)
	  {
		  IOWR(LED_BASE,0,0x02);
		  i++;
	  }
	  i=0;
	  while(i<50000)
     3fc:	e0fffd17 	ldw	r3,-12(fp)
     400:	00b0d3d4 	movui	r2,49999
     404:	10fff60e 	bge	r2,r3,3e0 <main+0x1f4>
      // TODO: if key 1 is pressed, make the next LED glow, such that
      //       your LEDs behave like the BIT slider from the exercises of day 2

      // TODO: make sure that one key press only causes one slide step,
      //       by reading KEY_BASE again and waiting the bit #1 to turn 0 again
  }
     408:	003f7f06 	br	208 <main+0x1c>

0000040c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     40c:	defffd04 	addi	sp,sp,-12
     410:	dfc00215 	stw	ra,8(sp)
     414:	df000115 	stw	fp,4(sp)
     418:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     41c:	0009883a 	mov	r4,zero
     420:	00004780 	call	478 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     424:	00004ac0 	call	4ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     428:	01000034 	movhi	r4,0
     42c:	21113b04 	addi	r4,r4,17644
     430:	01400034 	movhi	r5,0
     434:	29513b04 	addi	r5,r5,17644
     438:	01800034 	movhi	r6,0
     43c:	31913b04 	addi	r6,r6,17644
     440:	00035400 	call	3540 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     444:	00030040 	call	3004 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     448:	01000034 	movhi	r4,0
     44c:	210c1a04 	addi	r4,r4,12392
     450:	0003f940 	call	3f94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     454:	d1200d17 	ldw	r4,-32716(gp)
     458:	d1600e17 	ldw	r5,-32712(gp)
     45c:	d1a00f17 	ldw	r6,-32708(gp)
     460:	00001ec0 	call	1ec <main>
     464:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     468:	01000044 	movi	r4,1
     46c:	0002d640 	call	2d64 <close>
  exit (result);
     470:	e13fff17 	ldw	r4,-4(fp)
     474:	0003fa80 	call	3fa8 <exit>

00000478 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     478:	defffd04 	addi	sp,sp,-12
     47c:	dfc00215 	stw	ra,8(sp)
     480:	df000115 	stw	fp,4(sp)
     484:	df000104 	addi	fp,sp,4
     488:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
     48c:	0003ab80 	call	3ab8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     490:	00800044 	movi	r2,1
     494:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     498:	e037883a 	mov	sp,fp
     49c:	dfc00117 	ldw	ra,4(sp)
     4a0:	df000017 	ldw	fp,0(sp)
     4a4:	dec00204 	addi	sp,sp,8
     4a8:	f800283a 	ret

000004ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     4ac:	defffe04 	addi	sp,sp,-8
     4b0:	dfc00115 	stw	ra,4(sp)
     4b4:	df000015 	stw	fp,0(sp)
     4b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
     4bc:	01008074 	movhi	r4,513
     4c0:	2128b804 	addi	r4,r4,-23840
     4c4:	000b883a 	mov	r5,zero
     4c8:	000d883a 	mov	r6,zero
     4cc:	01c0fa04 	movi	r7,1000
     4d0:	0001afc0 	call	1afc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
     4d4:	01000034 	movhi	r4,0
     4d8:	21116c04 	addi	r4,r4,17840
     4dc:	00005fc0 	call	5fc <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     4e0:	01000034 	movhi	r4,0
     4e4:	2111a804 	addi	r4,r4,18080
     4e8:	000b883a 	mov	r5,zero
     4ec:	018000c4 	movi	r6,3
     4f0:	00011280 	call	1128 <altera_avalon_jtag_uart_init>
     4f4:	01000034 	movhi	r4,0
     4f8:	21119e04 	addi	r4,r4,18040
     4fc:	00005c40 	call	5c4 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
     500:	00c08074 	movhi	r3,513
     504:	18e80004 	addi	r3,r3,-24576
     508:	00800044 	movi	r2,1
     50c:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
     510:	01000034 	movhi	r4,0
     514:	2115c004 	addi	r4,r4,22272
     518:	000b883a 	mov	r5,zero
     51c:	01800184 	movi	r6,6
     520:	0001c840 	call	1c84 <altera_avalon_uart_init>
     524:	01000034 	movhi	r4,0
     528:	2115b604 	addi	r4,r4,22232
     52c:	00005c40 	call	5c4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
     530:	01000034 	movhi	r4,0
     534:	2115f104 	addi	r4,r4,22468
     538:	000b883a 	mov	r5,zero
     53c:	018001c4 	movi	r6,7
     540:	0001c840 	call	1c84 <altera_avalon_uart_init>
     544:	01000034 	movhi	r4,0
     548:	2115e704 	addi	r4,r4,22428
     54c:	00005c40 	call	5c4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
     550:	01000034 	movhi	r4,0
     554:	21162204 	addi	r4,r4,22664
     558:	000b883a 	mov	r5,zero
     55c:	01800204 	movi	r6,8
     560:	0001c840 	call	1c84 <altera_avalon_uart_init>
     564:	01000034 	movhi	r4,0
     568:	21161804 	addi	r4,r4,22624
     56c:	00005c40 	call	5c4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
     570:	01000034 	movhi	r4,0
     574:	21165304 	addi	r4,r4,22860
     578:	000b883a 	mov	r5,zero
     57c:	01800244 	movi	r6,9
     580:	0001c840 	call	1c84 <altera_avalon_uart_init>
     584:	01000034 	movhi	r4,0
     588:	21164904 	addi	r4,r4,22820
     58c:	00005c40 	call	5c4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
     590:	01000034 	movhi	r4,0
     594:	21168404 	addi	r4,r4,23056
     598:	000b883a 	mov	r5,zero
     59c:	01800104 	movi	r6,4
     5a0:	0001c840 	call	1c84 <altera_avalon_uart_init>
     5a4:	01000034 	movhi	r4,0
     5a8:	21167a04 	addi	r4,r4,23016
     5ac:	00005c40 	call	5c4 <alt_dev_reg>
}
     5b0:	e037883a 	mov	sp,fp
     5b4:	dfc00117 	ldw	ra,4(sp)
     5b8:	df000017 	ldw	fp,0(sp)
     5bc:	dec00204 	addi	sp,sp,8
     5c0:	f800283a 	ret

000005c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     5c4:	defffd04 	addi	sp,sp,-12
     5c8:	dfc00215 	stw	ra,8(sp)
     5cc:	df000115 	stw	fp,4(sp)
     5d0:	df000104 	addi	fp,sp,4
     5d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     5d8:	e13fff17 	ldw	r4,-4(fp)
     5dc:	01400034 	movhi	r5,0
     5e0:	29581704 	addi	r5,r5,24668
     5e4:	0002ef00 	call	2ef0 <alt_dev_llist_insert>
}
     5e8:	e037883a 	mov	sp,fp
     5ec:	dfc00117 	ldw	ra,4(sp)
     5f0:	df000017 	ldw	fp,0(sp)
     5f4:	dec00204 	addi	sp,sp,8
     5f8:	f800283a 	ret

000005fc <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
     5fc:	defffc04 	addi	sp,sp,-16
     600:	dfc00315 	stw	ra,12(sp)
     604:	df000215 	stw	fp,8(sp)
     608:	df000204 	addi	fp,sp,8
     60c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
     610:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
     614:	e13fff17 	ldw	r4,-4(fp)
     618:	00006880 	call	688 <alt_epcs_flash_query>
     61c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
     620:	e0bffe17 	ldw	r2,-8(fp)
     624:	1004c03a 	cmpne	r2,r2,zero
     628:	1000031e 	bne	r2,zero,638 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
     62c:	e13fff17 	ldw	r4,-4(fp)
     630:	00006500 	call	650 <alt_flash_device_register>
     634:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
     638:	e0bffe17 	ldw	r2,-8(fp)
}
     63c:	e037883a 	mov	sp,fp
     640:	dfc00117 	ldw	ra,4(sp)
     644:	df000017 	ldw	fp,0(sp)
     648:	dec00204 	addi	sp,sp,8
     64c:	f800283a 	ret

00000650 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
     650:	defffd04 	addi	sp,sp,-12
     654:	dfc00215 	stw	ra,8(sp)
     658:	df000115 	stw	fp,4(sp)
     65c:	df000104 	addi	fp,sp,4
     660:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
     664:	e13fff17 	ldw	r4,-4(fp)
     668:	01400034 	movhi	r5,0
     66c:	29581b04 	addi	r5,r5,24684
     670:	0002ef00 	call	2ef0 <alt_dev_llist_insert>
}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
     688:	defffc04 	addi	sp,sp,-16
     68c:	dfc00315 	stw	ra,12(sp)
     690:	df000215 	stw	fp,8(sp)
     694:	df000204 	addi	fp,sp,8
     698:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
     69c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
     6a8:	e0bfff17 	ldw	r2,-4(fp)
     6ac:	11002d17 	ldw	r4,180(r2)
     6b0:	0002a740 	call	2a74 <epcs_read_electronic_signature>
     6b4:	10c03fcc 	andi	r3,r2,255
     6b8:	e0bfff17 	ldw	r2,-4(fp)
     6bc:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
     6c0:	e0bfff17 	ldw	r2,-4(fp)
     6c4:	10802f17 	ldw	r2,188(r2)
     6c8:	10800598 	cmpnei	r2,r2,22
     6cc:	10000a1e 	bne	r2,zero,6f8 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
     6d0:	e0ffff17 	ldw	r3,-4(fp)
     6d4:	00802034 	movhi	r2,128
     6d8:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
     6dc:	e0ffff17 	ldw	r3,-4(fp)
     6e0:	00802004 	movi	r2,128
     6e4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     6e8:	e0ffff17 	ldw	r3,-4(fp)
     6ec:	00800074 	movhi	r2,1
     6f0:	18801015 	stw	r2,64(r3)
     6f4:	00007306 	br	8c4 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
     6f8:	e0bfff17 	ldw	r2,-4(fp)
     6fc:	10802f17 	ldw	r2,188(r2)
     700:	10800518 	cmpnei	r2,r2,20
     704:	10000a1e 	bne	r2,zero,730 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
     708:	e0ffff17 	ldw	r3,-4(fp)
     70c:	00800834 	movhi	r2,32
     710:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
     714:	e0ffff17 	ldw	r3,-4(fp)
     718:	00800804 	movi	r2,32
     71c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     720:	e0ffff17 	ldw	r3,-4(fp)
     724:	00800074 	movhi	r2,1
     728:	18801015 	stw	r2,64(r3)
     72c:	00006506 	br	8c4 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
     730:	e0bfff17 	ldw	r2,-4(fp)
     734:	10802f17 	ldw	r2,188(r2)
     738:	108004d8 	cmpnei	r2,r2,19
     73c:	10000a1e 	bne	r2,zero,768 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
     740:	e0ffff17 	ldw	r3,-4(fp)
     744:	00800434 	movhi	r2,16
     748:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
     74c:	e0ffff17 	ldw	r3,-4(fp)
     750:	00800404 	movi	r2,16
     754:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     758:	e0ffff17 	ldw	r3,-4(fp)
     75c:	00800074 	movhi	r2,1
     760:	18801015 	stw	r2,64(r3)
     764:	00005706 	br	8c4 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
     768:	e0bfff17 	ldw	r2,-4(fp)
     76c:	10802f17 	ldw	r2,188(r2)
     770:	10800498 	cmpnei	r2,r2,18
     774:	10000a1e 	bne	r2,zero,7a0 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
     778:	e0ffff17 	ldw	r3,-4(fp)
     77c:	00800234 	movhi	r2,8
     780:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
     784:	e0ffff17 	ldw	r3,-4(fp)
     788:	00800204 	movi	r2,8
     78c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     790:	e0ffff17 	ldw	r3,-4(fp)
     794:	00800074 	movhi	r2,1
     798:	18801015 	stw	r2,64(r3)
     79c:	00004906 	br	8c4 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
     7a0:	e0bfff17 	ldw	r2,-4(fp)
     7a4:	10802f17 	ldw	r2,188(r2)
     7a8:	10800418 	cmpnei	r2,r2,16
     7ac:	10000a1e 	bne	r2,zero,7d8 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
     7b0:	e0ffff17 	ldw	r3,-4(fp)
     7b4:	008000b4 	movhi	r2,2
     7b8:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
     7bc:	e0ffff17 	ldw	r3,-4(fp)
     7c0:	00800104 	movi	r2,4
     7c4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
     7c8:	e0ffff17 	ldw	r3,-4(fp)
     7cc:	00a00014 	movui	r2,32768
     7d0:	18801015 	stw	r2,64(r3)
     7d4:	00003b06 	br	8c4 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
     7d8:	e0bfff17 	ldw	r2,-4(fp)
     7dc:	11002d17 	ldw	r4,180(r2)
     7e0:	0002ae00 	call	2ae0 <epcs_read_device_id>
     7e4:	1007883a 	mov	r3,r2
     7e8:	e0bfff17 	ldw	r2,-4(fp)
     7ec:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
     7f0:	e0bfff17 	ldw	r2,-4(fp)
     7f4:	10c02f17 	ldw	r3,188(r2)
     7f8:	00804034 	movhi	r2,256
     7fc:	10bfffc4 	addi	r2,r2,-1
     800:	1886703a 	and	r3,r3,r2
     804:	00800874 	movhi	r2,33
     808:	10ae8604 	addi	r2,r2,-17896
     80c:	18800a1e 	bne	r3,r2,838 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
     810:	e0ffff17 	ldw	r3,-4(fp)
     814:	00804034 	movhi	r2,256
     818:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
     81c:	e0ffff17 	ldw	r3,-4(fp)
     820:	00804004 	movi	r2,256
     824:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
     828:	e0ffff17 	ldw	r3,-4(fp)
     82c:	00800074 	movhi	r2,1
     830:	18801015 	stw	r2,64(r3)
     834:	00002306 	br	8c4 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
     838:	e0bfff17 	ldw	r2,-4(fp)
     83c:	10802f17 	ldw	r2,188(r2)
     840:	10803fcc 	andi	r2,r2,255
     844:	10800618 	cmpnei	r2,r2,24
     848:	10000a1e 	bne	r2,zero,874 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
     84c:	e0ffff17 	ldw	r3,-4(fp)
     850:	00804034 	movhi	r2,256
     854:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
     858:	e0ffff17 	ldw	r3,-4(fp)
     85c:	00801004 	movi	r2,64
     860:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
     864:	e0ffff17 	ldw	r3,-4(fp)
     868:	00800134 	movhi	r2,4
     86c:	18801015 	stw	r2,64(r3)
     870:	00001406 	br	8c4 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
     874:	e0bfff17 	ldw	r2,-4(fp)
     878:	10802f17 	ldw	r2,188(r2)
     87c:	10803fcc 	andi	r2,r2,255
     880:	10800658 	cmpnei	r2,r2,25
     884:	10000d1e 	bne	r2,zero,8bc <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
     888:	e0ffff17 	ldw	r3,-4(fp)
     88c:	00808034 	movhi	r2,512
     890:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
     894:	e0ffff17 	ldw	r3,-4(fp)
     898:	00808004 	movi	r2,512
     89c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
     8a0:	e0ffff17 	ldw	r3,-4(fp)
     8a4:	00800074 	movhi	r2,1
     8a8:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
     8ac:	e0ffff17 	ldw	r3,-4(fp)
     8b0:	00800044 	movi	r2,1
     8b4:	18803115 	stw	r2,196(r3)
     8b8:	00000206 	br	8c4 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
     8bc:	00bffb44 	movi	r2,-19
     8c0:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
     8c4:	e0bfff17 	ldw	r2,-4(fp)
     8c8:	10800e17 	ldw	r2,56(r2)
     8cc:	1007883a 	mov	r3,r2
     8d0:	e0bfff17 	ldw	r2,-4(fp)
     8d4:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
     8d8:	e0ffff17 	ldw	r3,-4(fp)
     8dc:	00800044 	movi	r2,1
     8e0:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
     8e4:	e0bfff17 	ldw	r2,-4(fp)
     8e8:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
     8ec:	e0ffff17 	ldw	r3,-4(fp)
     8f0:	00804004 	movi	r2,256
     8f4:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
     8f8:	e0bffe17 	ldw	r2,-8(fp)
}
     8fc:	e037883a 	mov	sp,fp
     900:	dfc00117 	ldw	ra,4(sp)
     904:	df000017 	ldw	fp,0(sp)
     908:	dec00204 	addi	sp,sp,8
     90c:	f800283a 	ret

00000910 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
     910:	deffeb04 	addi	sp,sp,-84
     914:	dfc01415 	stw	ra,80(sp)
     918:	df001315 	stw	fp,76(sp)
     91c:	df001304 	addi	fp,sp,76
     920:	e13ff915 	stw	r4,-28(fp)
     924:	e17ffa15 	stw	r5,-24(fp)
     928:	e1bffb15 	stw	r6,-20(fp)
     92c:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
     930:	00800804 	movi	r2,32
     934:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
     938:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
     93c:	00002c06 	br	9f0 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
     940:	e0bff017 	ldw	r2,-64(fp)
     944:	e0bfff15 	stw	r2,-4(fp)
     948:	e0fffc17 	ldw	r3,-16(fp)
     94c:	e0fffe15 	stw	r3,-8(fp)
     950:	e0bfff17 	ldw	r2,-4(fp)
     954:	e0fffe17 	ldw	r3,-8(fp)
     958:	10c0022e 	bgeu	r2,r3,964 <alt_epcs_flash_memcmp+0x54>
     95c:	e0bfff17 	ldw	r2,-4(fp)
     960:	e0bffe15 	stw	r2,-8(fp)
     964:	e0fffe17 	ldw	r3,-8(fp)
     968:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
     96c:	e0fffb17 	ldw	r3,-20(fp)
     970:	e0bfef17 	ldw	r2,-68(fp)
     974:	188b883a 	add	r5,r3,r2
     978:	e1bff104 	addi	r6,fp,-60
     97c:	e13ff917 	ldw	r4,-28(fp)
     980:	e1ffee17 	ldw	r7,-72(fp)
     984:	0000f480 	call	f48 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
     988:	1004403a 	cmpge	r2,r2,zero
     98c:	1000031e 	bne	r2,zero,99c <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
     990:	00bfffc4 	movi	r2,-1
     994:	e0bffd15 	stw	r2,-12(fp)
     998:	00001906 	br	a00 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
     99c:	e0fffa17 	ldw	r3,-24(fp)
     9a0:	e0bfef17 	ldw	r2,-68(fp)
     9a4:	1889883a 	add	r4,r3,r2
     9a8:	e1bfee17 	ldw	r6,-72(fp)
     9ac:	e17ff104 	addi	r5,fp,-60
     9b0:	0003fe00 	call	3fe0 <memcmp>
     9b4:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
     9b8:	e0bfed17 	ldw	r2,-76(fp)
     9bc:	1005003a 	cmpeq	r2,r2,zero
     9c0:	1000031e 	bne	r2,zero,9d0 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
     9c4:	e0ffed17 	ldw	r3,-76(fp)
     9c8:	e0fffd15 	stw	r3,-12(fp)
     9cc:	00000c06 	br	a00 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
     9d0:	e0ffee17 	ldw	r3,-72(fp)
     9d4:	e0bffc17 	ldw	r2,-16(fp)
     9d8:	10c5c83a 	sub	r2,r2,r3
     9dc:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
     9e0:	e0ffef17 	ldw	r3,-68(fp)
     9e4:	e0bfee17 	ldw	r2,-72(fp)
     9e8:	1885883a 	add	r2,r3,r2
     9ec:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
     9f0:	e0bffc17 	ldw	r2,-16(fp)
     9f4:	1004c03a 	cmpne	r2,r2,zero
     9f8:	103fd11e 	bne	r2,zero,940 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
     9fc:	e03ffd15 	stw	zero,-12(fp)
     a00:	e0bffd17 	ldw	r2,-12(fp)
}
     a04:	e037883a 	mov	sp,fp
     a08:	dfc00117 	ldw	ra,4(sp)
     a0c:	df000017 	ldw	fp,0(sp)
     a10:	dec00204 	addi	sp,sp,8
     a14:	f800283a 	ret

00000a18 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
     a18:	defff204 	addi	sp,sp,-56
     a1c:	dfc00d15 	stw	ra,52(sp)
     a20:	df000c15 	stw	fp,48(sp)
     a24:	df000c04 	addi	fp,sp,48
     a28:	e13ffa15 	stw	r4,-24(fp)
     a2c:	e17ffb15 	stw	r5,-20(fp)
     a30:	e1bffc15 	stw	r6,-16(fp)
     a34:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
     a38:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
     a3c:	e03ff815 	stw	zero,-32(fp)
     a40:	00008b06 	br	c70 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
     a44:	e0bff817 	ldw	r2,-32(fp)
     a48:	e0fffa17 	ldw	r3,-24(fp)
     a4c:	1004913a 	slli	r2,r2,4
     a50:	10c5883a 	add	r2,r2,r3
     a54:	10800d04 	addi	r2,r2,52
     a58:	10c00017 	ldw	r3,0(r2)
     a5c:	e0bffb17 	ldw	r2,-20(fp)
     a60:	10c08016 	blt	r2,r3,c64 <alt_epcs_flash_write+0x24c>
     a64:	e0bff817 	ldw	r2,-32(fp)
     a68:	e0fffa17 	ldw	r3,-24(fp)
     a6c:	1004913a 	slli	r2,r2,4
     a70:	10c5883a 	add	r2,r2,r3
     a74:	10800d04 	addi	r2,r2,52
     a78:	11000017 	ldw	r4,0(r2)
     a7c:	e0bff817 	ldw	r2,-32(fp)
     a80:	e0fffa17 	ldw	r3,-24(fp)
     a84:	1004913a 	slli	r2,r2,4
     a88:	10c5883a 	add	r2,r2,r3
     a8c:	10800e04 	addi	r2,r2,56
     a90:	10800017 	ldw	r2,0(r2)
     a94:	2087883a 	add	r3,r4,r2
     a98:	e0bffb17 	ldw	r2,-20(fp)
     a9c:	10c0710e 	bge	r2,r3,c64 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
     aa0:	e0bff817 	ldw	r2,-32(fp)
     aa4:	e0fffa17 	ldw	r3,-24(fp)
     aa8:	1004913a 	slli	r2,r2,4
     aac:	10c5883a 	add	r2,r2,r3
     ab0:	10800d04 	addi	r2,r2,52
     ab4:	10800017 	ldw	r2,0(r2)
     ab8:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
     abc:	e03ff715 	stw	zero,-36(fp)
     ac0:	00006006 	br	c44 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
     ac4:	e0fffb17 	ldw	r3,-20(fp)
     ac8:	e0bff517 	ldw	r2,-44(fp)
     acc:	18805116 	blt	r3,r2,c14 <alt_epcs_flash_write+0x1fc>
     ad0:	e0bff817 	ldw	r2,-32(fp)
     ad4:	e0fffa17 	ldw	r3,-24(fp)
     ad8:	1004913a 	slli	r2,r2,4
     adc:	10c5883a 	add	r2,r2,r3
     ae0:	10801004 	addi	r2,r2,64
     ae4:	10c00017 	ldw	r3,0(r2)
     ae8:	e0bff517 	ldw	r2,-44(fp)
     aec:	1887883a 	add	r3,r3,r2
     af0:	e0bffb17 	ldw	r2,-20(fp)
     af4:	10c0470e 	bge	r2,r3,c14 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
     af8:	e0bff817 	ldw	r2,-32(fp)
     afc:	e0fffa17 	ldw	r3,-24(fp)
     b00:	1004913a 	slli	r2,r2,4
     b04:	10c5883a 	add	r2,r2,r3
     b08:	10801004 	addi	r2,r2,64
     b0c:	10c00017 	ldw	r3,0(r2)
     b10:	e0bff517 	ldw	r2,-44(fp)
     b14:	1887883a 	add	r3,r3,r2
     b18:	e0bffb17 	ldw	r2,-20(fp)
     b1c:	1885c83a 	sub	r2,r3,r2
     b20:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
     b24:	e0bff617 	ldw	r2,-40(fp)
     b28:	e0bfff15 	stw	r2,-4(fp)
     b2c:	e0fffd17 	ldw	r3,-12(fp)
     b30:	e0fffe15 	stw	r3,-8(fp)
     b34:	e0bfff17 	ldw	r2,-4(fp)
     b38:	e0fffe17 	ldw	r3,-8(fp)
     b3c:	10c0020e 	bge	r2,r3,b48 <alt_epcs_flash_write+0x130>
     b40:	e0bfff17 	ldw	r2,-4(fp)
     b44:	e0bffe15 	stw	r2,-8(fp)
     b48:	e0fffe17 	ldw	r3,-8(fp)
     b4c:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
     b50:	e1fff617 	ldw	r7,-40(fp)
     b54:	e13ffa17 	ldw	r4,-24(fp)
     b58:	e17ffc17 	ldw	r5,-16(fp)
     b5c:	e1bffb17 	ldw	r6,-20(fp)
     b60:	00009100 	call	910 <alt_epcs_flash_memcmp>
     b64:	1005003a 	cmpeq	r2,r2,zero
     b68:	1000131e 	bne	r2,zero,bb8 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
     b6c:	e0bffa17 	ldw	r2,-24(fp)
     b70:	10800817 	ldw	r2,32(r2)
     b74:	e13ffa17 	ldw	r4,-24(fp)
     b78:	e17ff517 	ldw	r5,-44(fp)
     b7c:	103ee83a 	callr	r2
     b80:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
     b84:	e0bff917 	ldw	r2,-28(fp)
     b88:	1004c03a 	cmpne	r2,r2,zero
     b8c:	10000a1e 	bne	r2,zero,bb8 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
     b90:	e0bffa17 	ldw	r2,-24(fp)
     b94:	10c00917 	ldw	r3,36(r2)
     b98:	e0bff617 	ldw	r2,-40(fp)
     b9c:	d8800015 	stw	r2,0(sp)
     ba0:	e13ffa17 	ldw	r4,-24(fp)
     ba4:	e17ff517 	ldw	r5,-44(fp)
     ba8:	e1bffb17 	ldw	r6,-20(fp)
     bac:	e1fffc17 	ldw	r7,-16(fp)
     bb0:	183ee83a 	callr	r3
     bb4:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
     bb8:	e0fffd17 	ldw	r3,-12(fp)
     bbc:	e0bff617 	ldw	r2,-40(fp)
     bc0:	18802f26 	beq	r3,r2,c80 <alt_epcs_flash_write+0x268>
     bc4:	e0bff917 	ldw	r2,-28(fp)
     bc8:	1004c03a 	cmpne	r2,r2,zero
     bcc:	10002c1e 	bne	r2,zero,c80 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
     bd0:	e0fffd17 	ldw	r3,-12(fp)
     bd4:	e0bff617 	ldw	r2,-40(fp)
     bd8:	1885c83a 	sub	r2,r3,r2
     bdc:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
     be0:	e0bff817 	ldw	r2,-32(fp)
     be4:	e0fffa17 	ldw	r3,-24(fp)
     be8:	1004913a 	slli	r2,r2,4
     bec:	10c5883a 	add	r2,r2,r3
     bf0:	10801004 	addi	r2,r2,64
     bf4:	10c00017 	ldw	r3,0(r2)
     bf8:	e0bff517 	ldw	r2,-44(fp)
     bfc:	1885883a 	add	r2,r3,r2
     c00:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
     c04:	e0fffc17 	ldw	r3,-16(fp)
     c08:	e0bff617 	ldw	r2,-40(fp)
     c0c:	1885883a 	add	r2,r3,r2
     c10:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
     c14:	e0bff817 	ldw	r2,-32(fp)
     c18:	e0fffa17 	ldw	r3,-24(fp)
     c1c:	1004913a 	slli	r2,r2,4
     c20:	10c5883a 	add	r2,r2,r3
     c24:	10801004 	addi	r2,r2,64
     c28:	10c00017 	ldw	r3,0(r2)
     c2c:	e0bff517 	ldw	r2,-44(fp)
     c30:	10c5883a 	add	r2,r2,r3
     c34:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
     c38:	e0bff717 	ldw	r2,-36(fp)
     c3c:	10800044 	addi	r2,r2,1
     c40:	e0bff715 	stw	r2,-36(fp)
     c44:	e0bff817 	ldw	r2,-32(fp)
     c48:	e0fffa17 	ldw	r3,-24(fp)
     c4c:	1004913a 	slli	r2,r2,4
     c50:	10c5883a 	add	r2,r2,r3
     c54:	10800f04 	addi	r2,r2,60
     c58:	10c00017 	ldw	r3,0(r2)
     c5c:	e0bff717 	ldw	r2,-36(fp)
     c60:	10ff9816 	blt	r2,r3,ac4 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
     c64:	e0bff817 	ldw	r2,-32(fp)
     c68:	10800044 	addi	r2,r2,1
     c6c:	e0bff815 	stw	r2,-32(fp)
     c70:	e0bffa17 	ldw	r2,-24(fp)
     c74:	10c00c17 	ldw	r3,48(r2)
     c78:	e0bff817 	ldw	r2,-32(fp)
     c7c:	10ff7116 	blt	r2,r3,a44 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
     c80:	e0bff917 	ldw	r2,-28(fp)
}
     c84:	e037883a 	mov	sp,fp
     c88:	dfc00117 	ldw	ra,4(sp)
     c8c:	df000017 	ldw	fp,0(sp)
     c90:	dec00204 	addi	sp,sp,8
     c94:	f800283a 	ret

00000c98 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
     c98:	defffa04 	addi	sp,sp,-24
     c9c:	df000515 	stw	fp,20(sp)
     ca0:	df000504 	addi	fp,sp,20
     ca4:	e13ffd15 	stw	r4,-12(fp)
     ca8:	e17ffe15 	stw	r5,-8(fp)
     cac:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
     cb0:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
     cb4:	e0bffd17 	ldw	r2,-12(fp)
     cb8:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
     cbc:	e0bffb17 	ldw	r2,-20(fp)
     cc0:	10c00c17 	ldw	r3,48(r2)
     cc4:	e0bfff17 	ldw	r2,-4(fp)
     cc8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
     ccc:	e0bffb17 	ldw	r2,-20(fp)
     cd0:	10800c17 	ldw	r2,48(r2)
     cd4:	1004c03a 	cmpne	r2,r2,zero
     cd8:	1000031e 	bne	r2,zero,ce8 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
     cdc:	00bffec4 	movi	r2,-5
     ce0:	e0bffc15 	stw	r2,-16(fp)
     ce4:	00000b06 	br	d14 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
     ce8:	e0bffb17 	ldw	r2,-20(fp)
     cec:	10800c17 	ldw	r2,48(r2)
     cf0:	10800250 	cmplti	r2,r2,9
     cf4:	1000031e 	bne	r2,zero,d04 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
     cf8:	00bffd04 	movi	r2,-12
     cfc:	e0bffc15 	stw	r2,-16(fp)
     d00:	00000406 	br	d14 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
     d04:	e0bffb17 	ldw	r2,-20(fp)
     d08:	10c00d04 	addi	r3,r2,52
     d0c:	e0bffe17 	ldw	r2,-8(fp)
     d10:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
     d14:	e0bffc17 	ldw	r2,-16(fp)
}
     d18:	e037883a 	mov	sp,fp
     d1c:	df000017 	ldw	fp,0(sp)
     d20:	dec00104 	addi	sp,sp,4
     d24:	f800283a 	ret

00000d28 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
     d28:	defffa04 	addi	sp,sp,-24
     d2c:	dfc00515 	stw	ra,20(sp)
     d30:	df000415 	stw	fp,16(sp)
     d34:	df000404 	addi	fp,sp,16
     d38:	e13ffe15 	stw	r4,-8(fp)
     d3c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
     d40:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
     d44:	e0bffe17 	ldw	r2,-8(fp)
     d48:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
     d4c:	e13ffe17 	ldw	r4,-8(fp)
     d50:	e17fff17 	ldw	r5,-4(fp)
     d54:	0000d980 	call	d98 <alt_epcs_test_address>
     d58:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
     d5c:	e0bffd17 	ldw	r2,-12(fp)
     d60:	1004803a 	cmplt	r2,r2,zero
     d64:	1000061e 	bne	r2,zero,d80 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
     d68:	e0bffc17 	ldw	r2,-16(fp)
     d6c:	11002d17 	ldw	r4,180(r2)
     d70:	e17fff17 	ldw	r5,-4(fp)
     d74:	e0bffc17 	ldw	r2,-16(fp)
     d78:	11803117 	ldw	r6,196(r2)
     d7c:	000259c0 	call	259c <epcs_sector_erase>
  }
  return ret_code;
     d80:	e0bffd17 	ldw	r2,-12(fp)
}
     d84:	e037883a 	mov	sp,fp
     d88:	dfc00117 	ldw	ra,4(sp)
     d8c:	df000017 	ldw	fp,0(sp)
     d90:	dec00204 	addi	sp,sp,8
     d94:	f800283a 	ret

00000d98 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
     d98:	defff904 	addi	sp,sp,-28
     d9c:	df000615 	stw	fp,24(sp)
     da0:	df000604 	addi	fp,sp,24
     da4:	e13ffe15 	stw	r4,-8(fp)
     da8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
     dac:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
     db0:	e0bffe17 	ldw	r2,-8(fp)
     db4:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
     db8:	e0bffc17 	ldw	r2,-16(fp)
     dbc:	10800c17 	ldw	r2,48(r2)
     dc0:	10bfffc4 	addi	r2,r2,-1
     dc4:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
     dc8:	e0bffb17 	ldw	r2,-20(fp)
     dcc:	e0fffc17 	ldw	r3,-16(fp)
     dd0:	1004913a 	slli	r2,r2,4
     dd4:	10c5883a 	add	r2,r2,r3
     dd8:	10800d04 	addi	r2,r2,52
     ddc:	11000017 	ldw	r4,0(r2)
     de0:	e0bffb17 	ldw	r2,-20(fp)
     de4:	e0fffc17 	ldw	r3,-16(fp)
     de8:	1004913a 	slli	r2,r2,4
     dec:	10c5883a 	add	r2,r2,r3
     df0:	10800e04 	addi	r2,r2,56
     df4:	10800017 	ldw	r2,0(r2)
     df8:	2085883a 	add	r2,r4,r2
     dfc:	10bfffc4 	addi	r2,r2,-1
     e00:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
     e04:	e0ffff17 	ldw	r3,-4(fp)
     e08:	e0bffa17 	ldw	r2,-24(fp)
     e0c:	10c0022e 	bgeu	r2,r3,e18 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
     e10:	00bffec4 	movi	r2,-5
     e14:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
     e18:	e0bffd17 	ldw	r2,-12(fp)
}
     e1c:	e037883a 	mov	sp,fp
     e20:	df000017 	ldw	fp,0(sp)
     e24:	dec00104 	addi	sp,sp,4
     e28:	f800283a 	ret

00000e2c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
     e2c:	defff204 	addi	sp,sp,-56
     e30:	dfc00d15 	stw	ra,52(sp)
     e34:	df000c15 	stw	fp,48(sp)
     e38:	df000c04 	addi	fp,sp,48
     e3c:	e13ffa15 	stw	r4,-24(fp)
     e40:	e17ffb15 	stw	r5,-20(fp)
     e44:	e1bffc15 	stw	r6,-16(fp)
     e48:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
     e4c:	e0bffa17 	ldw	r2,-24(fp)
     e50:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
     e54:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
     e58:	e13ffa17 	ldw	r4,-24(fp)
     e5c:	e17ffc17 	ldw	r5,-16(fp)
     e60:	0000d980 	call	d98 <alt_epcs_test_address>
     e64:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
     e68:	e0bff917 	ldw	r2,-28(fp)
     e6c:	1004803a 	cmplt	r2,r2,zero
     e70:	10002f1e 	bne	r2,zero,f30 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
     e74:	00002b06 	br	f24 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
     e78:	e0bff817 	ldw	r2,-32(fp)
     e7c:	10c03017 	ldw	r3,192(r2)
     e80:	e0bffc17 	ldw	r2,-16(fp)
     e84:	1887883a 	add	r3,r3,r2
     e88:	e0bff817 	ldw	r2,-32(fp)
     e8c:	10803017 	ldw	r2,192(r2)
     e90:	0085c83a 	sub	r2,zero,r2
     e94:	1884703a 	and	r2,r3,r2
     e98:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
     e9c:	e0fff517 	ldw	r3,-44(fp)
     ea0:	e0bffc17 	ldw	r2,-16(fp)
     ea4:	1885c83a 	sub	r2,r3,r2
     ea8:	e0c00217 	ldw	r3,8(fp)
     eac:	e0ffff15 	stw	r3,-4(fp)
     eb0:	e0bffe15 	stw	r2,-8(fp)
     eb4:	e0bfff17 	ldw	r2,-4(fp)
     eb8:	e0fffe17 	ldw	r3,-8(fp)
     ebc:	10c0020e 	bge	r2,r3,ec8 <alt_epcs_flash_write_block+0x9c>
     ec0:	e0bfff17 	ldw	r2,-4(fp)
     ec4:	e0bffe15 	stw	r2,-8(fp)
     ec8:	e0fffe17 	ldw	r3,-8(fp)
     ecc:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
     ed0:	e0bff817 	ldw	r2,-32(fp)
     ed4:	11002d17 	ldw	r4,180(r2)
     ed8:	e0fffd17 	ldw	r3,-12(fp)
     edc:	e0bff717 	ldw	r2,-36(fp)
     ee0:	188d883a 	add	r6,r3,r2
     ee4:	e0bff817 	ldw	r2,-32(fp)
     ee8:	10803117 	ldw	r2,196(r2)
     eec:	d8800015 	stw	r2,0(sp)
     ef0:	e17ffc17 	ldw	r5,-16(fp)
     ef4:	e1fff617 	ldw	r7,-40(fp)
     ef8:	00029040 	call	2904 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
     efc:	e0c00217 	ldw	r3,8(fp)
     f00:	e0bff617 	ldw	r2,-40(fp)
     f04:	1885c83a 	sub	r2,r3,r2
     f08:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
     f0c:	e0fff717 	ldw	r3,-36(fp)
     f10:	e0bff617 	ldw	r2,-40(fp)
     f14:	1885883a 	add	r2,r3,r2
     f18:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
     f1c:	e0bff517 	ldw	r2,-44(fp)
     f20:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
     f24:	e0800217 	ldw	r2,8(fp)
     f28:	1004c03a 	cmpne	r2,r2,zero
     f2c:	103fd21e 	bne	r2,zero,e78 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
     f30:	e0bff917 	ldw	r2,-28(fp)
}
     f34:	e037883a 	mov	sp,fp
     f38:	dfc00117 	ldw	ra,4(sp)
     f3c:	df000017 	ldw	fp,0(sp)
     f40:	dec00204 	addi	sp,sp,8
     f44:	f800283a 	ret

00000f48 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
     f48:	defff704 	addi	sp,sp,-36
     f4c:	dfc00815 	stw	ra,32(sp)
     f50:	df000715 	stw	fp,28(sp)
     f54:	df000704 	addi	fp,sp,28
     f58:	e13ffc15 	stw	r4,-16(fp)
     f5c:	e17ffd15 	stw	r5,-12(fp)
     f60:	e1bffe15 	stw	r6,-8(fp)
     f64:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
     f68:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
     f6c:	e0bffc17 	ldw	r2,-16(fp)
     f70:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
     f74:	e13ffc17 	ldw	r4,-16(fp)
     f78:	e17ffd17 	ldw	r5,-12(fp)
     f7c:	0000d980 	call	d98 <alt_epcs_test_address>
     f80:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
     f84:	e0bffb17 	ldw	r2,-20(fp)
     f88:	1004803a 	cmplt	r2,r2,zero
     f8c:	10000e1e 	bne	r2,zero,fc8 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
     f90:	e0bffa17 	ldw	r2,-24(fp)
     f94:	11002d17 	ldw	r4,180(r2)
     f98:	e1bffe17 	ldw	r6,-8(fp)
     f9c:	e0bffa17 	ldw	r2,-24(fp)
     fa0:	10803117 	ldw	r2,196(r2)
     fa4:	d8800015 	stw	r2,0(sp)
     fa8:	e17ffd17 	ldw	r5,-12(fp)
     fac:	e1ffff17 	ldw	r7,-4(fp)
     fb0:	00027040 	call	2704 <epcs_read_buffer>
     fb4:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
     fb8:	e0fffb17 	ldw	r3,-20(fp)
     fbc:	e0bfff17 	ldw	r2,-4(fp)
     fc0:	1880011e 	bne	r3,r2,fc8 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
     fc4:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
     fc8:	e0bffb17 	ldw	r2,-20(fp)
}
     fcc:	e037883a 	mov	sp,fp
     fd0:	dfc00117 	ldw	ra,4(sp)
     fd4:	df000017 	ldw	fp,0(sp)
     fd8:	dec00204 	addi	sp,sp,8
     fdc:	f800283a 	ret

00000fe0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     fe0:	defffa04 	addi	sp,sp,-24
     fe4:	dfc00515 	stw	ra,20(sp)
     fe8:	df000415 	stw	fp,16(sp)
     fec:	df000404 	addi	fp,sp,16
     ff0:	e13ffd15 	stw	r4,-12(fp)
     ff4:	e17ffe15 	stw	r5,-8(fp)
     ff8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     ffc:	e0bffd17 	ldw	r2,-12(fp)
    1000:	10800017 	ldw	r2,0(r2)
    1004:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1008:	e0bffc17 	ldw	r2,-16(fp)
    100c:	11000a04 	addi	r4,r2,40
    1010:	e0bffd17 	ldw	r2,-12(fp)
    1014:	11c00217 	ldw	r7,8(r2)
    1018:	e17ffe17 	ldw	r5,-8(fp)
    101c:	e1bfff17 	ldw	r6,-4(fp)
    1020:	00016280 	call	1628 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1024:	e037883a 	mov	sp,fp
    1028:	dfc00117 	ldw	ra,4(sp)
    102c:	df000017 	ldw	fp,0(sp)
    1030:	dec00204 	addi	sp,sp,8
    1034:	f800283a 	ret

00001038 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1038:	defffa04 	addi	sp,sp,-24
    103c:	dfc00515 	stw	ra,20(sp)
    1040:	df000415 	stw	fp,16(sp)
    1044:	df000404 	addi	fp,sp,16
    1048:	e13ffd15 	stw	r4,-12(fp)
    104c:	e17ffe15 	stw	r5,-8(fp)
    1050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1054:	e0bffd17 	ldw	r2,-12(fp)
    1058:	10800017 	ldw	r2,0(r2)
    105c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1060:	e0bffc17 	ldw	r2,-16(fp)
    1064:	11000a04 	addi	r4,r2,40
    1068:	e0bffd17 	ldw	r2,-12(fp)
    106c:	11c00217 	ldw	r7,8(r2)
    1070:	e17ffe17 	ldw	r5,-8(fp)
    1074:	e1bfff17 	ldw	r6,-4(fp)
    1078:	000184c0 	call	184c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    107c:	e037883a 	mov	sp,fp
    1080:	dfc00117 	ldw	ra,4(sp)
    1084:	df000017 	ldw	fp,0(sp)
    1088:	dec00204 	addi	sp,sp,8
    108c:	f800283a 	ret

00001090 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1090:	defffc04 	addi	sp,sp,-16
    1094:	dfc00315 	stw	ra,12(sp)
    1098:	df000215 	stw	fp,8(sp)
    109c:	df000204 	addi	fp,sp,8
    10a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    10a4:	e0bfff17 	ldw	r2,-4(fp)
    10a8:	10800017 	ldw	r2,0(r2)
    10ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    10b0:	e0bffe17 	ldw	r2,-8(fp)
    10b4:	11000a04 	addi	r4,r2,40
    10b8:	e0bfff17 	ldw	r2,-4(fp)
    10bc:	11400217 	ldw	r5,8(r2)
    10c0:	00014c00 	call	14c0 <altera_avalon_jtag_uart_close>
}
    10c4:	e037883a 	mov	sp,fp
    10c8:	dfc00117 	ldw	ra,4(sp)
    10cc:	df000017 	ldw	fp,0(sp)
    10d0:	dec00204 	addi	sp,sp,8
    10d4:	f800283a 	ret

000010d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    10d8:	defffa04 	addi	sp,sp,-24
    10dc:	dfc00515 	stw	ra,20(sp)
    10e0:	df000415 	stw	fp,16(sp)
    10e4:	df000404 	addi	fp,sp,16
    10e8:	e13ffd15 	stw	r4,-12(fp)
    10ec:	e17ffe15 	stw	r5,-8(fp)
    10f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    10f4:	e0bffd17 	ldw	r2,-12(fp)
    10f8:	10800017 	ldw	r2,0(r2)
    10fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1100:	e0bffc17 	ldw	r2,-16(fp)
    1104:	11000a04 	addi	r4,r2,40
    1108:	e17ffe17 	ldw	r5,-8(fp)
    110c:	e1bfff17 	ldw	r6,-4(fp)
    1110:	00015340 	call	1534 <altera_avalon_jtag_uart_ioctl>
}
    1114:	e037883a 	mov	sp,fp
    1118:	dfc00117 	ldw	ra,4(sp)
    111c:	df000017 	ldw	fp,0(sp)
    1120:	dec00204 	addi	sp,sp,8
    1124:	f800283a 	ret

00001128 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1128:	defffa04 	addi	sp,sp,-24
    112c:	dfc00515 	stw	ra,20(sp)
    1130:	df000415 	stw	fp,16(sp)
    1134:	df000404 	addi	fp,sp,16
    1138:	e13ffd15 	stw	r4,-12(fp)
    113c:	e17ffe15 	stw	r5,-8(fp)
    1140:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1144:	e0fffd17 	ldw	r3,-12(fp)
    1148:	00800044 	movi	r2,1
    114c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1150:	e0bffd17 	ldw	r2,-12(fp)
    1154:	10800017 	ldw	r2,0(r2)
    1158:	11000104 	addi	r4,r2,4
    115c:	e0bffd17 	ldw	r2,-12(fp)
    1160:	10800817 	ldw	r2,32(r2)
    1164:	1007883a 	mov	r3,r2
    1168:	2005883a 	mov	r2,r4
    116c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    1170:	e13ffe17 	ldw	r4,-8(fp)
    1174:	e17fff17 	ldw	r5,-4(fp)
    1178:	d8000015 	stw	zero,0(sp)
    117c:	01800034 	movhi	r6,0
    1180:	31847a04 	addi	r6,r6,4584
    1184:	e1fffd17 	ldw	r7,-12(fp)
    1188:	000319c0 	call	319c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    118c:	e0bffd17 	ldw	r2,-12(fp)
    1190:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1194:	e0bffd17 	ldw	r2,-12(fp)
    1198:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    119c:	00800034 	movhi	r2,0
    11a0:	10982604 	addi	r2,r2,24728
    11a4:	10800017 	ldw	r2,0(r2)
    11a8:	100b883a 	mov	r5,r2
    11ac:	01800034 	movhi	r6,0
    11b0:	31850404 	addi	r6,r6,5136
    11b4:	e1fffd17 	ldw	r7,-12(fp)
    11b8:	0002c100 	call	2c10 <alt_alarm_start>
    11bc:	1004403a 	cmpge	r2,r2,zero
    11c0:	1000041e 	bne	r2,zero,11d4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    11c4:	e0fffd17 	ldw	r3,-12(fp)
    11c8:	00a00034 	movhi	r2,32768
    11cc:	10bfffc4 	addi	r2,r2,-1
    11d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    11d4:	e037883a 	mov	sp,fp
    11d8:	dfc00117 	ldw	ra,4(sp)
    11dc:	df000017 	ldw	fp,0(sp)
    11e0:	dec00204 	addi	sp,sp,8
    11e4:	f800283a 	ret

000011e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    11e8:	defff804 	addi	sp,sp,-32
    11ec:	df000715 	stw	fp,28(sp)
    11f0:	df000704 	addi	fp,sp,28
    11f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    11f8:	e0bfff17 	ldw	r2,-4(fp)
    11fc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    1200:	e0bffe17 	ldw	r2,-8(fp)
    1204:	10800017 	ldw	r2,0(r2)
    1208:	e0bffd15 	stw	r2,-12(fp)
    120c:	00000006 	br	1210 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1210:	e0bffd17 	ldw	r2,-12(fp)
    1214:	10800104 	addi	r2,r2,4
    1218:	10800037 	ldwio	r2,0(r2)
    121c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1220:	e0bffc17 	ldw	r2,-16(fp)
    1224:	1080c00c 	andi	r2,r2,768
    1228:	1005003a 	cmpeq	r2,r2,zero
    122c:	1000741e 	bne	r2,zero,1400 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    1230:	e0bffc17 	ldw	r2,-16(fp)
    1234:	1080400c 	andi	r2,r2,256
    1238:	1005003a 	cmpeq	r2,r2,zero
    123c:	1000351e 	bne	r2,zero,1314 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1240:	00800074 	movhi	r2,1
    1244:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1248:	e0bffe17 	ldw	r2,-8(fp)
    124c:	10800a17 	ldw	r2,40(r2)
    1250:	10800044 	addi	r2,r2,1
    1254:	1081ffcc 	andi	r2,r2,2047
    1258:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    125c:	e0bffe17 	ldw	r2,-8(fp)
    1260:	10c00b17 	ldw	r3,44(r2)
    1264:	e0bffa17 	ldw	r2,-24(fp)
    1268:	18801626 	beq	r3,r2,12c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    126c:	e0bffd17 	ldw	r2,-12(fp)
    1270:	10800037 	ldwio	r2,0(r2)
    1274:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1278:	e0bffb17 	ldw	r2,-20(fp)
    127c:	10a0000c 	andi	r2,r2,32768
    1280:	1005003a 	cmpeq	r2,r2,zero
    1284:	10000f1e 	bne	r2,zero,12c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1288:	e0bffe17 	ldw	r2,-8(fp)
    128c:	10c00a17 	ldw	r3,40(r2)
    1290:	e0bffb17 	ldw	r2,-20(fp)
    1294:	1009883a 	mov	r4,r2
    1298:	e0bffe17 	ldw	r2,-8(fp)
    129c:	1885883a 	add	r2,r3,r2
    12a0:	10800e04 	addi	r2,r2,56
    12a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    12a8:	e0bffe17 	ldw	r2,-8(fp)
    12ac:	10800a17 	ldw	r2,40(r2)
    12b0:	10800044 	addi	r2,r2,1
    12b4:	10c1ffcc 	andi	r3,r2,2047
    12b8:	e0bffe17 	ldw	r2,-8(fp)
    12bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    12c0:	003fe106 	br	1248 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    12c4:	e0bffb17 	ldw	r2,-20(fp)
    12c8:	10bfffec 	andhi	r2,r2,65535
    12cc:	1005003a 	cmpeq	r2,r2,zero
    12d0:	1000101e 	bne	r2,zero,1314 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    12d4:	e0bffe17 	ldw	r2,-8(fp)
    12d8:	10c00817 	ldw	r3,32(r2)
    12dc:	00bfff84 	movi	r2,-2
    12e0:	1886703a 	and	r3,r3,r2
    12e4:	e0bffe17 	ldw	r2,-8(fp)
    12e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    12ec:	e0bffd17 	ldw	r2,-12(fp)
    12f0:	11000104 	addi	r4,r2,4
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10800817 	ldw	r2,32(r2)
    12fc:	1007883a 	mov	r3,r2
    1300:	2005883a 	mov	r2,r4
    1304:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	10800104 	addi	r2,r2,4
    1310:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1314:	e0bffc17 	ldw	r2,-16(fp)
    1318:	1080800c 	andi	r2,r2,512
    131c:	1005003a 	cmpeq	r2,r2,zero
    1320:	103fbb1e 	bne	r2,zero,1210 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1324:	e0bffc17 	ldw	r2,-16(fp)
    1328:	10bfffec 	andhi	r2,r2,65535
    132c:	1004d43a 	srli	r2,r2,16
    1330:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1334:	00001506 	br	138c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1338:	e13ffd17 	ldw	r4,-12(fp)
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	10c00d17 	ldw	r3,52(r2)
    1344:	e0bffe17 	ldw	r2,-8(fp)
    1348:	1885883a 	add	r2,r3,r2
    134c:	10820e04 	addi	r2,r2,2104
    1350:	10800003 	ldbu	r2,0(r2)
    1354:	10c03fcc 	andi	r3,r2,255
    1358:	18c0201c 	xori	r3,r3,128
    135c:	18ffe004 	addi	r3,r3,-128
    1360:	2005883a 	mov	r2,r4
    1364:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1368:	e0bffe17 	ldw	r2,-8(fp)
    136c:	10800d17 	ldw	r2,52(r2)
    1370:	10800044 	addi	r2,r2,1
    1374:	10c1ffcc 	andi	r3,r2,2047
    1378:	e0bffe17 	ldw	r2,-8(fp)
    137c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1380:	e0bff917 	ldw	r2,-28(fp)
    1384:	10bfffc4 	addi	r2,r2,-1
    1388:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    138c:	e0bff917 	ldw	r2,-28(fp)
    1390:	1005003a 	cmpeq	r2,r2,zero
    1394:	1000051e 	bne	r2,zero,13ac <altera_avalon_jtag_uart_irq+0x1c4>
    1398:	e0bffe17 	ldw	r2,-8(fp)
    139c:	10c00d17 	ldw	r3,52(r2)
    13a0:	e0bffe17 	ldw	r2,-8(fp)
    13a4:	10800c17 	ldw	r2,48(r2)
    13a8:	18bfe31e 	bne	r3,r2,1338 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    13ac:	e0bff917 	ldw	r2,-28(fp)
    13b0:	1005003a 	cmpeq	r2,r2,zero
    13b4:	103f961e 	bne	r2,zero,1210 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    13b8:	e0bffe17 	ldw	r2,-8(fp)
    13bc:	10c00817 	ldw	r3,32(r2)
    13c0:	00bfff44 	movi	r2,-3
    13c4:	1886703a 	and	r3,r3,r2
    13c8:	e0bffe17 	ldw	r2,-8(fp)
    13cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    13d0:	e0bffe17 	ldw	r2,-8(fp)
    13d4:	10800017 	ldw	r2,0(r2)
    13d8:	11000104 	addi	r4,r2,4
    13dc:	e0bffe17 	ldw	r2,-8(fp)
    13e0:	10800817 	ldw	r2,32(r2)
    13e4:	1007883a 	mov	r3,r2
    13e8:	2005883a 	mov	r2,r4
    13ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800104 	addi	r2,r2,4
    13f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    13fc:	003f8406 	br	1210 <altera_avalon_jtag_uart_irq+0x28>
}
    1400:	e037883a 	mov	sp,fp
    1404:	df000017 	ldw	fp,0(sp)
    1408:	dec00104 	addi	sp,sp,4
    140c:	f800283a 	ret

00001410 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1410:	defffc04 	addi	sp,sp,-16
    1414:	df000315 	stw	fp,12(sp)
    1418:	df000304 	addi	fp,sp,12
    141c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1420:	e0bfff17 	ldw	r2,-4(fp)
    1424:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1428:	e0bffe17 	ldw	r2,-8(fp)
    142c:	10800017 	ldw	r2,0(r2)
    1430:	10800104 	addi	r2,r2,4
    1434:	10800037 	ldwio	r2,0(r2)
    1438:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    143c:	e0bffd17 	ldw	r2,-12(fp)
    1440:	1081000c 	andi	r2,r2,1024
    1444:	1005003a 	cmpeq	r2,r2,zero
    1448:	10000c1e 	bne	r2,zero,147c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    144c:	e0bffe17 	ldw	r2,-8(fp)
    1450:	10800017 	ldw	r2,0(r2)
    1454:	11000104 	addi	r4,r2,4
    1458:	e0bffe17 	ldw	r2,-8(fp)
    145c:	10800817 	ldw	r2,32(r2)
    1460:	10810014 	ori	r2,r2,1024
    1464:	1007883a 	mov	r3,r2
    1468:	2005883a 	mov	r2,r4
    146c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    1470:	e0bffe17 	ldw	r2,-8(fp)
    1474:	10000915 	stw	zero,36(r2)
    1478:	00000a06 	br	14a4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    147c:	e0bffe17 	ldw	r2,-8(fp)
    1480:	10c00917 	ldw	r3,36(r2)
    1484:	00a00034 	movhi	r2,32768
    1488:	10bfff04 	addi	r2,r2,-4
    148c:	10c00536 	bltu	r2,r3,14a4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    1490:	e0bffe17 	ldw	r2,-8(fp)
    1494:	10800917 	ldw	r2,36(r2)
    1498:	10c00044 	addi	r3,r2,1
    149c:	e0bffe17 	ldw	r2,-8(fp)
    14a0:	10c00915 	stw	r3,36(r2)
    14a4:	00800034 	movhi	r2,0
    14a8:	10982604 	addi	r2,r2,24728
    14ac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    14b0:	e037883a 	mov	sp,fp
    14b4:	df000017 	ldw	fp,0(sp)
    14b8:	dec00104 	addi	sp,sp,4
    14bc:	f800283a 	ret

000014c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    14c0:	defffc04 	addi	sp,sp,-16
    14c4:	df000315 	stw	fp,12(sp)
    14c8:	df000304 	addi	fp,sp,12
    14cc:	e13ffd15 	stw	r4,-12(fp)
    14d0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    14d4:	00000706 	br	14f4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    14d8:	e0bffe17 	ldw	r2,-8(fp)
    14dc:	1090000c 	andi	r2,r2,16384
    14e0:	1005003a 	cmpeq	r2,r2,zero
    14e4:	1000031e 	bne	r2,zero,14f4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    14e8:	00bffd44 	movi	r2,-11
    14ec:	e0bfff15 	stw	r2,-4(fp)
    14f0:	00000b06 	br	1520 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    14f4:	e0bffd17 	ldw	r2,-12(fp)
    14f8:	10c00d17 	ldw	r3,52(r2)
    14fc:	e0bffd17 	ldw	r2,-12(fp)
    1500:	10800c17 	ldw	r2,48(r2)
    1504:	18800526 	beq	r3,r2,151c <altera_avalon_jtag_uart_close+0x5c>
    1508:	e0bffd17 	ldw	r2,-12(fp)
    150c:	10c00917 	ldw	r3,36(r2)
    1510:	e0bffd17 	ldw	r2,-12(fp)
    1514:	10800117 	ldw	r2,4(r2)
    1518:	18bfef36 	bltu	r3,r2,14d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    151c:	e03fff15 	stw	zero,-4(fp)
    1520:	e0bfff17 	ldw	r2,-4(fp)
}
    1524:	e037883a 	mov	sp,fp
    1528:	df000017 	ldw	fp,0(sp)
    152c:	dec00104 	addi	sp,sp,4
    1530:	f800283a 	ret

00001534 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1534:	defff804 	addi	sp,sp,-32
    1538:	df000715 	stw	fp,28(sp)
    153c:	df000704 	addi	fp,sp,28
    1540:	e13ffb15 	stw	r4,-20(fp)
    1544:	e17ffc15 	stw	r5,-16(fp)
    1548:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    154c:	00bff9c4 	movi	r2,-25
    1550:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    1554:	e0bffc17 	ldw	r2,-16(fp)
    1558:	e0bfff15 	stw	r2,-4(fp)
    155c:	e0ffff17 	ldw	r3,-4(fp)
    1560:	189a8060 	cmpeqi	r2,r3,27137
    1564:	1000041e 	bne	r2,zero,1578 <altera_avalon_jtag_uart_ioctl+0x44>
    1568:	e0ffff17 	ldw	r3,-4(fp)
    156c:	189a80a0 	cmpeqi	r2,r3,27138
    1570:	10001b1e 	bne	r2,zero,15e0 <altera_avalon_jtag_uart_ioctl+0xac>
    1574:	00002706 	br	1614 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1578:	e0bffb17 	ldw	r2,-20(fp)
    157c:	10c00117 	ldw	r3,4(r2)
    1580:	00a00034 	movhi	r2,32768
    1584:	10bfffc4 	addi	r2,r2,-1
    1588:	18802226 	beq	r3,r2,1614 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    158c:	e0bffd17 	ldw	r2,-12(fp)
    1590:	10800017 	ldw	r2,0(r2)
    1594:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1598:	e0bff917 	ldw	r2,-28(fp)
    159c:	10800090 	cmplti	r2,r2,2
    15a0:	1000071e 	bne	r2,zero,15c0 <altera_avalon_jtag_uart_ioctl+0x8c>
    15a4:	e0fff917 	ldw	r3,-28(fp)
    15a8:	00a00034 	movhi	r2,32768
    15ac:	10bfffc4 	addi	r2,r2,-1
    15b0:	18800326 	beq	r3,r2,15c0 <altera_avalon_jtag_uart_ioctl+0x8c>
    15b4:	e0bff917 	ldw	r2,-28(fp)
    15b8:	e0bffe15 	stw	r2,-8(fp)
    15bc:	00000306 	br	15cc <altera_avalon_jtag_uart_ioctl+0x98>
    15c0:	00e00034 	movhi	r3,32768
    15c4:	18ffff84 	addi	r3,r3,-2
    15c8:	e0fffe15 	stw	r3,-8(fp)
    15cc:	e0bffb17 	ldw	r2,-20(fp)
    15d0:	e0fffe17 	ldw	r3,-8(fp)
    15d4:	10c00115 	stw	r3,4(r2)
      rc = 0;
    15d8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    15dc:	00000d06 	br	1614 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    15e0:	e0bffb17 	ldw	r2,-20(fp)
    15e4:	10c00117 	ldw	r3,4(r2)
    15e8:	00a00034 	movhi	r2,32768
    15ec:	10bfffc4 	addi	r2,r2,-1
    15f0:	18800826 	beq	r3,r2,1614 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    15f4:	e13ffd17 	ldw	r4,-12(fp)
    15f8:	e0bffb17 	ldw	r2,-20(fp)
    15fc:	10c00917 	ldw	r3,36(r2)
    1600:	e0bffb17 	ldw	r2,-20(fp)
    1604:	10800117 	ldw	r2,4(r2)
    1608:	1885803a 	cmpltu	r2,r3,r2
    160c:	20800015 	stw	r2,0(r4)
      rc = 0;
    1610:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    1614:	e0bffa17 	ldw	r2,-24(fp)
}
    1618:	e037883a 	mov	sp,fp
    161c:	df000017 	ldw	fp,0(sp)
    1620:	dec00104 	addi	sp,sp,4
    1624:	f800283a 	ret

00001628 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1628:	defff204 	addi	sp,sp,-56
    162c:	dfc00d15 	stw	ra,52(sp)
    1630:	df000c15 	stw	fp,48(sp)
    1634:	df000c04 	addi	fp,sp,48
    1638:	e13ffb15 	stw	r4,-20(fp)
    163c:	e17ffc15 	stw	r5,-16(fp)
    1640:	e1bffd15 	stw	r6,-12(fp)
    1644:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    1648:	e0bffc17 	ldw	r2,-16(fp)
    164c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1650:	00004806 	br	1774 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1654:	e0bffb17 	ldw	r2,-20(fp)
    1658:	10800a17 	ldw	r2,40(r2)
    165c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1660:	e0bffb17 	ldw	r2,-20(fp)
    1664:	10800b17 	ldw	r2,44(r2)
    1668:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    166c:	e0fff717 	ldw	r3,-36(fp)
    1670:	e0bff617 	ldw	r2,-40(fp)
    1674:	18800536 	bltu	r3,r2,168c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1678:	e0bff717 	ldw	r2,-36(fp)
    167c:	e0fff617 	ldw	r3,-40(fp)
    1680:	10c5c83a 	sub	r2,r2,r3
    1684:	e0bff815 	stw	r2,-32(fp)
    1688:	00000406 	br	169c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    168c:	00820004 	movi	r2,2048
    1690:	e0fff617 	ldw	r3,-40(fp)
    1694:	10c5c83a 	sub	r2,r2,r3
    1698:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    169c:	e0bff817 	ldw	r2,-32(fp)
    16a0:	1005003a 	cmpeq	r2,r2,zero
    16a4:	10001f1e 	bne	r2,zero,1724 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    16a8:	e0fffd17 	ldw	r3,-12(fp)
    16ac:	e0bff817 	ldw	r2,-32(fp)
    16b0:	1880022e 	bgeu	r3,r2,16bc <altera_avalon_jtag_uart_read+0x94>
        n = space;
    16b4:	e0bffd17 	ldw	r2,-12(fp)
    16b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    16bc:	e0bffb17 	ldw	r2,-20(fp)
    16c0:	10c00e04 	addi	r3,r2,56
    16c4:	e0bff617 	ldw	r2,-40(fp)
    16c8:	1887883a 	add	r3,r3,r2
    16cc:	e0bffa17 	ldw	r2,-24(fp)
    16d0:	1009883a 	mov	r4,r2
    16d4:	180b883a 	mov	r5,r3
    16d8:	e1bff817 	ldw	r6,-32(fp)
    16dc:	00040540 	call	4054 <memcpy>
      ptr   += n;
    16e0:	e0fff817 	ldw	r3,-32(fp)
    16e4:	e0bffa17 	ldw	r2,-24(fp)
    16e8:	10c5883a 	add	r2,r2,r3
    16ec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    16f0:	e0fffd17 	ldw	r3,-12(fp)
    16f4:	e0bff817 	ldw	r2,-32(fp)
    16f8:	1885c83a 	sub	r2,r3,r2
    16fc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1700:	e0fff617 	ldw	r3,-40(fp)
    1704:	e0bff817 	ldw	r2,-32(fp)
    1708:	1885883a 	add	r2,r3,r2
    170c:	10c1ffcc 	andi	r3,r2,2047
    1710:	e0bffb17 	ldw	r2,-20(fp)
    1714:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1718:	e0bffd17 	ldw	r2,-12(fp)
    171c:	10800048 	cmpgei	r2,r2,1
    1720:	103fcc1e 	bne	r2,zero,1654 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    1724:	e0fffa17 	ldw	r3,-24(fp)
    1728:	e0bffc17 	ldw	r2,-16(fp)
    172c:	1880141e 	bne	r3,r2,1780 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1730:	e0bffe17 	ldw	r2,-8(fp)
    1734:	1090000c 	andi	r2,r2,16384
    1738:	1004c03a 	cmpne	r2,r2,zero
    173c:	1000101e 	bne	r2,zero,1780 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1740:	e0bffb17 	ldw	r2,-20(fp)
    1744:	10c00a17 	ldw	r3,40(r2)
    1748:	e0bff717 	ldw	r2,-36(fp)
    174c:	1880051e 	bne	r3,r2,1764 <altera_avalon_jtag_uart_read+0x13c>
    1750:	e0bffb17 	ldw	r2,-20(fp)
    1754:	10c00917 	ldw	r3,36(r2)
    1758:	e0bffb17 	ldw	r2,-20(fp)
    175c:	10800117 	ldw	r2,4(r2)
    1760:	18bff736 	bltu	r3,r2,1740 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1764:	e0bffb17 	ldw	r2,-20(fp)
    1768:	10c00a17 	ldw	r3,40(r2)
    176c:	e0bff717 	ldw	r2,-36(fp)
    1770:	18800326 	beq	r3,r2,1780 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1774:	e0bffd17 	ldw	r2,-12(fp)
    1778:	10800048 	cmpgei	r2,r2,1
    177c:	103fb51e 	bne	r2,zero,1654 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1780:	e0fffa17 	ldw	r3,-24(fp)
    1784:	e0bffc17 	ldw	r2,-16(fp)
    1788:	18801926 	beq	r3,r2,17f0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    178c:	0005303a 	rdctl	r2,status
    1790:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1794:	e0fff517 	ldw	r3,-44(fp)
    1798:	00bfff84 	movi	r2,-2
    179c:	1884703a 	and	r2,r3,r2
    17a0:	1001703a 	wrctl	status,r2
  
  return context;
    17a4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    17a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    17ac:	e0bffb17 	ldw	r2,-20(fp)
    17b0:	10800817 	ldw	r2,32(r2)
    17b4:	10c00054 	ori	r3,r2,1
    17b8:	e0bffb17 	ldw	r2,-20(fp)
    17bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    17c0:	e0bffb17 	ldw	r2,-20(fp)
    17c4:	10800017 	ldw	r2,0(r2)
    17c8:	11000104 	addi	r4,r2,4
    17cc:	e0bffb17 	ldw	r2,-20(fp)
    17d0:	10800817 	ldw	r2,32(r2)
    17d4:	1007883a 	mov	r3,r2
    17d8:	2005883a 	mov	r2,r4
    17dc:	10c00035 	stwio	r3,0(r2)
    17e0:	e0bff917 	ldw	r2,-28(fp)
    17e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17e8:	e0bff417 	ldw	r2,-48(fp)
    17ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    17f0:	e0fffa17 	ldw	r3,-24(fp)
    17f4:	e0bffc17 	ldw	r2,-16(fp)
    17f8:	18800526 	beq	r3,r2,1810 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    17fc:	e0fffa17 	ldw	r3,-24(fp)
    1800:	e0bffc17 	ldw	r2,-16(fp)
    1804:	1887c83a 	sub	r3,r3,r2
    1808:	e0ffff15 	stw	r3,-4(fp)
    180c:	00000906 	br	1834 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    1810:	e0bffe17 	ldw	r2,-8(fp)
    1814:	1090000c 	andi	r2,r2,16384
    1818:	1005003a 	cmpeq	r2,r2,zero
    181c:	1000031e 	bne	r2,zero,182c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1820:	00bffd44 	movi	r2,-11
    1824:	e0bfff15 	stw	r2,-4(fp)
    1828:	00000206 	br	1834 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    182c:	00bffec4 	movi	r2,-5
    1830:	e0bfff15 	stw	r2,-4(fp)
    1834:	e0bfff17 	ldw	r2,-4(fp)
}
    1838:	e037883a 	mov	sp,fp
    183c:	dfc00117 	ldw	ra,4(sp)
    1840:	df000017 	ldw	fp,0(sp)
    1844:	dec00204 	addi	sp,sp,8
    1848:	f800283a 	ret

0000184c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    184c:	defff204 	addi	sp,sp,-56
    1850:	dfc00d15 	stw	ra,52(sp)
    1854:	df000c15 	stw	fp,48(sp)
    1858:	df000c04 	addi	fp,sp,48
    185c:	e13ffb15 	stw	r4,-20(fp)
    1860:	e17ffc15 	stw	r5,-16(fp)
    1864:	e1bffd15 	stw	r6,-12(fp)
    1868:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    186c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1870:	e0bffc17 	ldw	r2,-16(fp)
    1874:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1878:	00003a06 	br	1964 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    187c:	e0bffb17 	ldw	r2,-20(fp)
    1880:	10800c17 	ldw	r2,48(r2)
    1884:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    1888:	e0bffb17 	ldw	r2,-20(fp)
    188c:	10800d17 	ldw	r2,52(r2)
    1890:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    1894:	e0fffa17 	ldw	r3,-24(fp)
    1898:	e0bff917 	ldw	r2,-28(fp)
    189c:	1880062e 	bgeu	r3,r2,18b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    18a0:	e0fff917 	ldw	r3,-28(fp)
    18a4:	e0bffa17 	ldw	r2,-24(fp)
    18a8:	1885c83a 	sub	r2,r3,r2
    18ac:	10bfffc4 	addi	r2,r2,-1
    18b0:	e0bff815 	stw	r2,-32(fp)
    18b4:	00000c06 	br	18e8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    18b8:	e0bff917 	ldw	r2,-28(fp)
    18bc:	1005003a 	cmpeq	r2,r2,zero
    18c0:	1000051e 	bne	r2,zero,18d8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    18c4:	00820004 	movi	r2,2048
    18c8:	e0fffa17 	ldw	r3,-24(fp)
    18cc:	10c5c83a 	sub	r2,r2,r3
    18d0:	e0bff815 	stw	r2,-32(fp)
    18d4:	00000406 	br	18e8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    18d8:	0081ffc4 	movi	r2,2047
    18dc:	e0fffa17 	ldw	r3,-24(fp)
    18e0:	10c5c83a 	sub	r2,r2,r3
    18e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    18e8:	e0bff817 	ldw	r2,-32(fp)
    18ec:	1005003a 	cmpeq	r2,r2,zero
    18f0:	10001f1e 	bne	r2,zero,1970 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    18f4:	e0fffd17 	ldw	r3,-12(fp)
    18f8:	e0bff817 	ldw	r2,-32(fp)
    18fc:	1880022e 	bgeu	r3,r2,1908 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    1900:	e0bffd17 	ldw	r2,-12(fp)
    1904:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1908:	e0bffb17 	ldw	r2,-20(fp)
    190c:	10c20e04 	addi	r3,r2,2104
    1910:	e0bffa17 	ldw	r2,-24(fp)
    1914:	1885883a 	add	r2,r3,r2
    1918:	e0fffc17 	ldw	r3,-16(fp)
    191c:	1009883a 	mov	r4,r2
    1920:	180b883a 	mov	r5,r3
    1924:	e1bff817 	ldw	r6,-32(fp)
    1928:	00040540 	call	4054 <memcpy>
      ptr   += n;
    192c:	e0fff817 	ldw	r3,-32(fp)
    1930:	e0bffc17 	ldw	r2,-16(fp)
    1934:	10c5883a 	add	r2,r2,r3
    1938:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    193c:	e0fffd17 	ldw	r3,-12(fp)
    1940:	e0bff817 	ldw	r2,-32(fp)
    1944:	1885c83a 	sub	r2,r3,r2
    1948:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    194c:	e0fffa17 	ldw	r3,-24(fp)
    1950:	e0bff817 	ldw	r2,-32(fp)
    1954:	1885883a 	add	r2,r3,r2
    1958:	10c1ffcc 	andi	r3,r2,2047
    195c:	e0bffb17 	ldw	r2,-20(fp)
    1960:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1964:	e0bffd17 	ldw	r2,-12(fp)
    1968:	10800048 	cmpgei	r2,r2,1
    196c:	103fc31e 	bne	r2,zero,187c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1970:	0005303a 	rdctl	r2,status
    1974:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1978:	e0fff517 	ldw	r3,-44(fp)
    197c:	00bfff84 	movi	r2,-2
    1980:	1884703a 	and	r2,r3,r2
    1984:	1001703a 	wrctl	status,r2
  
  return context;
    1988:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    198c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1990:	e0bffb17 	ldw	r2,-20(fp)
    1994:	10800817 	ldw	r2,32(r2)
    1998:	10c00094 	ori	r3,r2,2
    199c:	e0bffb17 	ldw	r2,-20(fp)
    19a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    19a4:	e0bffb17 	ldw	r2,-20(fp)
    19a8:	10800017 	ldw	r2,0(r2)
    19ac:	11000104 	addi	r4,r2,4
    19b0:	e0bffb17 	ldw	r2,-20(fp)
    19b4:	10800817 	ldw	r2,32(r2)
    19b8:	1007883a 	mov	r3,r2
    19bc:	2005883a 	mov	r2,r4
    19c0:	10c00035 	stwio	r3,0(r2)
    19c4:	e0bff717 	ldw	r2,-36(fp)
    19c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    19cc:	e0bff417 	ldw	r2,-48(fp)
    19d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    19d4:	e0bffd17 	ldw	r2,-12(fp)
    19d8:	10800050 	cmplti	r2,r2,1
    19dc:	1000111e 	bne	r2,zero,1a24 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    19e0:	e0bffe17 	ldw	r2,-8(fp)
    19e4:	1090000c 	andi	r2,r2,16384
    19e8:	1004c03a 	cmpne	r2,r2,zero
    19ec:	1000101e 	bne	r2,zero,1a30 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    19f0:	e0bffb17 	ldw	r2,-20(fp)
    19f4:	10c00d17 	ldw	r3,52(r2)
    19f8:	e0bff917 	ldw	r2,-28(fp)
    19fc:	1880051e 	bne	r3,r2,1a14 <altera_avalon_jtag_uart_write+0x1c8>
    1a00:	e0bffb17 	ldw	r2,-20(fp)
    1a04:	10c00917 	ldw	r3,36(r2)
    1a08:	e0bffb17 	ldw	r2,-20(fp)
    1a0c:	10800117 	ldw	r2,4(r2)
    1a10:	18bff736 	bltu	r3,r2,19f0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    1a14:	e0bffb17 	ldw	r2,-20(fp)
    1a18:	10c00d17 	ldw	r3,52(r2)
    1a1c:	e0bff917 	ldw	r2,-28(fp)
    1a20:	18800326 	beq	r3,r2,1a30 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    1a24:	e0bffd17 	ldw	r2,-12(fp)
    1a28:	10800048 	cmpgei	r2,r2,1
    1a2c:	103fcd1e 	bne	r2,zero,1964 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1a30:	e0fffc17 	ldw	r3,-16(fp)
    1a34:	e0bff617 	ldw	r2,-40(fp)
    1a38:	18800526 	beq	r3,r2,1a50 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    1a3c:	e0fffc17 	ldw	r3,-16(fp)
    1a40:	e0bff617 	ldw	r2,-40(fp)
    1a44:	1887c83a 	sub	r3,r3,r2
    1a48:	e0ffff15 	stw	r3,-4(fp)
    1a4c:	00000906 	br	1a74 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1a50:	e0bffe17 	ldw	r2,-8(fp)
    1a54:	1090000c 	andi	r2,r2,16384
    1a58:	1005003a 	cmpeq	r2,r2,zero
    1a5c:	1000031e 	bne	r2,zero,1a6c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    1a60:	00bffd44 	movi	r2,-11
    1a64:	e0bfff15 	stw	r2,-4(fp)
    1a68:	00000206 	br	1a74 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1a6c:	00bffec4 	movi	r2,-5
    1a70:	e0bfff15 	stw	r2,-4(fp)
    1a74:	e0bfff17 	ldw	r2,-4(fp)
}
    1a78:	e037883a 	mov	sp,fp
    1a7c:	dfc00117 	ldw	ra,4(sp)
    1a80:	df000017 	ldw	fp,0(sp)
    1a84:	dec00204 	addi	sp,sp,8
    1a88:	f800283a 	ret

00001a8c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1a8c:	defffa04 	addi	sp,sp,-24
    1a90:	dfc00515 	stw	ra,20(sp)
    1a94:	df000415 	stw	fp,16(sp)
    1a98:	df000404 	addi	fp,sp,16
    1a9c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1aa0:	e0bfff17 	ldw	r2,-4(fp)
    1aa4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	10800104 	addi	r2,r2,4
    1ab0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ab4:	0005303a 	rdctl	r2,status
    1ab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1abc:	e0fffd17 	ldw	r3,-12(fp)
    1ac0:	00bfff84 	movi	r2,-2
    1ac4:	1884703a 	and	r2,r3,r2
    1ac8:	1001703a 	wrctl	status,r2
  
  return context;
    1acc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1ad0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    1ad4:	00039ac0 	call	39ac <alt_tick>
    1ad8:	e0bffe17 	ldw	r2,-8(fp)
    1adc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ae0:	e0bffc17 	ldw	r2,-16(fp)
    1ae4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1ae8:	e037883a 	mov	sp,fp
    1aec:	dfc00117 	ldw	ra,4(sp)
    1af0:	df000017 	ldw	fp,0(sp)
    1af4:	dec00204 	addi	sp,sp,8
    1af8:	f800283a 	ret

00001afc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1afc:	defff804 	addi	sp,sp,-32
    1b00:	dfc00715 	stw	ra,28(sp)
    1b04:	df000615 	stw	fp,24(sp)
    1b08:	df000604 	addi	fp,sp,24
    1b0c:	e13ffc15 	stw	r4,-16(fp)
    1b10:	e17ffd15 	stw	r5,-12(fp)
    1b14:	e1bffe15 	stw	r6,-8(fp)
    1b18:	e1ffff15 	stw	r7,-4(fp)
    1b1c:	e0bfff17 	ldw	r2,-4(fp)
    1b20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1b24:	00800034 	movhi	r2,0
    1b28:	10982604 	addi	r2,r2,24728
    1b2c:	10800017 	ldw	r2,0(r2)
    1b30:	1004c03a 	cmpne	r2,r2,zero
    1b34:	1000041e 	bne	r2,zero,1b48 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    1b38:	00c00034 	movhi	r3,0
    1b3c:	18d82604 	addi	r3,r3,24728
    1b40:	e0bffb17 	ldw	r2,-20(fp)
    1b44:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1b48:	e0bffc17 	ldw	r2,-16(fp)
    1b4c:	10800104 	addi	r2,r2,4
    1b50:	1007883a 	mov	r3,r2
    1b54:	008001c4 	movi	r2,7
    1b58:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    1b5c:	d8000015 	stw	zero,0(sp)
    1b60:	e13ffd17 	ldw	r4,-12(fp)
    1b64:	e17ffe17 	ldw	r5,-8(fp)
    1b68:	01800034 	movhi	r6,0
    1b6c:	3186a304 	addi	r6,r6,6796
    1b70:	e1fffc17 	ldw	r7,-16(fp)
    1b74:	000319c0 	call	319c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    1b78:	e037883a 	mov	sp,fp
    1b7c:	dfc00117 	ldw	ra,4(sp)
    1b80:	df000017 	ldw	fp,0(sp)
    1b84:	dec00204 	addi	sp,sp,8
    1b88:	f800283a 	ret

00001b8c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1b8c:	defffa04 	addi	sp,sp,-24
    1b90:	dfc00515 	stw	ra,20(sp)
    1b94:	df000415 	stw	fp,16(sp)
    1b98:	df000404 	addi	fp,sp,16
    1b9c:	e13ffd15 	stw	r4,-12(fp)
    1ba0:	e17ffe15 	stw	r5,-8(fp)
    1ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1ba8:	e0bffd17 	ldw	r2,-12(fp)
    1bac:	10800017 	ldw	r2,0(r2)
    1bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    1bb4:	e0bffc17 	ldw	r2,-16(fp)
    1bb8:	11000a04 	addi	r4,r2,40
    1bbc:	e0bffd17 	ldw	r2,-12(fp)
    1bc0:	11c00217 	ldw	r7,8(r2)
    1bc4:	e17ffe17 	ldw	r5,-8(fp)
    1bc8:	e1bfff17 	ldw	r6,-4(fp)
    1bcc:	00020840 	call	2084 <altera_avalon_uart_read>
      fd->fd_flags);
}
    1bd0:	e037883a 	mov	sp,fp
    1bd4:	dfc00117 	ldw	ra,4(sp)
    1bd8:	df000017 	ldw	fp,0(sp)
    1bdc:	dec00204 	addi	sp,sp,8
    1be0:	f800283a 	ret

00001be4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1be4:	defffa04 	addi	sp,sp,-24
    1be8:	dfc00515 	stw	ra,20(sp)
    1bec:	df000415 	stw	fp,16(sp)
    1bf0:	df000404 	addi	fp,sp,16
    1bf4:	e13ffd15 	stw	r4,-12(fp)
    1bf8:	e17ffe15 	stw	r5,-8(fp)
    1bfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1c00:	e0bffd17 	ldw	r2,-12(fp)
    1c04:	10800017 	ldw	r2,0(r2)
    1c08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    1c0c:	e0bffc17 	ldw	r2,-16(fp)
    1c10:	11000a04 	addi	r4,r2,40
    1c14:	e0bffd17 	ldw	r2,-12(fp)
    1c18:	11c00217 	ldw	r7,8(r2)
    1c1c:	e17ffe17 	ldw	r5,-8(fp)
    1c20:	e1bfff17 	ldw	r6,-4(fp)
    1c24:	00023140 	call	2314 <altera_avalon_uart_write>
      fd->fd_flags);
}
    1c28:	e037883a 	mov	sp,fp
    1c2c:	dfc00117 	ldw	ra,4(sp)
    1c30:	df000017 	ldw	fp,0(sp)
    1c34:	dec00204 	addi	sp,sp,8
    1c38:	f800283a 	ret

00001c3c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    1c3c:	defffc04 	addi	sp,sp,-16
    1c40:	dfc00315 	stw	ra,12(sp)
    1c44:	df000215 	stw	fp,8(sp)
    1c48:	df000204 	addi	fp,sp,8
    1c4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1c50:	e0bfff17 	ldw	r2,-4(fp)
    1c54:	10800017 	ldw	r2,0(r2)
    1c58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    1c5c:	e0bffe17 	ldw	r2,-8(fp)
    1c60:	11000a04 	addi	r4,r2,40
    1c64:	e0bfff17 	ldw	r2,-4(fp)
    1c68:	11400217 	ldw	r5,8(r2)
    1c6c:	00020240 	call	2024 <altera_avalon_uart_close>
}
    1c70:	e037883a 	mov	sp,fp
    1c74:	dfc00117 	ldw	ra,4(sp)
    1c78:	df000017 	ldw	fp,0(sp)
    1c7c:	dec00204 	addi	sp,sp,8
    1c80:	f800283a 	ret

00001c84 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    1c84:	defff704 	addi	sp,sp,-36
    1c88:	dfc00815 	stw	ra,32(sp)
    1c8c:	df000715 	stw	fp,28(sp)
    1c90:	df000704 	addi	fp,sp,28
    1c94:	e13ffc15 	stw	r4,-16(fp)
    1c98:	e17ffd15 	stw	r5,-12(fp)
    1c9c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    1ca0:	e0bffc17 	ldw	r2,-16(fp)
    1ca4:	10800017 	ldw	r2,0(r2)
    1ca8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    1cac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    1cb0:	1004c03a 	cmpne	r2,r2,zero
    1cb4:	1000061e 	bne	r2,zero,1cd0 <altera_avalon_uart_init+0x4c>
    1cb8:	0005883a 	mov	r2,zero
    1cbc:	1004c03a 	cmpne	r2,r2,zero
    1cc0:	1000031e 	bne	r2,zero,1cd0 <altera_avalon_uart_init+0x4c>
    1cc4:	0005883a 	mov	r2,zero
    1cc8:	1005003a 	cmpeq	r2,r2,zero
    1ccc:	1000031e 	bne	r2,zero,1cdc <altera_avalon_uart_init+0x58>
    1cd0:	00800044 	movi	r2,1
    1cd4:	e0bfff15 	stw	r2,-4(fp)
    1cd8:	00000106 	br	1ce0 <altera_avalon_uart_init+0x5c>
    1cdc:	e03fff15 	stw	zero,-4(fp)
    1ce0:	e0bfff17 	ldw	r2,-4(fp)
    1ce4:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    1ce8:	e0bffa17 	ldw	r2,-24(fp)
    1cec:	1004c03a 	cmpne	r2,r2,zero
    1cf0:	1000111e 	bne	r2,zero,1d38 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    1cf4:	e0fffc17 	ldw	r3,-16(fp)
    1cf8:	00832004 	movi	r2,3200
    1cfc:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    1d00:	e0bffb17 	ldw	r2,-20(fp)
    1d04:	11000304 	addi	r4,r2,12
    1d08:	e0bffc17 	ldw	r2,-16(fp)
    1d0c:	10800117 	ldw	r2,4(r2)
    1d10:	1007883a 	mov	r3,r2
    1d14:	2005883a 	mov	r2,r4
    1d18:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    1d1c:	d8000015 	stw	zero,0(sp)
    1d20:	e13ffd17 	ldw	r4,-12(fp)
    1d24:	e17ffe17 	ldw	r5,-8(fp)
    1d28:	01800034 	movhi	r6,0
    1d2c:	31875304 	addi	r6,r6,7500
    1d30:	e1fffc17 	ldw	r7,-16(fp)
    1d34:	000319c0 	call	319c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    1d38:	e037883a 	mov	sp,fp
    1d3c:	dfc00117 	ldw	ra,4(sp)
    1d40:	df000017 	ldw	fp,0(sp)
    1d44:	dec00204 	addi	sp,sp,8
    1d48:	f800283a 	ret

00001d4c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    1d4c:	defffa04 	addi	sp,sp,-24
    1d50:	dfc00515 	stw	ra,20(sp)
    1d54:	df000415 	stw	fp,16(sp)
    1d58:	df000404 	addi	fp,sp,16
    1d5c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    1d60:	e0bfff17 	ldw	r2,-4(fp)
    1d64:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    1d68:	e0bffd17 	ldw	r2,-12(fp)
    1d6c:	10800017 	ldw	r2,0(r2)
    1d70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    1d74:	e0bffc17 	ldw	r2,-16(fp)
    1d78:	10800204 	addi	r2,r2,8
    1d7c:	10800037 	ldwio	r2,0(r2)
    1d80:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    1d84:	e0bffc17 	ldw	r2,-16(fp)
    1d88:	10800204 	addi	r2,r2,8
    1d8c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    1d90:	e0bffc17 	ldw	r2,-16(fp)
    1d94:	10800204 	addi	r2,r2,8
    1d98:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    1d9c:	e0bffe17 	ldw	r2,-8(fp)
    1da0:	1080200c 	andi	r2,r2,128
    1da4:	1005003a 	cmpeq	r2,r2,zero
    1da8:	1000031e 	bne	r2,zero,1db8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    1dac:	e13ffd17 	ldw	r4,-12(fp)
    1db0:	e17ffe17 	ldw	r5,-8(fp)
    1db4:	0001de80 	call	1de8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    1db8:	e0bffe17 	ldw	r2,-8(fp)
    1dbc:	1081100c 	andi	r2,r2,1088
    1dc0:	1005003a 	cmpeq	r2,r2,zero
    1dc4:	1000031e 	bne	r2,zero,1dd4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    1dc8:	e13ffd17 	ldw	r4,-12(fp)
    1dcc:	e17ffe17 	ldw	r5,-8(fp)
    1dd0:	0001ec80 	call	1ec8 <altera_avalon_uart_txirq>
  }
  

}
    1dd4:	e037883a 	mov	sp,fp
    1dd8:	dfc00117 	ldw	ra,4(sp)
    1ddc:	df000017 	ldw	fp,0(sp)
    1de0:	dec00204 	addi	sp,sp,8
    1de4:	f800283a 	ret

00001de8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1de8:	defffc04 	addi	sp,sp,-16
    1dec:	df000315 	stw	fp,12(sp)
    1df0:	df000304 	addi	fp,sp,12
    1df4:	e13ffe15 	stw	r4,-8(fp)
    1df8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    1dfc:	e0bfff17 	ldw	r2,-4(fp)
    1e00:	108000cc 	andi	r2,r2,3
    1e04:	1004c03a 	cmpne	r2,r2,zero
    1e08:	10002b1e 	bne	r2,zero,1eb8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    1e0c:	e0bffe17 	ldw	r2,-8(fp)
    1e10:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    1e14:	e0bffe17 	ldw	r2,-8(fp)
    1e18:	10800317 	ldw	r2,12(r2)
    1e1c:	10800044 	addi	r2,r2,1
    1e20:	10800fcc 	andi	r2,r2,63
    1e24:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	11000317 	ldw	r4,12(r2)
    1e30:	e0bffe17 	ldw	r2,-8(fp)
    1e34:	10800017 	ldw	r2,0(r2)
    1e38:	10800037 	ldwio	r2,0(r2)
    1e3c:	1007883a 	mov	r3,r2
    1e40:	e0bffe17 	ldw	r2,-8(fp)
    1e44:	2085883a 	add	r2,r4,r2
    1e48:	10800704 	addi	r2,r2,28
    1e4c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    1e50:	e0fffe17 	ldw	r3,-8(fp)
    1e54:	e0bffd17 	ldw	r2,-12(fp)
    1e58:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    1e5c:	e0bffe17 	ldw	r2,-8(fp)
    1e60:	10800317 	ldw	r2,12(r2)
    1e64:	10800044 	addi	r2,r2,1
    1e68:	10800fcc 	andi	r2,r2,63
    1e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    1e70:	e0bffe17 	ldw	r2,-8(fp)
    1e74:	10c00217 	ldw	r3,8(r2)
    1e78:	e0bffd17 	ldw	r2,-12(fp)
    1e7c:	18800e1e 	bne	r3,r2,1eb8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    1e80:	e0bffe17 	ldw	r2,-8(fp)
    1e84:	10c00117 	ldw	r3,4(r2)
    1e88:	00bfdfc4 	movi	r2,-129
    1e8c:	1886703a 	and	r3,r3,r2
    1e90:	e0bffe17 	ldw	r2,-8(fp)
    1e94:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    1e98:	e0bffe17 	ldw	r2,-8(fp)
    1e9c:	10800017 	ldw	r2,0(r2)
    1ea0:	11000304 	addi	r4,r2,12
    1ea4:	e0bffe17 	ldw	r2,-8(fp)
    1ea8:	10800117 	ldw	r2,4(r2)
    1eac:	1007883a 	mov	r3,r2
    1eb0:	2005883a 	mov	r2,r4
    1eb4:	10c00035 	stwio	r3,0(r2)
  }   
}
    1eb8:	e037883a 	mov	sp,fp
    1ebc:	df000017 	ldw	fp,0(sp)
    1ec0:	dec00104 	addi	sp,sp,4
    1ec4:	f800283a 	ret

00001ec8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1ec8:	defffd04 	addi	sp,sp,-12
    1ecc:	df000215 	stw	fp,8(sp)
    1ed0:	df000204 	addi	fp,sp,8
    1ed4:	e13ffe15 	stw	r4,-8(fp)
    1ed8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    1edc:	e0bffe17 	ldw	r2,-8(fp)
    1ee0:	10c00417 	ldw	r3,16(r2)
    1ee4:	e0bffe17 	ldw	r2,-8(fp)
    1ee8:	10800517 	ldw	r2,20(r2)
    1eec:	18803626 	beq	r3,r2,1fc8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    1ef0:	e0bffe17 	ldw	r2,-8(fp)
    1ef4:	10800617 	ldw	r2,24(r2)
    1ef8:	1080008c 	andi	r2,r2,2
    1efc:	1005003a 	cmpeq	r2,r2,zero
    1f00:	1000041e 	bne	r2,zero,1f14 <altera_avalon_uart_txirq+0x4c>
    1f04:	e0bfff17 	ldw	r2,-4(fp)
    1f08:	1082000c 	andi	r2,r2,2048
    1f0c:	1005003a 	cmpeq	r2,r2,zero
    1f10:	10001e1e 	bne	r2,zero,1f8c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    1f14:	e0bffe17 	ldw	r2,-8(fp)
    1f18:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    1f1c:	e0bffe17 	ldw	r2,-8(fp)
    1f20:	10800017 	ldw	r2,0(r2)
    1f24:	11000104 	addi	r4,r2,4
    1f28:	e0bffe17 	ldw	r2,-8(fp)
    1f2c:	10c00417 	ldw	r3,16(r2)
    1f30:	e0bffe17 	ldw	r2,-8(fp)
    1f34:	1885883a 	add	r2,r3,r2
    1f38:	10801704 	addi	r2,r2,92
    1f3c:	10800003 	ldbu	r2,0(r2)
    1f40:	10c03fcc 	andi	r3,r2,255
    1f44:	2005883a 	mov	r2,r4
    1f48:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    1f4c:	e0bffe17 	ldw	r2,-8(fp)
    1f50:	10800417 	ldw	r2,16(r2)
    1f54:	10c00044 	addi	r3,r2,1
    1f58:	e0bffe17 	ldw	r2,-8(fp)
    1f5c:	10c00415 	stw	r3,16(r2)
    1f60:	e0bffe17 	ldw	r2,-8(fp)
    1f64:	10800417 	ldw	r2,16(r2)
    1f68:	10c00fcc 	andi	r3,r2,63
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    1f74:	e0bffe17 	ldw	r2,-8(fp)
    1f78:	10800117 	ldw	r2,4(r2)
    1f7c:	10c01014 	ori	r3,r2,64
    1f80:	e0bffe17 	ldw	r2,-8(fp)
    1f84:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    1f88:	00000f06 	br	1fc8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    1f8c:	e0bffe17 	ldw	r2,-8(fp)
    1f90:	10800017 	ldw	r2,0(r2)
    1f94:	10800204 	addi	r2,r2,8
    1f98:	10800037 	ldwio	r2,0(r2)
    1f9c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    1fa0:	e0bfff17 	ldw	r2,-4(fp)
    1fa4:	1082000c 	andi	r2,r2,2048
    1fa8:	1004c03a 	cmpne	r2,r2,zero
    1fac:	1000061e 	bne	r2,zero,1fc8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    1fb0:	e0bffe17 	ldw	r2,-8(fp)
    1fb4:	10c00117 	ldw	r3,4(r2)
    1fb8:	00bfefc4 	movi	r2,-65
    1fbc:	1886703a 	and	r3,r3,r2
    1fc0:	e0bffe17 	ldw	r2,-8(fp)
    1fc4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    1fc8:	e0bffe17 	ldw	r2,-8(fp)
    1fcc:	10c00417 	ldw	r3,16(r2)
    1fd0:	e0bffe17 	ldw	r2,-8(fp)
    1fd4:	10800517 	ldw	r2,20(r2)
    1fd8:	1880061e 	bne	r3,r2,1ff4 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    1fdc:	e0bffe17 	ldw	r2,-8(fp)
    1fe0:	10c00117 	ldw	r3,4(r2)
    1fe4:	00beefc4 	movi	r2,-1089
    1fe8:	1886703a 	and	r3,r3,r2
    1fec:	e0bffe17 	ldw	r2,-8(fp)
    1ff0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1ff4:	e0bffe17 	ldw	r2,-8(fp)
    1ff8:	10800017 	ldw	r2,0(r2)
    1ffc:	11000304 	addi	r4,r2,12
    2000:	e0bffe17 	ldw	r2,-8(fp)
    2004:	10800117 	ldw	r2,4(r2)
    2008:	1007883a 	mov	r3,r2
    200c:	2005883a 	mov	r2,r4
    2010:	10c00035 	stwio	r3,0(r2)
}
    2014:	e037883a 	mov	sp,fp
    2018:	df000017 	ldw	fp,0(sp)
    201c:	dec00104 	addi	sp,sp,4
    2020:	f800283a 	ret

00002024 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    2024:	defffc04 	addi	sp,sp,-16
    2028:	df000315 	stw	fp,12(sp)
    202c:	df000304 	addi	fp,sp,12
    2030:	e13ffd15 	stw	r4,-12(fp)
    2034:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    2038:	00000706 	br	2058 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    203c:	e0bffe17 	ldw	r2,-8(fp)
    2040:	1090000c 	andi	r2,r2,16384
    2044:	1005003a 	cmpeq	r2,r2,zero
    2048:	1000031e 	bne	r2,zero,2058 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    204c:	00bffd44 	movi	r2,-11
    2050:	e0bfff15 	stw	r2,-4(fp)
    2054:	00000606 	br	2070 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    2058:	e0bffd17 	ldw	r2,-12(fp)
    205c:	10c00417 	ldw	r3,16(r2)
    2060:	e0bffd17 	ldw	r2,-12(fp)
    2064:	10800517 	ldw	r2,20(r2)
    2068:	18bff41e 	bne	r3,r2,203c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    206c:	e03fff15 	stw	zero,-4(fp)
    2070:	e0bfff17 	ldw	r2,-4(fp)
}
    2074:	e037883a 	mov	sp,fp
    2078:	df000017 	ldw	fp,0(sp)
    207c:	dec00104 	addi	sp,sp,4
    2080:	f800283a 	ret

00002084 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    2084:	defff004 	addi	sp,sp,-64
    2088:	dfc00f15 	stw	ra,60(sp)
    208c:	df000e15 	stw	fp,56(sp)
    2090:	df000e04 	addi	fp,sp,56
    2094:	e13ffb15 	stw	r4,-20(fp)
    2098:	e17ffc15 	stw	r5,-16(fp)
    209c:	e1bffd15 	stw	r6,-12(fp)
    20a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    20a4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    20a8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    20ac:	e0bffe17 	ldw	r2,-8(fp)
    20b0:	1090000c 	andi	r2,r2,16384
    20b4:	1005003a 	cmpeq	r2,r2,zero
    20b8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    20bc:	e0bffb17 	ldw	r2,-20(fp)
    20c0:	10800217 	ldw	r2,8(r2)
    20c4:	10800044 	addi	r2,r2,1
    20c8:	10800fcc 	andi	r2,r2,63
    20cc:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    20d0:	00001906 	br	2138 <altera_avalon_uart_read+0xb4>
    {
      count++;
    20d4:	e0bff617 	ldw	r2,-40(fp)
    20d8:	10800044 	addi	r2,r2,1
    20dc:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    20e0:	e0bffb17 	ldw	r2,-20(fp)
    20e4:	10c00217 	ldw	r3,8(r2)
    20e8:	e0bffb17 	ldw	r2,-20(fp)
    20ec:	1885883a 	add	r2,r3,r2
    20f0:	10800704 	addi	r2,r2,28
    20f4:	10800003 	ldbu	r2,0(r2)
    20f8:	1007883a 	mov	r3,r2
    20fc:	e0bffc17 	ldw	r2,-16(fp)
    2100:	10c00005 	stb	r3,0(r2)
    2104:	e0bffc17 	ldw	r2,-16(fp)
    2108:	10800044 	addi	r2,r2,1
    210c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    2110:	e0bffb17 	ldw	r2,-20(fp)
    2114:	10800217 	ldw	r2,8(r2)
    2118:	10c00044 	addi	r3,r2,1
    211c:	e0bffb17 	ldw	r2,-20(fp)
    2120:	10c00215 	stw	r3,8(r2)
    2124:	e0bffb17 	ldw	r2,-20(fp)
    2128:	10800217 	ldw	r2,8(r2)
    212c:	10c00fcc 	andi	r3,r2,63
    2130:	e0bffb17 	ldw	r2,-20(fp)
    2134:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    2138:	e0fff617 	ldw	r3,-40(fp)
    213c:	e0bffd17 	ldw	r2,-12(fp)
    2140:	1880050e 	bge	r3,r2,2158 <altera_avalon_uart_read+0xd4>
    2144:	e0bffb17 	ldw	r2,-20(fp)
    2148:	10c00217 	ldw	r3,8(r2)
    214c:	e0bffb17 	ldw	r2,-20(fp)
    2150:	10800317 	ldw	r2,12(r2)
    2154:	18bfdf1e 	bne	r3,r2,20d4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    2158:	e0bff617 	ldw	r2,-40(fp)
    215c:	1004c03a 	cmpne	r2,r2,zero
    2160:	1000271e 	bne	r2,zero,2200 <altera_avalon_uart_read+0x17c>
    2164:	e0bffb17 	ldw	r2,-20(fp)
    2168:	10c00217 	ldw	r3,8(r2)
    216c:	e0bffb17 	ldw	r2,-20(fp)
    2170:	10800317 	ldw	r2,12(r2)
    2174:	1880221e 	bne	r3,r2,2200 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    2178:	e0bff917 	ldw	r2,-28(fp)
    217c:	1004c03a 	cmpne	r2,r2,zero
    2180:	1000061e 	bne	r2,zero,219c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    2184:	00022b40 	call	22b4 <alt_get_errno>
    2188:	00c002c4 	movi	r3,11
    218c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    2190:	00800044 	movi	r2,1
    2194:	e0bff705 	stb	r2,-36(fp)
        break;
    2198:	00001f06 	br	2218 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    219c:	0005303a 	rdctl	r2,status
    21a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    21a4:	e0fff517 	ldw	r3,-44(fp)
    21a8:	00bfff84 	movi	r2,-2
    21ac:	1884703a 	and	r2,r3,r2
    21b0:	1001703a 	wrctl	status,r2
  
  return context;
    21b4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    21b8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    21bc:	e0bffb17 	ldw	r2,-20(fp)
    21c0:	10800117 	ldw	r2,4(r2)
    21c4:	10c02014 	ori	r3,r2,128
    21c8:	e0bffb17 	ldw	r2,-20(fp)
    21cc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    21d0:	e0bffb17 	ldw	r2,-20(fp)
    21d4:	10800017 	ldw	r2,0(r2)
    21d8:	11000304 	addi	r4,r2,12
    21dc:	e0bffb17 	ldw	r2,-20(fp)
    21e0:	10800117 	ldw	r2,4(r2)
    21e4:	1007883a 	mov	r3,r2
    21e8:	2005883a 	mov	r2,r4
    21ec:	10c00035 	stwio	r3,0(r2)
    21f0:	e0bffa17 	ldw	r2,-24(fp)
    21f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    21f8:	e0bff417 	ldw	r2,-48(fp)
    21fc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    2200:	e0bff617 	ldw	r2,-40(fp)
    2204:	1004c03a 	cmpne	r2,r2,zero
    2208:	1000031e 	bne	r2,zero,2218 <altera_avalon_uart_read+0x194>
    220c:	e0bffd17 	ldw	r2,-12(fp)
    2210:	1004c03a 	cmpne	r2,r2,zero
    2214:	103fc81e 	bne	r2,zero,2138 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2218:	0005303a 	rdctl	r2,status
    221c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2220:	e0fff317 	ldw	r3,-52(fp)
    2224:	00bfff84 	movi	r2,-2
    2228:	1884703a 	and	r2,r3,r2
    222c:	1001703a 	wrctl	status,r2
  
  return context;
    2230:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    2234:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    2238:	e0bffb17 	ldw	r2,-20(fp)
    223c:	10800117 	ldw	r2,4(r2)
    2240:	10c02014 	ori	r3,r2,128
    2244:	e0bffb17 	ldw	r2,-20(fp)
    2248:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    224c:	e0bffb17 	ldw	r2,-20(fp)
    2250:	10800017 	ldw	r2,0(r2)
    2254:	11000304 	addi	r4,r2,12
    2258:	e0bffb17 	ldw	r2,-20(fp)
    225c:	10800117 	ldw	r2,4(r2)
    2260:	1007883a 	mov	r3,r2
    2264:	2005883a 	mov	r2,r4
    2268:	10c00035 	stwio	r3,0(r2)
    226c:	e0bffa17 	ldw	r2,-24(fp)
    2270:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2274:	e0bff217 	ldw	r2,-56(fp)
    2278:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    227c:	e0bff703 	ldbu	r2,-36(fp)
    2280:	1005003a 	cmpeq	r2,r2,zero
    2284:	1000031e 	bne	r2,zero,2294 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    2288:	00bffd04 	movi	r2,-12
    228c:	e0bfff15 	stw	r2,-4(fp)
    2290:	00000206 	br	229c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    2294:	e0bff617 	ldw	r2,-40(fp)
    2298:	e0bfff15 	stw	r2,-4(fp)
    229c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    22a0:	e037883a 	mov	sp,fp
    22a4:	dfc00117 	ldw	ra,4(sp)
    22a8:	df000017 	ldw	fp,0(sp)
    22ac:	dec00204 	addi	sp,sp,8
    22b0:	f800283a 	ret

000022b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    22b4:	defffd04 	addi	sp,sp,-12
    22b8:	dfc00215 	stw	ra,8(sp)
    22bc:	df000115 	stw	fp,4(sp)
    22c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    22c4:	00800034 	movhi	r2,0
    22c8:	10981a04 	addi	r2,r2,24680
    22cc:	10800017 	ldw	r2,0(r2)
    22d0:	1005003a 	cmpeq	r2,r2,zero
    22d4:	1000061e 	bne	r2,zero,22f0 <alt_get_errno+0x3c>
    22d8:	00800034 	movhi	r2,0
    22dc:	10981a04 	addi	r2,r2,24680
    22e0:	10800017 	ldw	r2,0(r2)
    22e4:	103ee83a 	callr	r2
    22e8:	e0bfff15 	stw	r2,-4(fp)
    22ec:	00000306 	br	22fc <alt_get_errno+0x48>
    22f0:	00800034 	movhi	r2,0
    22f4:	10982804 	addi	r2,r2,24736
    22f8:	e0bfff15 	stw	r2,-4(fp)
    22fc:	e0bfff17 	ldw	r2,-4(fp)
}
    2300:	e037883a 	mov	sp,fp
    2304:	dfc00117 	ldw	ra,4(sp)
    2308:	df000017 	ldw	fp,0(sp)
    230c:	dec00204 	addi	sp,sp,8
    2310:	f800283a 	ret

00002314 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    2314:	defff204 	addi	sp,sp,-56
    2318:	dfc00d15 	stw	ra,52(sp)
    231c:	df000c15 	stw	fp,48(sp)
    2320:	df000c04 	addi	fp,sp,48
    2324:	e13ffc15 	stw	r4,-16(fp)
    2328:	e17ffd15 	stw	r5,-12(fp)
    232c:	e1bffe15 	stw	r6,-8(fp)
    2330:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    2334:	e0bffe17 	ldw	r2,-8(fp)
    2338:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    233c:	e0bfff17 	ldw	r2,-4(fp)
    2340:	1090000c 	andi	r2,r2,16384
    2344:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    2348:	00004006 	br	244c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    234c:	e0bffc17 	ldw	r2,-16(fp)
    2350:	10800517 	ldw	r2,20(r2)
    2354:	10800044 	addi	r2,r2,1
    2358:	10800fcc 	andi	r2,r2,63
    235c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    2360:	e0bffc17 	ldw	r2,-16(fp)
    2364:	10c00417 	ldw	r3,16(r2)
    2368:	e0bff917 	ldw	r2,-28(fp)
    236c:	1880251e 	bne	r3,r2,2404 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    2370:	e0bffa17 	ldw	r2,-24(fp)
    2374:	1005003a 	cmpeq	r2,r2,zero
    2378:	1000051e 	bne	r2,zero,2390 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    237c:	00024dc0 	call	24dc <alt_get_errno>
    2380:	1007883a 	mov	r3,r2
    2384:	008002c4 	movi	r2,11
    2388:	18800015 	stw	r2,0(r3)
        break;
    238c:	00003206 	br	2458 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2390:	0005303a 	rdctl	r2,status
    2394:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2398:	e0fff717 	ldw	r3,-36(fp)
    239c:	00bfff84 	movi	r2,-2
    23a0:	1884703a 	and	r2,r3,r2
    23a4:	1001703a 	wrctl	status,r2
  
  return context;
    23a8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    23ac:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    23b0:	e0bffc17 	ldw	r2,-16(fp)
    23b4:	10800117 	ldw	r2,4(r2)
    23b8:	10c11014 	ori	r3,r2,1088
    23bc:	e0bffc17 	ldw	r2,-16(fp)
    23c0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    23c4:	e0bffc17 	ldw	r2,-16(fp)
    23c8:	10800017 	ldw	r2,0(r2)
    23cc:	11000304 	addi	r4,r2,12
    23d0:	e0bffc17 	ldw	r2,-16(fp)
    23d4:	10800117 	ldw	r2,4(r2)
    23d8:	1007883a 	mov	r3,r2
    23dc:	2005883a 	mov	r2,r4
    23e0:	10c00035 	stwio	r3,0(r2)
    23e4:	e0bffb17 	ldw	r2,-20(fp)
    23e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    23ec:	e0bff617 	ldw	r2,-40(fp)
    23f0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    23f4:	e0bffc17 	ldw	r2,-16(fp)
    23f8:	10c00417 	ldw	r3,16(r2)
    23fc:	e0bff917 	ldw	r2,-28(fp)
    2400:	18bffc26 	beq	r3,r2,23f4 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    2404:	e0bff817 	ldw	r2,-32(fp)
    2408:	10bfffc4 	addi	r2,r2,-1
    240c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    2410:	e0bffc17 	ldw	r2,-16(fp)
    2414:	10c00517 	ldw	r3,20(r2)
    2418:	e0bffd17 	ldw	r2,-12(fp)
    241c:	10800003 	ldbu	r2,0(r2)
    2420:	1009883a 	mov	r4,r2
    2424:	e0bffc17 	ldw	r2,-16(fp)
    2428:	1885883a 	add	r2,r3,r2
    242c:	10801704 	addi	r2,r2,92
    2430:	11000005 	stb	r4,0(r2)
    2434:	e0bffd17 	ldw	r2,-12(fp)
    2438:	10800044 	addi	r2,r2,1
    243c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    2440:	e0fffc17 	ldw	r3,-16(fp)
    2444:	e0bff917 	ldw	r2,-28(fp)
    2448:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    244c:	e0bff817 	ldw	r2,-32(fp)
    2450:	1004c03a 	cmpne	r2,r2,zero
    2454:	103fbd1e 	bne	r2,zero,234c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2458:	0005303a 	rdctl	r2,status
    245c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2460:	e0fff517 	ldw	r3,-44(fp)
    2464:	00bfff84 	movi	r2,-2
    2468:	1884703a 	and	r2,r3,r2
    246c:	1001703a 	wrctl	status,r2
  
  return context;
    2470:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    2474:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    2478:	e0bffc17 	ldw	r2,-16(fp)
    247c:	10800117 	ldw	r2,4(r2)
    2480:	10c11014 	ori	r3,r2,1088
    2484:	e0bffc17 	ldw	r2,-16(fp)
    2488:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    248c:	e0bffc17 	ldw	r2,-16(fp)
    2490:	10800017 	ldw	r2,0(r2)
    2494:	11000304 	addi	r4,r2,12
    2498:	e0bffc17 	ldw	r2,-16(fp)
    249c:	10800117 	ldw	r2,4(r2)
    24a0:	1007883a 	mov	r3,r2
    24a4:	2005883a 	mov	r2,r4
    24a8:	10c00035 	stwio	r3,0(r2)
    24ac:	e0bffb17 	ldw	r2,-20(fp)
    24b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    24b4:	e0bff417 	ldw	r2,-48(fp)
    24b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    24bc:	e0fffe17 	ldw	r3,-8(fp)
    24c0:	e0bff817 	ldw	r2,-32(fp)
    24c4:	1885c83a 	sub	r2,r3,r2
}
    24c8:	e037883a 	mov	sp,fp
    24cc:	dfc00117 	ldw	ra,4(sp)
    24d0:	df000017 	ldw	fp,0(sp)
    24d4:	dec00204 	addi	sp,sp,8
    24d8:	f800283a 	ret

000024dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    24dc:	defffd04 	addi	sp,sp,-12
    24e0:	dfc00215 	stw	ra,8(sp)
    24e4:	df000115 	stw	fp,4(sp)
    24e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    24ec:	00800034 	movhi	r2,0
    24f0:	10981a04 	addi	r2,r2,24680
    24f4:	10800017 	ldw	r2,0(r2)
    24f8:	1005003a 	cmpeq	r2,r2,zero
    24fc:	1000061e 	bne	r2,zero,2518 <alt_get_errno+0x3c>
    2500:	00800034 	movhi	r2,0
    2504:	10981a04 	addi	r2,r2,24680
    2508:	10800017 	ldw	r2,0(r2)
    250c:	103ee83a 	callr	r2
    2510:	e0bfff15 	stw	r2,-4(fp)
    2514:	00000306 	br	2524 <alt_get_errno+0x48>
    2518:	00800034 	movhi	r2,0
    251c:	10982804 	addi	r2,r2,24736
    2520:	e0bfff15 	stw	r2,-4(fp)
    2524:	e0bfff17 	ldw	r2,-4(fp)
}
    2528:	e037883a 	mov	sp,fp
    252c:	dfc00117 	ldw	ra,4(sp)
    2530:	df000017 	ldw	fp,0(sp)
    2534:	dec00204 	addi	sp,sp,8
    2538:	f800283a 	ret

0000253c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    253c:	defff904 	addi	sp,sp,-28
    2540:	dfc00615 	stw	ra,24(sp)
    2544:	df000515 	stw	fp,20(sp)
    2548:	df000504 	addi	fp,sp,20
    254c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    2550:	00800144 	movi	r2,5
    2554:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    2558:	00800044 	movi	r2,1
    255c:	d8800015 	stw	r2,0(sp)
    2560:	e0bffe44 	addi	r2,fp,-7
    2564:	d8800115 	stw	r2,4(sp)
    2568:	d8000215 	stw	zero,8(sp)
    256c:	e13fff17 	ldw	r4,-4(fp)
    2570:	000b883a 	mov	r5,zero
    2574:	01800044 	movi	r6,1
    2578:	e1fffe04 	addi	r7,fp,-8
    257c:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    2580:	e0bffe43 	ldbu	r2,-7(fp)
    2584:	10803fcc 	andi	r2,r2,255
}
    2588:	e037883a 	mov	sp,fp
    258c:	dfc00117 	ldw	ra,4(sp)
    2590:	df000017 	ldw	fp,0(sp)
    2594:	dec00204 	addi	sp,sp,8
    2598:	f800283a 	ret

0000259c <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    259c:	defff604 	addi	sp,sp,-40
    25a0:	dfc00915 	stw	ra,36(sp)
    25a4:	df000815 	stw	fp,32(sp)
    25a8:	df000804 	addi	fp,sp,32
    25ac:	e13ffd15 	stw	r4,-12(fp)
    25b0:	e17ffe15 	stw	r5,-8(fp)
    25b4:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    25b8:	e0bfff17 	ldw	r2,-4(fp)
    25bc:	1005003a 	cmpeq	r2,r2,zero
    25c0:	1000121e 	bne	r2,zero,260c <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    25c4:	00bff604 	movi	r2,-40
    25c8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    25cc:	e0bffe17 	ldw	r2,-8(fp)
    25d0:	1004d63a 	srli	r2,r2,24
    25d4:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    25d8:	e0bffe17 	ldw	r2,-8(fp)
    25dc:	1004d43a 	srli	r2,r2,16
    25e0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    25e4:	e0bffe17 	ldw	r2,-8(fp)
    25e8:	1004d23a 	srli	r2,r2,8
    25ec:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    25f0:	e0bffe17 	ldw	r2,-8(fp)
    25f4:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    25f8:	00800144 	movi	r2,5
    25fc:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    2600:	e13ffd17 	ldw	r4,-12(fp)
    2604:	0002b600 	call	2b60 <epcs_enter_4_bytes_mode>
    2608:	00000c06 	br	263c <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
    260c:	00bff604 	movi	r2,-40
    2610:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    2614:	e0bffe17 	ldw	r2,-8(fp)
    2618:	1004d43a 	srli	r2,r2,16
    261c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    2620:	e0bffe17 	ldw	r2,-8(fp)
    2624:	1004d23a 	srli	r2,r2,8
    2628:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    262c:	e0bffe17 	ldw	r2,-8(fp)
    2630:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    2634:	00800104 	movi	r2,4
    2638:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    263c:	e13ffd17 	ldw	r4,-12(fp)
    2640:	00028500 	call	2850 <epcs_write_enable>

  alt_avalon_spi_command(
    2644:	e1bffb03 	ldbu	r6,-20(fp)
    2648:	e1fffb44 	addi	r7,fp,-19
    264c:	d8000015 	stw	zero,0(sp)
    2650:	d8000115 	stw	zero,4(sp)
    2654:	d8000215 	stw	zero,8(sp)
    2658:	e13ffd17 	ldw	r4,-12(fp)
    265c:	000b883a 	mov	r5,zero
    2660:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    2664:	e13ffd17 	ldw	r4,-12(fp)
    2668:	00026940 	call	2694 <epcs_await_wip_released>

  if(four_bytes_mode)
    266c:	e0bfff17 	ldw	r2,-4(fp)
    2670:	1005003a 	cmpeq	r2,r2,zero
    2674:	1000021e 	bne	r2,zero,2680 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    2678:	e13ffd17 	ldw	r4,-12(fp)
    267c:	0002bb80 	call	2bb8 <epcs_exit_4_bytes_mode>
  }
}
    2680:	e037883a 	mov	sp,fp
    2684:	dfc00117 	ldw	ra,4(sp)
    2688:	df000017 	ldw	fp,0(sp)
    268c:	dec00204 	addi	sp,sp,8
    2690:	f800283a 	ret

00002694 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    2694:	defffd04 	addi	sp,sp,-12
    2698:	dfc00215 	stw	ra,8(sp)
    269c:	df000115 	stw	fp,4(sp)
    26a0:	df000104 	addi	fp,sp,4
    26a4:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    26a8:	e13fff17 	ldw	r4,-4(fp)
    26ac:	00026cc0 	call	26cc <epcs_test_wip>
    26b0:	1004c03a 	cmpne	r2,r2,zero
    26b4:	103ffc1e 	bne	r2,zero,26a8 <epcs_await_wip_released+0x14>
  {
  }
}
    26b8:	e037883a 	mov	sp,fp
    26bc:	dfc00117 	ldw	ra,4(sp)
    26c0:	df000017 	ldw	fp,0(sp)
    26c4:	dec00204 	addi	sp,sp,8
    26c8:	f800283a 	ret

000026cc <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    26cc:	defffd04 	addi	sp,sp,-12
    26d0:	dfc00215 	stw	ra,8(sp)
    26d4:	df000115 	stw	fp,4(sp)
    26d8:	df000104 	addi	fp,sp,4
    26dc:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    26e0:	e13fff17 	ldw	r4,-4(fp)
    26e4:	000253c0 	call	253c <epcs_read_status_register>
    26e8:	10803fcc 	andi	r2,r2,255
    26ec:	1080004c 	andi	r2,r2,1
}
    26f0:	e037883a 	mov	sp,fp
    26f4:	dfc00117 	ldw	ra,4(sp)
    26f8:	df000017 	ldw	fp,0(sp)
    26fc:	dec00204 	addi	sp,sp,8
    2700:	f800283a 	ret

00002704 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    2704:	defff404 	addi	sp,sp,-48
    2708:	dfc00b15 	stw	ra,44(sp)
    270c:	df000a15 	stw	fp,40(sp)
    2710:	df000a04 	addi	fp,sp,40
    2714:	e13ffc15 	stw	r4,-16(fp)
    2718:	e17ffd15 	stw	r5,-12(fp)
    271c:	e1bffe15 	stw	r6,-8(fp)
    2720:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    2724:	008000c4 	movi	r2,3
    2728:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    272c:	e0800217 	ldw	r2,8(fp)
    2730:	1005003a 	cmpeq	r2,r2,zero
    2734:	10001c1e 	bne	r2,zero,27a8 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    2738:	e0bffd17 	ldw	r2,-12(fp)
    273c:	1005d63a 	srai	r2,r2,24
    2740:	1007883a 	mov	r3,r2
    2744:	00bfffc4 	movi	r2,-1
    2748:	1884703a 	and	r2,r3,r2
    274c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    2750:	e0bffd17 	ldw	r2,-12(fp)
    2754:	1005d43a 	srai	r2,r2,16
    2758:	1007883a 	mov	r3,r2
    275c:	00bfffc4 	movi	r2,-1
    2760:	1884703a 	and	r2,r3,r2
    2764:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    2768:	e0bffd17 	ldw	r2,-12(fp)
    276c:	1005d23a 	srai	r2,r2,8
    2770:	1007883a 	mov	r3,r2
    2774:	00bfffc4 	movi	r2,-1
    2778:	1884703a 	and	r2,r3,r2
    277c:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    2780:	e0bffd17 	ldw	r2,-12(fp)
    2784:	1007883a 	mov	r3,r2
    2788:	00bfffc4 	movi	r2,-1
    278c:	1884703a 	and	r2,r3,r2
    2790:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    2794:	00800144 	movi	r2,5
    2798:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    279c:	e13ffc17 	ldw	r4,-16(fp)
    27a0:	0002b600 	call	2b60 <epcs_enter_4_bytes_mode>
    27a4:	00001306 	br	27f4 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	1005d43a 	srai	r2,r2,16
    27b0:	1007883a 	mov	r3,r2
    27b4:	00bfffc4 	movi	r2,-1
    27b8:	1884703a 	and	r2,r3,r2
    27bc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    27c0:	e0bffd17 	ldw	r2,-12(fp)
    27c4:	1005d23a 	srai	r2,r2,8
    27c8:	1007883a 	mov	r3,r2
    27cc:	00bfffc4 	movi	r2,-1
    27d0:	1884703a 	and	r2,r3,r2
    27d4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	1007883a 	mov	r3,r2
    27e0:	00bfffc4 	movi	r2,-1
    27e4:	1884703a 	and	r2,r3,r2
    27e8:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    27ec:	00800104 	movi	r2,4
    27f0:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    27f4:	e13ffc17 	ldw	r4,-16(fp)
    27f8:	00026940 	call	2694 <epcs_await_wip_released>

  alt_avalon_spi_command(
    27fc:	e0bfff17 	ldw	r2,-4(fp)
    2800:	e1fffa04 	addi	r7,fp,-24
    2804:	d8800015 	stw	r2,0(sp)
    2808:	e0bffe17 	ldw	r2,-8(fp)
    280c:	d8800115 	stw	r2,4(sp)
    2810:	d8000215 	stw	zero,8(sp)
    2814:	e13ffc17 	ldw	r4,-16(fp)
    2818:	000b883a 	mov	r5,zero
    281c:	e1bff917 	ldw	r6,-28(fp)
    2820:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    2824:	e0800217 	ldw	r2,8(fp)
    2828:	1005003a 	cmpeq	r2,r2,zero
    282c:	1000021e 	bne	r2,zero,2838 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
    2830:	e13ffc17 	ldw	r4,-16(fp)
    2834:	0002bb80 	call	2bb8 <epcs_exit_4_bytes_mode>
  }

  return length;
    2838:	e0bfff17 	ldw	r2,-4(fp)
}
    283c:	e037883a 	mov	sp,fp
    2840:	dfc00117 	ldw	ra,4(sp)
    2844:	df000017 	ldw	fp,0(sp)
    2848:	dec00204 	addi	sp,sp,8
    284c:	f800283a 	ret

00002850 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    2850:	defff904 	addi	sp,sp,-28
    2854:	dfc00615 	stw	ra,24(sp)
    2858:	df000515 	stw	fp,20(sp)
    285c:	df000504 	addi	fp,sp,20
    2860:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    2864:	00800184 	movi	r2,6
    2868:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    286c:	d8000015 	stw	zero,0(sp)
    2870:	d8000115 	stw	zero,4(sp)
    2874:	d8000215 	stw	zero,8(sp)
    2878:	e13fff17 	ldw	r4,-4(fp)
    287c:	000b883a 	mov	r5,zero
    2880:	01800044 	movi	r6,1
    2884:	e1fffe04 	addi	r7,fp,-8
    2888:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    288c:	e037883a 	mov	sp,fp
    2890:	dfc00117 	ldw	ra,4(sp)
    2894:	df000017 	ldw	fp,0(sp)
    2898:	dec00204 	addi	sp,sp,8
    289c:	f800283a 	ret

000028a0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    28a0:	defff804 	addi	sp,sp,-32
    28a4:	dfc00715 	stw	ra,28(sp)
    28a8:	df000615 	stw	fp,24(sp)
    28ac:	df000604 	addi	fp,sp,24
    28b0:	e13ffe15 	stw	r4,-8(fp)
    28b4:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    28b8:	00800044 	movi	r2,1
    28bc:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    28c0:	e0bfff03 	ldbu	r2,-4(fp)
    28c4:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    28c8:	d8000015 	stw	zero,0(sp)
    28cc:	d8000115 	stw	zero,4(sp)
    28d0:	d8000215 	stw	zero,8(sp)
    28d4:	e13ffe17 	ldw	r4,-8(fp)
    28d8:	000b883a 	mov	r5,zero
    28dc:	01800084 	movi	r6,2
    28e0:	e1fffd04 	addi	r7,fp,-12
    28e4:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    28e8:	e13ffe17 	ldw	r4,-8(fp)
    28ec:	00026940 	call	2694 <epcs_await_wip_released>
}
    28f0:	e037883a 	mov	sp,fp
    28f4:	dfc00117 	ldw	ra,4(sp)
    28f8:	df000017 	ldw	fp,0(sp)
    28fc:	dec00204 	addi	sp,sp,8
    2900:	f800283a 	ret

00002904 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    2904:	defff404 	addi	sp,sp,-48
    2908:	dfc00b15 	stw	ra,44(sp)
    290c:	df000a15 	stw	fp,40(sp)
    2910:	df000a04 	addi	fp,sp,40
    2914:	e13ffc15 	stw	r4,-16(fp)
    2918:	e17ffd15 	stw	r5,-12(fp)
    291c:	e1bffe15 	stw	r6,-8(fp)
    2920:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    2924:	00800084 	movi	r2,2
    2928:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    292c:	e0800217 	ldw	r2,8(fp)
    2930:	1005003a 	cmpeq	r2,r2,zero
    2934:	10001c1e 	bne	r2,zero,29a8 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
    2938:	e0bffd17 	ldw	r2,-12(fp)
    293c:	1005d63a 	srai	r2,r2,24
    2940:	1007883a 	mov	r3,r2
    2944:	00bfffc4 	movi	r2,-1
    2948:	1884703a 	and	r2,r3,r2
    294c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    2950:	e0bffd17 	ldw	r2,-12(fp)
    2954:	1005d43a 	srai	r2,r2,16
    2958:	1007883a 	mov	r3,r2
    295c:	00bfffc4 	movi	r2,-1
    2960:	1884703a 	and	r2,r3,r2
    2964:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    2968:	e0bffd17 	ldw	r2,-12(fp)
    296c:	1005d23a 	srai	r2,r2,8
    2970:	1007883a 	mov	r3,r2
    2974:	00bfffc4 	movi	r2,-1
    2978:	1884703a 	and	r2,r3,r2
    297c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    2980:	e0bffd17 	ldw	r2,-12(fp)
    2984:	1007883a 	mov	r3,r2
    2988:	00bfffc4 	movi	r2,-1
    298c:	1884703a 	and	r2,r3,r2
    2990:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    2994:	00800144 	movi	r2,5
    2998:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    299c:	e13ffc17 	ldw	r4,-16(fp)
    29a0:	0002b600 	call	2b60 <epcs_enter_4_bytes_mode>
    29a4:	00001306 	br	29f4 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    29a8:	e0bffd17 	ldw	r2,-12(fp)
    29ac:	1005d43a 	srai	r2,r2,16
    29b0:	1007883a 	mov	r3,r2
    29b4:	00bfffc4 	movi	r2,-1
    29b8:	1884703a 	and	r2,r3,r2
    29bc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    29c0:	e0bffd17 	ldw	r2,-12(fp)
    29c4:	1005d23a 	srai	r2,r2,8
    29c8:	1007883a 	mov	r3,r2
    29cc:	00bfffc4 	movi	r2,-1
    29d0:	1884703a 	and	r2,r3,r2
    29d4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    29d8:	e0bffd17 	ldw	r2,-12(fp)
    29dc:	1007883a 	mov	r3,r2
    29e0:	00bfffc4 	movi	r2,-1
    29e4:	1884703a 	and	r2,r3,r2
    29e8:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    29ec:	00800104 	movi	r2,4
    29f0:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    29f4:	e13ffc17 	ldw	r4,-16(fp)
    29f8:	00028500 	call	2850 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    29fc:	e1fffa04 	addi	r7,fp,-24
    2a00:	d8000015 	stw	zero,0(sp)
    2a04:	d8000115 	stw	zero,4(sp)
    2a08:	00800044 	movi	r2,1
    2a0c:	d8800215 	stw	r2,8(sp)
    2a10:	e13ffc17 	ldw	r4,-16(fp)
    2a14:	000b883a 	mov	r5,zero
    2a18:	e1bff917 	ldw	r6,-28(fp)
    2a1c:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    2a20:	e1bfff17 	ldw	r6,-4(fp)
    2a24:	d8000015 	stw	zero,0(sp)
    2a28:	d8000115 	stw	zero,4(sp)
    2a2c:	d8000215 	stw	zero,8(sp)
    2a30:	e13ffc17 	ldw	r4,-16(fp)
    2a34:	000b883a 	mov	r5,zero
    2a38:	e1fffe17 	ldw	r7,-8(fp)
    2a3c:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    2a40:	e13ffc17 	ldw	r4,-16(fp)
    2a44:	00026940 	call	2694 <epcs_await_wip_released>

  if(four_bytes_mode)
    2a48:	e0800217 	ldw	r2,8(fp)
    2a4c:	1005003a 	cmpeq	r2,r2,zero
    2a50:	1000021e 	bne	r2,zero,2a5c <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
    2a54:	e13ffc17 	ldw	r4,-16(fp)
    2a58:	0002bb80 	call	2bb8 <epcs_exit_4_bytes_mode>
  }

  return length;
    2a5c:	e0bfff17 	ldw	r2,-4(fp)
}
    2a60:	e037883a 	mov	sp,fp
    2a64:	dfc00117 	ldw	ra,4(sp)
    2a68:	df000017 	ldw	fp,0(sp)
    2a6c:	dec00204 	addi	sp,sp,8
    2a70:	f800283a 	ret

00002a74 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    2a74:	defff804 	addi	sp,sp,-32
    2a78:	dfc00715 	stw	ra,28(sp)
    2a7c:	df000615 	stw	fp,24(sp)
    2a80:	df000604 	addi	fp,sp,24
    2a84:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    2a88:	00bfeac4 	movi	r2,-85
    2a8c:	e0bffd05 	stb	r2,-12(fp)
    2a90:	e03ffd45 	stb	zero,-11(fp)
    2a94:	e03ffd85 	stb	zero,-10(fp)
    2a98:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    2a9c:	00800044 	movi	r2,1
    2aa0:	d8800015 	stw	r2,0(sp)
    2aa4:	e0bffe04 	addi	r2,fp,-8
    2aa8:	d8800115 	stw	r2,4(sp)
    2aac:	d8000215 	stw	zero,8(sp)
    2ab0:	e13fff17 	ldw	r4,-4(fp)
    2ab4:	000b883a 	mov	r5,zero
    2ab8:	01800104 	movi	r6,4
    2abc:	e1fffd04 	addi	r7,fp,-12
    2ac0:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    2ac4:	e0bffe03 	ldbu	r2,-8(fp)
    2ac8:	10803fcc 	andi	r2,r2,255
}
    2acc:	e037883a 	mov	sp,fp
    2ad0:	dfc00117 	ldw	ra,4(sp)
    2ad4:	df000017 	ldw	fp,0(sp)
    2ad8:	dec00204 	addi	sp,sp,8
    2adc:	f800283a 	ret

00002ae0 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    2ae0:	defff904 	addi	sp,sp,-28
    2ae4:	dfc00615 	stw	ra,24(sp)
    2ae8:	df000515 	stw	fp,20(sp)
    2aec:	df000504 	addi	fp,sp,20
    2af0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    2af4:	00bfe7c4 	movi	r2,-97
    2af8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    2afc:	008000c4 	movi	r2,3
    2b00:	d8800015 	stw	r2,0(sp)
    2b04:	e0bffe44 	addi	r2,fp,-7
    2b08:	d8800115 	stw	r2,4(sp)
    2b0c:	d8000215 	stw	zero,8(sp)
    2b10:	e13fff17 	ldw	r4,-4(fp)
    2b14:	000b883a 	mov	r5,zero
    2b18:	01800044 	movi	r6,1
    2b1c:	e1fffe04 	addi	r7,fp,-8
    2b20:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    2b24:	e0bffe43 	ldbu	r2,-7(fp)
    2b28:	10803fcc 	andi	r2,r2,255
    2b2c:	1006943a 	slli	r3,r2,16
    2b30:	e0bffe83 	ldbu	r2,-6(fp)
    2b34:	10803fcc 	andi	r2,r2,255
    2b38:	1004923a 	slli	r2,r2,8
    2b3c:	1886b03a 	or	r3,r3,r2
    2b40:	e0bffec3 	ldbu	r2,-5(fp)
    2b44:	10803fcc 	andi	r2,r2,255
    2b48:	1884b03a 	or	r2,r3,r2
}
    2b4c:	e037883a 	mov	sp,fp
    2b50:	dfc00117 	ldw	ra,4(sp)
    2b54:	df000017 	ldw	fp,0(sp)
    2b58:	dec00204 	addi	sp,sp,8
    2b5c:	f800283a 	ret

00002b60 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    2b60:	defff904 	addi	sp,sp,-28
    2b64:	dfc00615 	stw	ra,24(sp)
    2b68:	df000515 	stw	fp,20(sp)
    2b6c:	df000504 	addi	fp,sp,20
    2b70:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    2b74:	00bfedc4 	movi	r2,-73
    2b78:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    2b7c:	e13fff17 	ldw	r4,-4(fp)
    2b80:	00028500 	call	2850 <epcs_write_enable>

  alt_avalon_spi_command(
    2b84:	d8000015 	stw	zero,0(sp)
    2b88:	d8000115 	stw	zero,4(sp)
    2b8c:	d8000215 	stw	zero,8(sp)
    2b90:	e13fff17 	ldw	r4,-4(fp)
    2b94:	000b883a 	mov	r5,zero
    2b98:	01800044 	movi	r6,1
    2b9c:	e1fffe04 	addi	r7,fp,-8
    2ba0:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    2ba4:	e037883a 	mov	sp,fp
    2ba8:	dfc00117 	ldw	ra,4(sp)
    2bac:	df000017 	ldw	fp,0(sp)
    2bb0:	dec00204 	addi	sp,sp,8
    2bb4:	f800283a 	ret

00002bb8 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    2bb8:	defff904 	addi	sp,sp,-28
    2bbc:	dfc00615 	stw	ra,24(sp)
    2bc0:	df000515 	stw	fp,20(sp)
    2bc4:	df000504 	addi	fp,sp,20
    2bc8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    2bcc:	00bffa44 	movi	r2,-23
    2bd0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    2bd4:	e13fff17 	ldw	r4,-4(fp)
    2bd8:	00028500 	call	2850 <epcs_write_enable>

  alt_avalon_spi_command(
    2bdc:	d8000015 	stw	zero,0(sp)
    2be0:	d8000115 	stw	zero,4(sp)
    2be4:	d8000215 	stw	zero,8(sp)
    2be8:	e13fff17 	ldw	r4,-4(fp)
    2bec:	000b883a 	mov	r5,zero
    2bf0:	01800044 	movi	r6,1
    2bf4:	e1fffe04 	addi	r7,fp,-8
    2bf8:	0003ad80 	call	3ad8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    2bfc:	e037883a 	mov	sp,fp
    2c00:	dfc00117 	ldw	ra,4(sp)
    2c04:	df000017 	ldw	fp,0(sp)
    2c08:	dec00204 	addi	sp,sp,8
    2c0c:	f800283a 	ret

00002c10 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2c10:	defff404 	addi	sp,sp,-48
    2c14:	df000b15 	stw	fp,44(sp)
    2c18:	df000b04 	addi	fp,sp,44
    2c1c:	e13ffb15 	stw	r4,-20(fp)
    2c20:	e17ffc15 	stw	r5,-16(fp)
    2c24:	e1bffd15 	stw	r6,-12(fp)
    2c28:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2c2c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2c30:	00800034 	movhi	r2,0
    2c34:	10982604 	addi	r2,r2,24728
    2c38:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    2c3c:	1005003a 	cmpeq	r2,r2,zero
    2c40:	1000411e 	bne	r2,zero,2d48 <alt_alarm_start+0x138>
  {
    if (alarm)
    2c44:	e0bffb17 	ldw	r2,-20(fp)
    2c48:	1005003a 	cmpeq	r2,r2,zero
    2c4c:	10003b1e 	bne	r2,zero,2d3c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    2c50:	e0fffb17 	ldw	r3,-20(fp)
    2c54:	e0bffd17 	ldw	r2,-12(fp)
    2c58:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    2c5c:	e0fffb17 	ldw	r3,-20(fp)
    2c60:	e0bffe17 	ldw	r2,-8(fp)
    2c64:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c68:	0005303a 	rdctl	r2,status
    2c6c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c70:	e0fff817 	ldw	r3,-32(fp)
    2c74:	00bfff84 	movi	r2,-2
    2c78:	1884703a 	and	r2,r3,r2
    2c7c:	1001703a 	wrctl	status,r2
  
  return context;
    2c80:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    2c84:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2c88:	00800034 	movhi	r2,0
    2c8c:	10982704 	addi	r2,r2,24732
    2c90:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    2c94:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    2c98:	e0fffc17 	ldw	r3,-16(fp)
    2c9c:	e0bff917 	ldw	r2,-28(fp)
    2ca0:	1885883a 	add	r2,r3,r2
    2ca4:	10c00044 	addi	r3,r2,1
    2ca8:	e0bffb17 	ldw	r2,-20(fp)
    2cac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2cb0:	e0bffb17 	ldw	r2,-20(fp)
    2cb4:	10c00217 	ldw	r3,8(r2)
    2cb8:	e0bff917 	ldw	r2,-28(fp)
    2cbc:	1880042e 	bgeu	r3,r2,2cd0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    2cc0:	e0fffb17 	ldw	r3,-20(fp)
    2cc4:	00800044 	movi	r2,1
    2cc8:	18800405 	stb	r2,16(r3)
    2ccc:	00000206 	br	2cd8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    2cd0:	e0bffb17 	ldw	r2,-20(fp)
    2cd4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2cd8:	e0fffb17 	ldw	r3,-20(fp)
    2cdc:	00800034 	movhi	r2,0
    2ce0:	10981e04 	addi	r2,r2,24696
    2ce4:	e0bff615 	stw	r2,-40(fp)
    2ce8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2cec:	e0fff717 	ldw	r3,-36(fp)
    2cf0:	e0bff617 	ldw	r2,-40(fp)
    2cf4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2cf8:	e0bff617 	ldw	r2,-40(fp)
    2cfc:	10c00017 	ldw	r3,0(r2)
    2d00:	e0bff717 	ldw	r2,-36(fp)
    2d04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2d08:	e0bff617 	ldw	r2,-40(fp)
    2d0c:	10c00017 	ldw	r3,0(r2)
    2d10:	e0bff717 	ldw	r2,-36(fp)
    2d14:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2d18:	e0fff617 	ldw	r3,-40(fp)
    2d1c:	e0bff717 	ldw	r2,-36(fp)
    2d20:	18800015 	stw	r2,0(r3)
    2d24:	e0bffa17 	ldw	r2,-24(fp)
    2d28:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d2c:	e0bff517 	ldw	r2,-44(fp)
    2d30:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2d34:	e03fff15 	stw	zero,-4(fp)
    2d38:	00000506 	br	2d50 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    2d3c:	00bffa84 	movi	r2,-22
    2d40:	e0bfff15 	stw	r2,-4(fp)
    2d44:	00000206 	br	2d50 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    2d48:	00bfde84 	movi	r2,-134
    2d4c:	e0bfff15 	stw	r2,-4(fp)
    2d50:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    2d54:	e037883a 	mov	sp,fp
    2d58:	df000017 	ldw	fp,0(sp)
    2d5c:	dec00104 	addi	sp,sp,4
    2d60:	f800283a 	ret

00002d64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2d64:	defff804 	addi	sp,sp,-32
    2d68:	dfc00715 	stw	ra,28(sp)
    2d6c:	df000615 	stw	fp,24(sp)
    2d70:	df000604 	addi	fp,sp,24
    2d74:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2d78:	e0bffc17 	ldw	r2,-16(fp)
    2d7c:	1004803a 	cmplt	r2,r2,zero
    2d80:	1000091e 	bne	r2,zero,2da8 <close+0x44>
    2d84:	e13ffc17 	ldw	r4,-16(fp)
    2d88:	01400304 	movi	r5,12
    2d8c:	00044500 	call	4450 <__mulsi3>
    2d90:	1007883a 	mov	r3,r2
    2d94:	00800034 	movhi	r2,0
    2d98:	1096b504 	addi	r2,r2,23252
    2d9c:	1887883a 	add	r3,r3,r2
    2da0:	e0ffff15 	stw	r3,-4(fp)
    2da4:	00000106 	br	2dac <close+0x48>
    2da8:	e03fff15 	stw	zero,-4(fp)
    2dac:	e0bfff17 	ldw	r2,-4(fp)
    2db0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2db4:	e0bffb17 	ldw	r2,-20(fp)
    2db8:	1005003a 	cmpeq	r2,r2,zero
    2dbc:	10001d1e 	bne	r2,zero,2e34 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2dc0:	e0bffb17 	ldw	r2,-20(fp)
    2dc4:	10800017 	ldw	r2,0(r2)
    2dc8:	10800417 	ldw	r2,16(r2)
    2dcc:	1005003a 	cmpeq	r2,r2,zero
    2dd0:	1000071e 	bne	r2,zero,2df0 <close+0x8c>
    2dd4:	e0bffb17 	ldw	r2,-20(fp)
    2dd8:	10800017 	ldw	r2,0(r2)
    2ddc:	10800417 	ldw	r2,16(r2)
    2de0:	e13ffb17 	ldw	r4,-20(fp)
    2de4:	103ee83a 	callr	r2
    2de8:	e0bffe15 	stw	r2,-8(fp)
    2dec:	00000106 	br	2df4 <close+0x90>
    2df0:	e03ffe15 	stw	zero,-8(fp)
    2df4:	e0bffe17 	ldw	r2,-8(fp)
    2df8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2dfc:	e13ffc17 	ldw	r4,-16(fp)
    2e00:	000389c0 	call	389c <alt_release_fd>
    if (rval < 0)
    2e04:	e0bffa17 	ldw	r2,-24(fp)
    2e08:	1004403a 	cmpge	r2,r2,zero
    2e0c:	1000071e 	bne	r2,zero,2e2c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    2e10:	0002e640 	call	2e64 <alt_get_errno>
    2e14:	e0fffa17 	ldw	r3,-24(fp)
    2e18:	00c7c83a 	sub	r3,zero,r3
    2e1c:	10c00015 	stw	r3,0(r2)
      return -1;
    2e20:	00bfffc4 	movi	r2,-1
    2e24:	e0bffd15 	stw	r2,-12(fp)
    2e28:	00000806 	br	2e4c <close+0xe8>
    }
    return 0;
    2e2c:	e03ffd15 	stw	zero,-12(fp)
    2e30:	00000606 	br	2e4c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2e34:	0002e640 	call	2e64 <alt_get_errno>
    2e38:	1007883a 	mov	r3,r2
    2e3c:	00801444 	movi	r2,81
    2e40:	18800015 	stw	r2,0(r3)
    return -1;
    2e44:	00bfffc4 	movi	r2,-1
    2e48:	e0bffd15 	stw	r2,-12(fp)
    2e4c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2e50:	e037883a 	mov	sp,fp
    2e54:	dfc00117 	ldw	ra,4(sp)
    2e58:	df000017 	ldw	fp,0(sp)
    2e5c:	dec00204 	addi	sp,sp,8
    2e60:	f800283a 	ret

00002e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2e64:	defffd04 	addi	sp,sp,-12
    2e68:	dfc00215 	stw	ra,8(sp)
    2e6c:	df000115 	stw	fp,4(sp)
    2e70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2e74:	00800034 	movhi	r2,0
    2e78:	10981a04 	addi	r2,r2,24680
    2e7c:	10800017 	ldw	r2,0(r2)
    2e80:	1005003a 	cmpeq	r2,r2,zero
    2e84:	1000061e 	bne	r2,zero,2ea0 <alt_get_errno+0x3c>
    2e88:	00800034 	movhi	r2,0
    2e8c:	10981a04 	addi	r2,r2,24680
    2e90:	10800017 	ldw	r2,0(r2)
    2e94:	103ee83a 	callr	r2
    2e98:	e0bfff15 	stw	r2,-4(fp)
    2e9c:	00000306 	br	2eac <alt_get_errno+0x48>
    2ea0:	00800034 	movhi	r2,0
    2ea4:	10982804 	addi	r2,r2,24736
    2ea8:	e0bfff15 	stw	r2,-4(fp)
    2eac:	e0bfff17 	ldw	r2,-4(fp)
}
    2eb0:	e037883a 	mov	sp,fp
    2eb4:	dfc00117 	ldw	ra,4(sp)
    2eb8:	df000017 	ldw	fp,0(sp)
    2ebc:	dec00204 	addi	sp,sp,8
    2ec0:	f800283a 	ret

00002ec4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2ec4:	defffc04 	addi	sp,sp,-16
    2ec8:	df000315 	stw	fp,12(sp)
    2ecc:	df000304 	addi	fp,sp,12
    2ed0:	e13ffd15 	stw	r4,-12(fp)
    2ed4:	e17ffe15 	stw	r5,-8(fp)
    2ed8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2edc:	e0bfff17 	ldw	r2,-4(fp)
}
    2ee0:	e037883a 	mov	sp,fp
    2ee4:	df000017 	ldw	fp,0(sp)
    2ee8:	dec00104 	addi	sp,sp,4
    2eec:	f800283a 	ret

00002ef0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2ef0:	defff904 	addi	sp,sp,-28
    2ef4:	dfc00615 	stw	ra,24(sp)
    2ef8:	df000515 	stw	fp,20(sp)
    2efc:	df000504 	addi	fp,sp,20
    2f00:	e13ffd15 	stw	r4,-12(fp)
    2f04:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2f08:	e0bffd17 	ldw	r2,-12(fp)
    2f0c:	1005003a 	cmpeq	r2,r2,zero
    2f10:	1000041e 	bne	r2,zero,2f24 <alt_dev_llist_insert+0x34>
    2f14:	e0bffd17 	ldw	r2,-12(fp)
    2f18:	10800217 	ldw	r2,8(r2)
    2f1c:	1004c03a 	cmpne	r2,r2,zero
    2f20:	1000071e 	bne	r2,zero,2f40 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    2f24:	0002fa40 	call	2fa4 <alt_get_errno>
    2f28:	1007883a 	mov	r3,r2
    2f2c:	00800584 	movi	r2,22
    2f30:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2f34:	00bffa84 	movi	r2,-22
    2f38:	e0bfff15 	stw	r2,-4(fp)
    2f3c:	00001306 	br	2f8c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2f40:	e0fffd17 	ldw	r3,-12(fp)
    2f44:	e0bffe17 	ldw	r2,-8(fp)
    2f48:	e0bffb15 	stw	r2,-20(fp)
    2f4c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2f50:	e0fffc17 	ldw	r3,-16(fp)
    2f54:	e0bffb17 	ldw	r2,-20(fp)
    2f58:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2f5c:	e0bffb17 	ldw	r2,-20(fp)
    2f60:	10c00017 	ldw	r3,0(r2)
    2f64:	e0bffc17 	ldw	r2,-16(fp)
    2f68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2f6c:	e0bffb17 	ldw	r2,-20(fp)
    2f70:	10c00017 	ldw	r3,0(r2)
    2f74:	e0bffc17 	ldw	r2,-16(fp)
    2f78:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2f7c:	e0fffb17 	ldw	r3,-20(fp)
    2f80:	e0bffc17 	ldw	r2,-16(fp)
    2f84:	18800015 	stw	r2,0(r3)

  return 0;  
    2f88:	e03fff15 	stw	zero,-4(fp)
    2f8c:	e0bfff17 	ldw	r2,-4(fp)
}
    2f90:	e037883a 	mov	sp,fp
    2f94:	dfc00117 	ldw	ra,4(sp)
    2f98:	df000017 	ldw	fp,0(sp)
    2f9c:	dec00204 	addi	sp,sp,8
    2fa0:	f800283a 	ret

00002fa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2fa4:	defffd04 	addi	sp,sp,-12
    2fa8:	dfc00215 	stw	ra,8(sp)
    2fac:	df000115 	stw	fp,4(sp)
    2fb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2fb4:	00800034 	movhi	r2,0
    2fb8:	10981a04 	addi	r2,r2,24680
    2fbc:	10800017 	ldw	r2,0(r2)
    2fc0:	1005003a 	cmpeq	r2,r2,zero
    2fc4:	1000061e 	bne	r2,zero,2fe0 <alt_get_errno+0x3c>
    2fc8:	00800034 	movhi	r2,0
    2fcc:	10981a04 	addi	r2,r2,24680
    2fd0:	10800017 	ldw	r2,0(r2)
    2fd4:	103ee83a 	callr	r2
    2fd8:	e0bfff15 	stw	r2,-4(fp)
    2fdc:	00000306 	br	2fec <alt_get_errno+0x48>
    2fe0:	00800034 	movhi	r2,0
    2fe4:	10982804 	addi	r2,r2,24736
    2fe8:	e0bfff15 	stw	r2,-4(fp)
    2fec:	e0bfff17 	ldw	r2,-4(fp)
}
    2ff0:	e037883a 	mov	sp,fp
    2ff4:	dfc00117 	ldw	ra,4(sp)
    2ff8:	df000017 	ldw	fp,0(sp)
    2ffc:	dec00204 	addi	sp,sp,8
    3000:	f800283a 	ret

00003004 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    3004:	defffd04 	addi	sp,sp,-12
    3008:	dfc00215 	stw	ra,8(sp)
    300c:	df000115 	stw	fp,4(sp)
    3010:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3014:	00bfff04 	movi	r2,-4
    3018:	00c00034 	movhi	r3,0
    301c:	18d13b04 	addi	r3,r3,17644
    3020:	1885883a 	add	r2,r3,r2
    3024:	e0bfff15 	stw	r2,-4(fp)
    3028:	00000606 	br	3044 <_do_ctors+0x40>
        (*ctor) (); 
    302c:	e0bfff17 	ldw	r2,-4(fp)
    3030:	10800017 	ldw	r2,0(r2)
    3034:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3038:	e0bfff17 	ldw	r2,-4(fp)
    303c:	10bfff04 	addi	r2,r2,-4
    3040:	e0bfff15 	stw	r2,-4(fp)
    3044:	e0ffff17 	ldw	r3,-4(fp)
    3048:	00800034 	movhi	r2,0
    304c:	10913a04 	addi	r2,r2,17640
    3050:	18bff62e 	bgeu	r3,r2,302c <_do_ctors+0x28>
        (*ctor) (); 
}
    3054:	e037883a 	mov	sp,fp
    3058:	dfc00117 	ldw	ra,4(sp)
    305c:	df000017 	ldw	fp,0(sp)
    3060:	dec00204 	addi	sp,sp,8
    3064:	f800283a 	ret

00003068 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3068:	defffd04 	addi	sp,sp,-12
    306c:	dfc00215 	stw	ra,8(sp)
    3070:	df000115 	stw	fp,4(sp)
    3074:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3078:	00bfff04 	movi	r2,-4
    307c:	00c00034 	movhi	r3,0
    3080:	18d13b04 	addi	r3,r3,17644
    3084:	1885883a 	add	r2,r3,r2
    3088:	e0bfff15 	stw	r2,-4(fp)
    308c:	00000606 	br	30a8 <_do_dtors+0x40>
        (*dtor) (); 
    3090:	e0bfff17 	ldw	r2,-4(fp)
    3094:	10800017 	ldw	r2,0(r2)
    3098:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    309c:	e0bfff17 	ldw	r2,-4(fp)
    30a0:	10bfff04 	addi	r2,r2,-4
    30a4:	e0bfff15 	stw	r2,-4(fp)
    30a8:	e0ffff17 	ldw	r3,-4(fp)
    30ac:	00800034 	movhi	r2,0
    30b0:	10913b04 	addi	r2,r2,17644
    30b4:	18bff62e 	bgeu	r3,r2,3090 <_do_dtors+0x28>
        (*dtor) (); 
}
    30b8:	e037883a 	mov	sp,fp
    30bc:	dfc00117 	ldw	ra,4(sp)
    30c0:	df000017 	ldw	fp,0(sp)
    30c4:	dec00204 	addi	sp,sp,8
    30c8:	f800283a 	ret

000030cc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    30cc:	defffb04 	addi	sp,sp,-20
    30d0:	dfc00415 	stw	ra,16(sp)
    30d4:	df000315 	stw	fp,12(sp)
    30d8:	df000304 	addi	fp,sp,12
    30dc:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    30e0:	e13ffe17 	ldw	r4,-8(fp)
    30e4:	d1600604 	addi	r5,gp,-32744
    30e8:	0003d100 	call	3d10 <alt_find_dev>
    30ec:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
    30f0:	e0bffd17 	ldw	r2,-12(fp)
    30f4:	1005003a 	cmpeq	r2,r2,zero
    30f8:	10000b1e 	bne	r2,zero,3128 <alt_flash_open_dev+0x5c>
    30fc:	e0bffd17 	ldw	r2,-12(fp)
    3100:	10800317 	ldw	r2,12(r2)
    3104:	1005003a 	cmpeq	r2,r2,zero
    3108:	1000071e 	bne	r2,zero,3128 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
    310c:	e0bffd17 	ldw	r2,-12(fp)
    3110:	10800317 	ldw	r2,12(r2)
    3114:	e13ffd17 	ldw	r4,-12(fp)
    3118:	e17ffe17 	ldw	r5,-8(fp)
    311c:	103ee83a 	callr	r2
    3120:	e0bfff15 	stw	r2,-4(fp)
    3124:	00000206 	br	3130 <alt_flash_open_dev+0x64>
  }

  return dev;
    3128:	e0bffd17 	ldw	r2,-12(fp)
    312c:	e0bfff15 	stw	r2,-4(fp)
    3130:	e0bfff17 	ldw	r2,-4(fp)
}
    3134:	e037883a 	mov	sp,fp
    3138:	dfc00117 	ldw	ra,4(sp)
    313c:	df000017 	ldw	fp,0(sp)
    3140:	dec00204 	addi	sp,sp,8
    3144:	f800283a 	ret

00003148 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    3148:	defffd04 	addi	sp,sp,-12
    314c:	dfc00215 	stw	ra,8(sp)
    3150:	df000115 	stw	fp,4(sp)
    3154:	df000104 	addi	fp,sp,4
    3158:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    315c:	e0bfff17 	ldw	r2,-4(fp)
    3160:	1005003a 	cmpeq	r2,r2,zero
    3164:	1000081e 	bne	r2,zero,3188 <alt_flash_close_dev+0x40>
    3168:	e0bfff17 	ldw	r2,-4(fp)
    316c:	10800417 	ldw	r2,16(r2)
    3170:	1005003a 	cmpeq	r2,r2,zero
    3174:	1000041e 	bne	r2,zero,3188 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
    3178:	e0bfff17 	ldw	r2,-4(fp)
    317c:	10800417 	ldw	r2,16(r2)
    3180:	e13fff17 	ldw	r4,-4(fp)
    3184:	103ee83a 	callr	r2
  }
  return;
}
    3188:	e037883a 	mov	sp,fp
    318c:	dfc00117 	ldw	ra,4(sp)
    3190:	df000017 	ldw	fp,0(sp)
    3194:	dec00204 	addi	sp,sp,8
    3198:	f800283a 	ret

0000319c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    319c:	defff904 	addi	sp,sp,-28
    31a0:	dfc00615 	stw	ra,24(sp)
    31a4:	df000515 	stw	fp,20(sp)
    31a8:	df000504 	addi	fp,sp,20
    31ac:	e13ffc15 	stw	r4,-16(fp)
    31b0:	e17ffd15 	stw	r5,-12(fp)
    31b4:	e1bffe15 	stw	r6,-8(fp)
    31b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    31bc:	e0800217 	ldw	r2,8(fp)
    31c0:	d8800015 	stw	r2,0(sp)
    31c4:	e13ffc17 	ldw	r4,-16(fp)
    31c8:	e17ffd17 	ldw	r5,-12(fp)
    31cc:	e1bffe17 	ldw	r6,-8(fp)
    31d0:	e1ffff17 	ldw	r7,-4(fp)
    31d4:	00033700 	call	3370 <alt_iic_isr_register>
}  
    31d8:	e037883a 	mov	sp,fp
    31dc:	dfc00117 	ldw	ra,4(sp)
    31e0:	df000017 	ldw	fp,0(sp)
    31e4:	dec00204 	addi	sp,sp,8
    31e8:	f800283a 	ret

000031ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    31ec:	defff904 	addi	sp,sp,-28
    31f0:	df000615 	stw	fp,24(sp)
    31f4:	df000604 	addi	fp,sp,24
    31f8:	e13ffe15 	stw	r4,-8(fp)
    31fc:	e17fff15 	stw	r5,-4(fp)
    3200:	e0bfff17 	ldw	r2,-4(fp)
    3204:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3208:	0005303a 	rdctl	r2,status
    320c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3210:	e0fffb17 	ldw	r3,-20(fp)
    3214:	00bfff84 	movi	r2,-2
    3218:	1884703a 	and	r2,r3,r2
    321c:	1001703a 	wrctl	status,r2
  
  return context;
    3220:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3224:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    3228:	e0fffc17 	ldw	r3,-16(fp)
    322c:	00800044 	movi	r2,1
    3230:	10c4983a 	sll	r2,r2,r3
    3234:	1007883a 	mov	r3,r2
    3238:	00800034 	movhi	r2,0
    323c:	10982504 	addi	r2,r2,24724
    3240:	10800017 	ldw	r2,0(r2)
    3244:	1886b03a 	or	r3,r3,r2
    3248:	00800034 	movhi	r2,0
    324c:	10982504 	addi	r2,r2,24724
    3250:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    3254:	00800034 	movhi	r2,0
    3258:	10982504 	addi	r2,r2,24724
    325c:	10800017 	ldw	r2,0(r2)
    3260:	100170fa 	wrctl	ienable,r2
    3264:	e0bffd17 	ldw	r2,-12(fp)
    3268:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    326c:	e0bffa17 	ldw	r2,-24(fp)
    3270:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3274:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    3278:	e037883a 	mov	sp,fp
    327c:	df000017 	ldw	fp,0(sp)
    3280:	dec00104 	addi	sp,sp,4
    3284:	f800283a 	ret

00003288 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    3288:	defff904 	addi	sp,sp,-28
    328c:	df000615 	stw	fp,24(sp)
    3290:	df000604 	addi	fp,sp,24
    3294:	e13ffe15 	stw	r4,-8(fp)
    3298:	e17fff15 	stw	r5,-4(fp)
    329c:	e0bfff17 	ldw	r2,-4(fp)
    32a0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    32a4:	0005303a 	rdctl	r2,status
    32a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    32ac:	e0fffb17 	ldw	r3,-20(fp)
    32b0:	00bfff84 	movi	r2,-2
    32b4:	1884703a 	and	r2,r3,r2
    32b8:	1001703a 	wrctl	status,r2
  
  return context;
    32bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    32c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    32c4:	e0fffc17 	ldw	r3,-16(fp)
    32c8:	00800044 	movi	r2,1
    32cc:	10c4983a 	sll	r2,r2,r3
    32d0:	0084303a 	nor	r2,zero,r2
    32d4:	1007883a 	mov	r3,r2
    32d8:	00800034 	movhi	r2,0
    32dc:	10982504 	addi	r2,r2,24724
    32e0:	10800017 	ldw	r2,0(r2)
    32e4:	1886703a 	and	r3,r3,r2
    32e8:	00800034 	movhi	r2,0
    32ec:	10982504 	addi	r2,r2,24724
    32f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    32f4:	00800034 	movhi	r2,0
    32f8:	10982504 	addi	r2,r2,24724
    32fc:	10800017 	ldw	r2,0(r2)
    3300:	100170fa 	wrctl	ienable,r2
    3304:	e0bffd17 	ldw	r2,-12(fp)
    3308:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    330c:	e0bffa17 	ldw	r2,-24(fp)
    3310:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3314:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    3318:	e037883a 	mov	sp,fp
    331c:	df000017 	ldw	fp,0(sp)
    3320:	dec00104 	addi	sp,sp,4
    3324:	f800283a 	ret

00003328 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    3328:	defffc04 	addi	sp,sp,-16
    332c:	df000315 	stw	fp,12(sp)
    3330:	df000304 	addi	fp,sp,12
    3334:	e13ffe15 	stw	r4,-8(fp)
    3338:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    333c:	000530fa 	rdctl	r2,ienable
    3340:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    3344:	e0ffff17 	ldw	r3,-4(fp)
    3348:	00800044 	movi	r2,1
    334c:	10c4983a 	sll	r2,r2,r3
    3350:	1007883a 	mov	r3,r2
    3354:	e0bffd17 	ldw	r2,-12(fp)
    3358:	1884703a 	and	r2,r3,r2
    335c:	1004c03a 	cmpne	r2,r2,zero
}
    3360:	e037883a 	mov	sp,fp
    3364:	df000017 	ldw	fp,0(sp)
    3368:	dec00104 	addi	sp,sp,4
    336c:	f800283a 	ret

00003370 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3370:	defff404 	addi	sp,sp,-48
    3374:	dfc00b15 	stw	ra,44(sp)
    3378:	df000a15 	stw	fp,40(sp)
    337c:	df000a04 	addi	fp,sp,40
    3380:	e13ffb15 	stw	r4,-20(fp)
    3384:	e17ffc15 	stw	r5,-16(fp)
    3388:	e1bffd15 	stw	r6,-12(fp)
    338c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    3390:	00bffa84 	movi	r2,-22
    3394:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    3398:	e0bffc17 	ldw	r2,-16(fp)
    339c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    33a0:	e0bff917 	ldw	r2,-28(fp)
    33a4:	10800808 	cmpgei	r2,r2,32
    33a8:	1000291e 	bne	r2,zero,3450 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    33ac:	0005303a 	rdctl	r2,status
    33b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    33b4:	e0fff717 	ldw	r3,-36(fp)
    33b8:	00bfff84 	movi	r2,-2
    33bc:	1884703a 	and	r2,r3,r2
    33c0:	1001703a 	wrctl	status,r2
  
  return context;
    33c4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    33c8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    33cc:	e0bff917 	ldw	r2,-28(fp)
    33d0:	00c00034 	movhi	r3,0
    33d4:	18d82904 	addi	r3,r3,24740
    33d8:	100490fa 	slli	r2,r2,3
    33dc:	10c7883a 	add	r3,r2,r3
    33e0:	e0bffd17 	ldw	r2,-12(fp)
    33e4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    33e8:	e0bff917 	ldw	r2,-28(fp)
    33ec:	00c00034 	movhi	r3,0
    33f0:	18d82904 	addi	r3,r3,24740
    33f4:	100490fa 	slli	r2,r2,3
    33f8:	10c5883a 	add	r2,r2,r3
    33fc:	10c00104 	addi	r3,r2,4
    3400:	e0bffe17 	ldw	r2,-8(fp)
    3404:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    3408:	e0bffd17 	ldw	r2,-12(fp)
    340c:	1005003a 	cmpeq	r2,r2,zero
    3410:	1000051e 	bne	r2,zero,3428 <alt_iic_isr_register+0xb8>
    3414:	e17ff917 	ldw	r5,-28(fp)
    3418:	e13ffb17 	ldw	r4,-20(fp)
    341c:	00031ec0 	call	31ec <alt_ic_irq_enable>
    3420:	e0bfff15 	stw	r2,-4(fp)
    3424:	00000406 	br	3438 <alt_iic_isr_register+0xc8>
    3428:	e17ff917 	ldw	r5,-28(fp)
    342c:	e13ffb17 	ldw	r4,-20(fp)
    3430:	00032880 	call	3288 <alt_ic_irq_disable>
    3434:	e0bfff15 	stw	r2,-4(fp)
    3438:	e0bfff17 	ldw	r2,-4(fp)
    343c:	e0bffa15 	stw	r2,-24(fp)
    3440:	e0bff817 	ldw	r2,-32(fp)
    3444:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3448:	e0bff617 	ldw	r2,-40(fp)
    344c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    3450:	e0bffa17 	ldw	r2,-24(fp)
}
    3454:	e037883a 	mov	sp,fp
    3458:	dfc00117 	ldw	ra,4(sp)
    345c:	df000017 	ldw	fp,0(sp)
    3460:	dec00204 	addi	sp,sp,8
    3464:	f800283a 	ret

00003468 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    3468:	defff804 	addi	sp,sp,-32
    346c:	dfc00715 	stw	ra,28(sp)
    3470:	df000615 	stw	fp,24(sp)
    3474:	dc000515 	stw	r16,20(sp)
    3478:	df000504 	addi	fp,sp,20
    347c:	e13ffc15 	stw	r4,-16(fp)
    3480:	e17ffd15 	stw	r5,-12(fp)
    3484:	e1bffe15 	stw	r6,-8(fp)
    3488:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    348c:	e13ffd17 	ldw	r4,-12(fp)
    3490:	e17ffe17 	ldw	r5,-8(fp)
    3494:	e1bfff17 	ldw	r6,-4(fp)
    3498:	00036b00 	call	36b0 <open>
    349c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    34a0:	e0bffb17 	ldw	r2,-20(fp)
    34a4:	1004803a 	cmplt	r2,r2,zero
    34a8:	10001f1e 	bne	r2,zero,3528 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    34ac:	e13ffb17 	ldw	r4,-20(fp)
    34b0:	04000034 	movhi	r16,0
    34b4:	8416b504 	addi	r16,r16,23252
    34b8:	01400304 	movi	r5,12
    34bc:	00044500 	call	4450 <__mulsi3>
    34c0:	1405883a 	add	r2,r2,r16
    34c4:	10c00017 	ldw	r3,0(r2)
    34c8:	e0bffc17 	ldw	r2,-16(fp)
    34cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    34d0:	e13ffb17 	ldw	r4,-20(fp)
    34d4:	04000034 	movhi	r16,0
    34d8:	8416b504 	addi	r16,r16,23252
    34dc:	01400304 	movi	r5,12
    34e0:	00044500 	call	4450 <__mulsi3>
    34e4:	1405883a 	add	r2,r2,r16
    34e8:	10800104 	addi	r2,r2,4
    34ec:	10c00017 	ldw	r3,0(r2)
    34f0:	e0bffc17 	ldw	r2,-16(fp)
    34f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    34f8:	e13ffb17 	ldw	r4,-20(fp)
    34fc:	04000034 	movhi	r16,0
    3500:	8416b504 	addi	r16,r16,23252
    3504:	01400304 	movi	r5,12
    3508:	00044500 	call	4450 <__mulsi3>
    350c:	1405883a 	add	r2,r2,r16
    3510:	10800204 	addi	r2,r2,8
    3514:	10c00017 	ldw	r3,0(r2)
    3518:	e0bffc17 	ldw	r2,-16(fp)
    351c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3520:	e13ffb17 	ldw	r4,-20(fp)
    3524:	000389c0 	call	389c <alt_release_fd>
  }
} 
    3528:	e037883a 	mov	sp,fp
    352c:	dfc00217 	ldw	ra,8(sp)
    3530:	df000117 	ldw	fp,4(sp)
    3534:	dc000017 	ldw	r16,0(sp)
    3538:	dec00304 	addi	sp,sp,12
    353c:	f800283a 	ret

00003540 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    3540:	defffb04 	addi	sp,sp,-20
    3544:	dfc00415 	stw	ra,16(sp)
    3548:	df000315 	stw	fp,12(sp)
    354c:	df000304 	addi	fp,sp,12
    3550:	e13ffd15 	stw	r4,-12(fp)
    3554:	e17ffe15 	stw	r5,-8(fp)
    3558:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    355c:	01000034 	movhi	r4,0
    3560:	2116b804 	addi	r4,r4,23264
    3564:	e17ffd17 	ldw	r5,-12(fp)
    3568:	01800044 	movi	r6,1
    356c:	01c07fc4 	movi	r7,511
    3570:	00034680 	call	3468 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3574:	01000034 	movhi	r4,0
    3578:	2116b504 	addi	r4,r4,23252
    357c:	e17ffe17 	ldw	r5,-8(fp)
    3580:	000d883a 	mov	r6,zero
    3584:	01c07fc4 	movi	r7,511
    3588:	00034680 	call	3468 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    358c:	01000034 	movhi	r4,0
    3590:	2116bb04 	addi	r4,r4,23276
    3594:	e17fff17 	ldw	r5,-4(fp)
    3598:	01800044 	movi	r6,1
    359c:	01c07fc4 	movi	r7,511
    35a0:	00034680 	call	3468 <alt_open_fd>
}  
    35a4:	e037883a 	mov	sp,fp
    35a8:	dfc00117 	ldw	ra,4(sp)
    35ac:	df000017 	ldw	fp,0(sp)
    35b0:	dec00204 	addi	sp,sp,8
    35b4:	f800283a 	ret

000035b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    35b8:	defffa04 	addi	sp,sp,-24
    35bc:	dfc00515 	stw	ra,20(sp)
    35c0:	df000415 	stw	fp,16(sp)
    35c4:	dc000315 	stw	r16,12(sp)
    35c8:	df000304 	addi	fp,sp,12
    35cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    35d0:	e0bffe17 	ldw	r2,-8(fp)
    35d4:	10800217 	ldw	r2,8(r2)
    35d8:	10d00034 	orhi	r3,r2,16384
    35dc:	e0bffe17 	ldw	r2,-8(fp)
    35e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    35e4:	e03ffd15 	stw	zero,-12(fp)
    35e8:	00002306 	br	3678 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    35ec:	e13ffd17 	ldw	r4,-12(fp)
    35f0:	04000034 	movhi	r16,0
    35f4:	8416b504 	addi	r16,r16,23252
    35f8:	01400304 	movi	r5,12
    35fc:	00044500 	call	4450 <__mulsi3>
    3600:	1405883a 	add	r2,r2,r16
    3604:	10c00017 	ldw	r3,0(r2)
    3608:	e0bffe17 	ldw	r2,-8(fp)
    360c:	10800017 	ldw	r2,0(r2)
    3610:	1880161e 	bne	r3,r2,366c <alt_file_locked+0xb4>
    3614:	e13ffd17 	ldw	r4,-12(fp)
    3618:	04000034 	movhi	r16,0
    361c:	8416b504 	addi	r16,r16,23252
    3620:	01400304 	movi	r5,12
    3624:	00044500 	call	4450 <__mulsi3>
    3628:	1405883a 	add	r2,r2,r16
    362c:	10800204 	addi	r2,r2,8
    3630:	10800017 	ldw	r2,0(r2)
    3634:	1004403a 	cmpge	r2,r2,zero
    3638:	10000c1e 	bne	r2,zero,366c <alt_file_locked+0xb4>
    363c:	e13ffd17 	ldw	r4,-12(fp)
    3640:	01400304 	movi	r5,12
    3644:	00044500 	call	4450 <__mulsi3>
    3648:	1007883a 	mov	r3,r2
    364c:	00800034 	movhi	r2,0
    3650:	1096b504 	addi	r2,r2,23252
    3654:	1887883a 	add	r3,r3,r2
    3658:	e0bffe17 	ldw	r2,-8(fp)
    365c:	18800326 	beq	r3,r2,366c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3660:	00bffcc4 	movi	r2,-13
    3664:	e0bfff15 	stw	r2,-4(fp)
    3668:	00000a06 	br	3694 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    366c:	e0bffd17 	ldw	r2,-12(fp)
    3670:	10800044 	addi	r2,r2,1
    3674:	e0bffd15 	stw	r2,-12(fp)
    3678:	00800034 	movhi	r2,0
    367c:	10981904 	addi	r2,r2,24676
    3680:	10800017 	ldw	r2,0(r2)
    3684:	1007883a 	mov	r3,r2
    3688:	e0bffd17 	ldw	r2,-12(fp)
    368c:	18bfd72e 	bgeu	r3,r2,35ec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3690:	e03fff15 	stw	zero,-4(fp)
    3694:	e0bfff17 	ldw	r2,-4(fp)
}
    3698:	e037883a 	mov	sp,fp
    369c:	dfc00217 	ldw	ra,8(sp)
    36a0:	df000117 	ldw	fp,4(sp)
    36a4:	dc000017 	ldw	r16,0(sp)
    36a8:	dec00304 	addi	sp,sp,12
    36ac:	f800283a 	ret

000036b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    36b0:	defff404 	addi	sp,sp,-48
    36b4:	dfc00b15 	stw	ra,44(sp)
    36b8:	df000a15 	stw	fp,40(sp)
    36bc:	df000a04 	addi	fp,sp,40
    36c0:	e13ffb15 	stw	r4,-20(fp)
    36c4:	e17ffc15 	stw	r5,-16(fp)
    36c8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    36cc:	00bfffc4 	movi	r2,-1
    36d0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    36d4:	00bffb44 	movi	r2,-19
    36d8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    36dc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    36e0:	e13ffb17 	ldw	r4,-20(fp)
    36e4:	01400034 	movhi	r5,0
    36e8:	29581704 	addi	r5,r5,24668
    36ec:	0003d100 	call	3d10 <alt_find_dev>
    36f0:	e0bffa15 	stw	r2,-24(fp)
    36f4:	e0bffa17 	ldw	r2,-24(fp)
    36f8:	1004c03a 	cmpne	r2,r2,zero
    36fc:	1000051e 	bne	r2,zero,3714 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    3700:	e13ffb17 	ldw	r4,-20(fp)
    3704:	0003da40 	call	3da4 <alt_find_file>
    3708:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    370c:	00800044 	movi	r2,1
    3710:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    3714:	e0bffa17 	ldw	r2,-24(fp)
    3718:	1005003a 	cmpeq	r2,r2,zero
    371c:	1000311e 	bne	r2,zero,37e4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    3720:	e13ffa17 	ldw	r4,-24(fp)
    3724:	0003ec40 	call	3ec4 <alt_get_fd>
    3728:	e0bff815 	stw	r2,-32(fp)
    372c:	e0bff817 	ldw	r2,-32(fp)
    3730:	1004403a 	cmpge	r2,r2,zero
    3734:	1000031e 	bne	r2,zero,3744 <open+0x94>
    {
      status = index;
    3738:	e0bff817 	ldw	r2,-32(fp)
    373c:	e0bff715 	stw	r2,-36(fp)
    3740:	00002a06 	br	37ec <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    3744:	e13ff817 	ldw	r4,-32(fp)
    3748:	01400304 	movi	r5,12
    374c:	00044500 	call	4450 <__mulsi3>
    3750:	1007883a 	mov	r3,r2
    3754:	00800034 	movhi	r2,0
    3758:	1096b504 	addi	r2,r2,23252
    375c:	1885883a 	add	r2,r3,r2
    3760:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3764:	e0fffc17 	ldw	r3,-16(fp)
    3768:	00900034 	movhi	r2,16384
    376c:	10bfffc4 	addi	r2,r2,-1
    3770:	1886703a 	and	r3,r3,r2
    3774:	e0bff917 	ldw	r2,-28(fp)
    3778:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    377c:	e0bff617 	ldw	r2,-40(fp)
    3780:	1004c03a 	cmpne	r2,r2,zero
    3784:	1000061e 	bne	r2,zero,37a0 <open+0xf0>
    3788:	e13ff917 	ldw	r4,-28(fp)
    378c:	00035b80 	call	35b8 <alt_file_locked>
    3790:	e0bff715 	stw	r2,-36(fp)
    3794:	e0bff717 	ldw	r2,-36(fp)
    3798:	1004803a 	cmplt	r2,r2,zero
    379c:	1000131e 	bne	r2,zero,37ec <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    37a0:	e0bffa17 	ldw	r2,-24(fp)
    37a4:	10800317 	ldw	r2,12(r2)
    37a8:	1005003a 	cmpeq	r2,r2,zero
    37ac:	1000091e 	bne	r2,zero,37d4 <open+0x124>
    37b0:	e0bffa17 	ldw	r2,-24(fp)
    37b4:	10800317 	ldw	r2,12(r2)
    37b8:	e13ff917 	ldw	r4,-28(fp)
    37bc:	e17ffb17 	ldw	r5,-20(fp)
    37c0:	e1bffc17 	ldw	r6,-16(fp)
    37c4:	e1fffd17 	ldw	r7,-12(fp)
    37c8:	103ee83a 	callr	r2
    37cc:	e0bfff15 	stw	r2,-4(fp)
    37d0:	00000106 	br	37d8 <open+0x128>
    37d4:	e03fff15 	stw	zero,-4(fp)
    37d8:	e0bfff17 	ldw	r2,-4(fp)
    37dc:	e0bff715 	stw	r2,-36(fp)
    37e0:	00000206 	br	37ec <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    37e4:	00bffb44 	movi	r2,-19
    37e8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    37ec:	e0bff717 	ldw	r2,-36(fp)
    37f0:	1004403a 	cmpge	r2,r2,zero
    37f4:	1000091e 	bne	r2,zero,381c <open+0x16c>
  {
    alt_release_fd (index);  
    37f8:	e13ff817 	ldw	r4,-32(fp)
    37fc:	000389c0 	call	389c <alt_release_fd>
    ALT_ERRNO = -status;
    3800:	000383c0 	call	383c <alt_get_errno>
    3804:	e0fff717 	ldw	r3,-36(fp)
    3808:	00c7c83a 	sub	r3,zero,r3
    380c:	10c00015 	stw	r3,0(r2)
    return -1;
    3810:	00bfffc4 	movi	r2,-1
    3814:	e0bffe15 	stw	r2,-8(fp)
    3818:	00000206 	br	3824 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    381c:	e0bff817 	ldw	r2,-32(fp)
    3820:	e0bffe15 	stw	r2,-8(fp)
    3824:	e0bffe17 	ldw	r2,-8(fp)
}
    3828:	e037883a 	mov	sp,fp
    382c:	dfc00117 	ldw	ra,4(sp)
    3830:	df000017 	ldw	fp,0(sp)
    3834:	dec00204 	addi	sp,sp,8
    3838:	f800283a 	ret

0000383c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    383c:	defffd04 	addi	sp,sp,-12
    3840:	dfc00215 	stw	ra,8(sp)
    3844:	df000115 	stw	fp,4(sp)
    3848:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    384c:	00800034 	movhi	r2,0
    3850:	10981a04 	addi	r2,r2,24680
    3854:	10800017 	ldw	r2,0(r2)
    3858:	1005003a 	cmpeq	r2,r2,zero
    385c:	1000061e 	bne	r2,zero,3878 <alt_get_errno+0x3c>
    3860:	00800034 	movhi	r2,0
    3864:	10981a04 	addi	r2,r2,24680
    3868:	10800017 	ldw	r2,0(r2)
    386c:	103ee83a 	callr	r2
    3870:	e0bfff15 	stw	r2,-4(fp)
    3874:	00000306 	br	3884 <alt_get_errno+0x48>
    3878:	00800034 	movhi	r2,0
    387c:	10982804 	addi	r2,r2,24736
    3880:	e0bfff15 	stw	r2,-4(fp)
    3884:	e0bfff17 	ldw	r2,-4(fp)
}
    3888:	e037883a 	mov	sp,fp
    388c:	dfc00117 	ldw	ra,4(sp)
    3890:	df000017 	ldw	fp,0(sp)
    3894:	dec00204 	addi	sp,sp,8
    3898:	f800283a 	ret

0000389c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    389c:	defffc04 	addi	sp,sp,-16
    38a0:	dfc00315 	stw	ra,12(sp)
    38a4:	df000215 	stw	fp,8(sp)
    38a8:	dc000115 	stw	r16,4(sp)
    38ac:	df000104 	addi	fp,sp,4
    38b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    38b4:	e0bfff17 	ldw	r2,-4(fp)
    38b8:	108000d0 	cmplti	r2,r2,3
    38bc:	10000f1e 	bne	r2,zero,38fc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    38c0:	e13fff17 	ldw	r4,-4(fp)
    38c4:	04000034 	movhi	r16,0
    38c8:	8416b504 	addi	r16,r16,23252
    38cc:	01400304 	movi	r5,12
    38d0:	00044500 	call	4450 <__mulsi3>
    38d4:	1405883a 	add	r2,r2,r16
    38d8:	10800204 	addi	r2,r2,8
    38dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    38e0:	e13fff17 	ldw	r4,-4(fp)
    38e4:	04000034 	movhi	r16,0
    38e8:	8416b504 	addi	r16,r16,23252
    38ec:	01400304 	movi	r5,12
    38f0:	00044500 	call	4450 <__mulsi3>
    38f4:	1405883a 	add	r2,r2,r16
    38f8:	10000015 	stw	zero,0(r2)
  }
}
    38fc:	e037883a 	mov	sp,fp
    3900:	dfc00217 	ldw	ra,8(sp)
    3904:	df000117 	ldw	fp,4(sp)
    3908:	dc000017 	ldw	r16,0(sp)
    390c:	dec00304 	addi	sp,sp,12
    3910:	f800283a 	ret

00003914 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3914:	defffa04 	addi	sp,sp,-24
    3918:	df000515 	stw	fp,20(sp)
    391c:	df000504 	addi	fp,sp,20
    3920:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3924:	0005303a 	rdctl	r2,status
    3928:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    392c:	e0fffd17 	ldw	r3,-12(fp)
    3930:	00bfff84 	movi	r2,-2
    3934:	1884703a 	and	r2,r3,r2
    3938:	1001703a 	wrctl	status,r2
  
  return context;
    393c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    3940:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    3944:	e0bfff17 	ldw	r2,-4(fp)
    3948:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    394c:	e0bffc17 	ldw	r2,-16(fp)
    3950:	10c00017 	ldw	r3,0(r2)
    3954:	e0bffc17 	ldw	r2,-16(fp)
    3958:	10800117 	ldw	r2,4(r2)
    395c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    3960:	e0bffc17 	ldw	r2,-16(fp)
    3964:	10c00117 	ldw	r3,4(r2)
    3968:	e0bffc17 	ldw	r2,-16(fp)
    396c:	10800017 	ldw	r2,0(r2)
    3970:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3974:	e0fffc17 	ldw	r3,-16(fp)
    3978:	e0bffc17 	ldw	r2,-16(fp)
    397c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    3980:	e0fffc17 	ldw	r3,-16(fp)
    3984:	e0bffc17 	ldw	r2,-16(fp)
    3988:	18800015 	stw	r2,0(r3)
    398c:	e0bffe17 	ldw	r2,-8(fp)
    3990:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3994:	e0bffb17 	ldw	r2,-20(fp)
    3998:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    399c:	e037883a 	mov	sp,fp
    39a0:	df000017 	ldw	fp,0(sp)
    39a4:	dec00104 	addi	sp,sp,4
    39a8:	f800283a 	ret

000039ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    39ac:	defffb04 	addi	sp,sp,-20
    39b0:	dfc00415 	stw	ra,16(sp)
    39b4:	df000315 	stw	fp,12(sp)
    39b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    39bc:	d0a00917 	ldw	r2,-32732(gp)
    39c0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    39c4:	d0a01217 	ldw	r2,-32696(gp)
    39c8:	10800044 	addi	r2,r2,1
    39cc:	d0a01215 	stw	r2,-32696(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    39d0:	00003106 	br	3a98 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    39d4:	e0bffe17 	ldw	r2,-8(fp)
    39d8:	10800017 	ldw	r2,0(r2)
    39dc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    39e0:	e0bffe17 	ldw	r2,-8(fp)
    39e4:	10800403 	ldbu	r2,16(r2)
    39e8:	10803fcc 	andi	r2,r2,255
    39ec:	1005003a 	cmpeq	r2,r2,zero
    39f0:	1000051e 	bne	r2,zero,3a08 <alt_tick+0x5c>
    39f4:	d0a01217 	ldw	r2,-32696(gp)
    39f8:	1004c03a 	cmpne	r2,r2,zero
    39fc:	1000021e 	bne	r2,zero,3a08 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    3a00:	e0bffe17 	ldw	r2,-8(fp)
    3a04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3a08:	e0bffe17 	ldw	r2,-8(fp)
    3a0c:	10c00217 	ldw	r3,8(r2)
    3a10:	d0a01217 	ldw	r2,-32696(gp)
    3a14:	10c01e36 	bltu	r2,r3,3a90 <alt_tick+0xe4>
    3a18:	e0bffe17 	ldw	r2,-8(fp)
    3a1c:	10800403 	ldbu	r2,16(r2)
    3a20:	10803fcc 	andi	r2,r2,255
    3a24:	1004c03a 	cmpne	r2,r2,zero
    3a28:	1000191e 	bne	r2,zero,3a90 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    3a2c:	e0bffe17 	ldw	r2,-8(fp)
    3a30:	10c00317 	ldw	r3,12(r2)
    3a34:	e0bffe17 	ldw	r2,-8(fp)
    3a38:	11000517 	ldw	r4,20(r2)
    3a3c:	183ee83a 	callr	r3
    3a40:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3a44:	e0bffd17 	ldw	r2,-12(fp)
    3a48:	1004c03a 	cmpne	r2,r2,zero
    3a4c:	1000031e 	bne	r2,zero,3a5c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    3a50:	e13ffe17 	ldw	r4,-8(fp)
    3a54:	00039140 	call	3914 <alt_alarm_stop>
    3a58:	00000d06 	br	3a90 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    3a5c:	e0bffe17 	ldw	r2,-8(fp)
    3a60:	10c00217 	ldw	r3,8(r2)
    3a64:	e0bffd17 	ldw	r2,-12(fp)
    3a68:	1887883a 	add	r3,r3,r2
    3a6c:	e0bffe17 	ldw	r2,-8(fp)
    3a70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3a74:	e0bffe17 	ldw	r2,-8(fp)
    3a78:	10c00217 	ldw	r3,8(r2)
    3a7c:	d0a01217 	ldw	r2,-32696(gp)
    3a80:	1880032e 	bgeu	r3,r2,3a90 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    3a84:	e0fffe17 	ldw	r3,-8(fp)
    3a88:	00800044 	movi	r2,1
    3a8c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    3a90:	e0bfff17 	ldw	r2,-4(fp)
    3a94:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3a98:	d0e00904 	addi	r3,gp,-32732
    3a9c:	e0bffe17 	ldw	r2,-8(fp)
    3aa0:	10ffcc1e 	bne	r2,r3,39d4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    3aa4:	e037883a 	mov	sp,fp
    3aa8:	dfc00117 	ldw	ra,4(sp)
    3aac:	df000017 	ldw	fp,0(sp)
    3ab0:	dec00204 	addi	sp,sp,8
    3ab4:	f800283a 	ret

00003ab8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    3ab8:	deffff04 	addi	sp,sp,-4
    3abc:	df000015 	stw	fp,0(sp)
    3ac0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3ac4:	000170fa 	wrctl	ienable,zero
}
    3ac8:	e037883a 	mov	sp,fp
    3acc:	df000017 	ldw	fp,0(sp)
    3ad0:	dec00104 	addi	sp,sp,4
    3ad4:	f800283a 	ret

00003ad8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    3ad8:	defff404 	addi	sp,sp,-48
    3adc:	df000b15 	stw	fp,44(sp)
    3ae0:	df000b04 	addi	fp,sp,44
    3ae4:	e13ffc15 	stw	r4,-16(fp)
    3ae8:	e17ffd15 	stw	r5,-12(fp)
    3aec:	e1bffe15 	stw	r6,-8(fp)
    3af0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    3af4:	e0fffe17 	ldw	r3,-8(fp)
    3af8:	e0bfff17 	ldw	r2,-4(fp)
    3afc:	10c5883a 	add	r2,r2,r3
    3b00:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
    3b04:	e0c00117 	ldw	r3,4(fp)
    3b08:	e0800217 	ldw	r2,8(fp)
    3b0c:	10c5883a 	add	r2,r2,r3
    3b10:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
    3b14:	e0800117 	ldw	r2,4(fp)
    3b18:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
    3b1c:	e0bffe17 	ldw	r2,-8(fp)
    3b20:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    3b24:	00800044 	movi	r2,1
    3b28:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    3b2c:	e0bffc17 	ldw	r2,-16(fp)
    3b30:	11000504 	addi	r4,r2,20
    3b34:	e0fffd17 	ldw	r3,-12(fp)
    3b38:	00800044 	movi	r2,1
    3b3c:	10c6983a 	sll	r3,r2,r3
    3b40:	2005883a 	mov	r2,r4
    3b44:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    3b48:	e0800317 	ldw	r2,12(fp)
    3b4c:	1080008c 	andi	r2,r2,2
    3b50:	1004c03a 	cmpne	r2,r2,zero
    3b54:	1000051e 	bne	r2,zero,3b6c <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    3b58:	e0bffc17 	ldw	r2,-16(fp)
    3b5c:	10800304 	addi	r2,r2,12
    3b60:	1007883a 	mov	r3,r2
    3b64:	00810004 	movi	r2,1024
    3b68:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    3b6c:	e0bffc17 	ldw	r2,-16(fp)
    3b70:	10800037 	ldwio	r2,0(r2)
    3b74:	00000006 	br	3b78 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    3b78:	e0bffc17 	ldw	r2,-16(fp)
    3b7c:	10800204 	addi	r2,r2,8
    3b80:	10800037 	ldwio	r2,0(r2)
    3b84:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    3b88:	e0bff717 	ldw	r2,-36(fp)
    3b8c:	1080100c 	andi	r2,r2,64
    3b90:	1005003a 	cmpeq	r2,r2,zero
    3b94:	1000031e 	bne	r2,zero,3ba4 <alt_avalon_spi_command+0xcc>
    3b98:	e0bff617 	ldw	r2,-40(fp)
    3b9c:	1004c03a 	cmpne	r2,r2,zero
    3ba0:	1000041e 	bne	r2,zero,3bb4 <alt_avalon_spi_command+0xdc>
    3ba4:	e0bff717 	ldw	r2,-36(fp)
    3ba8:	1080200c 	andi	r2,r2,128
    3bac:	1005003a 	cmpeq	r2,r2,zero
    3bb0:	103ff11e 	bne	r2,zero,3b78 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    3bb4:	e0bff717 	ldw	r2,-36(fp)
    3bb8:	1080100c 	andi	r2,r2,64
    3bbc:	1005003a 	cmpeq	r2,r2,zero
    3bc0:	1000201e 	bne	r2,zero,3c44 <alt_avalon_spi_command+0x16c>
    3bc4:	e0bff617 	ldw	r2,-40(fp)
    3bc8:	10800050 	cmplti	r2,r2,1
    3bcc:	10001d1e 	bne	r2,zero,3c44 <alt_avalon_spi_command+0x16c>
    {
      credits--;
    3bd0:	e0bff617 	ldw	r2,-40(fp)
    3bd4:	10bfffc4 	addi	r2,r2,-1
    3bd8:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
    3bdc:	e0ffff17 	ldw	r3,-4(fp)
    3be0:	e0bffb17 	ldw	r2,-20(fp)
    3be4:	18800b2e 	bgeu	r3,r2,3c14 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    3be8:	e0bffc17 	ldw	r2,-16(fp)
    3bec:	11000104 	addi	r4,r2,4
    3bf0:	e0bfff17 	ldw	r2,-4(fp)
    3bf4:	10800003 	ldbu	r2,0(r2)
    3bf8:	10c03fcc 	andi	r3,r2,255
    3bfc:	e0bfff17 	ldw	r2,-4(fp)
    3c00:	10800044 	addi	r2,r2,1
    3c04:	e0bfff15 	stw	r2,-4(fp)
    3c08:	2005883a 	mov	r2,r4
    3c0c:	10c00035 	stwio	r3,0(r2)
    3c10:	00000c06 	br	3c44 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
    3c14:	e0bff917 	ldw	r2,-28(fp)
    3c18:	1005003a 	cmpeq	r2,r2,zero
    3c1c:	1000071e 	bne	r2,zero,3c3c <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
    3c20:	e0bff917 	ldw	r2,-28(fp)
    3c24:	10bfffc4 	addi	r2,r2,-1
    3c28:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    3c2c:	e0bffc17 	ldw	r2,-16(fp)
    3c30:	10800104 	addi	r2,r2,4
    3c34:	10000035 	stwio	zero,0(r2)
    3c38:	00000206 	br	3c44 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
    3c3c:	00bf0004 	movi	r2,-1024
    3c40:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    3c44:	e0bff717 	ldw	r2,-36(fp)
    3c48:	1080200c 	andi	r2,r2,128
    3c4c:	1005003a 	cmpeq	r2,r2,zero
    3c50:	103fc91e 	bne	r2,zero,3b78 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    3c54:	e0bffc17 	ldw	r2,-16(fp)
    3c58:	10800037 	ldwio	r2,0(r2)
    3c5c:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
    3c60:	e0bff817 	ldw	r2,-32(fp)
    3c64:	1005003a 	cmpeq	r2,r2,zero
    3c68:	1000041e 	bne	r2,zero,3c7c <alt_avalon_spi_command+0x1a4>
        read_ignore--;
    3c6c:	e0bff817 	ldw	r2,-32(fp)
    3c70:	10bfffc4 	addi	r2,r2,-1
    3c74:	e0bff815 	stw	r2,-32(fp)
    3c78:	00000706 	br	3c98 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
    3c7c:	e0bff517 	ldw	r2,-44(fp)
    3c80:	1007883a 	mov	r3,r2
    3c84:	e0800217 	ldw	r2,8(fp)
    3c88:	10c00005 	stb	r3,0(r2)
    3c8c:	e0800217 	ldw	r2,8(fp)
    3c90:	10800044 	addi	r2,r2,1
    3c94:	e0800215 	stw	r2,8(fp)
      credits++;
    3c98:	e0bff617 	ldw	r2,-40(fp)
    3c9c:	10800044 	addi	r2,r2,1
    3ca0:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
    3ca4:	e0bff817 	ldw	r2,-32(fp)
    3ca8:	1004c03a 	cmpne	r2,r2,zero
    3cac:	103fb21e 	bne	r2,zero,3b78 <alt_avalon_spi_command+0xa0>
    3cb0:	e0c00217 	ldw	r3,8(fp)
    3cb4:	e0bffa17 	ldw	r2,-24(fp)
    3cb8:	18800126 	beq	r3,r2,3cc0 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
    3cbc:	003fae06 	br	3b78 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    3cc0:	e0bffc17 	ldw	r2,-16(fp)
    3cc4:	10800204 	addi	r2,r2,8
    3cc8:	10800037 	ldwio	r2,0(r2)
    3ccc:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    3cd0:	e0bff717 	ldw	r2,-36(fp)
    3cd4:	1080080c 	andi	r2,r2,32
    3cd8:	1005003a 	cmpeq	r2,r2,zero
    3cdc:	103ff81e 	bne	r2,zero,3cc0 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    3ce0:	e0800317 	ldw	r2,12(fp)
    3ce4:	1080004c 	andi	r2,r2,1
    3ce8:	1004c03a 	cmpne	r2,r2,zero
    3cec:	1000031e 	bne	r2,zero,3cfc <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    3cf0:	e0bffc17 	ldw	r2,-16(fp)
    3cf4:	10800304 	addi	r2,r2,12
    3cf8:	10000035 	stwio	zero,0(r2)

  return read_length;
    3cfc:	e0800117 	ldw	r2,4(fp)
}
    3d00:	e037883a 	mov	sp,fp
    3d04:	df000017 	ldw	fp,0(sp)
    3d08:	dec00104 	addi	sp,sp,4
    3d0c:	f800283a 	ret

00003d10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3d10:	defff904 	addi	sp,sp,-28
    3d14:	dfc00615 	stw	ra,24(sp)
    3d18:	df000515 	stw	fp,20(sp)
    3d1c:	df000504 	addi	fp,sp,20
    3d20:	e13ffd15 	stw	r4,-12(fp)
    3d24:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    3d28:	e0bffe17 	ldw	r2,-8(fp)
    3d2c:	10800017 	ldw	r2,0(r2)
    3d30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    3d34:	e13ffd17 	ldw	r4,-12(fp)
    3d38:	00040f40 	call	40f4 <strlen>
    3d3c:	10800044 	addi	r2,r2,1
    3d40:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3d44:	00000d06 	br	3d7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    3d48:	e0bffc17 	ldw	r2,-16(fp)
    3d4c:	11000217 	ldw	r4,8(r2)
    3d50:	e1bffb17 	ldw	r6,-20(fp)
    3d54:	e17ffd17 	ldw	r5,-12(fp)
    3d58:	0003fe00 	call	3fe0 <memcmp>
    3d5c:	1004c03a 	cmpne	r2,r2,zero
    3d60:	1000031e 	bne	r2,zero,3d70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    3d64:	e0bffc17 	ldw	r2,-16(fp)
    3d68:	e0bfff15 	stw	r2,-4(fp)
    3d6c:	00000706 	br	3d8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3d70:	e0bffc17 	ldw	r2,-16(fp)
    3d74:	10800017 	ldw	r2,0(r2)
    3d78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3d7c:	e0fffe17 	ldw	r3,-8(fp)
    3d80:	e0bffc17 	ldw	r2,-16(fp)
    3d84:	10fff01e 	bne	r2,r3,3d48 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    3d88:	e03fff15 	stw	zero,-4(fp)
    3d8c:	e0bfff17 	ldw	r2,-4(fp)
}
    3d90:	e037883a 	mov	sp,fp
    3d94:	dfc00117 	ldw	ra,4(sp)
    3d98:	df000017 	ldw	fp,0(sp)
    3d9c:	dec00204 	addi	sp,sp,8
    3da0:	f800283a 	ret

00003da4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3da4:	defffa04 	addi	sp,sp,-24
    3da8:	dfc00515 	stw	ra,20(sp)
    3dac:	df000415 	stw	fp,16(sp)
    3db0:	df000404 	addi	fp,sp,16
    3db4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3db8:	00800034 	movhi	r2,0
    3dbc:	10981504 	addi	r2,r2,24660
    3dc0:	10800017 	ldw	r2,0(r2)
    3dc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3dc8:	00003306 	br	3e98 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    3dcc:	e0bffd17 	ldw	r2,-12(fp)
    3dd0:	11000217 	ldw	r4,8(r2)
    3dd4:	00040f40 	call	40f4 <strlen>
    3dd8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    3ddc:	e0bffd17 	ldw	r2,-12(fp)
    3de0:	10c00217 	ldw	r3,8(r2)
    3de4:	e0bffc17 	ldw	r2,-16(fp)
    3de8:	1885883a 	add	r2,r3,r2
    3dec:	10bfffc4 	addi	r2,r2,-1
    3df0:	10800003 	ldbu	r2,0(r2)
    3df4:	10803fcc 	andi	r2,r2,255
    3df8:	1080201c 	xori	r2,r2,128
    3dfc:	10bfe004 	addi	r2,r2,-128
    3e00:	10800bd8 	cmpnei	r2,r2,47
    3e04:	1000031e 	bne	r2,zero,3e14 <alt_find_file+0x70>
    {
      len -= 1;
    3e08:	e0bffc17 	ldw	r2,-16(fp)
    3e0c:	10bfffc4 	addi	r2,r2,-1
    3e10:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3e14:	e0bffc17 	ldw	r2,-16(fp)
    3e18:	1007883a 	mov	r3,r2
    3e1c:	e0bffe17 	ldw	r2,-8(fp)
    3e20:	1885883a 	add	r2,r3,r2
    3e24:	10800003 	ldbu	r2,0(r2)
    3e28:	10803fcc 	andi	r2,r2,255
    3e2c:	1080201c 	xori	r2,r2,128
    3e30:	10bfe004 	addi	r2,r2,-128
    3e34:	10800be0 	cmpeqi	r2,r2,47
    3e38:	10000a1e 	bne	r2,zero,3e64 <alt_find_file+0xc0>
    3e3c:	e0bffc17 	ldw	r2,-16(fp)
    3e40:	1007883a 	mov	r3,r2
    3e44:	e0bffe17 	ldw	r2,-8(fp)
    3e48:	1885883a 	add	r2,r3,r2
    3e4c:	10800003 	ldbu	r2,0(r2)
    3e50:	10803fcc 	andi	r2,r2,255
    3e54:	1080201c 	xori	r2,r2,128
    3e58:	10bfe004 	addi	r2,r2,-128
    3e5c:	1004c03a 	cmpne	r2,r2,zero
    3e60:	10000a1e 	bne	r2,zero,3e8c <alt_find_file+0xe8>
    3e64:	e0bffd17 	ldw	r2,-12(fp)
    3e68:	11000217 	ldw	r4,8(r2)
    3e6c:	e1bffc17 	ldw	r6,-16(fp)
    3e70:	e17ffe17 	ldw	r5,-8(fp)
    3e74:	0003fe00 	call	3fe0 <memcmp>
    3e78:	1004c03a 	cmpne	r2,r2,zero
    3e7c:	1000031e 	bne	r2,zero,3e8c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3e80:	e0bffd17 	ldw	r2,-12(fp)
    3e84:	e0bfff15 	stw	r2,-4(fp)
    3e88:	00000806 	br	3eac <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    3e8c:	e0bffd17 	ldw	r2,-12(fp)
    3e90:	10800017 	ldw	r2,0(r2)
    3e94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3e98:	00c00034 	movhi	r3,0
    3e9c:	18d81504 	addi	r3,r3,24660
    3ea0:	e0bffd17 	ldw	r2,-12(fp)
    3ea4:	10ffc91e 	bne	r2,r3,3dcc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3ea8:	e03fff15 	stw	zero,-4(fp)
    3eac:	e0bfff17 	ldw	r2,-4(fp)
}
    3eb0:	e037883a 	mov	sp,fp
    3eb4:	dfc00117 	ldw	ra,4(sp)
    3eb8:	df000017 	ldw	fp,0(sp)
    3ebc:	dec00204 	addi	sp,sp,8
    3ec0:	f800283a 	ret

00003ec4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3ec4:	defffa04 	addi	sp,sp,-24
    3ec8:	dfc00515 	stw	ra,20(sp)
    3ecc:	df000415 	stw	fp,16(sp)
    3ed0:	dc000315 	stw	r16,12(sp)
    3ed4:	df000304 	addi	fp,sp,12
    3ed8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3edc:	00bffa04 	movi	r2,-24
    3ee0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3ee4:	e03ffe15 	stw	zero,-8(fp)
    3ee8:	00002006 	br	3f6c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    3eec:	e13ffe17 	ldw	r4,-8(fp)
    3ef0:	04000034 	movhi	r16,0
    3ef4:	8416b504 	addi	r16,r16,23252
    3ef8:	01400304 	movi	r5,12
    3efc:	00044500 	call	4450 <__mulsi3>
    3f00:	1405883a 	add	r2,r2,r16
    3f04:	10800017 	ldw	r2,0(r2)
    3f08:	1004c03a 	cmpne	r2,r2,zero
    3f0c:	1000141e 	bne	r2,zero,3f60 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    3f10:	e13ffe17 	ldw	r4,-8(fp)
    3f14:	04000034 	movhi	r16,0
    3f18:	8416b504 	addi	r16,r16,23252
    3f1c:	01400304 	movi	r5,12
    3f20:	00044500 	call	4450 <__mulsi3>
    3f24:	1407883a 	add	r3,r2,r16
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    3f30:	00800034 	movhi	r2,0
    3f34:	10981904 	addi	r2,r2,24676
    3f38:	10c00017 	ldw	r3,0(r2)
    3f3c:	e0bffe17 	ldw	r2,-8(fp)
    3f40:	1880040e 	bge	r3,r2,3f54 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    3f44:	00c00034 	movhi	r3,0
    3f48:	18d81904 	addi	r3,r3,24676
    3f4c:	e0bffe17 	ldw	r2,-8(fp)
    3f50:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    3f54:	e0bffe17 	ldw	r2,-8(fp)
    3f58:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    3f5c:	00000606 	br	3f78 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3f60:	e0bffe17 	ldw	r2,-8(fp)
    3f64:	10800044 	addi	r2,r2,1
    3f68:	e0bffe15 	stw	r2,-8(fp)
    3f6c:	e0bffe17 	ldw	r2,-8(fp)
    3f70:	10800810 	cmplti	r2,r2,32
    3f74:	103fdd1e 	bne	r2,zero,3eec <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3f78:	e0bffd17 	ldw	r2,-12(fp)
}
    3f7c:	e037883a 	mov	sp,fp
    3f80:	dfc00217 	ldw	ra,8(sp)
    3f84:	df000117 	ldw	fp,4(sp)
    3f88:	dc000017 	ldw	r16,0(sp)
    3f8c:	dec00304 	addi	sp,sp,12
    3f90:	f800283a 	ret

00003f94 <atexit>:
    3f94:	200b883a 	mov	r5,r4
    3f98:	000d883a 	mov	r6,zero
    3f9c:	0009883a 	mov	r4,zero
    3fa0:	000f883a 	mov	r7,zero
    3fa4:	00041681 	jmpi	4168 <__register_exitproc>

00003fa8 <exit>:
    3fa8:	defffe04 	addi	sp,sp,-8
    3fac:	000b883a 	mov	r5,zero
    3fb0:	dc000015 	stw	r16,0(sp)
    3fb4:	dfc00115 	stw	ra,4(sp)
    3fb8:	2021883a 	mov	r16,r4
    3fbc:	00042a00 	call	42a0 <__call_exitprocs>
    3fc0:	00800034 	movhi	r2,0
    3fc4:	10982104 	addi	r2,r2,24708
    3fc8:	11000017 	ldw	r4,0(r2)
    3fcc:	20800f17 	ldw	r2,60(r4)
    3fd0:	10000126 	beq	r2,zero,3fd8 <exit+0x30>
    3fd4:	103ee83a 	callr	r2
    3fd8:	8009883a 	mov	r4,r16
    3fdc:	00044c80 	call	44c8 <_exit>

00003fe0 <memcmp>:
    3fe0:	00c000c4 	movi	r3,3
    3fe4:	1980032e 	bgeu	r3,r6,3ff4 <memcmp+0x14>
    3fe8:	2144b03a 	or	r2,r4,r5
    3fec:	10c4703a 	and	r2,r2,r3
    3ff0:	10000f26 	beq	r2,zero,4030 <memcmp+0x50>
    3ff4:	31ffffc4 	addi	r7,r6,-1
    3ff8:	3000061e 	bne	r6,zero,4014 <memcmp+0x34>
    3ffc:	00000a06 	br	4028 <memcmp+0x48>
    4000:	39ffffc4 	addi	r7,r7,-1
    4004:	00bfffc4 	movi	r2,-1
    4008:	21000044 	addi	r4,r4,1
    400c:	29400044 	addi	r5,r5,1
    4010:	38800526 	beq	r7,r2,4028 <memcmp+0x48>
    4014:	20c00003 	ldbu	r3,0(r4)
    4018:	28800003 	ldbu	r2,0(r5)
    401c:	18bff826 	beq	r3,r2,4000 <memcmp+0x20>
    4020:	1885c83a 	sub	r2,r3,r2
    4024:	f800283a 	ret
    4028:	0005883a 	mov	r2,zero
    402c:	f800283a 	ret
    4030:	180f883a 	mov	r7,r3
    4034:	20c00017 	ldw	r3,0(r4)
    4038:	28800017 	ldw	r2,0(r5)
    403c:	18bfed1e 	bne	r3,r2,3ff4 <memcmp+0x14>
    4040:	31bfff04 	addi	r6,r6,-4
    4044:	21000104 	addi	r4,r4,4
    4048:	29400104 	addi	r5,r5,4
    404c:	39bff936 	bltu	r7,r6,4034 <memcmp+0x54>
    4050:	003fe806 	br	3ff4 <memcmp+0x14>

00004054 <memcpy>:
    4054:	01c003c4 	movi	r7,15
    4058:	2007883a 	mov	r3,r4
    405c:	3980032e 	bgeu	r7,r6,406c <memcpy+0x18>
    4060:	2904b03a 	or	r2,r5,r4
    4064:	108000cc 	andi	r2,r2,3
    4068:	10000926 	beq	r2,zero,4090 <memcpy+0x3c>
    406c:	30000626 	beq	r6,zero,4088 <memcpy+0x34>
    4070:	30cd883a 	add	r6,r6,r3
    4074:	28800003 	ldbu	r2,0(r5)
    4078:	29400044 	addi	r5,r5,1
    407c:	18800005 	stb	r2,0(r3)
    4080:	18c00044 	addi	r3,r3,1
    4084:	30fffb1e 	bne	r6,r3,4074 <memcpy+0x20>
    4088:	2005883a 	mov	r2,r4
    408c:	f800283a 	ret
    4090:	3811883a 	mov	r8,r7
    4094:	200f883a 	mov	r7,r4
    4098:	28c00017 	ldw	r3,0(r5)
    409c:	31bffc04 	addi	r6,r6,-16
    40a0:	38c00015 	stw	r3,0(r7)
    40a4:	28800117 	ldw	r2,4(r5)
    40a8:	38800115 	stw	r2,4(r7)
    40ac:	28c00217 	ldw	r3,8(r5)
    40b0:	38c00215 	stw	r3,8(r7)
    40b4:	28800317 	ldw	r2,12(r5)
    40b8:	29400404 	addi	r5,r5,16
    40bc:	38800315 	stw	r2,12(r7)
    40c0:	39c00404 	addi	r7,r7,16
    40c4:	41bff436 	bltu	r8,r6,4098 <memcpy+0x44>
    40c8:	008000c4 	movi	r2,3
    40cc:	1180072e 	bgeu	r2,r6,40ec <memcpy+0x98>
    40d0:	1007883a 	mov	r3,r2
    40d4:	28800017 	ldw	r2,0(r5)
    40d8:	31bfff04 	addi	r6,r6,-4
    40dc:	29400104 	addi	r5,r5,4
    40e0:	38800015 	stw	r2,0(r7)
    40e4:	39c00104 	addi	r7,r7,4
    40e8:	19bffa36 	bltu	r3,r6,40d4 <memcpy+0x80>
    40ec:	3807883a 	mov	r3,r7
    40f0:	003fde06 	br	406c <memcpy+0x18>

000040f4 <strlen>:
    40f4:	208000cc 	andi	r2,r4,3
    40f8:	2011883a 	mov	r8,r4
    40fc:	1000161e 	bne	r2,zero,4158 <strlen+0x64>
    4100:	20c00017 	ldw	r3,0(r4)
    4104:	017fbff4 	movhi	r5,65279
    4108:	297fbfc4 	addi	r5,r5,-257
    410c:	01e02074 	movhi	r7,32897
    4110:	39e02004 	addi	r7,r7,-32640
    4114:	1945883a 	add	r2,r3,r5
    4118:	11c4703a 	and	r2,r2,r7
    411c:	00c6303a 	nor	r3,zero,r3
    4120:	1886703a 	and	r3,r3,r2
    4124:	18000c1e 	bne	r3,zero,4158 <strlen+0x64>
    4128:	280d883a 	mov	r6,r5
    412c:	380b883a 	mov	r5,r7
    4130:	21000104 	addi	r4,r4,4
    4134:	20800017 	ldw	r2,0(r4)
    4138:	1187883a 	add	r3,r2,r6
    413c:	1946703a 	and	r3,r3,r5
    4140:	0084303a 	nor	r2,zero,r2
    4144:	10c4703a 	and	r2,r2,r3
    4148:	103ff926 	beq	r2,zero,4130 <strlen+0x3c>
    414c:	20800007 	ldb	r2,0(r4)
    4150:	10000326 	beq	r2,zero,4160 <strlen+0x6c>
    4154:	21000044 	addi	r4,r4,1
    4158:	20800007 	ldb	r2,0(r4)
    415c:	103ffd1e 	bne	r2,zero,4154 <strlen+0x60>
    4160:	2205c83a 	sub	r2,r4,r8
    4164:	f800283a 	ret

00004168 <__register_exitproc>:
    4168:	defffa04 	addi	sp,sp,-24
    416c:	00800034 	movhi	r2,0
    4170:	10982104 	addi	r2,r2,24708
    4174:	dc000015 	stw	r16,0(sp)
    4178:	14000017 	ldw	r16,0(r2)
    417c:	dd000415 	stw	r20,16(sp)
    4180:	2829883a 	mov	r20,r5
    4184:	81405217 	ldw	r5,328(r16)
    4188:	dcc00315 	stw	r19,12(sp)
    418c:	dc800215 	stw	r18,8(sp)
    4190:	dc400115 	stw	r17,4(sp)
    4194:	dfc00515 	stw	ra,20(sp)
    4198:	2023883a 	mov	r17,r4
    419c:	3027883a 	mov	r19,r6
    41a0:	3825883a 	mov	r18,r7
    41a4:	28002526 	beq	r5,zero,423c <__register_exitproc+0xd4>
    41a8:	29000117 	ldw	r4,4(r5)
    41ac:	008007c4 	movi	r2,31
    41b0:	11002716 	blt	r2,r4,4250 <__register_exitproc+0xe8>
    41b4:	8800101e 	bne	r17,zero,41f8 <__register_exitproc+0x90>
    41b8:	2105883a 	add	r2,r4,r4
    41bc:	1085883a 	add	r2,r2,r2
    41c0:	20c00044 	addi	r3,r4,1
    41c4:	1145883a 	add	r2,r2,r5
    41c8:	0009883a 	mov	r4,zero
    41cc:	15000215 	stw	r20,8(r2)
    41d0:	28c00115 	stw	r3,4(r5)
    41d4:	2005883a 	mov	r2,r4
    41d8:	dfc00517 	ldw	ra,20(sp)
    41dc:	dd000417 	ldw	r20,16(sp)
    41e0:	dcc00317 	ldw	r19,12(sp)
    41e4:	dc800217 	ldw	r18,8(sp)
    41e8:	dc400117 	ldw	r17,4(sp)
    41ec:	dc000017 	ldw	r16,0(sp)
    41f0:	dec00604 	addi	sp,sp,24
    41f4:	f800283a 	ret
    41f8:	29802204 	addi	r6,r5,136
    41fc:	00800044 	movi	r2,1
    4200:	110e983a 	sll	r7,r2,r4
    4204:	30c04017 	ldw	r3,256(r6)
    4208:	2105883a 	add	r2,r4,r4
    420c:	1085883a 	add	r2,r2,r2
    4210:	1185883a 	add	r2,r2,r6
    4214:	19c6b03a 	or	r3,r3,r7
    4218:	14802015 	stw	r18,128(r2)
    421c:	14c00015 	stw	r19,0(r2)
    4220:	00800084 	movi	r2,2
    4224:	30c04015 	stw	r3,256(r6)
    4228:	88bfe31e 	bne	r17,r2,41b8 <__register_exitproc+0x50>
    422c:	30804117 	ldw	r2,260(r6)
    4230:	11c4b03a 	or	r2,r2,r7
    4234:	30804115 	stw	r2,260(r6)
    4238:	003fdf06 	br	41b8 <__register_exitproc+0x50>
    423c:	00800034 	movhi	r2,0
    4240:	10986904 	addi	r2,r2,24996
    4244:	100b883a 	mov	r5,r2
    4248:	80805215 	stw	r2,328(r16)
    424c:	003fd606 	br	41a8 <__register_exitproc+0x40>
    4250:	00800034 	movhi	r2,0
    4254:	10800004 	addi	r2,r2,0
    4258:	1000021e 	bne	r2,zero,4264 <__register_exitproc+0xfc>
    425c:	013fffc4 	movi	r4,-1
    4260:	003fdc06 	br	41d4 <__register_exitproc+0x6c>
    4264:	01006404 	movi	r4,400
    4268:	103ee83a 	callr	r2
    426c:	1007883a 	mov	r3,r2
    4270:	103ffa26 	beq	r2,zero,425c <__register_exitproc+0xf4>
    4274:	80805217 	ldw	r2,328(r16)
    4278:	180b883a 	mov	r5,r3
    427c:	18000115 	stw	zero,4(r3)
    4280:	18800015 	stw	r2,0(r3)
    4284:	80c05215 	stw	r3,328(r16)
    4288:	18006215 	stw	zero,392(r3)
    428c:	18006315 	stw	zero,396(r3)
    4290:	0009883a 	mov	r4,zero
    4294:	883fc826 	beq	r17,zero,41b8 <__register_exitproc+0x50>
    4298:	003fd706 	br	41f8 <__register_exitproc+0x90>

0000429c <register_fini>:
    429c:	f800283a 	ret

000042a0 <__call_exitprocs>:
    42a0:	00800034 	movhi	r2,0
    42a4:	10982104 	addi	r2,r2,24708
    42a8:	10800017 	ldw	r2,0(r2)
    42ac:	defff304 	addi	sp,sp,-52
    42b0:	df000b15 	stw	fp,44(sp)
    42b4:	d8800115 	stw	r2,4(sp)
    42b8:	00800034 	movhi	r2,0
    42bc:	10800004 	addi	r2,r2,0
    42c0:	1005003a 	cmpeq	r2,r2,zero
    42c4:	d8800215 	stw	r2,8(sp)
    42c8:	d8800117 	ldw	r2,4(sp)
    42cc:	dd400815 	stw	r21,32(sp)
    42d0:	dd000715 	stw	r20,28(sp)
    42d4:	10805204 	addi	r2,r2,328
    42d8:	dfc00c15 	stw	ra,48(sp)
    42dc:	ddc00a15 	stw	r23,40(sp)
    42e0:	dd800915 	stw	r22,36(sp)
    42e4:	dcc00615 	stw	r19,24(sp)
    42e8:	dc800515 	stw	r18,20(sp)
    42ec:	dc400415 	stw	r17,16(sp)
    42f0:	dc000315 	stw	r16,12(sp)
    42f4:	282b883a 	mov	r21,r5
    42f8:	2039883a 	mov	fp,r4
    42fc:	d8800015 	stw	r2,0(sp)
    4300:	2829003a 	cmpeq	r20,r5,zero
    4304:	d8800117 	ldw	r2,4(sp)
    4308:	14405217 	ldw	r17,328(r2)
    430c:	88001026 	beq	r17,zero,4350 <__call_exitprocs+0xb0>
    4310:	ddc00017 	ldw	r23,0(sp)
    4314:	88800117 	ldw	r2,4(r17)
    4318:	8c802204 	addi	r18,r17,136
    431c:	143fffc4 	addi	r16,r2,-1
    4320:	80000916 	blt	r16,zero,4348 <__call_exitprocs+0xa8>
    4324:	05bfffc4 	movi	r22,-1
    4328:	a000151e 	bne	r20,zero,4380 <__call_exitprocs+0xe0>
    432c:	8409883a 	add	r4,r16,r16
    4330:	2105883a 	add	r2,r4,r4
    4334:	1485883a 	add	r2,r2,r18
    4338:	10c02017 	ldw	r3,128(r2)
    433c:	a8c01126 	beq	r21,r3,4384 <__call_exitprocs+0xe4>
    4340:	843fffc4 	addi	r16,r16,-1
    4344:	85bff81e 	bne	r16,r22,4328 <__call_exitprocs+0x88>
    4348:	d8800217 	ldw	r2,8(sp)
    434c:	10003126 	beq	r2,zero,4414 <__call_exitprocs+0x174>
    4350:	dfc00c17 	ldw	ra,48(sp)
    4354:	df000b17 	ldw	fp,44(sp)
    4358:	ddc00a17 	ldw	r23,40(sp)
    435c:	dd800917 	ldw	r22,36(sp)
    4360:	dd400817 	ldw	r21,32(sp)
    4364:	dd000717 	ldw	r20,28(sp)
    4368:	dcc00617 	ldw	r19,24(sp)
    436c:	dc800517 	ldw	r18,20(sp)
    4370:	dc400417 	ldw	r17,16(sp)
    4374:	dc000317 	ldw	r16,12(sp)
    4378:	dec00d04 	addi	sp,sp,52
    437c:	f800283a 	ret
    4380:	8409883a 	add	r4,r16,r16
    4384:	88c00117 	ldw	r3,4(r17)
    4388:	2105883a 	add	r2,r4,r4
    438c:	1445883a 	add	r2,r2,r17
    4390:	18ffffc4 	addi	r3,r3,-1
    4394:	11800217 	ldw	r6,8(r2)
    4398:	1c001526 	beq	r3,r16,43f0 <__call_exitprocs+0x150>
    439c:	10000215 	stw	zero,8(r2)
    43a0:	303fe726 	beq	r6,zero,4340 <__call_exitprocs+0xa0>
    43a4:	00c00044 	movi	r3,1
    43a8:	1c06983a 	sll	r3,r3,r16
    43ac:	90804017 	ldw	r2,256(r18)
    43b0:	8cc00117 	ldw	r19,4(r17)
    43b4:	1884703a 	and	r2,r3,r2
    43b8:	10001426 	beq	r2,zero,440c <__call_exitprocs+0x16c>
    43bc:	90804117 	ldw	r2,260(r18)
    43c0:	1884703a 	and	r2,r3,r2
    43c4:	10000c1e 	bne	r2,zero,43f8 <__call_exitprocs+0x158>
    43c8:	2105883a 	add	r2,r4,r4
    43cc:	1485883a 	add	r2,r2,r18
    43d0:	11400017 	ldw	r5,0(r2)
    43d4:	e009883a 	mov	r4,fp
    43d8:	303ee83a 	callr	r6
    43dc:	88800117 	ldw	r2,4(r17)
    43e0:	98bfc81e 	bne	r19,r2,4304 <__call_exitprocs+0x64>
    43e4:	b8800017 	ldw	r2,0(r23)
    43e8:	147fd526 	beq	r2,r17,4340 <__call_exitprocs+0xa0>
    43ec:	003fc506 	br	4304 <__call_exitprocs+0x64>
    43f0:	8c000115 	stw	r16,4(r17)
    43f4:	003fea06 	br	43a0 <__call_exitprocs+0x100>
    43f8:	2105883a 	add	r2,r4,r4
    43fc:	1485883a 	add	r2,r2,r18
    4400:	11000017 	ldw	r4,0(r2)
    4404:	303ee83a 	callr	r6
    4408:	003ff406 	br	43dc <__call_exitprocs+0x13c>
    440c:	303ee83a 	callr	r6
    4410:	003ff206 	br	43dc <__call_exitprocs+0x13c>
    4414:	88800117 	ldw	r2,4(r17)
    4418:	1000081e 	bne	r2,zero,443c <__call_exitprocs+0x19c>
    441c:	89000017 	ldw	r4,0(r17)
    4420:	20000726 	beq	r4,zero,4440 <__call_exitprocs+0x1a0>
    4424:	b9000015 	stw	r4,0(r23)
    4428:	8809883a 	mov	r4,r17
    442c:	00000000 	call	0 <__alt_mem_sdram>
    4430:	bc400017 	ldw	r17,0(r23)
    4434:	883fb71e 	bne	r17,zero,4314 <__call_exitprocs+0x74>
    4438:	003fc506 	br	4350 <__call_exitprocs+0xb0>
    443c:	89000017 	ldw	r4,0(r17)
    4440:	882f883a 	mov	r23,r17
    4444:	2023883a 	mov	r17,r4
    4448:	883fb21e 	bne	r17,zero,4314 <__call_exitprocs+0x74>
    444c:	003fc006 	br	4350 <__call_exitprocs+0xb0>

00004450 <__mulsi3>:
    4450:	20000a26 	beq	r4,zero,447c <__mulsi3+0x2c>
    4454:	0007883a 	mov	r3,zero
    4458:	2080004c 	andi	r2,r4,1
    445c:	1005003a 	cmpeq	r2,r2,zero
    4460:	2008d07a 	srli	r4,r4,1
    4464:	1000011e 	bne	r2,zero,446c <__mulsi3+0x1c>
    4468:	1947883a 	add	r3,r3,r5
    446c:	294b883a 	add	r5,r5,r5
    4470:	203ff91e 	bne	r4,zero,4458 <__mulsi3+0x8>
    4474:	1805883a 	mov	r2,r3
    4478:	f800283a 	ret
    447c:	0007883a 	mov	r3,zero
    4480:	1805883a 	mov	r2,r3
    4484:	f800283a 	ret

00004488 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    4488:	defffd04 	addi	sp,sp,-12
    448c:	df000215 	stw	fp,8(sp)
    4490:	df000204 	addi	fp,sp,8
    4494:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    4498:	e0bfff17 	ldw	r2,-4(fp)
    449c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    44a0:	e0bffe17 	ldw	r2,-8(fp)
    44a4:	1005003a 	cmpeq	r2,r2,zero
    44a8:	1000021e 	bne	r2,zero,44b4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    44ac:	002af070 	cmpltui	zero,zero,43969
    44b0:	00000106 	br	44b8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    44b4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    44b8:	e037883a 	mov	sp,fp
    44bc:	df000017 	ldw	fp,0(sp)
    44c0:	dec00104 	addi	sp,sp,4
    44c4:	f800283a 	ret

000044c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    44c8:	defffd04 	addi	sp,sp,-12
    44cc:	dfc00215 	stw	ra,8(sp)
    44d0:	df000115 	stw	fp,4(sp)
    44d4:	df000104 	addi	fp,sp,4
    44d8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    44dc:	e13fff17 	ldw	r4,-4(fp)
    44e0:	00044880 	call	4488 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    44e4:	003fff06 	br	44e4 <_exit+0x1c>
    44e8:	0000429c 	xori	zero,zero,266
