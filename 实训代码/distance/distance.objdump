
distance.elf:     file format elf32-littlenios2
distance.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006440 memsz 0x000066fc flags rwx
    LOAD off    0x00008000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000046ec  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c4  000048a0  000048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  00004964  00004964  00005964  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002bc  00006460  00006460  00007460  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000650  00000000  00000000  00008028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000c89  00000000  00000000  00008678  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d0bd  00000000  00000000  00009301  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003033  00000000  00000000  000163be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008278  00000000  00000000  000193f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e54  00000000  00000000  0002166c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d3e  00000000  00000000  000224c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015fc  00000000  00000000  000231fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000247fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000070  00000000  00000000  00024810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00026b63  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00026b66  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00026b72  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00026b73  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00026b74  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00026b7f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00026b8a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00026b95  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000003  00000000  00000000  00026b9d  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000e0f1e  00000000  00000000  00026ba0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000048a0 l    d  .rodata	00000000 .rodata
00004964 l    d  .rwdata	00000000 .rwdata
00006460 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00006428 l     O .rwdata	00000001 mode
00000000 l    df *ABS*	00000000 motor_setting.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 ultrasound.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004964 l     O .rwdata	000000c8 epcs_flash_controller_0
00004a2c l     O .rwdata	00001060 jtag_uart_0
00005a8c l     O .rwdata	000000c4 New_UltraSound0
00005b50 l     O .rwdata	000000c4 New_UltraSound1
00005c14 l     O .rwdata	000000c4 New_UltraSound2
00005cd8 l     O .rwdata	000000c4 New_UltraSound3
00005d9c l     O .rwdata	000000c4 uart_0
00000c44 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00000d08 l     F .text	00000288 alt_epcs_flash_query
00000cd0 l     F .text	00000038 alt_flash_device_register
00000f90 l     F .text	00000108 alt_epcs_flash_memcmp
00001418 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001868 l     F .text	00000228 altera_avalon_jtag_uart_irq
00001a90 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000210c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000023cc l     F .text	0000009c altera_avalon_uart_irq
00002468 l     F .text	000000e0 altera_avalon_uart_rxirq
00002548 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00002934 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00002b5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
00002d14 l     F .text	00000038 epcs_await_wip_released
00002d4c l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000034e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003544 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00003624 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000381c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000396c l     F .text	000000f8 alt_file_locked
00003bf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00006008 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004650 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000483c l     F .text	00000040 alt_sim_halt
00006464 g     O .bss	00000004 phase2
00001318 g     F .text	00000090 alt_epcs_flash_get_info
00000a8c g     F .text	0000006c alt_main
0000648c g     O .bss	00000100 alt_irq
000002e0 g     F .text	0000003c turn_right
0000641c g     O .rwdata	00000004 duty4
00000654 g     F .text	00000034 ultrasound_init
00006418 g     O .rwdata	00000004 duty3
00000000  w      *UND*	00000000 __errno
00002c1c g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
00006488 g     O .bss	00000004 errno
00006408 g     O .rwdata	00000004 duty1
00006478 g     O .bss	00000004 alt_argv
0000e408 g       *ABS*	00000000 _gp
00005e88 g     O .rwdata	00000180 alt_fd_list
00002f20 g     F .text	00000064 epcs_write_status_register
000040c4 g     F .text	00000094 alt_find_dev
00004408 g     F .text	000000a0 memcpy
000038f4 g     F .text	00000078 alt_io_redirect
00006468 g     O .bss	00000004 phase3
000048a0 g       *ABS*	00000000 __DTOR_END__
000014ac g     F .text	0000011c alt_epcs_flash_write_block
00001ca8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000394 g     F .text	00000024 standby
00006440 g     O .rwdata	00000004 alt_max_fd
000013a8 g     F .text	00000070 alt_epcs_flash_erase_block
0000645c g     O .rwdata	00000004 _global_impure_ptr
00003238 g     F .text	00000058 epcs_exit_4_bytes_mode
00006414 g     O .rwdata	00000004 enable1
0000671c g       *ABS*	00000000 __bss_end
00000994 g     F .text	000000f8 alt_iic_isr_register
00003d60 g     F .text	0000010c alt_tick
000002a4 g     F .text	0000003c turn_left
00002304 g     F .text	000000c8 altera_avalon_uart_init
0000094c g     F .text	00000048 alt_ic_irq_enabled
00003cc8 g     F .text	00000098 alt_alarm_stop
00006470 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00005e60 g     O .rwdata	00000028 alt_dev_null
00006438 g     O .rwdata	00000008 alt_dev_list
000030f4 g     F .text	0000006c epcs_read_electronic_signature
0000671c g       *ABS*	00000000 end
00002994 g     F .text	000001c8 altera_avalon_uart_write
0000024c g     F .text	00000058 callback_func
000017a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000489c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000217c g     F .text	00000090 alt_avalon_timer_sc_init
00002264 g     F .text	00000058 altera_avalon_uart_write_fd
000005f0 g     F .text	00000064 uart_receive_byte
000022bc g     F .text	00000048 altera_avalon_uart_close_fd
00001ecc g     F .text	00000240 altera_avalon_jtag_uart_write
00000548 g     F .text	00000040 uart_init
00004654 g     F .text	000001b0 __call_exitprocs
000001b4 g     F .text	00000038 _start
00006480 g     O .bss	00000004 _alt_tick_rate
00006410 g     O .rwdata	00000004 period1
00003e8c g     F .text	00000238 alt_avalon_spi_command
00006484 g     O .bss	00000004 _alt_nticks
00000b2c g     F .text	00000118 alt_sys_init
0000451c g     F .text	00000134 __register_exitproc
00001b40 g     F .text	00000074 altera_avalon_jtag_uart_close
00004804 g     F .text	00000038 __mulsi3
00002bbc g     F .text	00000060 epcs_read_status_register
00001660 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00004278 g     F .text	000000d0 alt_get_fd
0000031c g     F .text	0000003c forward
00003160 g     F .text	00000080 epcs_read_device_id
00004394 g     F .text	00000074 memcmp
00001710 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000671c g       *ABS*	00000000 __alt_stack_base
00001758 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00000688 g     F .text	00000138 ultrasound_read
00006424 g     O .rwdata	00000004 enable2
00000358 g     F .text	0000003c backward
00004158 g     F .text	00000120 alt_find_file
00003570 g     F .text	000000b4 alt_dev_llist_insert
00006448 g     O .rwdata	00000008 alt_flash_dev_list
00006460 g       *ABS*	00000000 __bss_start
000003b8 g     F .text	00000018 main
0000647c g     O .bss	00000004 alt_envp
000016b8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000658c g     O .bss	00000190 _atexit0
00006444 g     O .rwdata	00000004 alt_errno
00006460 g     O .bss	00000004 phase1
000048a0 g       *ABS*	00000000 __CTOR_END__
00001098 g     F .text	00000280 alt_epcs_flash_write
000048a0 g       *ABS*	00000000 __DTOR_LIST__
0000640c g     O .rwdata	00000004 duty2
00000af8 g     F .text	00000034 alt_irq_init
00003c50 g     F .text	00000078 alt_release_fd
00006420 g     O .rwdata	00000004 period2
00004348 g     F .text	00000014 atexit
00006458 g     O .rwdata	00000004 _impure_ptr
00006474 g     O .bss	00000004 alt_argc
000036e8 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00006430 g     O .rwdata	00000008 alt_fs_list
00000588 g     F .text	00000068 uart_send_byte
0000048c g     F .text	000000bc right_motor_setting
00002d84 g     F .text	0000014c epcs_read_buffer
00000c7c g     F .text	00000054 alt_epcs_flash_init
000007c0 g     F .text	00000050 alt_ic_isr_register
00006460 g       *ABS*	00000000 _edata
0000220c g     F .text	00000058 altera_avalon_uart_read_fd
000003d0 g     F .text	000000bc left_motor_setting
0000671c g       *ABS*	00000000 _end
0000646c g     O .bss	00000004 phase4
0000374c g     F .text	0000007c alt_flash_open_dev
00001bb4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000008ac g     F .text	000000a0 alt_ic_irq_disable
000001ec g     F .text	00000060 initialize
000031e0 g     F .text	00000058 epcs_enter_4_bytes_mode
00003e6c g     F .text	00000020 altera_nios2_qsys_irq_init
0000435c g     F .text	00000038 exit
000037c8 g     F .text	00000054 alt_flash_close_dev
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000026a4 g     F .text	00000060 altera_avalon_uart_close
0000487c g     F .text	00000020 _exit
00003290 g     F .text	00000154 alt_alarm_start
000044a8 g     F .text	00000074 strlen
00002ed0 g     F .text	00000050 epcs_write_enable
00003a64 g     F .text	0000018c open
0000642c g     O .rwdata	00000004 alt_priority_mask
00000810 g     F .text	0000009c alt_ic_irq_enable
00002704 g     F .text	00000230 altera_avalon_uart_read
000015c8 g     F .text	00000098 alt_epcs_flash_read
00006450 g     O .rwdata	00000008 alt_alarm_list
00003684 g     F .text	00000064 _do_ctors
000033e4 g     F .text	00000100 close
00000000  w      *UND*	00000000 free
00002f84 g     F .text	00000170 epcs_write_buffer



Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18d92304 	addi	r3,r3,25740
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18d92304 	addi	r3,r3,25740
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6b90214 	ori	gp,gp,58376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10991814 	ori	r2,r2,25696

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18d9c714 	ori	r3,r3,26396

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e4:	0000a8c0 	call	a8c <alt_main>

000001e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1e8:	003fff06 	br	1e8 <alt_after_alt_main>

000001ec <initialize>:
volatile static char mode = 1;

void callback_func();

void initialize(void)
{
     1ec:	defffd04 	addi	sp,sp,-12
     1f0:	dfc00215 	stw	ra,8(sp)
     1f4:	df000115 	stw	fp,4(sp)
     1f8:	df000104 	addi	fp,sp,4
    //TODO set up interrupt handler for button presses
    //Do not use a while loop here!
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x02);
     1fc:	00c08074 	movhi	r3,513
     200:	18e8ee04 	addi	r3,r3,-23624
     204:	00800084 	movi	r2,2
     208:	18800035 	stwio	r2,0(r3)
	alt_ic_isr_register(KEY_IRQ_INTERRUPT_CONTROLLER_ID, KEY_IRQ, callback_func, NULL, 0 );
     20c:	d8000015 	stw	zero,0(sp)
     210:	0009883a 	mov	r4,zero
     214:	01400044 	movi	r5,1
     218:	01800034 	movhi	r6,0
     21c:	31809304 	addi	r6,r6,588
     220:	000f883a 	mov	r7,zero
     224:	00007c00 	call	7c0 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,1);
     228:	00c08074 	movhi	r3,513
     22c:	18e8ef04 	addi	r3,r3,-23620
     230:	00800044 	movi	r2,1
     234:	18800035 	stwio	r2,0(r3)
}
     238:	e037883a 	mov	sp,fp
     23c:	dfc00117 	ldw	ra,4(sp)
     240:	df000017 	ldw	fp,0(sp)
     244:	dec00204 	addi	sp,sp,8
     248:	f800283a 	ret

0000024c <callback_func>:


//TODO create interrupt callback function that reverses the sliding pattern
void callback_func(){
     24c:	deffff04 	addi	sp,sp,-4
     250:	df000015 	stw	fp,0(sp)
     254:	d839883a 	mov	fp,sp
   //Now handle the actual button press
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 1);
     258:	00c08074 	movhi	r3,513
     25c:	18e8ef04 	addi	r3,r3,-23620
     260:	00800044 	movi	r2,1
     264:	18800035 	stwio	r2,0(r3)
	if(mode == 1)
     268:	d0a00803 	ldbu	r2,-32736(gp)
     26c:	10803fcc 	andi	r2,r2,255
     270:	1080201c 	xori	r2,r2,128
     274:	10bfe004 	addi	r2,r2,-128
     278:	10800058 	cmpnei	r2,r2,1
     27c:	1000031e 	bne	r2,zero,28c <callback_func+0x40>
		mode = 2;
     280:	00800084 	movi	r2,2
     284:	d0a00805 	stb	r2,-32736(gp)
     288:	00000206 	br	294 <callback_func+0x48>
	else
		mode=1;
     28c:	00800044 	movi	r2,1
     290:	d0a00805 	stb	r2,-32736(gp)
}
     294:	e037883a 	mov	sp,fp
     298:	df000017 	ldw	fp,0(sp)
     29c:	dec00104 	addi	sp,sp,4
     2a0:	f800283a 	ret

000002a4 <turn_left>:

void turn_left()
{
     2a4:	deffff04 	addi	sp,sp,-4
     2a8:	df000015 	stw	fp,0(sp)
     2ac:	d839883a 	mov	fp,sp
	duty2=0x9c4;
     2b0:	00827104 	movi	r2,2500
     2b4:	d0a00115 	stw	r2,-32764(gp)
	duty3=0x9c4;
     2b8:	00827104 	movi	r2,2500
     2bc:	d0a00415 	stw	r2,-32752(gp)
	enable1=0x2;
     2c0:	00800084 	movi	r2,2
     2c4:	d0a00315 	stw	r2,-32756(gp)
	enable2=0x1;
     2c8:	00800044 	movi	r2,1
     2cc:	d0a00715 	stw	r2,-32740(gp)
}
     2d0:	e037883a 	mov	sp,fp
     2d4:	df000017 	ldw	fp,0(sp)
     2d8:	dec00104 	addi	sp,sp,4
     2dc:	f800283a 	ret

000002e0 <turn_right>:

void turn_right()
{
     2e0:	deffff04 	addi	sp,sp,-4
     2e4:	df000015 	stw	fp,0(sp)
     2e8:	d839883a 	mov	fp,sp
	duty1=0x9c4;
     2ec:	00827104 	movi	r2,2500
     2f0:	d0a00015 	stw	r2,-32768(gp)
	duty3=0x9c4;
     2f4:	00827104 	movi	r2,2500
     2f8:	d0a00415 	stw	r2,-32752(gp)
	enable1=0x1;
     2fc:	00800044 	movi	r2,1
     300:	d0a00315 	stw	r2,-32756(gp)
	enable2=0x2;
     304:	00800084 	movi	r2,2
     308:	d0a00715 	stw	r2,-32740(gp)
}
     30c:	e037883a 	mov	sp,fp
     310:	df000017 	ldw	fp,0(sp)
     314:	dec00104 	addi	sp,sp,4
     318:	f800283a 	ret

0000031c <forward>:

void forward()
{
     31c:	deffff04 	addi	sp,sp,-4
     320:	df000015 	stw	fp,0(sp)
     324:	d839883a 	mov	fp,sp
	duty1=0x9c4;
     328:	00827104 	movi	r2,2500
     32c:	d0a00015 	stw	r2,-32768(gp)
	duty3=0x9c4;
     330:	00827104 	movi	r2,2500
     334:	d0a00415 	stw	r2,-32752(gp)
	enable1=0x1;
     338:	00800044 	movi	r2,1
     33c:	d0a00315 	stw	r2,-32756(gp)
	enable2=0x1;
     340:	00800044 	movi	r2,1
     344:	d0a00715 	stw	r2,-32740(gp)
}
     348:	e037883a 	mov	sp,fp
     34c:	df000017 	ldw	fp,0(sp)
     350:	dec00104 	addi	sp,sp,4
     354:	f800283a 	ret

00000358 <backward>:

void backward()
{
     358:	deffff04 	addi	sp,sp,-4
     35c:	df000015 	stw	fp,0(sp)
     360:	d839883a 	mov	fp,sp
	duty1=0x9c4;
     364:	00827104 	movi	r2,2500
     368:	d0a00015 	stw	r2,-32768(gp)
	duty3=0x9c4;
     36c:	00827104 	movi	r2,2500
     370:	d0a00415 	stw	r2,-32752(gp)
	enable1=0x2;
     374:	00800084 	movi	r2,2
     378:	d0a00315 	stw	r2,-32756(gp)
	enable2=0x2;
     37c:	00800084 	movi	r2,2
     380:	d0a00715 	stw	r2,-32740(gp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <standby>:

void standby()
{
     394:	deffff04 	addi	sp,sp,-4
     398:	df000015 	stw	fp,0(sp)
     39c:	d839883a 	mov	fp,sp
	enable1=0x0;
     3a0:	d0200315 	stw	zero,-32756(gp)
	enable2=0x0;
     3a4:	d0200715 	stw	zero,-32740(gp)
}
     3a8:	e037883a 	mov	sp,fp
     3ac:	df000017 	ldw	fp,0(sp)
     3b0:	dec00104 	addi	sp,sp,4
     3b4:	f800283a 	ret

000003b8 <main>:

int main()
{
     3b8:	defff804 	addi	sp,sp,-32
     3bc:	dfc00715 	stw	ra,28(sp)
     3c0:	df000615 	stw	fp,24(sp)
     3c4:	df000604 	addi	fp,sp,24
//	 ultrasound_init(Address0);
//	 ultrasound_init(Address1);
//	 ultrasound_init(Address2);

	 initialize();//interrupts;
     3c8:	00001ec0 	call	1ec <initialize>
	 while(1)
	 {
//		 printf("0 : %f\n",ultrasound_read(Address0, 2)*340/1000.0f/1000.0f);
//		 printf("1 : %f\n",ultrasound_read(Address1, 2)*340/1000.0f/1000.0f);
//		 printf("2 : %f\n \n",ultrasound_read(Address2, 2)*340/1000.0f/1000.0f);
	 }
     3cc:	003fff06 	br	3cc <main+0x14>

000003d0 <left_motor_setting>:

#include "motor_setting.h"

void left_motor_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
{
     3d0:	defff504 	addi	sp,sp,-44
     3d4:	df000a15 	stw	fp,40(sp)
     3d8:	df000a04 	addi	fp,sp,40
     3dc:	e13ffc15 	stw	r4,-16(fp)
     3e0:	e17ffd15 	stw	r5,-12(fp)
     3e4:	e1bffe15 	stw	r6,-8(fp)
     3e8:	e1ffff15 	stw	r7,-4(fp)
	unsigned long * pwm_en= (unsigned long *)PWM_EN;
     3ec:	00808074 	movhi	r2,513
     3f0:	10a8b004 	addi	r2,r2,-23872
     3f4:	e0bffb15 	stw	r2,-20(fp)
	unsigned long * pwm_period=(unsigned long *)PWM_PERIOD;
     3f8:	00808074 	movhi	r2,513
     3fc:	10a8b104 	addi	r2,r2,-23868
     400:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_phase1=(unsigned long *)PWM_PHASE1;
     404:	00808074 	movhi	r2,513
     408:	10a8b404 	addi	r2,r2,-23856
     40c:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_phase2=(unsigned long *)PWM_PHASE2;
     410:	00808074 	movhi	r2,513
     414:	10a8b504 	addi	r2,r2,-23852
     418:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_duty1=(unsigned long *)PWM_DUTY1;
     41c:	00808074 	movhi	r2,513
     420:	10a8b204 	addi	r2,r2,-23864
     424:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_duty2=(unsigned long *)PWM_DUTY2;
     428:	00808074 	movhi	r2,513
     42c:	10a8b304 	addi	r2,r2,-23860
     430:	e0bff615 	stw	r2,-40(fp)

	* pwm_en=enable;
     434:	e0fffb17 	ldw	r3,-20(fp)
     438:	e0800217 	ldw	r2,8(fp)
     43c:	18800015 	stw	r2,0(r3)
	* pwm_period=period;
     440:	e0fffa17 	ldw	r3,-24(fp)
     444:	e0800117 	ldw	r2,4(fp)
     448:	18800015 	stw	r2,0(r3)
	* pwm_phase1=phase1;
     44c:	e0fff917 	ldw	r3,-28(fp)
     450:	e0bffc17 	ldw	r2,-16(fp)
     454:	18800015 	stw	r2,0(r3)
	* pwm_phase2=phase2;
     458:	e0fff817 	ldw	r3,-32(fp)
     45c:	e0bffe17 	ldw	r2,-8(fp)
     460:	18800015 	stw	r2,0(r3)
	* pwm_duty1=duty1;
     464:	e0fff717 	ldw	r3,-36(fp)
     468:	e0bffd17 	ldw	r2,-12(fp)
     46c:	18800015 	stw	r2,0(r3)
	* pwm_duty2=duty2;
     470:	e0fff617 	ldw	r3,-40(fp)
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	18800015 	stw	r2,0(r3)

}
     47c:	e037883a 	mov	sp,fp
     480:	df000017 	ldw	fp,0(sp)
     484:	dec00104 	addi	sp,sp,4
     488:	f800283a 	ret

0000048c <right_motor_setting>:

void right_motor_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
{
     48c:	defff504 	addi	sp,sp,-44
     490:	df000a15 	stw	fp,40(sp)
     494:	df000a04 	addi	fp,sp,40
     498:	e13ffc15 	stw	r4,-16(fp)
     49c:	e17ffd15 	stw	r5,-12(fp)
     4a0:	e1bffe15 	stw	r6,-8(fp)
     4a4:	e1ffff15 	stw	r7,-4(fp)
	unsigned long * pwm_en= (unsigned long *)A_PWM_EN;
     4a8:	00808074 	movhi	r2,513
     4ac:	10a8a804 	addi	r2,r2,-23904
     4b0:	e0bffb15 	stw	r2,-20(fp)
	unsigned long * pwm_period=(unsigned long *)A_PWM_PERIOD;
     4b4:	00808074 	movhi	r2,513
     4b8:	10a8a904 	addi	r2,r2,-23900
     4bc:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_phase1=(unsigned long *)A_PWM_PHASE1;
     4c0:	00808074 	movhi	r2,513
     4c4:	10a8ac04 	addi	r2,r2,-23888
     4c8:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_phase2=(unsigned long *)A_PWM_PHASE2;
     4cc:	00808074 	movhi	r2,513
     4d0:	10a8ad04 	addi	r2,r2,-23884
     4d4:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_duty1=(unsigned long *)A_PWM_DUTY1;
     4d8:	00808074 	movhi	r2,513
     4dc:	10a8aa04 	addi	r2,r2,-23896
     4e0:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_duty2=(unsigned long *)A_PWM_DUTY2;
     4e4:	00808074 	movhi	r2,513
     4e8:	10a8ab04 	addi	r2,r2,-23892
     4ec:	e0bff615 	stw	r2,-40(fp)

	* pwm_en=enable;
     4f0:	e0fffb17 	ldw	r3,-20(fp)
     4f4:	e0800217 	ldw	r2,8(fp)
     4f8:	18800015 	stw	r2,0(r3)
	* pwm_period=period;
     4fc:	e0fffa17 	ldw	r3,-24(fp)
     500:	e0800117 	ldw	r2,4(fp)
     504:	18800015 	stw	r2,0(r3)
	* pwm_phase1=phase1;
     508:	e0fff917 	ldw	r3,-28(fp)
     50c:	e0bffc17 	ldw	r2,-16(fp)
     510:	18800015 	stw	r2,0(r3)
	* pwm_phase2=phase2;
     514:	e0fff817 	ldw	r3,-32(fp)
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	18800015 	stw	r2,0(r3)
	* pwm_duty1=duty1;
     520:	e0fff717 	ldw	r3,-36(fp)
     524:	e0bffd17 	ldw	r2,-12(fp)
     528:	18800015 	stw	r2,0(r3)
	* pwm_duty2=duty2;
     52c:	e0fff617 	ldw	r3,-40(fp)
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	18800015 	stw	r2,0(r3)

}
     538:	e037883a 	mov	sp,fp
     53c:	df000017 	ldw	fp,0(sp)
     540:	dec00104 	addi	sp,sp,4
     544:	f800283a 	ret

00000548 <uart_init>:

  Remarks:
    None
  ***************************************************************************/
void uart_init(long Address, unsigned char flag)
{
     548:	defffd04 	addi	sp,sp,-12
     54c:	df000215 	stw	fp,8(sp)
     550:	df000204 	addi	fp,sp,8
     554:	e13ffe15 	stw	r4,-8(fp)
     558:	e17fff05 	stb	r5,-4(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL(Address, flag);
     55c:	e0bffe17 	ldw	r2,-8(fp)
     560:	10800304 	addi	r2,r2,12
     564:	e0ffff03 	ldbu	r3,-4(fp)
     568:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_STATUS(Address, 0x00);
     56c:	e0bffe17 	ldw	r2,-8(fp)
     570:	10800204 	addi	r2,r2,8
     574:	10000035 	stwio	zero,0(r2)
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <uart_send_byte>:

  Remarks:
    None
  ***************************************************************************/
void uart_send_byte(long Address, unsigned char data)
{
     588:	defffc04 	addi	sp,sp,-16
     58c:	df000315 	stw	fp,12(sp)
     590:	df000304 	addi	fp,sp,12
     594:	e13ffe15 	stw	r4,-8(fp)
     598:	e17fff05 	stb	r5,-4(fp)
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	10800104 	addi	r2,r2,4
     5a4:	e0ffff03 	ldbu	r3,-4(fp)
     5a8:	10c00035 	stwio	r3,0(r2)
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     5ac:	e0bffe17 	ldw	r2,-8(fp)
     5b0:	10800204 	addi	r2,r2,8
     5b4:	10800037 	ldwio	r2,0(r2)
     5b8:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0040))
     5bc:	00000406 	br	5d0 <uart_send_byte+0x48>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     5c0:	e0bffe17 	ldw	r2,-8(fp)
     5c4:	10800204 	addi	r2,r2,8
     5c8:	10800037 	ldwio	r2,0(r2)
     5cc:	e0bffd15 	stw	r2,-12(fp)
void uart_send_byte(long Address, unsigned char data)
{
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0040))
     5d0:	e0bffd17 	ldw	r2,-12(fp)
     5d4:	1080100c 	andi	r2,r2,64
     5d8:	1005003a 	cmpeq	r2,r2,zero
     5dc:	103ff81e 	bne	r2,zero,5c0 <uart_send_byte+0x38>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
}
     5e0:	e037883a 	mov	sp,fp
     5e4:	df000017 	ldw	fp,0(sp)
     5e8:	dec00104 	addi	sp,sp,4
     5ec:	f800283a 	ret

000005f0 <uart_receive_byte>:

  Remarks:
    None
  ***************************************************************************/
unsigned char uart_receive_byte(long Address)
{
     5f0:	defffc04 	addi	sp,sp,-16
     5f4:	df000315 	stw	fp,12(sp)
     5f8:	df000304 	addi	fp,sp,12
     5fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     600:	e0bfff17 	ldw	r2,-4(fp)
     604:	10800204 	addi	r2,r2,8
     608:	10800037 	ldwio	r2,0(r2)
     60c:	e0bffe15 	stw	r2,-8(fp)
    while(!(status&0x0080))
     610:	00000406 	br	624 <uart_receive_byte+0x34>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	10800204 	addi	r2,r2,8
     61c:	10800037 	ldwio	r2,0(r2)
     620:	e0bffe15 	stw	r2,-8(fp)
unsigned char uart_receive_byte(long Address)
{
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0080))
     624:	e0bffe17 	ldw	r2,-8(fp)
     628:	1080200c 	andi	r2,r2,128
     62c:	1005003a 	cmpeq	r2,r2,zero
     630:	103ff81e 	bne	r2,zero,614 <uart_receive_byte+0x24>
    {
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
    res=IORD_ALTERA_AVALON_UART_RXDATA(Address);
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	10800037 	ldwio	r2,0(r2)
     63c:	e0bffd05 	stb	r2,-12(fp)
    return res;
     640:	e0bffd03 	ldbu	r2,-12(fp)
}
     644:	e037883a 	mov	sp,fp
     648:	df000017 	ldw	fp,0(sp)
     64c:	dec00104 	addi	sp,sp,4
     650:	f800283a 	ret

00000654 <ultrasound_init>:

  Remarks:
    None
  ***************************************************************************/
void ultrasound_init(long Address)
{
     654:	defffd04 	addi	sp,sp,-12
     658:	dfc00215 	stw	ra,8(sp)
     65c:	df000115 	stw	fp,4(sp)
     660:	df000104 	addi	fp,sp,4
     664:	e13fff15 	stw	r4,-4(fp)
	uart_init(Address, 0x00);
     668:	e13fff17 	ldw	r4,-4(fp)
     66c:	000b883a 	mov	r5,zero
     670:	00005480 	call	548 <uart_init>
}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <ultrasound_read>:

  Remarks:
    Distance in meter
  ***************************************************************************/
unsigned int ultrasound_read(long Address, unsigned char settings)
{
     688:	defffa04 	addi	sp,sp,-24
     68c:	dfc00515 	stw	ra,20(sp)
     690:	df000415 	stw	fp,16(sp)
     694:	df000404 	addi	fp,sp,16
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff05 	stb	r5,-4(fp)
	unsigned int i;
	unsigned char res_l, res_h;
	uart_send_byte(Address, 0xe8);
     6a0:	e13ffe17 	ldw	r4,-8(fp)
     6a4:	01403a04 	movi	r5,232
     6a8:	00005880 	call	588 <uart_send_byte>
	for (i = 0; i < 2000; i++)
     6ac:	e03ffd15 	stw	zero,-12(fp)
     6b0:	00000306 	br	6c0 <ultrasound_read+0x38>
     6b4:	e0bffd17 	ldw	r2,-12(fp)
     6b8:	10800044 	addi	r2,r2,1
     6bc:	e0bffd15 	stw	r2,-12(fp)
     6c0:	e0bffd17 	ldw	r2,-12(fp)
     6c4:	1081f430 	cmpltui	r2,r2,2000
     6c8:	103ffa1e 	bne	r2,zero,6b4 <ultrasound_read+0x2c>
		;
	uart_send_byte(Address, 0x02);
     6cc:	e13ffe17 	ldw	r4,-8(fp)
     6d0:	01400084 	movi	r5,2
     6d4:	00005880 	call	588 <uart_send_byte>
	for (i = 0; i < 2000; i++)
     6d8:	e03ffd15 	stw	zero,-12(fp)
     6dc:	00000306 	br	6ec <ultrasound_read+0x64>
     6e0:	e0bffd17 	ldw	r2,-12(fp)
     6e4:	10800044 	addi	r2,r2,1
     6e8:	e0bffd15 	stw	r2,-12(fp)
     6ec:	e0bffd17 	ldw	r2,-12(fp)
     6f0:	1081f430 	cmpltui	r2,r2,2000
     6f4:	103ffa1e 	bne	r2,zero,6e0 <ultrasound_read+0x58>
		;
	if (settings==1)
     6f8:	e0bfff03 	ldbu	r2,-4(fp)
     6fc:	10800058 	cmpnei	r2,r2,1
     700:	1000041e 	bne	r2,zero,714 <ultrasound_read+0x8c>
		uart_send_byte(Address, 0xb8);
     704:	e13ffe17 	ldw	r4,-8(fp)
     708:	01402e04 	movi	r5,184
     70c:	00005880 	call	588 <uart_send_byte>
     710:	00001406 	br	764 <ultrasound_read+0xdc>
	else if(settings==0)
     714:	e0bfff03 	ldbu	r2,-4(fp)
     718:	1004c03a 	cmpne	r2,r2,zero
     71c:	1000041e 	bne	r2,zero,730 <ultrasound_read+0xa8>
		uart_send_byte(Address, 0xb0);
     720:	e13ffe17 	ldw	r4,-8(fp)
     724:	01402c04 	movi	r5,176
     728:	00005880 	call	588 <uart_send_byte>
     72c:	00000d06 	br	764 <ultrasound_read+0xdc>
	else if(settings==2)
     730:	e0bfff03 	ldbu	r2,-4(fp)
     734:	10800098 	cmpnei	r2,r2,2
     738:	1000041e 	bne	r2,zero,74c <ultrasound_read+0xc4>
		uart_send_byte(Address, 0x1e);
     73c:	e13ffe17 	ldw	r4,-8(fp)
     740:	01400784 	movi	r5,30
     744:	00005880 	call	588 <uart_send_byte>
     748:	00000606 	br	764 <ultrasound_read+0xdc>
	else if(settings==3)
     74c:	e0bfff03 	ldbu	r2,-4(fp)
     750:	108000d8 	cmpnei	r2,r2,3
     754:	1000031e 	bne	r2,zero,764 <ultrasound_read+0xdc>
		uart_send_byte(Address, 0xa0);
     758:	e13ffe17 	ldw	r4,-8(fp)
     75c:	01402804 	movi	r5,160
     760:	00005880 	call	588 <uart_send_byte>
	res_h = uart_receive_byte(Address);
     764:	e13ffe17 	ldw	r4,-8(fp)
     768:	00005f00 	call	5f0 <uart_receive_byte>
     76c:	e0bffc05 	stb	r2,-16(fp)
	for (i = 0; i < 1000; i++)
     770:	e03ffd15 	stw	zero,-12(fp)
     774:	00000306 	br	784 <ultrasound_read+0xfc>
     778:	e0bffd17 	ldw	r2,-12(fp)
     77c:	10800044 	addi	r2,r2,1
     780:	e0bffd15 	stw	r2,-12(fp)
     784:	e0bffd17 	ldw	r2,-12(fp)
     788:	1080fa30 	cmpltui	r2,r2,1000
     78c:	103ffa1e 	bne	r2,zero,778 <ultrasound_read+0xf0>
			;
	res_l = uart_receive_byte(Address);
     790:	e13ffe17 	ldw	r4,-8(fp)
     794:	00005f00 	call	5f0 <uart_receive_byte>
     798:	e0bffc45 	stb	r2,-15(fp)
	return (((unsigned int) res_h) << 8) + res_l;
     79c:	e0bffc03 	ldbu	r2,-16(fp)
     7a0:	1006923a 	slli	r3,r2,8
     7a4:	e0bffc43 	ldbu	r2,-15(fp)
     7a8:	1885883a 	add	r2,r3,r2
}
     7ac:	e037883a 	mov	sp,fp
     7b0:	dfc00117 	ldw	ra,4(sp)
     7b4:	df000017 	ldw	fp,0(sp)
     7b8:	dec00204 	addi	sp,sp,8
     7bc:	f800283a 	ret

000007c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     7c0:	defff904 	addi	sp,sp,-28
     7c4:	dfc00615 	stw	ra,24(sp)
     7c8:	df000515 	stw	fp,20(sp)
     7cc:	df000504 	addi	fp,sp,20
     7d0:	e13ffc15 	stw	r4,-16(fp)
     7d4:	e17ffd15 	stw	r5,-12(fp)
     7d8:	e1bffe15 	stw	r6,-8(fp)
     7dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
     7e0:	e0800217 	ldw	r2,8(fp)
     7e4:	d8800015 	stw	r2,0(sp)
     7e8:	e13ffc17 	ldw	r4,-16(fp)
     7ec:	e17ffd17 	ldw	r5,-12(fp)
     7f0:	e1bffe17 	ldw	r6,-8(fp)
     7f4:	e1ffff17 	ldw	r7,-4(fp)
     7f8:	00009940 	call	994 <alt_iic_isr_register>
}  
     7fc:	e037883a 	mov	sp,fp
     800:	dfc00117 	ldw	ra,4(sp)
     804:	df000017 	ldw	fp,0(sp)
     808:	dec00204 	addi	sp,sp,8
     80c:	f800283a 	ret

00000810 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
     810:	defff904 	addi	sp,sp,-28
     814:	df000615 	stw	fp,24(sp)
     818:	df000604 	addi	fp,sp,24
     81c:	e13ffe15 	stw	r4,-8(fp)
     820:	e17fff15 	stw	r5,-4(fp)
     824:	e0bfff17 	ldw	r2,-4(fp)
     828:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     82c:	0005303a 	rdctl	r2,status
     830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     834:	e0fffb17 	ldw	r3,-20(fp)
     838:	00bfff84 	movi	r2,-2
     83c:	1884703a 	and	r2,r3,r2
     840:	1001703a 	wrctl	status,r2
  
  return context;
     844:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     848:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
     84c:	e0fffc17 	ldw	r3,-16(fp)
     850:	00800044 	movi	r2,1
     854:	10c4983a 	sll	r2,r2,r3
     858:	1007883a 	mov	r3,r2
     85c:	00800034 	movhi	r2,0
     860:	10991c04 	addi	r2,r2,25712
     864:	10800017 	ldw	r2,0(r2)
     868:	1886b03a 	or	r3,r3,r2
     86c:	00800034 	movhi	r2,0
     870:	10991c04 	addi	r2,r2,25712
     874:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     878:	00800034 	movhi	r2,0
     87c:	10991c04 	addi	r2,r2,25712
     880:	10800017 	ldw	r2,0(r2)
     884:	100170fa 	wrctl	ienable,r2
     888:	e0bffd17 	ldw	r2,-12(fp)
     88c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     890:	e0bffa17 	ldw	r2,-24(fp)
     894:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     898:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
     89c:	e037883a 	mov	sp,fp
     8a0:	df000017 	ldw	fp,0(sp)
     8a4:	dec00104 	addi	sp,sp,4
     8a8:	f800283a 	ret

000008ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
     8ac:	defff904 	addi	sp,sp,-28
     8b0:	df000615 	stw	fp,24(sp)
     8b4:	df000604 	addi	fp,sp,24
     8b8:	e13ffe15 	stw	r4,-8(fp)
     8bc:	e17fff15 	stw	r5,-4(fp)
     8c0:	e0bfff17 	ldw	r2,-4(fp)
     8c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     8c8:	0005303a 	rdctl	r2,status
     8cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     8d0:	e0fffb17 	ldw	r3,-20(fp)
     8d4:	00bfff84 	movi	r2,-2
     8d8:	1884703a 	and	r2,r3,r2
     8dc:	1001703a 	wrctl	status,r2
  
  return context;
     8e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     8e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
     8e8:	e0fffc17 	ldw	r3,-16(fp)
     8ec:	00800044 	movi	r2,1
     8f0:	10c4983a 	sll	r2,r2,r3
     8f4:	0084303a 	nor	r2,zero,r2
     8f8:	1007883a 	mov	r3,r2
     8fc:	00800034 	movhi	r2,0
     900:	10991c04 	addi	r2,r2,25712
     904:	10800017 	ldw	r2,0(r2)
     908:	1886703a 	and	r3,r3,r2
     90c:	00800034 	movhi	r2,0
     910:	10991c04 	addi	r2,r2,25712
     914:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     918:	00800034 	movhi	r2,0
     91c:	10991c04 	addi	r2,r2,25712
     920:	10800017 	ldw	r2,0(r2)
     924:	100170fa 	wrctl	ienable,r2
     928:	e0bffd17 	ldw	r2,-12(fp)
     92c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     930:	e0bffa17 	ldw	r2,-24(fp)
     934:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     938:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
     93c:	e037883a 	mov	sp,fp
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00104 	addi	sp,sp,4
     948:	f800283a 	ret

0000094c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
     94c:	defffc04 	addi	sp,sp,-16
     950:	df000315 	stw	fp,12(sp)
     954:	df000304 	addi	fp,sp,12
     958:	e13ffe15 	stw	r4,-8(fp)
     95c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
     960:	000530fa 	rdctl	r2,ienable
     964:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
     968:	e0ffff17 	ldw	r3,-4(fp)
     96c:	00800044 	movi	r2,1
     970:	10c4983a 	sll	r2,r2,r3
     974:	1007883a 	mov	r3,r2
     978:	e0bffd17 	ldw	r2,-12(fp)
     97c:	1884703a 	and	r2,r3,r2
     980:	1004c03a 	cmpne	r2,r2,zero
}
     984:	e037883a 	mov	sp,fp
     988:	df000017 	ldw	fp,0(sp)
     98c:	dec00104 	addi	sp,sp,4
     990:	f800283a 	ret

00000994 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     994:	defff404 	addi	sp,sp,-48
     998:	dfc00b15 	stw	ra,44(sp)
     99c:	df000a15 	stw	fp,40(sp)
     9a0:	df000a04 	addi	fp,sp,40
     9a4:	e13ffb15 	stw	r4,-20(fp)
     9a8:	e17ffc15 	stw	r5,-16(fp)
     9ac:	e1bffd15 	stw	r6,-12(fp)
     9b0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
     9b4:	00bffa84 	movi	r2,-22
     9b8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
     9bc:	e0bffc17 	ldw	r2,-16(fp)
     9c0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     9c4:	e0bff917 	ldw	r2,-28(fp)
     9c8:	10800808 	cmpgei	r2,r2,32
     9cc:	1000291e 	bne	r2,zero,a74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     9d0:	0005303a 	rdctl	r2,status
     9d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     9d8:	e0fff717 	ldw	r3,-36(fp)
     9dc:	00bfff84 	movi	r2,-2
     9e0:	1884703a 	and	r2,r3,r2
     9e4:	1001703a 	wrctl	status,r2
  
  return context;
     9e8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
     9ec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
     9f0:	e0bff917 	ldw	r2,-28(fp)
     9f4:	00c00034 	movhi	r3,0
     9f8:	18d92304 	addi	r3,r3,25740
     9fc:	100490fa 	slli	r2,r2,3
     a00:	10c7883a 	add	r3,r2,r3
     a04:	e0bffd17 	ldw	r2,-12(fp)
     a08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
     a0c:	e0bff917 	ldw	r2,-28(fp)
     a10:	00c00034 	movhi	r3,0
     a14:	18d92304 	addi	r3,r3,25740
     a18:	100490fa 	slli	r2,r2,3
     a1c:	10c5883a 	add	r2,r2,r3
     a20:	10c00104 	addi	r3,r2,4
     a24:	e0bffe17 	ldw	r2,-8(fp)
     a28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
     a2c:	e0bffd17 	ldw	r2,-12(fp)
     a30:	1005003a 	cmpeq	r2,r2,zero
     a34:	1000051e 	bne	r2,zero,a4c <alt_iic_isr_register+0xb8>
     a38:	e17ff917 	ldw	r5,-28(fp)
     a3c:	e13ffb17 	ldw	r4,-20(fp)
     a40:	00008100 	call	810 <alt_ic_irq_enable>
     a44:	e0bfff15 	stw	r2,-4(fp)
     a48:	00000406 	br	a5c <alt_iic_isr_register+0xc8>
     a4c:	e17ff917 	ldw	r5,-28(fp)
     a50:	e13ffb17 	ldw	r4,-20(fp)
     a54:	00008ac0 	call	8ac <alt_ic_irq_disable>
     a58:	e0bfff15 	stw	r2,-4(fp)
     a5c:	e0bfff17 	ldw	r2,-4(fp)
     a60:	e0bffa15 	stw	r2,-24(fp)
     a64:	e0bff817 	ldw	r2,-32(fp)
     a68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     a6c:	e0bff617 	ldw	r2,-40(fp)
     a70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
     a74:	e0bffa17 	ldw	r2,-24(fp)
}
     a78:	e037883a 	mov	sp,fp
     a7c:	dfc00117 	ldw	ra,4(sp)
     a80:	df000017 	ldw	fp,0(sp)
     a84:	dec00204 	addi	sp,sp,8
     a88:	f800283a 	ret

00000a8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     a8c:	defffd04 	addi	sp,sp,-12
     a90:	dfc00215 	stw	ra,8(sp)
     a94:	df000115 	stw	fp,4(sp)
     a98:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     a9c:	0009883a 	mov	r4,zero
     aa0:	0000af80 	call	af8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     aa4:	0000b2c0 	call	b2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     aa8:	01000034 	movhi	r4,0
     aac:	21122804 	addi	r4,r4,18592
     ab0:	01400034 	movhi	r5,0
     ab4:	29522804 	addi	r5,r5,18592
     ab8:	01800034 	movhi	r6,0
     abc:	31922804 	addi	r6,r6,18592
     ac0:	00038f40 	call	38f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     ac4:	00036840 	call	3684 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     ac8:	01000034 	movhi	r4,0
     acc:	210dba04 	addi	r4,r4,14056
     ad0:	00043480 	call	4348 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     ad4:	d1201b17 	ldw	r4,-32660(gp)
     ad8:	d1601c17 	ldw	r5,-32656(gp)
     adc:	d1a01d17 	ldw	r6,-32652(gp)
     ae0:	00003b80 	call	3b8 <main>
     ae4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     ae8:	01000044 	movi	r4,1
     aec:	00033e40 	call	33e4 <close>
  exit (result);
     af0:	e13fff17 	ldw	r4,-4(fp)
     af4:	000435c0 	call	435c <exit>

00000af8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     af8:	defffd04 	addi	sp,sp,-12
     afc:	dfc00215 	stw	ra,8(sp)
     b00:	df000115 	stw	fp,4(sp)
     b04:	df000104 	addi	fp,sp,4
     b08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
     b0c:	0003e6c0 	call	3e6c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     b10:	00800044 	movi	r2,1
     b14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     b18:	e037883a 	mov	sp,fp
     b1c:	dfc00117 	ldw	ra,4(sp)
     b20:	df000017 	ldw	fp,0(sp)
     b24:	dec00204 	addi	sp,sp,8
     b28:	f800283a 	ret

00000b2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     b2c:	defffe04 	addi	sp,sp,-8
     b30:	dfc00115 	stw	ra,4(sp)
     b34:	df000015 	stw	fp,0(sp)
     b38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
     b3c:	01008074 	movhi	r4,513
     b40:	2128b804 	addi	r4,r4,-23840
     b44:	000b883a 	mov	r5,zero
     b48:	000d883a 	mov	r6,zero
     b4c:	01c0fa04 	movi	r7,1000
     b50:	000217c0 	call	217c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
     b54:	01000034 	movhi	r4,0
     b58:	21125904 	addi	r4,r4,18788
     b5c:	0000c7c0 	call	c7c <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     b60:	01000034 	movhi	r4,0
     b64:	21129504 	addi	r4,r4,19028
     b68:	000b883a 	mov	r5,zero
     b6c:	018000c4 	movi	r6,3
     b70:	00017a80 	call	17a8 <altera_avalon_jtag_uart_init>
     b74:	01000034 	movhi	r4,0
     b78:	21128b04 	addi	r4,r4,18988
     b7c:	0000c440 	call	c44 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
     b80:	00c08074 	movhi	r3,513
     b84:	18e80004 	addi	r3,r3,-24576
     b88:	00800044 	movi	r2,1
     b8c:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
     b90:	01000034 	movhi	r4,0
     b94:	2116ad04 	addi	r4,r4,23220
     b98:	000b883a 	mov	r5,zero
     b9c:	01800184 	movi	r6,6
     ba0:	00023040 	call	2304 <altera_avalon_uart_init>
     ba4:	01000034 	movhi	r4,0
     ba8:	2116a304 	addi	r4,r4,23180
     bac:	0000c440 	call	c44 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
     bb0:	01000034 	movhi	r4,0
     bb4:	2116de04 	addi	r4,r4,23416
     bb8:	000b883a 	mov	r5,zero
     bbc:	018001c4 	movi	r6,7
     bc0:	00023040 	call	2304 <altera_avalon_uart_init>
     bc4:	01000034 	movhi	r4,0
     bc8:	2116d404 	addi	r4,r4,23376
     bcc:	0000c440 	call	c44 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
     bd0:	01000034 	movhi	r4,0
     bd4:	21170f04 	addi	r4,r4,23612
     bd8:	000b883a 	mov	r5,zero
     bdc:	01800204 	movi	r6,8
     be0:	00023040 	call	2304 <altera_avalon_uart_init>
     be4:	01000034 	movhi	r4,0
     be8:	21170504 	addi	r4,r4,23572
     bec:	0000c440 	call	c44 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
     bf0:	01000034 	movhi	r4,0
     bf4:	21174004 	addi	r4,r4,23808
     bf8:	000b883a 	mov	r5,zero
     bfc:	01800244 	movi	r6,9
     c00:	00023040 	call	2304 <altera_avalon_uart_init>
     c04:	01000034 	movhi	r4,0
     c08:	21173604 	addi	r4,r4,23768
     c0c:	0000c440 	call	c44 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
     c10:	01000034 	movhi	r4,0
     c14:	21177104 	addi	r4,r4,24004
     c18:	000b883a 	mov	r5,zero
     c1c:	01800104 	movi	r6,4
     c20:	00023040 	call	2304 <altera_avalon_uart_init>
     c24:	01000034 	movhi	r4,0
     c28:	21176704 	addi	r4,r4,23964
     c2c:	0000c440 	call	c44 <alt_dev_reg>
}
     c30:	e037883a 	mov	sp,fp
     c34:	dfc00117 	ldw	ra,4(sp)
     c38:	df000017 	ldw	fp,0(sp)
     c3c:	dec00204 	addi	sp,sp,8
     c40:	f800283a 	ret

00000c44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     c44:	defffd04 	addi	sp,sp,-12
     c48:	dfc00215 	stw	ra,8(sp)
     c4c:	df000115 	stw	fp,4(sp)
     c50:	df000104 	addi	fp,sp,4
     c54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     c58:	e13fff17 	ldw	r4,-4(fp)
     c5c:	01400034 	movhi	r5,0
     c60:	29590e04 	addi	r5,r5,25656
     c64:	00035700 	call	3570 <alt_dev_llist_insert>
}
     c68:	e037883a 	mov	sp,fp
     c6c:	dfc00117 	ldw	ra,4(sp)
     c70:	df000017 	ldw	fp,0(sp)
     c74:	dec00204 	addi	sp,sp,8
     c78:	f800283a 	ret

00000c7c <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
     c7c:	defffc04 	addi	sp,sp,-16
     c80:	dfc00315 	stw	ra,12(sp)
     c84:	df000215 	stw	fp,8(sp)
     c88:	df000204 	addi	fp,sp,8
     c8c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
     c90:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
     c94:	e13fff17 	ldw	r4,-4(fp)
     c98:	0000d080 	call	d08 <alt_epcs_flash_query>
     c9c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
     ca0:	e0bffe17 	ldw	r2,-8(fp)
     ca4:	1004c03a 	cmpne	r2,r2,zero
     ca8:	1000031e 	bne	r2,zero,cb8 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
     cac:	e13fff17 	ldw	r4,-4(fp)
     cb0:	0000cd00 	call	cd0 <alt_flash_device_register>
     cb4:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
     cb8:	e0bffe17 	ldw	r2,-8(fp)
}
     cbc:	e037883a 	mov	sp,fp
     cc0:	dfc00117 	ldw	ra,4(sp)
     cc4:	df000017 	ldw	fp,0(sp)
     cc8:	dec00204 	addi	sp,sp,8
     ccc:	f800283a 	ret

00000cd0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
     cd0:	defffd04 	addi	sp,sp,-12
     cd4:	dfc00215 	stw	ra,8(sp)
     cd8:	df000115 	stw	fp,4(sp)
     cdc:	df000104 	addi	fp,sp,4
     ce0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
     ce4:	e13fff17 	ldw	r4,-4(fp)
     ce8:	01400034 	movhi	r5,0
     cec:	29591204 	addi	r5,r5,25672
     cf0:	00035700 	call	3570 <alt_dev_llist_insert>
}
     cf4:	e037883a 	mov	sp,fp
     cf8:	dfc00117 	ldw	ra,4(sp)
     cfc:	df000017 	ldw	fp,0(sp)
     d00:	dec00204 	addi	sp,sp,8
     d04:	f800283a 	ret

00000d08 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
     d08:	defffc04 	addi	sp,sp,-16
     d0c:	dfc00315 	stw	ra,12(sp)
     d10:	df000215 	stw	fp,8(sp)
     d14:	df000204 	addi	fp,sp,8
     d18:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
     d1c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
     d20:	e0bfff17 	ldw	r2,-4(fp)
     d24:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
     d28:	e0bfff17 	ldw	r2,-4(fp)
     d2c:	11002d17 	ldw	r4,180(r2)
     d30:	00030f40 	call	30f4 <epcs_read_electronic_signature>
     d34:	10c03fcc 	andi	r3,r2,255
     d38:	e0bfff17 	ldw	r2,-4(fp)
     d3c:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
     d40:	e0bfff17 	ldw	r2,-4(fp)
     d44:	10802f17 	ldw	r2,188(r2)
     d48:	10800598 	cmpnei	r2,r2,22
     d4c:	10000a1e 	bne	r2,zero,d78 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
     d50:	e0ffff17 	ldw	r3,-4(fp)
     d54:	00802034 	movhi	r2,128
     d58:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
     d5c:	e0ffff17 	ldw	r3,-4(fp)
     d60:	00802004 	movi	r2,128
     d64:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     d68:	e0ffff17 	ldw	r3,-4(fp)
     d6c:	00800074 	movhi	r2,1
     d70:	18801015 	stw	r2,64(r3)
     d74:	00007306 	br	f44 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
     d78:	e0bfff17 	ldw	r2,-4(fp)
     d7c:	10802f17 	ldw	r2,188(r2)
     d80:	10800518 	cmpnei	r2,r2,20
     d84:	10000a1e 	bne	r2,zero,db0 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
     d88:	e0ffff17 	ldw	r3,-4(fp)
     d8c:	00800834 	movhi	r2,32
     d90:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
     d94:	e0ffff17 	ldw	r3,-4(fp)
     d98:	00800804 	movi	r2,32
     d9c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     da0:	e0ffff17 	ldw	r3,-4(fp)
     da4:	00800074 	movhi	r2,1
     da8:	18801015 	stw	r2,64(r3)
     dac:	00006506 	br	f44 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
     db0:	e0bfff17 	ldw	r2,-4(fp)
     db4:	10802f17 	ldw	r2,188(r2)
     db8:	108004d8 	cmpnei	r2,r2,19
     dbc:	10000a1e 	bne	r2,zero,de8 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
     dc0:	e0ffff17 	ldw	r3,-4(fp)
     dc4:	00800434 	movhi	r2,16
     dc8:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
     dcc:	e0ffff17 	ldw	r3,-4(fp)
     dd0:	00800404 	movi	r2,16
     dd4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     dd8:	e0ffff17 	ldw	r3,-4(fp)
     ddc:	00800074 	movhi	r2,1
     de0:	18801015 	stw	r2,64(r3)
     de4:	00005706 	br	f44 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
     de8:	e0bfff17 	ldw	r2,-4(fp)
     dec:	10802f17 	ldw	r2,188(r2)
     df0:	10800498 	cmpnei	r2,r2,18
     df4:	10000a1e 	bne	r2,zero,e20 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
     df8:	e0ffff17 	ldw	r3,-4(fp)
     dfc:	00800234 	movhi	r2,8
     e00:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
     e04:	e0ffff17 	ldw	r3,-4(fp)
     e08:	00800204 	movi	r2,8
     e0c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
     e10:	e0ffff17 	ldw	r3,-4(fp)
     e14:	00800074 	movhi	r2,1
     e18:	18801015 	stw	r2,64(r3)
     e1c:	00004906 	br	f44 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
     e20:	e0bfff17 	ldw	r2,-4(fp)
     e24:	10802f17 	ldw	r2,188(r2)
     e28:	10800418 	cmpnei	r2,r2,16
     e2c:	10000a1e 	bne	r2,zero,e58 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
     e30:	e0ffff17 	ldw	r3,-4(fp)
     e34:	008000b4 	movhi	r2,2
     e38:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
     e3c:	e0ffff17 	ldw	r3,-4(fp)
     e40:	00800104 	movi	r2,4
     e44:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
     e48:	e0ffff17 	ldw	r3,-4(fp)
     e4c:	00a00014 	movui	r2,32768
     e50:	18801015 	stw	r2,64(r3)
     e54:	00003b06 	br	f44 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
     e58:	e0bfff17 	ldw	r2,-4(fp)
     e5c:	11002d17 	ldw	r4,180(r2)
     e60:	00031600 	call	3160 <epcs_read_device_id>
     e64:	1007883a 	mov	r3,r2
     e68:	e0bfff17 	ldw	r2,-4(fp)
     e6c:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
     e70:	e0bfff17 	ldw	r2,-4(fp)
     e74:	10c02f17 	ldw	r3,188(r2)
     e78:	00804034 	movhi	r2,256
     e7c:	10bfffc4 	addi	r2,r2,-1
     e80:	1886703a 	and	r3,r3,r2
     e84:	00800874 	movhi	r2,33
     e88:	10ae8604 	addi	r2,r2,-17896
     e8c:	18800a1e 	bne	r3,r2,eb8 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
     e90:	e0ffff17 	ldw	r3,-4(fp)
     e94:	00804034 	movhi	r2,256
     e98:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
     e9c:	e0ffff17 	ldw	r3,-4(fp)
     ea0:	00804004 	movi	r2,256
     ea4:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
     ea8:	e0ffff17 	ldw	r3,-4(fp)
     eac:	00800074 	movhi	r2,1
     eb0:	18801015 	stw	r2,64(r3)
     eb4:	00002306 	br	f44 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
     eb8:	e0bfff17 	ldw	r2,-4(fp)
     ebc:	10802f17 	ldw	r2,188(r2)
     ec0:	10803fcc 	andi	r2,r2,255
     ec4:	10800618 	cmpnei	r2,r2,24
     ec8:	10000a1e 	bne	r2,zero,ef4 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
     ecc:	e0ffff17 	ldw	r3,-4(fp)
     ed0:	00804034 	movhi	r2,256
     ed4:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
     ed8:	e0ffff17 	ldw	r3,-4(fp)
     edc:	00801004 	movi	r2,64
     ee0:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
     ee4:	e0ffff17 	ldw	r3,-4(fp)
     ee8:	00800134 	movhi	r2,4
     eec:	18801015 	stw	r2,64(r3)
     ef0:	00001406 	br	f44 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
     ef4:	e0bfff17 	ldw	r2,-4(fp)
     ef8:	10802f17 	ldw	r2,188(r2)
     efc:	10803fcc 	andi	r2,r2,255
     f00:	10800658 	cmpnei	r2,r2,25
     f04:	10000d1e 	bne	r2,zero,f3c <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
     f08:	e0ffff17 	ldw	r3,-4(fp)
     f0c:	00808034 	movhi	r2,512
     f10:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
     f14:	e0ffff17 	ldw	r3,-4(fp)
     f18:	00808004 	movi	r2,512
     f1c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
     f20:	e0ffff17 	ldw	r3,-4(fp)
     f24:	00800074 	movhi	r2,1
     f28:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
     f2c:	e0ffff17 	ldw	r3,-4(fp)
     f30:	00800044 	movi	r2,1
     f34:	18803115 	stw	r2,196(r3)
     f38:	00000206 	br	f44 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
     f3c:	00bffb44 	movi	r2,-19
     f40:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
     f44:	e0bfff17 	ldw	r2,-4(fp)
     f48:	10800e17 	ldw	r2,56(r2)
     f4c:	1007883a 	mov	r3,r2
     f50:	e0bfff17 	ldw	r2,-4(fp)
     f54:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
     f58:	e0ffff17 	ldw	r3,-4(fp)
     f5c:	00800044 	movi	r2,1
     f60:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
     f64:	e0bfff17 	ldw	r2,-4(fp)
     f68:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
     f6c:	e0ffff17 	ldw	r3,-4(fp)
     f70:	00804004 	movi	r2,256
     f74:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
     f78:	e0bffe17 	ldw	r2,-8(fp)
}
     f7c:	e037883a 	mov	sp,fp
     f80:	dfc00117 	ldw	ra,4(sp)
     f84:	df000017 	ldw	fp,0(sp)
     f88:	dec00204 	addi	sp,sp,8
     f8c:	f800283a 	ret

00000f90 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
     f90:	deffeb04 	addi	sp,sp,-84
     f94:	dfc01415 	stw	ra,80(sp)
     f98:	df001315 	stw	fp,76(sp)
     f9c:	df001304 	addi	fp,sp,76
     fa0:	e13ff915 	stw	r4,-28(fp)
     fa4:	e17ffa15 	stw	r5,-24(fp)
     fa8:	e1bffb15 	stw	r6,-20(fp)
     fac:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
     fb0:	00800804 	movi	r2,32
     fb4:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
     fb8:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
     fbc:	00002c06 	br	1070 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
     fc0:	e0bff017 	ldw	r2,-64(fp)
     fc4:	e0bfff15 	stw	r2,-4(fp)
     fc8:	e0fffc17 	ldw	r3,-16(fp)
     fcc:	e0fffe15 	stw	r3,-8(fp)
     fd0:	e0bfff17 	ldw	r2,-4(fp)
     fd4:	e0fffe17 	ldw	r3,-8(fp)
     fd8:	10c0022e 	bgeu	r2,r3,fe4 <alt_epcs_flash_memcmp+0x54>
     fdc:	e0bfff17 	ldw	r2,-4(fp)
     fe0:	e0bffe15 	stw	r2,-8(fp)
     fe4:	e0fffe17 	ldw	r3,-8(fp)
     fe8:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
     fec:	e0fffb17 	ldw	r3,-20(fp)
     ff0:	e0bfef17 	ldw	r2,-68(fp)
     ff4:	188b883a 	add	r5,r3,r2
     ff8:	e1bff104 	addi	r6,fp,-60
     ffc:	e13ff917 	ldw	r4,-28(fp)
    1000:	e1ffee17 	ldw	r7,-72(fp)
    1004:	00015c80 	call	15c8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    1008:	1004403a 	cmpge	r2,r2,zero
    100c:	1000031e 	bne	r2,zero,101c <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    1010:	00bfffc4 	movi	r2,-1
    1014:	e0bffd15 	stw	r2,-12(fp)
    1018:	00001906 	br	1080 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    101c:	e0fffa17 	ldw	r3,-24(fp)
    1020:	e0bfef17 	ldw	r2,-68(fp)
    1024:	1889883a 	add	r4,r3,r2
    1028:	e1bfee17 	ldw	r6,-72(fp)
    102c:	e17ff104 	addi	r5,fp,-60
    1030:	00043940 	call	4394 <memcmp>
    1034:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
    1038:	e0bfed17 	ldw	r2,-76(fp)
    103c:	1005003a 	cmpeq	r2,r2,zero
    1040:	1000031e 	bne	r2,zero,1050 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
    1044:	e0ffed17 	ldw	r3,-76(fp)
    1048:	e0fffd15 	stw	r3,-12(fp)
    104c:	00000c06 	br	1080 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
    1050:	e0ffee17 	ldw	r3,-72(fp)
    1054:	e0bffc17 	ldw	r2,-16(fp)
    1058:	10c5c83a 	sub	r2,r2,r3
    105c:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
    1060:	e0ffef17 	ldw	r3,-68(fp)
    1064:	e0bfee17 	ldw	r2,-72(fp)
    1068:	1885883a 	add	r2,r3,r2
    106c:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    1070:	e0bffc17 	ldw	r2,-16(fp)
    1074:	1004c03a 	cmpne	r2,r2,zero
    1078:	103fd11e 	bne	r2,zero,fc0 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    107c:	e03ffd15 	stw	zero,-12(fp)
    1080:	e0bffd17 	ldw	r2,-12(fp)
}
    1084:	e037883a 	mov	sp,fp
    1088:	dfc00117 	ldw	ra,4(sp)
    108c:	df000017 	ldw	fp,0(sp)
    1090:	dec00204 	addi	sp,sp,8
    1094:	f800283a 	ret

00001098 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    1098:	defff204 	addi	sp,sp,-56
    109c:	dfc00d15 	stw	ra,52(sp)
    10a0:	df000c15 	stw	fp,48(sp)
    10a4:	df000c04 	addi	fp,sp,48
    10a8:	e13ffa15 	stw	r4,-24(fp)
    10ac:	e17ffb15 	stw	r5,-20(fp)
    10b0:	e1bffc15 	stw	r6,-16(fp)
    10b4:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
    10b8:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    10bc:	e03ff815 	stw	zero,-32(fp)
    10c0:	00008b06 	br	12f0 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    10c4:	e0bff817 	ldw	r2,-32(fp)
    10c8:	e0fffa17 	ldw	r3,-24(fp)
    10cc:	1004913a 	slli	r2,r2,4
    10d0:	10c5883a 	add	r2,r2,r3
    10d4:	10800d04 	addi	r2,r2,52
    10d8:	10c00017 	ldw	r3,0(r2)
    10dc:	e0bffb17 	ldw	r2,-20(fp)
    10e0:	10c08016 	blt	r2,r3,12e4 <alt_epcs_flash_write+0x24c>
    10e4:	e0bff817 	ldw	r2,-32(fp)
    10e8:	e0fffa17 	ldw	r3,-24(fp)
    10ec:	1004913a 	slli	r2,r2,4
    10f0:	10c5883a 	add	r2,r2,r3
    10f4:	10800d04 	addi	r2,r2,52
    10f8:	11000017 	ldw	r4,0(r2)
    10fc:	e0bff817 	ldw	r2,-32(fp)
    1100:	e0fffa17 	ldw	r3,-24(fp)
    1104:	1004913a 	slli	r2,r2,4
    1108:	10c5883a 	add	r2,r2,r3
    110c:	10800e04 	addi	r2,r2,56
    1110:	10800017 	ldw	r2,0(r2)
    1114:	2087883a 	add	r3,r4,r2
    1118:	e0bffb17 	ldw	r2,-20(fp)
    111c:	10c0710e 	bge	r2,r3,12e4 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    1120:	e0bff817 	ldw	r2,-32(fp)
    1124:	e0fffa17 	ldw	r3,-24(fp)
    1128:	1004913a 	slli	r2,r2,4
    112c:	10c5883a 	add	r2,r2,r3
    1130:	10800d04 	addi	r2,r2,52
    1134:	10800017 	ldw	r2,0(r2)
    1138:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    113c:	e03ff715 	stw	zero,-36(fp)
    1140:	00006006 	br	12c4 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
    1144:	e0fffb17 	ldw	r3,-20(fp)
    1148:	e0bff517 	ldw	r2,-44(fp)
    114c:	18805116 	blt	r3,r2,1294 <alt_epcs_flash_write+0x1fc>
    1150:	e0bff817 	ldw	r2,-32(fp)
    1154:	e0fffa17 	ldw	r3,-24(fp)
    1158:	1004913a 	slli	r2,r2,4
    115c:	10c5883a 	add	r2,r2,r3
    1160:	10801004 	addi	r2,r2,64
    1164:	10c00017 	ldw	r3,0(r2)
    1168:	e0bff517 	ldw	r2,-44(fp)
    116c:	1887883a 	add	r3,r3,r2
    1170:	e0bffb17 	ldw	r2,-20(fp)
    1174:	10c0470e 	bge	r2,r3,1294 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    1178:	e0bff817 	ldw	r2,-32(fp)
    117c:	e0fffa17 	ldw	r3,-24(fp)
    1180:	1004913a 	slli	r2,r2,4
    1184:	10c5883a 	add	r2,r2,r3
    1188:	10801004 	addi	r2,r2,64
    118c:	10c00017 	ldw	r3,0(r2)
    1190:	e0bff517 	ldw	r2,-44(fp)
    1194:	1887883a 	add	r3,r3,r2
    1198:	e0bffb17 	ldw	r2,-20(fp)
    119c:	1885c83a 	sub	r2,r3,r2
    11a0:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    11a4:	e0bff617 	ldw	r2,-40(fp)
    11a8:	e0bfff15 	stw	r2,-4(fp)
    11ac:	e0fffd17 	ldw	r3,-12(fp)
    11b0:	e0fffe15 	stw	r3,-8(fp)
    11b4:	e0bfff17 	ldw	r2,-4(fp)
    11b8:	e0fffe17 	ldw	r3,-8(fp)
    11bc:	10c0020e 	bge	r2,r3,11c8 <alt_epcs_flash_write+0x130>
    11c0:	e0bfff17 	ldw	r2,-4(fp)
    11c4:	e0bffe15 	stw	r2,-8(fp)
    11c8:	e0fffe17 	ldw	r3,-8(fp)
    11cc:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    11d0:	e1fff617 	ldw	r7,-40(fp)
    11d4:	e13ffa17 	ldw	r4,-24(fp)
    11d8:	e17ffc17 	ldw	r5,-16(fp)
    11dc:	e1bffb17 	ldw	r6,-20(fp)
    11e0:	0000f900 	call	f90 <alt_epcs_flash_memcmp>
    11e4:	1005003a 	cmpeq	r2,r2,zero
    11e8:	1000131e 	bne	r2,zero,1238 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    11ec:	e0bffa17 	ldw	r2,-24(fp)
    11f0:	10800817 	ldw	r2,32(r2)
    11f4:	e13ffa17 	ldw	r4,-24(fp)
    11f8:	e17ff517 	ldw	r5,-44(fp)
    11fc:	103ee83a 	callr	r2
    1200:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
    1204:	e0bff917 	ldw	r2,-28(fp)
    1208:	1004c03a 	cmpne	r2,r2,zero
    120c:	10000a1e 	bne	r2,zero,1238 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
    1210:	e0bffa17 	ldw	r2,-24(fp)
    1214:	10c00917 	ldw	r3,36(r2)
    1218:	e0bff617 	ldw	r2,-40(fp)
    121c:	d8800015 	stw	r2,0(sp)
    1220:	e13ffa17 	ldw	r4,-24(fp)
    1224:	e17ff517 	ldw	r5,-44(fp)
    1228:	e1bffb17 	ldw	r6,-20(fp)
    122c:	e1fffc17 	ldw	r7,-16(fp)
    1230:	183ee83a 	callr	r3
    1234:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    1238:	e0fffd17 	ldw	r3,-12(fp)
    123c:	e0bff617 	ldw	r2,-40(fp)
    1240:	18802f26 	beq	r3,r2,1300 <alt_epcs_flash_write+0x268>
    1244:	e0bff917 	ldw	r2,-28(fp)
    1248:	1004c03a 	cmpne	r2,r2,zero
    124c:	10002c1e 	bne	r2,zero,1300 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
    1250:	e0fffd17 	ldw	r3,-12(fp)
    1254:	e0bff617 	ldw	r2,-40(fp)
    1258:	1885c83a 	sub	r2,r3,r2
    125c:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    1260:	e0bff817 	ldw	r2,-32(fp)
    1264:	e0fffa17 	ldw	r3,-24(fp)
    1268:	1004913a 	slli	r2,r2,4
    126c:	10c5883a 	add	r2,r2,r3
    1270:	10801004 	addi	r2,r2,64
    1274:	10c00017 	ldw	r3,0(r2)
    1278:	e0bff517 	ldw	r2,-44(fp)
    127c:	1885883a 	add	r2,r3,r2
    1280:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    1284:	e0fffc17 	ldw	r3,-16(fp)
    1288:	e0bff617 	ldw	r2,-40(fp)
    128c:	1885883a 	add	r2,r3,r2
    1290:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    1294:	e0bff817 	ldw	r2,-32(fp)
    1298:	e0fffa17 	ldw	r3,-24(fp)
    129c:	1004913a 	slli	r2,r2,4
    12a0:	10c5883a 	add	r2,r2,r3
    12a4:	10801004 	addi	r2,r2,64
    12a8:	10c00017 	ldw	r3,0(r2)
    12ac:	e0bff517 	ldw	r2,-44(fp)
    12b0:	10c5883a 	add	r2,r2,r3
    12b4:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    12b8:	e0bff717 	ldw	r2,-36(fp)
    12bc:	10800044 	addi	r2,r2,1
    12c0:	e0bff715 	stw	r2,-36(fp)
    12c4:	e0bff817 	ldw	r2,-32(fp)
    12c8:	e0fffa17 	ldw	r3,-24(fp)
    12cc:	1004913a 	slli	r2,r2,4
    12d0:	10c5883a 	add	r2,r2,r3
    12d4:	10800f04 	addi	r2,r2,60
    12d8:	10c00017 	ldw	r3,0(r2)
    12dc:	e0bff717 	ldw	r2,-36(fp)
    12e0:	10ff9816 	blt	r2,r3,1144 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    12e4:	e0bff817 	ldw	r2,-32(fp)
    12e8:	10800044 	addi	r2,r2,1
    12ec:	e0bff815 	stw	r2,-32(fp)
    12f0:	e0bffa17 	ldw	r2,-24(fp)
    12f4:	10c00c17 	ldw	r3,48(r2)
    12f8:	e0bff817 	ldw	r2,-32(fp)
    12fc:	10ff7116 	blt	r2,r3,10c4 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    1300:	e0bff917 	ldw	r2,-28(fp)
}
    1304:	e037883a 	mov	sp,fp
    1308:	dfc00117 	ldw	ra,4(sp)
    130c:	df000017 	ldw	fp,0(sp)
    1310:	dec00204 	addi	sp,sp,8
    1314:	f800283a 	ret

00001318 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    1318:	defffa04 	addi	sp,sp,-24
    131c:	df000515 	stw	fp,20(sp)
    1320:	df000504 	addi	fp,sp,20
    1324:	e13ffd15 	stw	r4,-12(fp)
    1328:	e17ffe15 	stw	r5,-8(fp)
    132c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    1330:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    1334:	e0bffd17 	ldw	r2,-12(fp)
    1338:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
    133c:	e0bffb17 	ldw	r2,-20(fp)
    1340:	10c00c17 	ldw	r3,48(r2)
    1344:	e0bfff17 	ldw	r2,-4(fp)
    1348:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    134c:	e0bffb17 	ldw	r2,-20(fp)
    1350:	10800c17 	ldw	r2,48(r2)
    1354:	1004c03a 	cmpne	r2,r2,zero
    1358:	1000031e 	bne	r2,zero,1368 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
    135c:	00bffec4 	movi	r2,-5
    1360:	e0bffc15 	stw	r2,-16(fp)
    1364:	00000b06 	br	1394 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    1368:	e0bffb17 	ldw	r2,-20(fp)
    136c:	10800c17 	ldw	r2,48(r2)
    1370:	10800250 	cmplti	r2,r2,9
    1374:	1000031e 	bne	r2,zero,1384 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
    1378:	00bffd04 	movi	r2,-12
    137c:	e0bffc15 	stw	r2,-16(fp)
    1380:	00000406 	br	1394 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
    1384:	e0bffb17 	ldw	r2,-20(fp)
    1388:	10c00d04 	addi	r3,r2,52
    138c:	e0bffe17 	ldw	r2,-8(fp)
    1390:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    1394:	e0bffc17 	ldw	r2,-16(fp)
}
    1398:	e037883a 	mov	sp,fp
    139c:	df000017 	ldw	fp,0(sp)
    13a0:	dec00104 	addi	sp,sp,4
    13a4:	f800283a 	ret

000013a8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    13a8:	defffa04 	addi	sp,sp,-24
    13ac:	dfc00515 	stw	ra,20(sp)
    13b0:	df000415 	stw	fp,16(sp)
    13b4:	df000404 	addi	fp,sp,16
    13b8:	e13ffe15 	stw	r4,-8(fp)
    13bc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    13c0:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    13c4:	e0bffe17 	ldw	r2,-8(fp)
    13c8:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    13cc:	e13ffe17 	ldw	r4,-8(fp)
    13d0:	e17fff17 	ldw	r5,-4(fp)
    13d4:	00014180 	call	1418 <alt_epcs_test_address>
    13d8:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
    13dc:	e0bffd17 	ldw	r2,-12(fp)
    13e0:	1004803a 	cmplt	r2,r2,zero
    13e4:	1000061e 	bne	r2,zero,1400 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    13e8:	e0bffc17 	ldw	r2,-16(fp)
    13ec:	11002d17 	ldw	r4,180(r2)
    13f0:	e17fff17 	ldw	r5,-4(fp)
    13f4:	e0bffc17 	ldw	r2,-16(fp)
    13f8:	11803117 	ldw	r6,196(r2)
    13fc:	0002c1c0 	call	2c1c <epcs_sector_erase>
  }
  return ret_code;
    1400:	e0bffd17 	ldw	r2,-12(fp)
}
    1404:	e037883a 	mov	sp,fp
    1408:	dfc00117 	ldw	ra,4(sp)
    140c:	df000017 	ldw	fp,0(sp)
    1410:	dec00204 	addi	sp,sp,8
    1414:	f800283a 	ret

00001418 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    1418:	defff904 	addi	sp,sp,-28
    141c:	df000615 	stw	fp,24(sp)
    1420:	df000604 	addi	fp,sp,24
    1424:	e13ffe15 	stw	r4,-8(fp)
    1428:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    142c:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    1430:	e0bffe17 	ldw	r2,-8(fp)
    1434:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    1438:	e0bffc17 	ldw	r2,-16(fp)
    143c:	10800c17 	ldw	r2,48(r2)
    1440:	10bfffc4 	addi	r2,r2,-1
    1444:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    1448:	e0bffb17 	ldw	r2,-20(fp)
    144c:	e0fffc17 	ldw	r3,-16(fp)
    1450:	1004913a 	slli	r2,r2,4
    1454:	10c5883a 	add	r2,r2,r3
    1458:	10800d04 	addi	r2,r2,52
    145c:	11000017 	ldw	r4,0(r2)
    1460:	e0bffb17 	ldw	r2,-20(fp)
    1464:	e0fffc17 	ldw	r3,-16(fp)
    1468:	1004913a 	slli	r2,r2,4
    146c:	10c5883a 	add	r2,r2,r3
    1470:	10800e04 	addi	r2,r2,56
    1474:	10800017 	ldw	r2,0(r2)
    1478:	2085883a 	add	r2,r4,r2
    147c:	10bfffc4 	addi	r2,r2,-1
    1480:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
    1484:	e0ffff17 	ldw	r3,-4(fp)
    1488:	e0bffa17 	ldw	r2,-24(fp)
    148c:	10c0022e 	bgeu	r2,r3,1498 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    1490:	00bffec4 	movi	r2,-5
    1494:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
    1498:	e0bffd17 	ldw	r2,-12(fp)
}
    149c:	e037883a 	mov	sp,fp
    14a0:	df000017 	ldw	fp,0(sp)
    14a4:	dec00104 	addi	sp,sp,4
    14a8:	f800283a 	ret

000014ac <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    14ac:	defff204 	addi	sp,sp,-56
    14b0:	dfc00d15 	stw	ra,52(sp)
    14b4:	df000c15 	stw	fp,48(sp)
    14b8:	df000c04 	addi	fp,sp,48
    14bc:	e13ffa15 	stw	r4,-24(fp)
    14c0:	e17ffb15 	stw	r5,-20(fp)
    14c4:	e1bffc15 	stw	r6,-16(fp)
    14c8:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    14cc:	e0bffa17 	ldw	r2,-24(fp)
    14d0:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    14d4:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    14d8:	e13ffa17 	ldw	r4,-24(fp)
    14dc:	e17ffc17 	ldw	r5,-16(fp)
    14e0:	00014180 	call	1418 <alt_epcs_test_address>
    14e4:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    14e8:	e0bff917 	ldw	r2,-28(fp)
    14ec:	1004803a 	cmplt	r2,r2,zero
    14f0:	10002f1e 	bne	r2,zero,15b0 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    14f4:	00002b06 	br	15a4 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    14f8:	e0bff817 	ldw	r2,-32(fp)
    14fc:	10c03017 	ldw	r3,192(r2)
    1500:	e0bffc17 	ldw	r2,-16(fp)
    1504:	1887883a 	add	r3,r3,r2
    1508:	e0bff817 	ldw	r2,-32(fp)
    150c:	10803017 	ldw	r2,192(r2)
    1510:	0085c83a 	sub	r2,zero,r2
    1514:	1884703a 	and	r2,r3,r2
    1518:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    151c:	e0fff517 	ldw	r3,-44(fp)
    1520:	e0bffc17 	ldw	r2,-16(fp)
    1524:	1885c83a 	sub	r2,r3,r2
    1528:	e0c00217 	ldw	r3,8(fp)
    152c:	e0ffff15 	stw	r3,-4(fp)
    1530:	e0bffe15 	stw	r2,-8(fp)
    1534:	e0bfff17 	ldw	r2,-4(fp)
    1538:	e0fffe17 	ldw	r3,-8(fp)
    153c:	10c0020e 	bge	r2,r3,1548 <alt_epcs_flash_write_block+0x9c>
    1540:	e0bfff17 	ldw	r2,-4(fp)
    1544:	e0bffe15 	stw	r2,-8(fp)
    1548:	e0fffe17 	ldw	r3,-8(fp)
    154c:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    1550:	e0bff817 	ldw	r2,-32(fp)
    1554:	11002d17 	ldw	r4,180(r2)
    1558:	e0fffd17 	ldw	r3,-12(fp)
    155c:	e0bff717 	ldw	r2,-36(fp)
    1560:	188d883a 	add	r6,r3,r2
    1564:	e0bff817 	ldw	r2,-32(fp)
    1568:	10803117 	ldw	r2,196(r2)
    156c:	d8800015 	stw	r2,0(sp)
    1570:	e17ffc17 	ldw	r5,-16(fp)
    1574:	e1fff617 	ldw	r7,-40(fp)
    1578:	0002f840 	call	2f84 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    157c:	e0c00217 	ldw	r3,8(fp)
    1580:	e0bff617 	ldw	r2,-40(fp)
    1584:	1885c83a 	sub	r2,r3,r2
    1588:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    158c:	e0fff717 	ldw	r3,-36(fp)
    1590:	e0bff617 	ldw	r2,-40(fp)
    1594:	1885883a 	add	r2,r3,r2
    1598:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    159c:	e0bff517 	ldw	r2,-44(fp)
    15a0:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    15a4:	e0800217 	ldw	r2,8(fp)
    15a8:	1004c03a 	cmpne	r2,r2,zero
    15ac:	103fd21e 	bne	r2,zero,14f8 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    15b0:	e0bff917 	ldw	r2,-28(fp)
}
    15b4:	e037883a 	mov	sp,fp
    15b8:	dfc00117 	ldw	ra,4(sp)
    15bc:	df000017 	ldw	fp,0(sp)
    15c0:	dec00204 	addi	sp,sp,8
    15c4:	f800283a 	ret

000015c8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    15c8:	defff704 	addi	sp,sp,-36
    15cc:	dfc00815 	stw	ra,32(sp)
    15d0:	df000715 	stw	fp,28(sp)
    15d4:	df000704 	addi	fp,sp,28
    15d8:	e13ffc15 	stw	r4,-16(fp)
    15dc:	e17ffd15 	stw	r5,-12(fp)
    15e0:	e1bffe15 	stw	r6,-8(fp)
    15e4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    15e8:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    15ec:	e0bffc17 	ldw	r2,-16(fp)
    15f0:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    15f4:	e13ffc17 	ldw	r4,-16(fp)
    15f8:	e17ffd17 	ldw	r5,-12(fp)
    15fc:	00014180 	call	1418 <alt_epcs_test_address>
    1600:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
    1604:	e0bffb17 	ldw	r2,-20(fp)
    1608:	1004803a 	cmplt	r2,r2,zero
    160c:	10000e1e 	bne	r2,zero,1648 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    1610:	e0bffa17 	ldw	r2,-24(fp)
    1614:	11002d17 	ldw	r4,180(r2)
    1618:	e1bffe17 	ldw	r6,-8(fp)
    161c:	e0bffa17 	ldw	r2,-24(fp)
    1620:	10803117 	ldw	r2,196(r2)
    1624:	d8800015 	stw	r2,0(sp)
    1628:	e17ffd17 	ldw	r5,-12(fp)
    162c:	e1ffff17 	ldw	r7,-4(fp)
    1630:	0002d840 	call	2d84 <epcs_read_buffer>
    1634:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    1638:	e0fffb17 	ldw	r3,-20(fp)
    163c:	e0bfff17 	ldw	r2,-4(fp)
    1640:	1880011e 	bne	r3,r2,1648 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    1644:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
    1648:	e0bffb17 	ldw	r2,-20(fp)
}
    164c:	e037883a 	mov	sp,fp
    1650:	dfc00117 	ldw	ra,4(sp)
    1654:	df000017 	ldw	fp,0(sp)
    1658:	dec00204 	addi	sp,sp,8
    165c:	f800283a 	ret

00001660 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1660:	defffa04 	addi	sp,sp,-24
    1664:	dfc00515 	stw	ra,20(sp)
    1668:	df000415 	stw	fp,16(sp)
    166c:	df000404 	addi	fp,sp,16
    1670:	e13ffd15 	stw	r4,-12(fp)
    1674:	e17ffe15 	stw	r5,-8(fp)
    1678:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    167c:	e0bffd17 	ldw	r2,-12(fp)
    1680:	10800017 	ldw	r2,0(r2)
    1684:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1688:	e0bffc17 	ldw	r2,-16(fp)
    168c:	11000a04 	addi	r4,r2,40
    1690:	e0bffd17 	ldw	r2,-12(fp)
    1694:	11c00217 	ldw	r7,8(r2)
    1698:	e17ffe17 	ldw	r5,-8(fp)
    169c:	e1bfff17 	ldw	r6,-4(fp)
    16a0:	0001ca80 	call	1ca8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    16a4:	e037883a 	mov	sp,fp
    16a8:	dfc00117 	ldw	ra,4(sp)
    16ac:	df000017 	ldw	fp,0(sp)
    16b0:	dec00204 	addi	sp,sp,8
    16b4:	f800283a 	ret

000016b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    16b8:	defffa04 	addi	sp,sp,-24
    16bc:	dfc00515 	stw	ra,20(sp)
    16c0:	df000415 	stw	fp,16(sp)
    16c4:	df000404 	addi	fp,sp,16
    16c8:	e13ffd15 	stw	r4,-12(fp)
    16cc:	e17ffe15 	stw	r5,-8(fp)
    16d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    16d4:	e0bffd17 	ldw	r2,-12(fp)
    16d8:	10800017 	ldw	r2,0(r2)
    16dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    16e0:	e0bffc17 	ldw	r2,-16(fp)
    16e4:	11000a04 	addi	r4,r2,40
    16e8:	e0bffd17 	ldw	r2,-12(fp)
    16ec:	11c00217 	ldw	r7,8(r2)
    16f0:	e17ffe17 	ldw	r5,-8(fp)
    16f4:	e1bfff17 	ldw	r6,-4(fp)
    16f8:	0001ecc0 	call	1ecc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    16fc:	e037883a 	mov	sp,fp
    1700:	dfc00117 	ldw	ra,4(sp)
    1704:	df000017 	ldw	fp,0(sp)
    1708:	dec00204 	addi	sp,sp,8
    170c:	f800283a 	ret

00001710 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1710:	defffc04 	addi	sp,sp,-16
    1714:	dfc00315 	stw	ra,12(sp)
    1718:	df000215 	stw	fp,8(sp)
    171c:	df000204 	addi	fp,sp,8
    1720:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1724:	e0bfff17 	ldw	r2,-4(fp)
    1728:	10800017 	ldw	r2,0(r2)
    172c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1730:	e0bffe17 	ldw	r2,-8(fp)
    1734:	11000a04 	addi	r4,r2,40
    1738:	e0bfff17 	ldw	r2,-4(fp)
    173c:	11400217 	ldw	r5,8(r2)
    1740:	0001b400 	call	1b40 <altera_avalon_jtag_uart_close>
}
    1744:	e037883a 	mov	sp,fp
    1748:	dfc00117 	ldw	ra,4(sp)
    174c:	df000017 	ldw	fp,0(sp)
    1750:	dec00204 	addi	sp,sp,8
    1754:	f800283a 	ret

00001758 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1758:	defffa04 	addi	sp,sp,-24
    175c:	dfc00515 	stw	ra,20(sp)
    1760:	df000415 	stw	fp,16(sp)
    1764:	df000404 	addi	fp,sp,16
    1768:	e13ffd15 	stw	r4,-12(fp)
    176c:	e17ffe15 	stw	r5,-8(fp)
    1770:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1774:	e0bffd17 	ldw	r2,-12(fp)
    1778:	10800017 	ldw	r2,0(r2)
    177c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1780:	e0bffc17 	ldw	r2,-16(fp)
    1784:	11000a04 	addi	r4,r2,40
    1788:	e17ffe17 	ldw	r5,-8(fp)
    178c:	e1bfff17 	ldw	r6,-4(fp)
    1790:	0001bb40 	call	1bb4 <altera_avalon_jtag_uart_ioctl>
}
    1794:	e037883a 	mov	sp,fp
    1798:	dfc00117 	ldw	ra,4(sp)
    179c:	df000017 	ldw	fp,0(sp)
    17a0:	dec00204 	addi	sp,sp,8
    17a4:	f800283a 	ret

000017a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    17a8:	defffa04 	addi	sp,sp,-24
    17ac:	dfc00515 	stw	ra,20(sp)
    17b0:	df000415 	stw	fp,16(sp)
    17b4:	df000404 	addi	fp,sp,16
    17b8:	e13ffd15 	stw	r4,-12(fp)
    17bc:	e17ffe15 	stw	r5,-8(fp)
    17c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    17c4:	e0fffd17 	ldw	r3,-12(fp)
    17c8:	00800044 	movi	r2,1
    17cc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    17d0:	e0bffd17 	ldw	r2,-12(fp)
    17d4:	10800017 	ldw	r2,0(r2)
    17d8:	11000104 	addi	r4,r2,4
    17dc:	e0bffd17 	ldw	r2,-12(fp)
    17e0:	10800817 	ldw	r2,32(r2)
    17e4:	1007883a 	mov	r3,r2
    17e8:	2005883a 	mov	r2,r4
    17ec:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    17f0:	e13ffe17 	ldw	r4,-8(fp)
    17f4:	e17fff17 	ldw	r5,-4(fp)
    17f8:	d8000015 	stw	zero,0(sp)
    17fc:	01800034 	movhi	r6,0
    1800:	31861a04 	addi	r6,r6,6248
    1804:	e1fffd17 	ldw	r7,-12(fp)
    1808:	00007c00 	call	7c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    180c:	e0bffd17 	ldw	r2,-12(fp)
    1810:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1814:	e0bffd17 	ldw	r2,-12(fp)
    1818:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    181c:	00800034 	movhi	r2,0
    1820:	10992004 	addi	r2,r2,25728
    1824:	10800017 	ldw	r2,0(r2)
    1828:	100b883a 	mov	r5,r2
    182c:	01800034 	movhi	r6,0
    1830:	3186a404 	addi	r6,r6,6800
    1834:	e1fffd17 	ldw	r7,-12(fp)
    1838:	00032900 	call	3290 <alt_alarm_start>
    183c:	1004403a 	cmpge	r2,r2,zero
    1840:	1000041e 	bne	r2,zero,1854 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1844:	e0fffd17 	ldw	r3,-12(fp)
    1848:	00a00034 	movhi	r2,32768
    184c:	10bfffc4 	addi	r2,r2,-1
    1850:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1854:	e037883a 	mov	sp,fp
    1858:	dfc00117 	ldw	ra,4(sp)
    185c:	df000017 	ldw	fp,0(sp)
    1860:	dec00204 	addi	sp,sp,8
    1864:	f800283a 	ret

00001868 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1868:	defff804 	addi	sp,sp,-32
    186c:	df000715 	stw	fp,28(sp)
    1870:	df000704 	addi	fp,sp,28
    1874:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1878:	e0bfff17 	ldw	r2,-4(fp)
    187c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    1880:	e0bffe17 	ldw	r2,-8(fp)
    1884:	10800017 	ldw	r2,0(r2)
    1888:	e0bffd15 	stw	r2,-12(fp)
    188c:	00000006 	br	1890 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1890:	e0bffd17 	ldw	r2,-12(fp)
    1894:	10800104 	addi	r2,r2,4
    1898:	10800037 	ldwio	r2,0(r2)
    189c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    18a0:	e0bffc17 	ldw	r2,-16(fp)
    18a4:	1080c00c 	andi	r2,r2,768
    18a8:	1005003a 	cmpeq	r2,r2,zero
    18ac:	1000741e 	bne	r2,zero,1a80 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    18b0:	e0bffc17 	ldw	r2,-16(fp)
    18b4:	1080400c 	andi	r2,r2,256
    18b8:	1005003a 	cmpeq	r2,r2,zero
    18bc:	1000351e 	bne	r2,zero,1994 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    18c0:	00800074 	movhi	r2,1
    18c4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    18c8:	e0bffe17 	ldw	r2,-8(fp)
    18cc:	10800a17 	ldw	r2,40(r2)
    18d0:	10800044 	addi	r2,r2,1
    18d4:	1081ffcc 	andi	r2,r2,2047
    18d8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    18dc:	e0bffe17 	ldw	r2,-8(fp)
    18e0:	10c00b17 	ldw	r3,44(r2)
    18e4:	e0bffa17 	ldw	r2,-24(fp)
    18e8:	18801626 	beq	r3,r2,1944 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    18ec:	e0bffd17 	ldw	r2,-12(fp)
    18f0:	10800037 	ldwio	r2,0(r2)
    18f4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    18f8:	e0bffb17 	ldw	r2,-20(fp)
    18fc:	10a0000c 	andi	r2,r2,32768
    1900:	1005003a 	cmpeq	r2,r2,zero
    1904:	10000f1e 	bne	r2,zero,1944 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1908:	e0bffe17 	ldw	r2,-8(fp)
    190c:	10c00a17 	ldw	r3,40(r2)
    1910:	e0bffb17 	ldw	r2,-20(fp)
    1914:	1009883a 	mov	r4,r2
    1918:	e0bffe17 	ldw	r2,-8(fp)
    191c:	1885883a 	add	r2,r3,r2
    1920:	10800e04 	addi	r2,r2,56
    1924:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1928:	e0bffe17 	ldw	r2,-8(fp)
    192c:	10800a17 	ldw	r2,40(r2)
    1930:	10800044 	addi	r2,r2,1
    1934:	10c1ffcc 	andi	r3,r2,2047
    1938:	e0bffe17 	ldw	r2,-8(fp)
    193c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1940:	003fe106 	br	18c8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1944:	e0bffb17 	ldw	r2,-20(fp)
    1948:	10bfffec 	andhi	r2,r2,65535
    194c:	1005003a 	cmpeq	r2,r2,zero
    1950:	1000101e 	bne	r2,zero,1994 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1954:	e0bffe17 	ldw	r2,-8(fp)
    1958:	10c00817 	ldw	r3,32(r2)
    195c:	00bfff84 	movi	r2,-2
    1960:	1886703a 	and	r3,r3,r2
    1964:	e0bffe17 	ldw	r2,-8(fp)
    1968:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    196c:	e0bffd17 	ldw	r2,-12(fp)
    1970:	11000104 	addi	r4,r2,4
    1974:	e0bffe17 	ldw	r2,-8(fp)
    1978:	10800817 	ldw	r2,32(r2)
    197c:	1007883a 	mov	r3,r2
    1980:	2005883a 	mov	r2,r4
    1984:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1988:	e0bffd17 	ldw	r2,-12(fp)
    198c:	10800104 	addi	r2,r2,4
    1990:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1994:	e0bffc17 	ldw	r2,-16(fp)
    1998:	1080800c 	andi	r2,r2,512
    199c:	1005003a 	cmpeq	r2,r2,zero
    19a0:	103fbb1e 	bne	r2,zero,1890 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    19a4:	e0bffc17 	ldw	r2,-16(fp)
    19a8:	10bfffec 	andhi	r2,r2,65535
    19ac:	1004d43a 	srli	r2,r2,16
    19b0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    19b4:	00001506 	br	1a0c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    19b8:	e13ffd17 	ldw	r4,-12(fp)
    19bc:	e0bffe17 	ldw	r2,-8(fp)
    19c0:	10c00d17 	ldw	r3,52(r2)
    19c4:	e0bffe17 	ldw	r2,-8(fp)
    19c8:	1885883a 	add	r2,r3,r2
    19cc:	10820e04 	addi	r2,r2,2104
    19d0:	10800003 	ldbu	r2,0(r2)
    19d4:	10c03fcc 	andi	r3,r2,255
    19d8:	18c0201c 	xori	r3,r3,128
    19dc:	18ffe004 	addi	r3,r3,-128
    19e0:	2005883a 	mov	r2,r4
    19e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    19e8:	e0bffe17 	ldw	r2,-8(fp)
    19ec:	10800d17 	ldw	r2,52(r2)
    19f0:	10800044 	addi	r2,r2,1
    19f4:	10c1ffcc 	andi	r3,r2,2047
    19f8:	e0bffe17 	ldw	r2,-8(fp)
    19fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1a00:	e0bff917 	ldw	r2,-28(fp)
    1a04:	10bfffc4 	addi	r2,r2,-1
    1a08:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1a0c:	e0bff917 	ldw	r2,-28(fp)
    1a10:	1005003a 	cmpeq	r2,r2,zero
    1a14:	1000051e 	bne	r2,zero,1a2c <altera_avalon_jtag_uart_irq+0x1c4>
    1a18:	e0bffe17 	ldw	r2,-8(fp)
    1a1c:	10c00d17 	ldw	r3,52(r2)
    1a20:	e0bffe17 	ldw	r2,-8(fp)
    1a24:	10800c17 	ldw	r2,48(r2)
    1a28:	18bfe31e 	bne	r3,r2,19b8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1a2c:	e0bff917 	ldw	r2,-28(fp)
    1a30:	1005003a 	cmpeq	r2,r2,zero
    1a34:	103f961e 	bne	r2,zero,1890 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1a38:	e0bffe17 	ldw	r2,-8(fp)
    1a3c:	10c00817 	ldw	r3,32(r2)
    1a40:	00bfff44 	movi	r2,-3
    1a44:	1886703a 	and	r3,r3,r2
    1a48:	e0bffe17 	ldw	r2,-8(fp)
    1a4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1a50:	e0bffe17 	ldw	r2,-8(fp)
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	11000104 	addi	r4,r2,4
    1a5c:	e0bffe17 	ldw	r2,-8(fp)
    1a60:	10800817 	ldw	r2,32(r2)
    1a64:	1007883a 	mov	r3,r2
    1a68:	2005883a 	mov	r2,r4
    1a6c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1a70:	e0bffd17 	ldw	r2,-12(fp)
    1a74:	10800104 	addi	r2,r2,4
    1a78:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1a7c:	003f8406 	br	1890 <altera_avalon_jtag_uart_irq+0x28>
}
    1a80:	e037883a 	mov	sp,fp
    1a84:	df000017 	ldw	fp,0(sp)
    1a88:	dec00104 	addi	sp,sp,4
    1a8c:	f800283a 	ret

00001a90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1a90:	defffc04 	addi	sp,sp,-16
    1a94:	df000315 	stw	fp,12(sp)
    1a98:	df000304 	addi	fp,sp,12
    1a9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1aa0:	e0bfff17 	ldw	r2,-4(fp)
    1aa4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	10800017 	ldw	r2,0(r2)
    1ab0:	10800104 	addi	r2,r2,4
    1ab4:	10800037 	ldwio	r2,0(r2)
    1ab8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1abc:	e0bffd17 	ldw	r2,-12(fp)
    1ac0:	1081000c 	andi	r2,r2,1024
    1ac4:	1005003a 	cmpeq	r2,r2,zero
    1ac8:	10000c1e 	bne	r2,zero,1afc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1acc:	e0bffe17 	ldw	r2,-8(fp)
    1ad0:	10800017 	ldw	r2,0(r2)
    1ad4:	11000104 	addi	r4,r2,4
    1ad8:	e0bffe17 	ldw	r2,-8(fp)
    1adc:	10800817 	ldw	r2,32(r2)
    1ae0:	10810014 	ori	r2,r2,1024
    1ae4:	1007883a 	mov	r3,r2
    1ae8:	2005883a 	mov	r2,r4
    1aec:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    1af0:	e0bffe17 	ldw	r2,-8(fp)
    1af4:	10000915 	stw	zero,36(r2)
    1af8:	00000a06 	br	1b24 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1afc:	e0bffe17 	ldw	r2,-8(fp)
    1b00:	10c00917 	ldw	r3,36(r2)
    1b04:	00a00034 	movhi	r2,32768
    1b08:	10bfff04 	addi	r2,r2,-4
    1b0c:	10c00536 	bltu	r2,r3,1b24 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    1b10:	e0bffe17 	ldw	r2,-8(fp)
    1b14:	10800917 	ldw	r2,36(r2)
    1b18:	10c00044 	addi	r3,r2,1
    1b1c:	e0bffe17 	ldw	r2,-8(fp)
    1b20:	10c00915 	stw	r3,36(r2)
    1b24:	00800034 	movhi	r2,0
    1b28:	10992004 	addi	r2,r2,25728
    1b2c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1b30:	e037883a 	mov	sp,fp
    1b34:	df000017 	ldw	fp,0(sp)
    1b38:	dec00104 	addi	sp,sp,4
    1b3c:	f800283a 	ret

00001b40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1b40:	defffc04 	addi	sp,sp,-16
    1b44:	df000315 	stw	fp,12(sp)
    1b48:	df000304 	addi	fp,sp,12
    1b4c:	e13ffd15 	stw	r4,-12(fp)
    1b50:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1b54:	00000706 	br	1b74 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    1b58:	e0bffe17 	ldw	r2,-8(fp)
    1b5c:	1090000c 	andi	r2,r2,16384
    1b60:	1005003a 	cmpeq	r2,r2,zero
    1b64:	1000031e 	bne	r2,zero,1b74 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    1b68:	00bffd44 	movi	r2,-11
    1b6c:	e0bfff15 	stw	r2,-4(fp)
    1b70:	00000b06 	br	1ba0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1b74:	e0bffd17 	ldw	r2,-12(fp)
    1b78:	10c00d17 	ldw	r3,52(r2)
    1b7c:	e0bffd17 	ldw	r2,-12(fp)
    1b80:	10800c17 	ldw	r2,48(r2)
    1b84:	18800526 	beq	r3,r2,1b9c <altera_avalon_jtag_uart_close+0x5c>
    1b88:	e0bffd17 	ldw	r2,-12(fp)
    1b8c:	10c00917 	ldw	r3,36(r2)
    1b90:	e0bffd17 	ldw	r2,-12(fp)
    1b94:	10800117 	ldw	r2,4(r2)
    1b98:	18bfef36 	bltu	r3,r2,1b58 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1b9c:	e03fff15 	stw	zero,-4(fp)
    1ba0:	e0bfff17 	ldw	r2,-4(fp)
}
    1ba4:	e037883a 	mov	sp,fp
    1ba8:	df000017 	ldw	fp,0(sp)
    1bac:	dec00104 	addi	sp,sp,4
    1bb0:	f800283a 	ret

00001bb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1bb4:	defff804 	addi	sp,sp,-32
    1bb8:	df000715 	stw	fp,28(sp)
    1bbc:	df000704 	addi	fp,sp,28
    1bc0:	e13ffb15 	stw	r4,-20(fp)
    1bc4:	e17ffc15 	stw	r5,-16(fp)
    1bc8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    1bcc:	00bff9c4 	movi	r2,-25
    1bd0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    1bd4:	e0bffc17 	ldw	r2,-16(fp)
    1bd8:	e0bfff15 	stw	r2,-4(fp)
    1bdc:	e0ffff17 	ldw	r3,-4(fp)
    1be0:	189a8060 	cmpeqi	r2,r3,27137
    1be4:	1000041e 	bne	r2,zero,1bf8 <altera_avalon_jtag_uart_ioctl+0x44>
    1be8:	e0ffff17 	ldw	r3,-4(fp)
    1bec:	189a80a0 	cmpeqi	r2,r3,27138
    1bf0:	10001b1e 	bne	r2,zero,1c60 <altera_avalon_jtag_uart_ioctl+0xac>
    1bf4:	00002706 	br	1c94 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1bf8:	e0bffb17 	ldw	r2,-20(fp)
    1bfc:	10c00117 	ldw	r3,4(r2)
    1c00:	00a00034 	movhi	r2,32768
    1c04:	10bfffc4 	addi	r2,r2,-1
    1c08:	18802226 	beq	r3,r2,1c94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    1c0c:	e0bffd17 	ldw	r2,-12(fp)
    1c10:	10800017 	ldw	r2,0(r2)
    1c14:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1c18:	e0bff917 	ldw	r2,-28(fp)
    1c1c:	10800090 	cmplti	r2,r2,2
    1c20:	1000071e 	bne	r2,zero,1c40 <altera_avalon_jtag_uart_ioctl+0x8c>
    1c24:	e0fff917 	ldw	r3,-28(fp)
    1c28:	00a00034 	movhi	r2,32768
    1c2c:	10bfffc4 	addi	r2,r2,-1
    1c30:	18800326 	beq	r3,r2,1c40 <altera_avalon_jtag_uart_ioctl+0x8c>
    1c34:	e0bff917 	ldw	r2,-28(fp)
    1c38:	e0bffe15 	stw	r2,-8(fp)
    1c3c:	00000306 	br	1c4c <altera_avalon_jtag_uart_ioctl+0x98>
    1c40:	00e00034 	movhi	r3,32768
    1c44:	18ffff84 	addi	r3,r3,-2
    1c48:	e0fffe15 	stw	r3,-8(fp)
    1c4c:	e0bffb17 	ldw	r2,-20(fp)
    1c50:	e0fffe17 	ldw	r3,-8(fp)
    1c54:	10c00115 	stw	r3,4(r2)
      rc = 0;
    1c58:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    1c5c:	00000d06 	br	1c94 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1c60:	e0bffb17 	ldw	r2,-20(fp)
    1c64:	10c00117 	ldw	r3,4(r2)
    1c68:	00a00034 	movhi	r2,32768
    1c6c:	10bfffc4 	addi	r2,r2,-1
    1c70:	18800826 	beq	r3,r2,1c94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1c74:	e13ffd17 	ldw	r4,-12(fp)
    1c78:	e0bffb17 	ldw	r2,-20(fp)
    1c7c:	10c00917 	ldw	r3,36(r2)
    1c80:	e0bffb17 	ldw	r2,-20(fp)
    1c84:	10800117 	ldw	r2,4(r2)
    1c88:	1885803a 	cmpltu	r2,r3,r2
    1c8c:	20800015 	stw	r2,0(r4)
      rc = 0;
    1c90:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    1c94:	e0bffa17 	ldw	r2,-24(fp)
}
    1c98:	e037883a 	mov	sp,fp
    1c9c:	df000017 	ldw	fp,0(sp)
    1ca0:	dec00104 	addi	sp,sp,4
    1ca4:	f800283a 	ret

00001ca8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1ca8:	defff204 	addi	sp,sp,-56
    1cac:	dfc00d15 	stw	ra,52(sp)
    1cb0:	df000c15 	stw	fp,48(sp)
    1cb4:	df000c04 	addi	fp,sp,48
    1cb8:	e13ffb15 	stw	r4,-20(fp)
    1cbc:	e17ffc15 	stw	r5,-16(fp)
    1cc0:	e1bffd15 	stw	r6,-12(fp)
    1cc4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    1cc8:	e0bffc17 	ldw	r2,-16(fp)
    1ccc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1cd0:	00004806 	br	1df4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1cd4:	e0bffb17 	ldw	r2,-20(fp)
    1cd8:	10800a17 	ldw	r2,40(r2)
    1cdc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1ce0:	e0bffb17 	ldw	r2,-20(fp)
    1ce4:	10800b17 	ldw	r2,44(r2)
    1ce8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    1cec:	e0fff717 	ldw	r3,-36(fp)
    1cf0:	e0bff617 	ldw	r2,-40(fp)
    1cf4:	18800536 	bltu	r3,r2,1d0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1cf8:	e0bff717 	ldw	r2,-36(fp)
    1cfc:	e0fff617 	ldw	r3,-40(fp)
    1d00:	10c5c83a 	sub	r2,r2,r3
    1d04:	e0bff815 	stw	r2,-32(fp)
    1d08:	00000406 	br	1d1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1d0c:	00820004 	movi	r2,2048
    1d10:	e0fff617 	ldw	r3,-40(fp)
    1d14:	10c5c83a 	sub	r2,r2,r3
    1d18:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    1d1c:	e0bff817 	ldw	r2,-32(fp)
    1d20:	1005003a 	cmpeq	r2,r2,zero
    1d24:	10001f1e 	bne	r2,zero,1da4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    1d28:	e0fffd17 	ldw	r3,-12(fp)
    1d2c:	e0bff817 	ldw	r2,-32(fp)
    1d30:	1880022e 	bgeu	r3,r2,1d3c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1d34:	e0bffd17 	ldw	r2,-12(fp)
    1d38:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    1d3c:	e0bffb17 	ldw	r2,-20(fp)
    1d40:	10c00e04 	addi	r3,r2,56
    1d44:	e0bff617 	ldw	r2,-40(fp)
    1d48:	1887883a 	add	r3,r3,r2
    1d4c:	e0bffa17 	ldw	r2,-24(fp)
    1d50:	1009883a 	mov	r4,r2
    1d54:	180b883a 	mov	r5,r3
    1d58:	e1bff817 	ldw	r6,-32(fp)
    1d5c:	00044080 	call	4408 <memcpy>
      ptr   += n;
    1d60:	e0fff817 	ldw	r3,-32(fp)
    1d64:	e0bffa17 	ldw	r2,-24(fp)
    1d68:	10c5883a 	add	r2,r2,r3
    1d6c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    1d70:	e0fffd17 	ldw	r3,-12(fp)
    1d74:	e0bff817 	ldw	r2,-32(fp)
    1d78:	1885c83a 	sub	r2,r3,r2
    1d7c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1d80:	e0fff617 	ldw	r3,-40(fp)
    1d84:	e0bff817 	ldw	r2,-32(fp)
    1d88:	1885883a 	add	r2,r3,r2
    1d8c:	10c1ffcc 	andi	r3,r2,2047
    1d90:	e0bffb17 	ldw	r2,-20(fp)
    1d94:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1d98:	e0bffd17 	ldw	r2,-12(fp)
    1d9c:	10800048 	cmpgei	r2,r2,1
    1da0:	103fcc1e 	bne	r2,zero,1cd4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    1da4:	e0fffa17 	ldw	r3,-24(fp)
    1da8:	e0bffc17 	ldw	r2,-16(fp)
    1dac:	1880141e 	bne	r3,r2,1e00 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1db0:	e0bffe17 	ldw	r2,-8(fp)
    1db4:	1090000c 	andi	r2,r2,16384
    1db8:	1004c03a 	cmpne	r2,r2,zero
    1dbc:	1000101e 	bne	r2,zero,1e00 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1dc0:	e0bffb17 	ldw	r2,-20(fp)
    1dc4:	10c00a17 	ldw	r3,40(r2)
    1dc8:	e0bff717 	ldw	r2,-36(fp)
    1dcc:	1880051e 	bne	r3,r2,1de4 <altera_avalon_jtag_uart_read+0x13c>
    1dd0:	e0bffb17 	ldw	r2,-20(fp)
    1dd4:	10c00917 	ldw	r3,36(r2)
    1dd8:	e0bffb17 	ldw	r2,-20(fp)
    1ddc:	10800117 	ldw	r2,4(r2)
    1de0:	18bff736 	bltu	r3,r2,1dc0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1de4:	e0bffb17 	ldw	r2,-20(fp)
    1de8:	10c00a17 	ldw	r3,40(r2)
    1dec:	e0bff717 	ldw	r2,-36(fp)
    1df0:	18800326 	beq	r3,r2,1e00 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1df4:	e0bffd17 	ldw	r2,-12(fp)
    1df8:	10800048 	cmpgei	r2,r2,1
    1dfc:	103fb51e 	bne	r2,zero,1cd4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1e00:	e0fffa17 	ldw	r3,-24(fp)
    1e04:	e0bffc17 	ldw	r2,-16(fp)
    1e08:	18801926 	beq	r3,r2,1e70 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e0c:	0005303a 	rdctl	r2,status
    1e10:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e14:	e0fff517 	ldw	r3,-44(fp)
    1e18:	00bfff84 	movi	r2,-2
    1e1c:	1884703a 	and	r2,r3,r2
    1e20:	1001703a 	wrctl	status,r2
  
  return context;
    1e24:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1e28:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1e2c:	e0bffb17 	ldw	r2,-20(fp)
    1e30:	10800817 	ldw	r2,32(r2)
    1e34:	10c00054 	ori	r3,r2,1
    1e38:	e0bffb17 	ldw	r2,-20(fp)
    1e3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1e40:	e0bffb17 	ldw	r2,-20(fp)
    1e44:	10800017 	ldw	r2,0(r2)
    1e48:	11000104 	addi	r4,r2,4
    1e4c:	e0bffb17 	ldw	r2,-20(fp)
    1e50:	10800817 	ldw	r2,32(r2)
    1e54:	1007883a 	mov	r3,r2
    1e58:	2005883a 	mov	r2,r4
    1e5c:	10c00035 	stwio	r3,0(r2)
    1e60:	e0bff917 	ldw	r2,-28(fp)
    1e64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e68:	e0bff417 	ldw	r2,-48(fp)
    1e6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1e70:	e0fffa17 	ldw	r3,-24(fp)
    1e74:	e0bffc17 	ldw	r2,-16(fp)
    1e78:	18800526 	beq	r3,r2,1e90 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    1e7c:	e0fffa17 	ldw	r3,-24(fp)
    1e80:	e0bffc17 	ldw	r2,-16(fp)
    1e84:	1887c83a 	sub	r3,r3,r2
    1e88:	e0ffff15 	stw	r3,-4(fp)
    1e8c:	00000906 	br	1eb4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    1e90:	e0bffe17 	ldw	r2,-8(fp)
    1e94:	1090000c 	andi	r2,r2,16384
    1e98:	1005003a 	cmpeq	r2,r2,zero
    1e9c:	1000031e 	bne	r2,zero,1eac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1ea0:	00bffd44 	movi	r2,-11
    1ea4:	e0bfff15 	stw	r2,-4(fp)
    1ea8:	00000206 	br	1eb4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    1eac:	00bffec4 	movi	r2,-5
    1eb0:	e0bfff15 	stw	r2,-4(fp)
    1eb4:	e0bfff17 	ldw	r2,-4(fp)
}
    1eb8:	e037883a 	mov	sp,fp
    1ebc:	dfc00117 	ldw	ra,4(sp)
    1ec0:	df000017 	ldw	fp,0(sp)
    1ec4:	dec00204 	addi	sp,sp,8
    1ec8:	f800283a 	ret

00001ecc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1ecc:	defff204 	addi	sp,sp,-56
    1ed0:	dfc00d15 	stw	ra,52(sp)
    1ed4:	df000c15 	stw	fp,48(sp)
    1ed8:	df000c04 	addi	fp,sp,48
    1edc:	e13ffb15 	stw	r4,-20(fp)
    1ee0:	e17ffc15 	stw	r5,-16(fp)
    1ee4:	e1bffd15 	stw	r6,-12(fp)
    1ee8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1eec:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1ef0:	e0bffc17 	ldw	r2,-16(fp)
    1ef4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1ef8:	00003a06 	br	1fe4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1efc:	e0bffb17 	ldw	r2,-20(fp)
    1f00:	10800c17 	ldw	r2,48(r2)
    1f04:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    1f08:	e0bffb17 	ldw	r2,-20(fp)
    1f0c:	10800d17 	ldw	r2,52(r2)
    1f10:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    1f14:	e0fffa17 	ldw	r3,-24(fp)
    1f18:	e0bff917 	ldw	r2,-28(fp)
    1f1c:	1880062e 	bgeu	r3,r2,1f38 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1f20:	e0fff917 	ldw	r3,-28(fp)
    1f24:	e0bffa17 	ldw	r2,-24(fp)
    1f28:	1885c83a 	sub	r2,r3,r2
    1f2c:	10bfffc4 	addi	r2,r2,-1
    1f30:	e0bff815 	stw	r2,-32(fp)
    1f34:	00000c06 	br	1f68 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    1f38:	e0bff917 	ldw	r2,-28(fp)
    1f3c:	1005003a 	cmpeq	r2,r2,zero
    1f40:	1000051e 	bne	r2,zero,1f58 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1f44:	00820004 	movi	r2,2048
    1f48:	e0fffa17 	ldw	r3,-24(fp)
    1f4c:	10c5c83a 	sub	r2,r2,r3
    1f50:	e0bff815 	stw	r2,-32(fp)
    1f54:	00000406 	br	1f68 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1f58:	0081ffc4 	movi	r2,2047
    1f5c:	e0fffa17 	ldw	r3,-24(fp)
    1f60:	10c5c83a 	sub	r2,r2,r3
    1f64:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    1f68:	e0bff817 	ldw	r2,-32(fp)
    1f6c:	1005003a 	cmpeq	r2,r2,zero
    1f70:	10001f1e 	bne	r2,zero,1ff0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    1f74:	e0fffd17 	ldw	r3,-12(fp)
    1f78:	e0bff817 	ldw	r2,-32(fp)
    1f7c:	1880022e 	bgeu	r3,r2,1f88 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    1f80:	e0bffd17 	ldw	r2,-12(fp)
    1f84:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1f88:	e0bffb17 	ldw	r2,-20(fp)
    1f8c:	10c20e04 	addi	r3,r2,2104
    1f90:	e0bffa17 	ldw	r2,-24(fp)
    1f94:	1885883a 	add	r2,r3,r2
    1f98:	e0fffc17 	ldw	r3,-16(fp)
    1f9c:	1009883a 	mov	r4,r2
    1fa0:	180b883a 	mov	r5,r3
    1fa4:	e1bff817 	ldw	r6,-32(fp)
    1fa8:	00044080 	call	4408 <memcpy>
      ptr   += n;
    1fac:	e0fff817 	ldw	r3,-32(fp)
    1fb0:	e0bffc17 	ldw	r2,-16(fp)
    1fb4:	10c5883a 	add	r2,r2,r3
    1fb8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    1fbc:	e0fffd17 	ldw	r3,-12(fp)
    1fc0:	e0bff817 	ldw	r2,-32(fp)
    1fc4:	1885c83a 	sub	r2,r3,r2
    1fc8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1fcc:	e0fffa17 	ldw	r3,-24(fp)
    1fd0:	e0bff817 	ldw	r2,-32(fp)
    1fd4:	1885883a 	add	r2,r3,r2
    1fd8:	10c1ffcc 	andi	r3,r2,2047
    1fdc:	e0bffb17 	ldw	r2,-20(fp)
    1fe0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1fe4:	e0bffd17 	ldw	r2,-12(fp)
    1fe8:	10800048 	cmpgei	r2,r2,1
    1fec:	103fc31e 	bne	r2,zero,1efc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ff0:	0005303a 	rdctl	r2,status
    1ff4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1ff8:	e0fff517 	ldw	r3,-44(fp)
    1ffc:	00bfff84 	movi	r2,-2
    2000:	1884703a 	and	r2,r3,r2
    2004:	1001703a 	wrctl	status,r2
  
  return context;
    2008:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    200c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2010:	e0bffb17 	ldw	r2,-20(fp)
    2014:	10800817 	ldw	r2,32(r2)
    2018:	10c00094 	ori	r3,r2,2
    201c:	e0bffb17 	ldw	r2,-20(fp)
    2020:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2024:	e0bffb17 	ldw	r2,-20(fp)
    2028:	10800017 	ldw	r2,0(r2)
    202c:	11000104 	addi	r4,r2,4
    2030:	e0bffb17 	ldw	r2,-20(fp)
    2034:	10800817 	ldw	r2,32(r2)
    2038:	1007883a 	mov	r3,r2
    203c:	2005883a 	mov	r2,r4
    2040:	10c00035 	stwio	r3,0(r2)
    2044:	e0bff717 	ldw	r2,-36(fp)
    2048:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    204c:	e0bff417 	ldw	r2,-48(fp)
    2050:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    2054:	e0bffd17 	ldw	r2,-12(fp)
    2058:	10800050 	cmplti	r2,r2,1
    205c:	1000111e 	bne	r2,zero,20a4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    2060:	e0bffe17 	ldw	r2,-8(fp)
    2064:	1090000c 	andi	r2,r2,16384
    2068:	1004c03a 	cmpne	r2,r2,zero
    206c:	1000101e 	bne	r2,zero,20b0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2070:	e0bffb17 	ldw	r2,-20(fp)
    2074:	10c00d17 	ldw	r3,52(r2)
    2078:	e0bff917 	ldw	r2,-28(fp)
    207c:	1880051e 	bne	r3,r2,2094 <altera_avalon_jtag_uart_write+0x1c8>
    2080:	e0bffb17 	ldw	r2,-20(fp)
    2084:	10c00917 	ldw	r3,36(r2)
    2088:	e0bffb17 	ldw	r2,-20(fp)
    208c:	10800117 	ldw	r2,4(r2)
    2090:	18bff736 	bltu	r3,r2,2070 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    2094:	e0bffb17 	ldw	r2,-20(fp)
    2098:	10c00d17 	ldw	r3,52(r2)
    209c:	e0bff917 	ldw	r2,-28(fp)
    20a0:	18800326 	beq	r3,r2,20b0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    20a4:	e0bffd17 	ldw	r2,-12(fp)
    20a8:	10800048 	cmpgei	r2,r2,1
    20ac:	103fcd1e 	bne	r2,zero,1fe4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    20b0:	e0fffc17 	ldw	r3,-16(fp)
    20b4:	e0bff617 	ldw	r2,-40(fp)
    20b8:	18800526 	beq	r3,r2,20d0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    20bc:	e0fffc17 	ldw	r3,-16(fp)
    20c0:	e0bff617 	ldw	r2,-40(fp)
    20c4:	1887c83a 	sub	r3,r3,r2
    20c8:	e0ffff15 	stw	r3,-4(fp)
    20cc:	00000906 	br	20f4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    20d0:	e0bffe17 	ldw	r2,-8(fp)
    20d4:	1090000c 	andi	r2,r2,16384
    20d8:	1005003a 	cmpeq	r2,r2,zero
    20dc:	1000031e 	bne	r2,zero,20ec <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    20e0:	00bffd44 	movi	r2,-11
    20e4:	e0bfff15 	stw	r2,-4(fp)
    20e8:	00000206 	br	20f4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    20ec:	00bffec4 	movi	r2,-5
    20f0:	e0bfff15 	stw	r2,-4(fp)
    20f4:	e0bfff17 	ldw	r2,-4(fp)
}
    20f8:	e037883a 	mov	sp,fp
    20fc:	dfc00117 	ldw	ra,4(sp)
    2100:	df000017 	ldw	fp,0(sp)
    2104:	dec00204 	addi	sp,sp,8
    2108:	f800283a 	ret

0000210c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    210c:	defffa04 	addi	sp,sp,-24
    2110:	dfc00515 	stw	ra,20(sp)
    2114:	df000415 	stw	fp,16(sp)
    2118:	df000404 	addi	fp,sp,16
    211c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    2120:	e0bfff17 	ldw	r2,-4(fp)
    2124:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    2128:	e0bfff17 	ldw	r2,-4(fp)
    212c:	10800104 	addi	r2,r2,4
    2130:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2134:	0005303a 	rdctl	r2,status
    2138:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    213c:	e0fffd17 	ldw	r3,-12(fp)
    2140:	00bfff84 	movi	r2,-2
    2144:	1884703a 	and	r2,r3,r2
    2148:	1001703a 	wrctl	status,r2
  
  return context;
    214c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    2150:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    2154:	0003d600 	call	3d60 <alt_tick>
    2158:	e0bffe17 	ldw	r2,-8(fp)
    215c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2160:	e0bffc17 	ldw	r2,-16(fp)
    2164:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    2168:	e037883a 	mov	sp,fp
    216c:	dfc00117 	ldw	ra,4(sp)
    2170:	df000017 	ldw	fp,0(sp)
    2174:	dec00204 	addi	sp,sp,8
    2178:	f800283a 	ret

0000217c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    217c:	defff804 	addi	sp,sp,-32
    2180:	dfc00715 	stw	ra,28(sp)
    2184:	df000615 	stw	fp,24(sp)
    2188:	df000604 	addi	fp,sp,24
    218c:	e13ffc15 	stw	r4,-16(fp)
    2190:	e17ffd15 	stw	r5,-12(fp)
    2194:	e1bffe15 	stw	r6,-8(fp)
    2198:	e1ffff15 	stw	r7,-4(fp)
    219c:	e0bfff17 	ldw	r2,-4(fp)
    21a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    21a4:	00800034 	movhi	r2,0
    21a8:	10992004 	addi	r2,r2,25728
    21ac:	10800017 	ldw	r2,0(r2)
    21b0:	1004c03a 	cmpne	r2,r2,zero
    21b4:	1000041e 	bne	r2,zero,21c8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    21b8:	00c00034 	movhi	r3,0
    21bc:	18d92004 	addi	r3,r3,25728
    21c0:	e0bffb17 	ldw	r2,-20(fp)
    21c4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    21c8:	e0bffc17 	ldw	r2,-16(fp)
    21cc:	10800104 	addi	r2,r2,4
    21d0:	1007883a 	mov	r3,r2
    21d4:	008001c4 	movi	r2,7
    21d8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    21dc:	d8000015 	stw	zero,0(sp)
    21e0:	e13ffd17 	ldw	r4,-12(fp)
    21e4:	e17ffe17 	ldw	r5,-8(fp)
    21e8:	01800034 	movhi	r6,0
    21ec:	31884304 	addi	r6,r6,8460
    21f0:	e1fffc17 	ldw	r7,-16(fp)
    21f4:	00007c00 	call	7c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    21f8:	e037883a 	mov	sp,fp
    21fc:	dfc00117 	ldw	ra,4(sp)
    2200:	df000017 	ldw	fp,0(sp)
    2204:	dec00204 	addi	sp,sp,8
    2208:	f800283a 	ret

0000220c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    220c:	defffa04 	addi	sp,sp,-24
    2210:	dfc00515 	stw	ra,20(sp)
    2214:	df000415 	stw	fp,16(sp)
    2218:	df000404 	addi	fp,sp,16
    221c:	e13ffd15 	stw	r4,-12(fp)
    2220:	e17ffe15 	stw	r5,-8(fp)
    2224:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    2228:	e0bffd17 	ldw	r2,-12(fp)
    222c:	10800017 	ldw	r2,0(r2)
    2230:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    2234:	e0bffc17 	ldw	r2,-16(fp)
    2238:	11000a04 	addi	r4,r2,40
    223c:	e0bffd17 	ldw	r2,-12(fp)
    2240:	11c00217 	ldw	r7,8(r2)
    2244:	e17ffe17 	ldw	r5,-8(fp)
    2248:	e1bfff17 	ldw	r6,-4(fp)
    224c:	00027040 	call	2704 <altera_avalon_uart_read>
      fd->fd_flags);
}
    2250:	e037883a 	mov	sp,fp
    2254:	dfc00117 	ldw	ra,4(sp)
    2258:	df000017 	ldw	fp,0(sp)
    225c:	dec00204 	addi	sp,sp,8
    2260:	f800283a 	ret

00002264 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    2264:	defffa04 	addi	sp,sp,-24
    2268:	dfc00515 	stw	ra,20(sp)
    226c:	df000415 	stw	fp,16(sp)
    2270:	df000404 	addi	fp,sp,16
    2274:	e13ffd15 	stw	r4,-12(fp)
    2278:	e17ffe15 	stw	r5,-8(fp)
    227c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    2280:	e0bffd17 	ldw	r2,-12(fp)
    2284:	10800017 	ldw	r2,0(r2)
    2288:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    228c:	e0bffc17 	ldw	r2,-16(fp)
    2290:	11000a04 	addi	r4,r2,40
    2294:	e0bffd17 	ldw	r2,-12(fp)
    2298:	11c00217 	ldw	r7,8(r2)
    229c:	e17ffe17 	ldw	r5,-8(fp)
    22a0:	e1bfff17 	ldw	r6,-4(fp)
    22a4:	00029940 	call	2994 <altera_avalon_uart_write>
      fd->fd_flags);
}
    22a8:	e037883a 	mov	sp,fp
    22ac:	dfc00117 	ldw	ra,4(sp)
    22b0:	df000017 	ldw	fp,0(sp)
    22b4:	dec00204 	addi	sp,sp,8
    22b8:	f800283a 	ret

000022bc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    22bc:	defffc04 	addi	sp,sp,-16
    22c0:	dfc00315 	stw	ra,12(sp)
    22c4:	df000215 	stw	fp,8(sp)
    22c8:	df000204 	addi	fp,sp,8
    22cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    22d0:	e0bfff17 	ldw	r2,-4(fp)
    22d4:	10800017 	ldw	r2,0(r2)
    22d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    22dc:	e0bffe17 	ldw	r2,-8(fp)
    22e0:	11000a04 	addi	r4,r2,40
    22e4:	e0bfff17 	ldw	r2,-4(fp)
    22e8:	11400217 	ldw	r5,8(r2)
    22ec:	00026a40 	call	26a4 <altera_avalon_uart_close>
}
    22f0:	e037883a 	mov	sp,fp
    22f4:	dfc00117 	ldw	ra,4(sp)
    22f8:	df000017 	ldw	fp,0(sp)
    22fc:	dec00204 	addi	sp,sp,8
    2300:	f800283a 	ret

00002304 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    2304:	defff704 	addi	sp,sp,-36
    2308:	dfc00815 	stw	ra,32(sp)
    230c:	df000715 	stw	fp,28(sp)
    2310:	df000704 	addi	fp,sp,28
    2314:	e13ffc15 	stw	r4,-16(fp)
    2318:	e17ffd15 	stw	r5,-12(fp)
    231c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    2320:	e0bffc17 	ldw	r2,-16(fp)
    2324:	10800017 	ldw	r2,0(r2)
    2328:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    232c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    2330:	1004c03a 	cmpne	r2,r2,zero
    2334:	1000061e 	bne	r2,zero,2350 <altera_avalon_uart_init+0x4c>
    2338:	0005883a 	mov	r2,zero
    233c:	1004c03a 	cmpne	r2,r2,zero
    2340:	1000031e 	bne	r2,zero,2350 <altera_avalon_uart_init+0x4c>
    2344:	0005883a 	mov	r2,zero
    2348:	1005003a 	cmpeq	r2,r2,zero
    234c:	1000031e 	bne	r2,zero,235c <altera_avalon_uart_init+0x58>
    2350:	00800044 	movi	r2,1
    2354:	e0bfff15 	stw	r2,-4(fp)
    2358:	00000106 	br	2360 <altera_avalon_uart_init+0x5c>
    235c:	e03fff15 	stw	zero,-4(fp)
    2360:	e0bfff17 	ldw	r2,-4(fp)
    2364:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    2368:	e0bffa17 	ldw	r2,-24(fp)
    236c:	1004c03a 	cmpne	r2,r2,zero
    2370:	1000111e 	bne	r2,zero,23b8 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    2374:	e0fffc17 	ldw	r3,-16(fp)
    2378:	00832004 	movi	r2,3200
    237c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    2380:	e0bffb17 	ldw	r2,-20(fp)
    2384:	11000304 	addi	r4,r2,12
    2388:	e0bffc17 	ldw	r2,-16(fp)
    238c:	10800117 	ldw	r2,4(r2)
    2390:	1007883a 	mov	r3,r2
    2394:	2005883a 	mov	r2,r4
    2398:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    239c:	d8000015 	stw	zero,0(sp)
    23a0:	e13ffd17 	ldw	r4,-12(fp)
    23a4:	e17ffe17 	ldw	r5,-8(fp)
    23a8:	01800034 	movhi	r6,0
    23ac:	3188f304 	addi	r6,r6,9164
    23b0:	e1fffc17 	ldw	r7,-16(fp)
    23b4:	00007c00 	call	7c0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    23b8:	e037883a 	mov	sp,fp
    23bc:	dfc00117 	ldw	ra,4(sp)
    23c0:	df000017 	ldw	fp,0(sp)
    23c4:	dec00204 	addi	sp,sp,8
    23c8:	f800283a 	ret

000023cc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    23cc:	defffa04 	addi	sp,sp,-24
    23d0:	dfc00515 	stw	ra,20(sp)
    23d4:	df000415 	stw	fp,16(sp)
    23d8:	df000404 	addi	fp,sp,16
    23dc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    23e0:	e0bfff17 	ldw	r2,-4(fp)
    23e4:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    23e8:	e0bffd17 	ldw	r2,-12(fp)
    23ec:	10800017 	ldw	r2,0(r2)
    23f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    23f4:	e0bffc17 	ldw	r2,-16(fp)
    23f8:	10800204 	addi	r2,r2,8
    23fc:	10800037 	ldwio	r2,0(r2)
    2400:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    2404:	e0bffc17 	ldw	r2,-16(fp)
    2408:	10800204 	addi	r2,r2,8
    240c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    2410:	e0bffc17 	ldw	r2,-16(fp)
    2414:	10800204 	addi	r2,r2,8
    2418:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    241c:	e0bffe17 	ldw	r2,-8(fp)
    2420:	1080200c 	andi	r2,r2,128
    2424:	1005003a 	cmpeq	r2,r2,zero
    2428:	1000031e 	bne	r2,zero,2438 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    242c:	e13ffd17 	ldw	r4,-12(fp)
    2430:	e17ffe17 	ldw	r5,-8(fp)
    2434:	00024680 	call	2468 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    2438:	e0bffe17 	ldw	r2,-8(fp)
    243c:	1081100c 	andi	r2,r2,1088
    2440:	1005003a 	cmpeq	r2,r2,zero
    2444:	1000031e 	bne	r2,zero,2454 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    2448:	e13ffd17 	ldw	r4,-12(fp)
    244c:	e17ffe17 	ldw	r5,-8(fp)
    2450:	00025480 	call	2548 <altera_avalon_uart_txirq>
  }
  

}
    2454:	e037883a 	mov	sp,fp
    2458:	dfc00117 	ldw	ra,4(sp)
    245c:	df000017 	ldw	fp,0(sp)
    2460:	dec00204 	addi	sp,sp,8
    2464:	f800283a 	ret

00002468 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    2468:	defffc04 	addi	sp,sp,-16
    246c:	df000315 	stw	fp,12(sp)
    2470:	df000304 	addi	fp,sp,12
    2474:	e13ffe15 	stw	r4,-8(fp)
    2478:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    247c:	e0bfff17 	ldw	r2,-4(fp)
    2480:	108000cc 	andi	r2,r2,3
    2484:	1004c03a 	cmpne	r2,r2,zero
    2488:	10002b1e 	bne	r2,zero,2538 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    248c:	e0bffe17 	ldw	r2,-8(fp)
    2490:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    2494:	e0bffe17 	ldw	r2,-8(fp)
    2498:	10800317 	ldw	r2,12(r2)
    249c:	10800044 	addi	r2,r2,1
    24a0:	10800fcc 	andi	r2,r2,63
    24a4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    24a8:	e0bffe17 	ldw	r2,-8(fp)
    24ac:	11000317 	ldw	r4,12(r2)
    24b0:	e0bffe17 	ldw	r2,-8(fp)
    24b4:	10800017 	ldw	r2,0(r2)
    24b8:	10800037 	ldwio	r2,0(r2)
    24bc:	1007883a 	mov	r3,r2
    24c0:	e0bffe17 	ldw	r2,-8(fp)
    24c4:	2085883a 	add	r2,r4,r2
    24c8:	10800704 	addi	r2,r2,28
    24cc:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    24d0:	e0fffe17 	ldw	r3,-8(fp)
    24d4:	e0bffd17 	ldw	r2,-12(fp)
    24d8:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    24dc:	e0bffe17 	ldw	r2,-8(fp)
    24e0:	10800317 	ldw	r2,12(r2)
    24e4:	10800044 	addi	r2,r2,1
    24e8:	10800fcc 	andi	r2,r2,63
    24ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    24f0:	e0bffe17 	ldw	r2,-8(fp)
    24f4:	10c00217 	ldw	r3,8(r2)
    24f8:	e0bffd17 	ldw	r2,-12(fp)
    24fc:	18800e1e 	bne	r3,r2,2538 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    2500:	e0bffe17 	ldw	r2,-8(fp)
    2504:	10c00117 	ldw	r3,4(r2)
    2508:	00bfdfc4 	movi	r2,-129
    250c:	1886703a 	and	r3,r3,r2
    2510:	e0bffe17 	ldw	r2,-8(fp)
    2514:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    2518:	e0bffe17 	ldw	r2,-8(fp)
    251c:	10800017 	ldw	r2,0(r2)
    2520:	11000304 	addi	r4,r2,12
    2524:	e0bffe17 	ldw	r2,-8(fp)
    2528:	10800117 	ldw	r2,4(r2)
    252c:	1007883a 	mov	r3,r2
    2530:	2005883a 	mov	r2,r4
    2534:	10c00035 	stwio	r3,0(r2)
  }   
}
    2538:	e037883a 	mov	sp,fp
    253c:	df000017 	ldw	fp,0(sp)
    2540:	dec00104 	addi	sp,sp,4
    2544:	f800283a 	ret

00002548 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    2548:	defffd04 	addi	sp,sp,-12
    254c:	df000215 	stw	fp,8(sp)
    2550:	df000204 	addi	fp,sp,8
    2554:	e13ffe15 	stw	r4,-8(fp)
    2558:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    255c:	e0bffe17 	ldw	r2,-8(fp)
    2560:	10c00417 	ldw	r3,16(r2)
    2564:	e0bffe17 	ldw	r2,-8(fp)
    2568:	10800517 	ldw	r2,20(r2)
    256c:	18803626 	beq	r3,r2,2648 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    2570:	e0bffe17 	ldw	r2,-8(fp)
    2574:	10800617 	ldw	r2,24(r2)
    2578:	1080008c 	andi	r2,r2,2
    257c:	1005003a 	cmpeq	r2,r2,zero
    2580:	1000041e 	bne	r2,zero,2594 <altera_avalon_uart_txirq+0x4c>
    2584:	e0bfff17 	ldw	r2,-4(fp)
    2588:	1082000c 	andi	r2,r2,2048
    258c:	1005003a 	cmpeq	r2,r2,zero
    2590:	10001e1e 	bne	r2,zero,260c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    2594:	e0bffe17 	ldw	r2,-8(fp)
    2598:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    259c:	e0bffe17 	ldw	r2,-8(fp)
    25a0:	10800017 	ldw	r2,0(r2)
    25a4:	11000104 	addi	r4,r2,4
    25a8:	e0bffe17 	ldw	r2,-8(fp)
    25ac:	10c00417 	ldw	r3,16(r2)
    25b0:	e0bffe17 	ldw	r2,-8(fp)
    25b4:	1885883a 	add	r2,r3,r2
    25b8:	10801704 	addi	r2,r2,92
    25bc:	10800003 	ldbu	r2,0(r2)
    25c0:	10c03fcc 	andi	r3,r2,255
    25c4:	2005883a 	mov	r2,r4
    25c8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    25cc:	e0bffe17 	ldw	r2,-8(fp)
    25d0:	10800417 	ldw	r2,16(r2)
    25d4:	10c00044 	addi	r3,r2,1
    25d8:	e0bffe17 	ldw	r2,-8(fp)
    25dc:	10c00415 	stw	r3,16(r2)
    25e0:	e0bffe17 	ldw	r2,-8(fp)
    25e4:	10800417 	ldw	r2,16(r2)
    25e8:	10c00fcc 	andi	r3,r2,63
    25ec:	e0bffe17 	ldw	r2,-8(fp)
    25f0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    25f4:	e0bffe17 	ldw	r2,-8(fp)
    25f8:	10800117 	ldw	r2,4(r2)
    25fc:	10c01014 	ori	r3,r2,64
    2600:	e0bffe17 	ldw	r2,-8(fp)
    2604:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    2608:	00000f06 	br	2648 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    260c:	e0bffe17 	ldw	r2,-8(fp)
    2610:	10800017 	ldw	r2,0(r2)
    2614:	10800204 	addi	r2,r2,8
    2618:	10800037 	ldwio	r2,0(r2)
    261c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    2620:	e0bfff17 	ldw	r2,-4(fp)
    2624:	1082000c 	andi	r2,r2,2048
    2628:	1004c03a 	cmpne	r2,r2,zero
    262c:	1000061e 	bne	r2,zero,2648 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    2630:	e0bffe17 	ldw	r2,-8(fp)
    2634:	10c00117 	ldw	r3,4(r2)
    2638:	00bfefc4 	movi	r2,-65
    263c:	1886703a 	and	r3,r3,r2
    2640:	e0bffe17 	ldw	r2,-8(fp)
    2644:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    2648:	e0bffe17 	ldw	r2,-8(fp)
    264c:	10c00417 	ldw	r3,16(r2)
    2650:	e0bffe17 	ldw	r2,-8(fp)
    2654:	10800517 	ldw	r2,20(r2)
    2658:	1880061e 	bne	r3,r2,2674 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    265c:	e0bffe17 	ldw	r2,-8(fp)
    2660:	10c00117 	ldw	r3,4(r2)
    2664:	00beefc4 	movi	r2,-1089
    2668:	1886703a 	and	r3,r3,r2
    266c:	e0bffe17 	ldw	r2,-8(fp)
    2670:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    2674:	e0bffe17 	ldw	r2,-8(fp)
    2678:	10800017 	ldw	r2,0(r2)
    267c:	11000304 	addi	r4,r2,12
    2680:	e0bffe17 	ldw	r2,-8(fp)
    2684:	10800117 	ldw	r2,4(r2)
    2688:	1007883a 	mov	r3,r2
    268c:	2005883a 	mov	r2,r4
    2690:	10c00035 	stwio	r3,0(r2)
}
    2694:	e037883a 	mov	sp,fp
    2698:	df000017 	ldw	fp,0(sp)
    269c:	dec00104 	addi	sp,sp,4
    26a0:	f800283a 	ret

000026a4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    26a4:	defffc04 	addi	sp,sp,-16
    26a8:	df000315 	stw	fp,12(sp)
    26ac:	df000304 	addi	fp,sp,12
    26b0:	e13ffd15 	stw	r4,-12(fp)
    26b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    26b8:	00000706 	br	26d8 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    26bc:	e0bffe17 	ldw	r2,-8(fp)
    26c0:	1090000c 	andi	r2,r2,16384
    26c4:	1005003a 	cmpeq	r2,r2,zero
    26c8:	1000031e 	bne	r2,zero,26d8 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    26cc:	00bffd44 	movi	r2,-11
    26d0:	e0bfff15 	stw	r2,-4(fp)
    26d4:	00000606 	br	26f0 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    26d8:	e0bffd17 	ldw	r2,-12(fp)
    26dc:	10c00417 	ldw	r3,16(r2)
    26e0:	e0bffd17 	ldw	r2,-12(fp)
    26e4:	10800517 	ldw	r2,20(r2)
    26e8:	18bff41e 	bne	r3,r2,26bc <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    26ec:	e03fff15 	stw	zero,-4(fp)
    26f0:	e0bfff17 	ldw	r2,-4(fp)
}
    26f4:	e037883a 	mov	sp,fp
    26f8:	df000017 	ldw	fp,0(sp)
    26fc:	dec00104 	addi	sp,sp,4
    2700:	f800283a 	ret

00002704 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    2704:	defff004 	addi	sp,sp,-64
    2708:	dfc00f15 	stw	ra,60(sp)
    270c:	df000e15 	stw	fp,56(sp)
    2710:	df000e04 	addi	fp,sp,56
    2714:	e13ffb15 	stw	r4,-20(fp)
    2718:	e17ffc15 	stw	r5,-16(fp)
    271c:	e1bffd15 	stw	r6,-12(fp)
    2720:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    2724:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    2728:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    272c:	e0bffe17 	ldw	r2,-8(fp)
    2730:	1090000c 	andi	r2,r2,16384
    2734:	1005003a 	cmpeq	r2,r2,zero
    2738:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    273c:	e0bffb17 	ldw	r2,-20(fp)
    2740:	10800217 	ldw	r2,8(r2)
    2744:	10800044 	addi	r2,r2,1
    2748:	10800fcc 	andi	r2,r2,63
    274c:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    2750:	00001906 	br	27b8 <altera_avalon_uart_read+0xb4>
    {
      count++;
    2754:	e0bff617 	ldw	r2,-40(fp)
    2758:	10800044 	addi	r2,r2,1
    275c:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    2760:	e0bffb17 	ldw	r2,-20(fp)
    2764:	10c00217 	ldw	r3,8(r2)
    2768:	e0bffb17 	ldw	r2,-20(fp)
    276c:	1885883a 	add	r2,r3,r2
    2770:	10800704 	addi	r2,r2,28
    2774:	10800003 	ldbu	r2,0(r2)
    2778:	1007883a 	mov	r3,r2
    277c:	e0bffc17 	ldw	r2,-16(fp)
    2780:	10c00005 	stb	r3,0(r2)
    2784:	e0bffc17 	ldw	r2,-16(fp)
    2788:	10800044 	addi	r2,r2,1
    278c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    2790:	e0bffb17 	ldw	r2,-20(fp)
    2794:	10800217 	ldw	r2,8(r2)
    2798:	10c00044 	addi	r3,r2,1
    279c:	e0bffb17 	ldw	r2,-20(fp)
    27a0:	10c00215 	stw	r3,8(r2)
    27a4:	e0bffb17 	ldw	r2,-20(fp)
    27a8:	10800217 	ldw	r2,8(r2)
    27ac:	10c00fcc 	andi	r3,r2,63
    27b0:	e0bffb17 	ldw	r2,-20(fp)
    27b4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    27b8:	e0fff617 	ldw	r3,-40(fp)
    27bc:	e0bffd17 	ldw	r2,-12(fp)
    27c0:	1880050e 	bge	r3,r2,27d8 <altera_avalon_uart_read+0xd4>
    27c4:	e0bffb17 	ldw	r2,-20(fp)
    27c8:	10c00217 	ldw	r3,8(r2)
    27cc:	e0bffb17 	ldw	r2,-20(fp)
    27d0:	10800317 	ldw	r2,12(r2)
    27d4:	18bfdf1e 	bne	r3,r2,2754 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    27d8:	e0bff617 	ldw	r2,-40(fp)
    27dc:	1004c03a 	cmpne	r2,r2,zero
    27e0:	1000271e 	bne	r2,zero,2880 <altera_avalon_uart_read+0x17c>
    27e4:	e0bffb17 	ldw	r2,-20(fp)
    27e8:	10c00217 	ldw	r3,8(r2)
    27ec:	e0bffb17 	ldw	r2,-20(fp)
    27f0:	10800317 	ldw	r2,12(r2)
    27f4:	1880221e 	bne	r3,r2,2880 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    27f8:	e0bff917 	ldw	r2,-28(fp)
    27fc:	1004c03a 	cmpne	r2,r2,zero
    2800:	1000061e 	bne	r2,zero,281c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    2804:	00029340 	call	2934 <alt_get_errno>
    2808:	00c002c4 	movi	r3,11
    280c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    2810:	00800044 	movi	r2,1
    2814:	e0bff705 	stb	r2,-36(fp)
        break;
    2818:	00001f06 	br	2898 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    281c:	0005303a 	rdctl	r2,status
    2820:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2824:	e0fff517 	ldw	r3,-44(fp)
    2828:	00bfff84 	movi	r2,-2
    282c:	1884703a 	and	r2,r3,r2
    2830:	1001703a 	wrctl	status,r2
  
  return context;
    2834:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    2838:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    283c:	e0bffb17 	ldw	r2,-20(fp)
    2840:	10800117 	ldw	r2,4(r2)
    2844:	10c02014 	ori	r3,r2,128
    2848:	e0bffb17 	ldw	r2,-20(fp)
    284c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    2850:	e0bffb17 	ldw	r2,-20(fp)
    2854:	10800017 	ldw	r2,0(r2)
    2858:	11000304 	addi	r4,r2,12
    285c:	e0bffb17 	ldw	r2,-20(fp)
    2860:	10800117 	ldw	r2,4(r2)
    2864:	1007883a 	mov	r3,r2
    2868:	2005883a 	mov	r2,r4
    286c:	10c00035 	stwio	r3,0(r2)
    2870:	e0bffa17 	ldw	r2,-24(fp)
    2874:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2878:	e0bff417 	ldw	r2,-48(fp)
    287c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    2880:	e0bff617 	ldw	r2,-40(fp)
    2884:	1004c03a 	cmpne	r2,r2,zero
    2888:	1000031e 	bne	r2,zero,2898 <altera_avalon_uart_read+0x194>
    288c:	e0bffd17 	ldw	r2,-12(fp)
    2890:	1004c03a 	cmpne	r2,r2,zero
    2894:	103fc81e 	bne	r2,zero,27b8 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2898:	0005303a 	rdctl	r2,status
    289c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28a0:	e0fff317 	ldw	r3,-52(fp)
    28a4:	00bfff84 	movi	r2,-2
    28a8:	1884703a 	and	r2,r3,r2
    28ac:	1001703a 	wrctl	status,r2
  
  return context;
    28b0:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    28b4:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    28b8:	e0bffb17 	ldw	r2,-20(fp)
    28bc:	10800117 	ldw	r2,4(r2)
    28c0:	10c02014 	ori	r3,r2,128
    28c4:	e0bffb17 	ldw	r2,-20(fp)
    28c8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    28cc:	e0bffb17 	ldw	r2,-20(fp)
    28d0:	10800017 	ldw	r2,0(r2)
    28d4:	11000304 	addi	r4,r2,12
    28d8:	e0bffb17 	ldw	r2,-20(fp)
    28dc:	10800117 	ldw	r2,4(r2)
    28e0:	1007883a 	mov	r3,r2
    28e4:	2005883a 	mov	r2,r4
    28e8:	10c00035 	stwio	r3,0(r2)
    28ec:	e0bffa17 	ldw	r2,-24(fp)
    28f0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28f4:	e0bff217 	ldw	r2,-56(fp)
    28f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    28fc:	e0bff703 	ldbu	r2,-36(fp)
    2900:	1005003a 	cmpeq	r2,r2,zero
    2904:	1000031e 	bne	r2,zero,2914 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    2908:	00bffd04 	movi	r2,-12
    290c:	e0bfff15 	stw	r2,-4(fp)
    2910:	00000206 	br	291c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    2914:	e0bff617 	ldw	r2,-40(fp)
    2918:	e0bfff15 	stw	r2,-4(fp)
    291c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    2920:	e037883a 	mov	sp,fp
    2924:	dfc00117 	ldw	ra,4(sp)
    2928:	df000017 	ldw	fp,0(sp)
    292c:	dec00204 	addi	sp,sp,8
    2930:	f800283a 	ret

00002934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2934:	defffd04 	addi	sp,sp,-12
    2938:	dfc00215 	stw	ra,8(sp)
    293c:	df000115 	stw	fp,4(sp)
    2940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2944:	00800034 	movhi	r2,0
    2948:	10991104 	addi	r2,r2,25668
    294c:	10800017 	ldw	r2,0(r2)
    2950:	1005003a 	cmpeq	r2,r2,zero
    2954:	1000061e 	bne	r2,zero,2970 <alt_get_errno+0x3c>
    2958:	00800034 	movhi	r2,0
    295c:	10991104 	addi	r2,r2,25668
    2960:	10800017 	ldw	r2,0(r2)
    2964:	103ee83a 	callr	r2
    2968:	e0bfff15 	stw	r2,-4(fp)
    296c:	00000306 	br	297c <alt_get_errno+0x48>
    2970:	00800034 	movhi	r2,0
    2974:	10992204 	addi	r2,r2,25736
    2978:	e0bfff15 	stw	r2,-4(fp)
    297c:	e0bfff17 	ldw	r2,-4(fp)
}
    2980:	e037883a 	mov	sp,fp
    2984:	dfc00117 	ldw	ra,4(sp)
    2988:	df000017 	ldw	fp,0(sp)
    298c:	dec00204 	addi	sp,sp,8
    2990:	f800283a 	ret

00002994 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    2994:	defff204 	addi	sp,sp,-56
    2998:	dfc00d15 	stw	ra,52(sp)
    299c:	df000c15 	stw	fp,48(sp)
    29a0:	df000c04 	addi	fp,sp,48
    29a4:	e13ffc15 	stw	r4,-16(fp)
    29a8:	e17ffd15 	stw	r5,-12(fp)
    29ac:	e1bffe15 	stw	r6,-8(fp)
    29b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    29b4:	e0bffe17 	ldw	r2,-8(fp)
    29b8:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    29bc:	e0bfff17 	ldw	r2,-4(fp)
    29c0:	1090000c 	andi	r2,r2,16384
    29c4:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    29c8:	00004006 	br	2acc <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    29cc:	e0bffc17 	ldw	r2,-16(fp)
    29d0:	10800517 	ldw	r2,20(r2)
    29d4:	10800044 	addi	r2,r2,1
    29d8:	10800fcc 	andi	r2,r2,63
    29dc:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    29e0:	e0bffc17 	ldw	r2,-16(fp)
    29e4:	10c00417 	ldw	r3,16(r2)
    29e8:	e0bff917 	ldw	r2,-28(fp)
    29ec:	1880251e 	bne	r3,r2,2a84 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    29f0:	e0bffa17 	ldw	r2,-24(fp)
    29f4:	1005003a 	cmpeq	r2,r2,zero
    29f8:	1000051e 	bne	r2,zero,2a10 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    29fc:	0002b5c0 	call	2b5c <alt_get_errno>
    2a00:	1007883a 	mov	r3,r2
    2a04:	008002c4 	movi	r2,11
    2a08:	18800015 	stw	r2,0(r3)
        break;
    2a0c:	00003206 	br	2ad8 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a10:	0005303a 	rdctl	r2,status
    2a14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a18:	e0fff717 	ldw	r3,-36(fp)
    2a1c:	00bfff84 	movi	r2,-2
    2a20:	1884703a 	and	r2,r3,r2
    2a24:	1001703a 	wrctl	status,r2
  
  return context;
    2a28:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    2a2c:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    2a30:	e0bffc17 	ldw	r2,-16(fp)
    2a34:	10800117 	ldw	r2,4(r2)
    2a38:	10c11014 	ori	r3,r2,1088
    2a3c:	e0bffc17 	ldw	r2,-16(fp)
    2a40:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    2a44:	e0bffc17 	ldw	r2,-16(fp)
    2a48:	10800017 	ldw	r2,0(r2)
    2a4c:	11000304 	addi	r4,r2,12
    2a50:	e0bffc17 	ldw	r2,-16(fp)
    2a54:	10800117 	ldw	r2,4(r2)
    2a58:	1007883a 	mov	r3,r2
    2a5c:	2005883a 	mov	r2,r4
    2a60:	10c00035 	stwio	r3,0(r2)
    2a64:	e0bffb17 	ldw	r2,-20(fp)
    2a68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2a6c:	e0bff617 	ldw	r2,-40(fp)
    2a70:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    2a74:	e0bffc17 	ldw	r2,-16(fp)
    2a78:	10c00417 	ldw	r3,16(r2)
    2a7c:	e0bff917 	ldw	r2,-28(fp)
    2a80:	18bffc26 	beq	r3,r2,2a74 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    2a84:	e0bff817 	ldw	r2,-32(fp)
    2a88:	10bfffc4 	addi	r2,r2,-1
    2a8c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    2a90:	e0bffc17 	ldw	r2,-16(fp)
    2a94:	10c00517 	ldw	r3,20(r2)
    2a98:	e0bffd17 	ldw	r2,-12(fp)
    2a9c:	10800003 	ldbu	r2,0(r2)
    2aa0:	1009883a 	mov	r4,r2
    2aa4:	e0bffc17 	ldw	r2,-16(fp)
    2aa8:	1885883a 	add	r2,r3,r2
    2aac:	10801704 	addi	r2,r2,92
    2ab0:	11000005 	stb	r4,0(r2)
    2ab4:	e0bffd17 	ldw	r2,-12(fp)
    2ab8:	10800044 	addi	r2,r2,1
    2abc:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    2ac0:	e0fffc17 	ldw	r3,-16(fp)
    2ac4:	e0bff917 	ldw	r2,-28(fp)
    2ac8:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    2acc:	e0bff817 	ldw	r2,-32(fp)
    2ad0:	1004c03a 	cmpne	r2,r2,zero
    2ad4:	103fbd1e 	bne	r2,zero,29cc <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ad8:	0005303a 	rdctl	r2,status
    2adc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ae0:	e0fff517 	ldw	r3,-44(fp)
    2ae4:	00bfff84 	movi	r2,-2
    2ae8:	1884703a 	and	r2,r3,r2
    2aec:	1001703a 	wrctl	status,r2
  
  return context;
    2af0:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    2af4:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    2af8:	e0bffc17 	ldw	r2,-16(fp)
    2afc:	10800117 	ldw	r2,4(r2)
    2b00:	10c11014 	ori	r3,r2,1088
    2b04:	e0bffc17 	ldw	r2,-16(fp)
    2b08:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    2b0c:	e0bffc17 	ldw	r2,-16(fp)
    2b10:	10800017 	ldw	r2,0(r2)
    2b14:	11000304 	addi	r4,r2,12
    2b18:	e0bffc17 	ldw	r2,-16(fp)
    2b1c:	10800117 	ldw	r2,4(r2)
    2b20:	1007883a 	mov	r3,r2
    2b24:	2005883a 	mov	r2,r4
    2b28:	10c00035 	stwio	r3,0(r2)
    2b2c:	e0bffb17 	ldw	r2,-20(fp)
    2b30:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2b34:	e0bff417 	ldw	r2,-48(fp)
    2b38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    2b3c:	e0fffe17 	ldw	r3,-8(fp)
    2b40:	e0bff817 	ldw	r2,-32(fp)
    2b44:	1885c83a 	sub	r2,r3,r2
}
    2b48:	e037883a 	mov	sp,fp
    2b4c:	dfc00117 	ldw	ra,4(sp)
    2b50:	df000017 	ldw	fp,0(sp)
    2b54:	dec00204 	addi	sp,sp,8
    2b58:	f800283a 	ret

00002b5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2b5c:	defffd04 	addi	sp,sp,-12
    2b60:	dfc00215 	stw	ra,8(sp)
    2b64:	df000115 	stw	fp,4(sp)
    2b68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2b6c:	00800034 	movhi	r2,0
    2b70:	10991104 	addi	r2,r2,25668
    2b74:	10800017 	ldw	r2,0(r2)
    2b78:	1005003a 	cmpeq	r2,r2,zero
    2b7c:	1000061e 	bne	r2,zero,2b98 <alt_get_errno+0x3c>
    2b80:	00800034 	movhi	r2,0
    2b84:	10991104 	addi	r2,r2,25668
    2b88:	10800017 	ldw	r2,0(r2)
    2b8c:	103ee83a 	callr	r2
    2b90:	e0bfff15 	stw	r2,-4(fp)
    2b94:	00000306 	br	2ba4 <alt_get_errno+0x48>
    2b98:	00800034 	movhi	r2,0
    2b9c:	10992204 	addi	r2,r2,25736
    2ba0:	e0bfff15 	stw	r2,-4(fp)
    2ba4:	e0bfff17 	ldw	r2,-4(fp)
}
    2ba8:	e037883a 	mov	sp,fp
    2bac:	dfc00117 	ldw	ra,4(sp)
    2bb0:	df000017 	ldw	fp,0(sp)
    2bb4:	dec00204 	addi	sp,sp,8
    2bb8:	f800283a 	ret

00002bbc <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    2bbc:	defff904 	addi	sp,sp,-28
    2bc0:	dfc00615 	stw	ra,24(sp)
    2bc4:	df000515 	stw	fp,20(sp)
    2bc8:	df000504 	addi	fp,sp,20
    2bcc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    2bd0:	00800144 	movi	r2,5
    2bd4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    2bd8:	00800044 	movi	r2,1
    2bdc:	d8800015 	stw	r2,0(sp)
    2be0:	e0bffe44 	addi	r2,fp,-7
    2be4:	d8800115 	stw	r2,4(sp)
    2be8:	d8000215 	stw	zero,8(sp)
    2bec:	e13fff17 	ldw	r4,-4(fp)
    2bf0:	000b883a 	mov	r5,zero
    2bf4:	01800044 	movi	r6,1
    2bf8:	e1fffe04 	addi	r7,fp,-8
    2bfc:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    2c00:	e0bffe43 	ldbu	r2,-7(fp)
    2c04:	10803fcc 	andi	r2,r2,255
}
    2c08:	e037883a 	mov	sp,fp
    2c0c:	dfc00117 	ldw	ra,4(sp)
    2c10:	df000017 	ldw	fp,0(sp)
    2c14:	dec00204 	addi	sp,sp,8
    2c18:	f800283a 	ret

00002c1c <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    2c1c:	defff604 	addi	sp,sp,-40
    2c20:	dfc00915 	stw	ra,36(sp)
    2c24:	df000815 	stw	fp,32(sp)
    2c28:	df000804 	addi	fp,sp,32
    2c2c:	e13ffd15 	stw	r4,-12(fp)
    2c30:	e17ffe15 	stw	r5,-8(fp)
    2c34:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    2c38:	e0bfff17 	ldw	r2,-4(fp)
    2c3c:	1005003a 	cmpeq	r2,r2,zero
    2c40:	1000121e 	bne	r2,zero,2c8c <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    2c44:	00bff604 	movi	r2,-40
    2c48:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    2c4c:	e0bffe17 	ldw	r2,-8(fp)
    2c50:	1004d63a 	srli	r2,r2,24
    2c54:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    2c58:	e0bffe17 	ldw	r2,-8(fp)
    2c5c:	1004d43a 	srli	r2,r2,16
    2c60:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    2c64:	e0bffe17 	ldw	r2,-8(fp)
    2c68:	1004d23a 	srli	r2,r2,8
    2c6c:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    2c70:	e0bffe17 	ldw	r2,-8(fp)
    2c74:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    2c78:	00800144 	movi	r2,5
    2c7c:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    2c80:	e13ffd17 	ldw	r4,-12(fp)
    2c84:	00031e00 	call	31e0 <epcs_enter_4_bytes_mode>
    2c88:	00000c06 	br	2cbc <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
    2c8c:	00bff604 	movi	r2,-40
    2c90:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    2c94:	e0bffe17 	ldw	r2,-8(fp)
    2c98:	1004d43a 	srli	r2,r2,16
    2c9c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    2ca0:	e0bffe17 	ldw	r2,-8(fp)
    2ca4:	1004d23a 	srli	r2,r2,8
    2ca8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    2cac:	e0bffe17 	ldw	r2,-8(fp)
    2cb0:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    2cb4:	00800104 	movi	r2,4
    2cb8:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    2cbc:	e13ffd17 	ldw	r4,-12(fp)
    2cc0:	0002ed00 	call	2ed0 <epcs_write_enable>

  alt_avalon_spi_command(
    2cc4:	e1bffb03 	ldbu	r6,-20(fp)
    2cc8:	e1fffb44 	addi	r7,fp,-19
    2ccc:	d8000015 	stw	zero,0(sp)
    2cd0:	d8000115 	stw	zero,4(sp)
    2cd4:	d8000215 	stw	zero,8(sp)
    2cd8:	e13ffd17 	ldw	r4,-12(fp)
    2cdc:	000b883a 	mov	r5,zero
    2ce0:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    2ce4:	e13ffd17 	ldw	r4,-12(fp)
    2ce8:	0002d140 	call	2d14 <epcs_await_wip_released>

  if(four_bytes_mode)
    2cec:	e0bfff17 	ldw	r2,-4(fp)
    2cf0:	1005003a 	cmpeq	r2,r2,zero
    2cf4:	1000021e 	bne	r2,zero,2d00 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    2cf8:	e13ffd17 	ldw	r4,-12(fp)
    2cfc:	00032380 	call	3238 <epcs_exit_4_bytes_mode>
  }
}
    2d00:	e037883a 	mov	sp,fp
    2d04:	dfc00117 	ldw	ra,4(sp)
    2d08:	df000017 	ldw	fp,0(sp)
    2d0c:	dec00204 	addi	sp,sp,8
    2d10:	f800283a 	ret

00002d14 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    2d14:	defffd04 	addi	sp,sp,-12
    2d18:	dfc00215 	stw	ra,8(sp)
    2d1c:	df000115 	stw	fp,4(sp)
    2d20:	df000104 	addi	fp,sp,4
    2d24:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    2d28:	e13fff17 	ldw	r4,-4(fp)
    2d2c:	0002d4c0 	call	2d4c <epcs_test_wip>
    2d30:	1004c03a 	cmpne	r2,r2,zero
    2d34:	103ffc1e 	bne	r2,zero,2d28 <epcs_await_wip_released+0x14>
  {
  }
}
    2d38:	e037883a 	mov	sp,fp
    2d3c:	dfc00117 	ldw	ra,4(sp)
    2d40:	df000017 	ldw	fp,0(sp)
    2d44:	dec00204 	addi	sp,sp,8
    2d48:	f800283a 	ret

00002d4c <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    2d4c:	defffd04 	addi	sp,sp,-12
    2d50:	dfc00215 	stw	ra,8(sp)
    2d54:	df000115 	stw	fp,4(sp)
    2d58:	df000104 	addi	fp,sp,4
    2d5c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    2d60:	e13fff17 	ldw	r4,-4(fp)
    2d64:	0002bbc0 	call	2bbc <epcs_read_status_register>
    2d68:	10803fcc 	andi	r2,r2,255
    2d6c:	1080004c 	andi	r2,r2,1
}
    2d70:	e037883a 	mov	sp,fp
    2d74:	dfc00117 	ldw	ra,4(sp)
    2d78:	df000017 	ldw	fp,0(sp)
    2d7c:	dec00204 	addi	sp,sp,8
    2d80:	f800283a 	ret

00002d84 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    2d84:	defff404 	addi	sp,sp,-48
    2d88:	dfc00b15 	stw	ra,44(sp)
    2d8c:	df000a15 	stw	fp,40(sp)
    2d90:	df000a04 	addi	fp,sp,40
    2d94:	e13ffc15 	stw	r4,-16(fp)
    2d98:	e17ffd15 	stw	r5,-12(fp)
    2d9c:	e1bffe15 	stw	r6,-8(fp)
    2da0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    2da4:	008000c4 	movi	r2,3
    2da8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    2dac:	e0800217 	ldw	r2,8(fp)
    2db0:	1005003a 	cmpeq	r2,r2,zero
    2db4:	10001c1e 	bne	r2,zero,2e28 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    2db8:	e0bffd17 	ldw	r2,-12(fp)
    2dbc:	1005d63a 	srai	r2,r2,24
    2dc0:	1007883a 	mov	r3,r2
    2dc4:	00bfffc4 	movi	r2,-1
    2dc8:	1884703a 	and	r2,r3,r2
    2dcc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    2dd0:	e0bffd17 	ldw	r2,-12(fp)
    2dd4:	1005d43a 	srai	r2,r2,16
    2dd8:	1007883a 	mov	r3,r2
    2ddc:	00bfffc4 	movi	r2,-1
    2de0:	1884703a 	and	r2,r3,r2
    2de4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    2de8:	e0bffd17 	ldw	r2,-12(fp)
    2dec:	1005d23a 	srai	r2,r2,8
    2df0:	1007883a 	mov	r3,r2
    2df4:	00bfffc4 	movi	r2,-1
    2df8:	1884703a 	and	r2,r3,r2
    2dfc:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    2e00:	e0bffd17 	ldw	r2,-12(fp)
    2e04:	1007883a 	mov	r3,r2
    2e08:	00bfffc4 	movi	r2,-1
    2e0c:	1884703a 	and	r2,r3,r2
    2e10:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    2e14:	00800144 	movi	r2,5
    2e18:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    2e1c:	e13ffc17 	ldw	r4,-16(fp)
    2e20:	00031e00 	call	31e0 <epcs_enter_4_bytes_mode>
    2e24:	00001306 	br	2e74 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    2e28:	e0bffd17 	ldw	r2,-12(fp)
    2e2c:	1005d43a 	srai	r2,r2,16
    2e30:	1007883a 	mov	r3,r2
    2e34:	00bfffc4 	movi	r2,-1
    2e38:	1884703a 	and	r2,r3,r2
    2e3c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    2e40:	e0bffd17 	ldw	r2,-12(fp)
    2e44:	1005d23a 	srai	r2,r2,8
    2e48:	1007883a 	mov	r3,r2
    2e4c:	00bfffc4 	movi	r2,-1
    2e50:	1884703a 	and	r2,r3,r2
    2e54:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    2e58:	e0bffd17 	ldw	r2,-12(fp)
    2e5c:	1007883a 	mov	r3,r2
    2e60:	00bfffc4 	movi	r2,-1
    2e64:	1884703a 	and	r2,r3,r2
    2e68:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    2e6c:	00800104 	movi	r2,4
    2e70:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    2e74:	e13ffc17 	ldw	r4,-16(fp)
    2e78:	0002d140 	call	2d14 <epcs_await_wip_released>

  alt_avalon_spi_command(
    2e7c:	e0bfff17 	ldw	r2,-4(fp)
    2e80:	e1fffa04 	addi	r7,fp,-24
    2e84:	d8800015 	stw	r2,0(sp)
    2e88:	e0bffe17 	ldw	r2,-8(fp)
    2e8c:	d8800115 	stw	r2,4(sp)
    2e90:	d8000215 	stw	zero,8(sp)
    2e94:	e13ffc17 	ldw	r4,-16(fp)
    2e98:	000b883a 	mov	r5,zero
    2e9c:	e1bff917 	ldw	r6,-28(fp)
    2ea0:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    2ea4:	e0800217 	ldw	r2,8(fp)
    2ea8:	1005003a 	cmpeq	r2,r2,zero
    2eac:	1000021e 	bne	r2,zero,2eb8 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
    2eb0:	e13ffc17 	ldw	r4,-16(fp)
    2eb4:	00032380 	call	3238 <epcs_exit_4_bytes_mode>
  }

  return length;
    2eb8:	e0bfff17 	ldw	r2,-4(fp)
}
    2ebc:	e037883a 	mov	sp,fp
    2ec0:	dfc00117 	ldw	ra,4(sp)
    2ec4:	df000017 	ldw	fp,0(sp)
    2ec8:	dec00204 	addi	sp,sp,8
    2ecc:	f800283a 	ret

00002ed0 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    2ed0:	defff904 	addi	sp,sp,-28
    2ed4:	dfc00615 	stw	ra,24(sp)
    2ed8:	df000515 	stw	fp,20(sp)
    2edc:	df000504 	addi	fp,sp,20
    2ee0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    2ee4:	00800184 	movi	r2,6
    2ee8:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    2eec:	d8000015 	stw	zero,0(sp)
    2ef0:	d8000115 	stw	zero,4(sp)
    2ef4:	d8000215 	stw	zero,8(sp)
    2ef8:	e13fff17 	ldw	r4,-4(fp)
    2efc:	000b883a 	mov	r5,zero
    2f00:	01800044 	movi	r6,1
    2f04:	e1fffe04 	addi	r7,fp,-8
    2f08:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    2f0c:	e037883a 	mov	sp,fp
    2f10:	dfc00117 	ldw	ra,4(sp)
    2f14:	df000017 	ldw	fp,0(sp)
    2f18:	dec00204 	addi	sp,sp,8
    2f1c:	f800283a 	ret

00002f20 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    2f20:	defff804 	addi	sp,sp,-32
    2f24:	dfc00715 	stw	ra,28(sp)
    2f28:	df000615 	stw	fp,24(sp)
    2f2c:	df000604 	addi	fp,sp,24
    2f30:	e13ffe15 	stw	r4,-8(fp)
    2f34:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    2f38:	00800044 	movi	r2,1
    2f3c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    2f40:	e0bfff03 	ldbu	r2,-4(fp)
    2f44:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    2f48:	d8000015 	stw	zero,0(sp)
    2f4c:	d8000115 	stw	zero,4(sp)
    2f50:	d8000215 	stw	zero,8(sp)
    2f54:	e13ffe17 	ldw	r4,-8(fp)
    2f58:	000b883a 	mov	r5,zero
    2f5c:	01800084 	movi	r6,2
    2f60:	e1fffd04 	addi	r7,fp,-12
    2f64:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    2f68:	e13ffe17 	ldw	r4,-8(fp)
    2f6c:	0002d140 	call	2d14 <epcs_await_wip_released>
}
    2f70:	e037883a 	mov	sp,fp
    2f74:	dfc00117 	ldw	ra,4(sp)
    2f78:	df000017 	ldw	fp,0(sp)
    2f7c:	dec00204 	addi	sp,sp,8
    2f80:	f800283a 	ret

00002f84 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    2f84:	defff404 	addi	sp,sp,-48
    2f88:	dfc00b15 	stw	ra,44(sp)
    2f8c:	df000a15 	stw	fp,40(sp)
    2f90:	df000a04 	addi	fp,sp,40
    2f94:	e13ffc15 	stw	r4,-16(fp)
    2f98:	e17ffd15 	stw	r5,-12(fp)
    2f9c:	e1bffe15 	stw	r6,-8(fp)
    2fa0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    2fa4:	00800084 	movi	r2,2
    2fa8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    2fac:	e0800217 	ldw	r2,8(fp)
    2fb0:	1005003a 	cmpeq	r2,r2,zero
    2fb4:	10001c1e 	bne	r2,zero,3028 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	1005d63a 	srai	r2,r2,24
    2fc0:	1007883a 	mov	r3,r2
    2fc4:	00bfffc4 	movi	r2,-1
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    2fd0:	e0bffd17 	ldw	r2,-12(fp)
    2fd4:	1005d43a 	srai	r2,r2,16
    2fd8:	1007883a 	mov	r3,r2
    2fdc:	00bfffc4 	movi	r2,-1
    2fe0:	1884703a 	and	r2,r3,r2
    2fe4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    2fe8:	e0bffd17 	ldw	r2,-12(fp)
    2fec:	1005d23a 	srai	r2,r2,8
    2ff0:	1007883a 	mov	r3,r2
    2ff4:	00bfffc4 	movi	r2,-1
    2ff8:	1884703a 	and	r2,r3,r2
    2ffc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    3000:	e0bffd17 	ldw	r2,-12(fp)
    3004:	1007883a 	mov	r3,r2
    3008:	00bfffc4 	movi	r2,-1
    300c:	1884703a 	and	r2,r3,r2
    3010:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    3014:	00800144 	movi	r2,5
    3018:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    301c:	e13ffc17 	ldw	r4,-16(fp)
    3020:	00031e00 	call	31e0 <epcs_enter_4_bytes_mode>
    3024:	00001306 	br	3074 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    3028:	e0bffd17 	ldw	r2,-12(fp)
    302c:	1005d43a 	srai	r2,r2,16
    3030:	1007883a 	mov	r3,r2
    3034:	00bfffc4 	movi	r2,-1
    3038:	1884703a 	and	r2,r3,r2
    303c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    3040:	e0bffd17 	ldw	r2,-12(fp)
    3044:	1005d23a 	srai	r2,r2,8
    3048:	1007883a 	mov	r3,r2
    304c:	00bfffc4 	movi	r2,-1
    3050:	1884703a 	and	r2,r3,r2
    3054:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    3058:	e0bffd17 	ldw	r2,-12(fp)
    305c:	1007883a 	mov	r3,r2
    3060:	00bfffc4 	movi	r2,-1
    3064:	1884703a 	and	r2,r3,r2
    3068:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    306c:	00800104 	movi	r2,4
    3070:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    3074:	e13ffc17 	ldw	r4,-16(fp)
    3078:	0002ed00 	call	2ed0 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    307c:	e1fffa04 	addi	r7,fp,-24
    3080:	d8000015 	stw	zero,0(sp)
    3084:	d8000115 	stw	zero,4(sp)
    3088:	00800044 	movi	r2,1
    308c:	d8800215 	stw	r2,8(sp)
    3090:	e13ffc17 	ldw	r4,-16(fp)
    3094:	000b883a 	mov	r5,zero
    3098:	e1bff917 	ldw	r6,-28(fp)
    309c:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    30a0:	e1bfff17 	ldw	r6,-4(fp)
    30a4:	d8000015 	stw	zero,0(sp)
    30a8:	d8000115 	stw	zero,4(sp)
    30ac:	d8000215 	stw	zero,8(sp)
    30b0:	e13ffc17 	ldw	r4,-16(fp)
    30b4:	000b883a 	mov	r5,zero
    30b8:	e1fffe17 	ldw	r7,-8(fp)
    30bc:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    30c0:	e13ffc17 	ldw	r4,-16(fp)
    30c4:	0002d140 	call	2d14 <epcs_await_wip_released>

  if(four_bytes_mode)
    30c8:	e0800217 	ldw	r2,8(fp)
    30cc:	1005003a 	cmpeq	r2,r2,zero
    30d0:	1000021e 	bne	r2,zero,30dc <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
    30d4:	e13ffc17 	ldw	r4,-16(fp)
    30d8:	00032380 	call	3238 <epcs_exit_4_bytes_mode>
  }

  return length;
    30dc:	e0bfff17 	ldw	r2,-4(fp)
}
    30e0:	e037883a 	mov	sp,fp
    30e4:	dfc00117 	ldw	ra,4(sp)
    30e8:	df000017 	ldw	fp,0(sp)
    30ec:	dec00204 	addi	sp,sp,8
    30f0:	f800283a 	ret

000030f4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    30f4:	defff804 	addi	sp,sp,-32
    30f8:	dfc00715 	stw	ra,28(sp)
    30fc:	df000615 	stw	fp,24(sp)
    3100:	df000604 	addi	fp,sp,24
    3104:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    3108:	00bfeac4 	movi	r2,-85
    310c:	e0bffd05 	stb	r2,-12(fp)
    3110:	e03ffd45 	stb	zero,-11(fp)
    3114:	e03ffd85 	stb	zero,-10(fp)
    3118:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    311c:	00800044 	movi	r2,1
    3120:	d8800015 	stw	r2,0(sp)
    3124:	e0bffe04 	addi	r2,fp,-8
    3128:	d8800115 	stw	r2,4(sp)
    312c:	d8000215 	stw	zero,8(sp)
    3130:	e13fff17 	ldw	r4,-4(fp)
    3134:	000b883a 	mov	r5,zero
    3138:	01800104 	movi	r6,4
    313c:	e1fffd04 	addi	r7,fp,-12
    3140:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    3144:	e0bffe03 	ldbu	r2,-8(fp)
    3148:	10803fcc 	andi	r2,r2,255
}
    314c:	e037883a 	mov	sp,fp
    3150:	dfc00117 	ldw	ra,4(sp)
    3154:	df000017 	ldw	fp,0(sp)
    3158:	dec00204 	addi	sp,sp,8
    315c:	f800283a 	ret

00003160 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    3160:	defff904 	addi	sp,sp,-28
    3164:	dfc00615 	stw	ra,24(sp)
    3168:	df000515 	stw	fp,20(sp)
    316c:	df000504 	addi	fp,sp,20
    3170:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    3174:	00bfe7c4 	movi	r2,-97
    3178:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    317c:	008000c4 	movi	r2,3
    3180:	d8800015 	stw	r2,0(sp)
    3184:	e0bffe44 	addi	r2,fp,-7
    3188:	d8800115 	stw	r2,4(sp)
    318c:	d8000215 	stw	zero,8(sp)
    3190:	e13fff17 	ldw	r4,-4(fp)
    3194:	000b883a 	mov	r5,zero
    3198:	01800044 	movi	r6,1
    319c:	e1fffe04 	addi	r7,fp,-8
    31a0:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    31a4:	e0bffe43 	ldbu	r2,-7(fp)
    31a8:	10803fcc 	andi	r2,r2,255
    31ac:	1006943a 	slli	r3,r2,16
    31b0:	e0bffe83 	ldbu	r2,-6(fp)
    31b4:	10803fcc 	andi	r2,r2,255
    31b8:	1004923a 	slli	r2,r2,8
    31bc:	1886b03a 	or	r3,r3,r2
    31c0:	e0bffec3 	ldbu	r2,-5(fp)
    31c4:	10803fcc 	andi	r2,r2,255
    31c8:	1884b03a 	or	r2,r3,r2
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	dfc00117 	ldw	ra,4(sp)
    31d4:	df000017 	ldw	fp,0(sp)
    31d8:	dec00204 	addi	sp,sp,8
    31dc:	f800283a 	ret

000031e0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    31e0:	defff904 	addi	sp,sp,-28
    31e4:	dfc00615 	stw	ra,24(sp)
    31e8:	df000515 	stw	fp,20(sp)
    31ec:	df000504 	addi	fp,sp,20
    31f0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    31f4:	00bfedc4 	movi	r2,-73
    31f8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    31fc:	e13fff17 	ldw	r4,-4(fp)
    3200:	0002ed00 	call	2ed0 <epcs_write_enable>

  alt_avalon_spi_command(
    3204:	d8000015 	stw	zero,0(sp)
    3208:	d8000115 	stw	zero,4(sp)
    320c:	d8000215 	stw	zero,8(sp)
    3210:	e13fff17 	ldw	r4,-4(fp)
    3214:	000b883a 	mov	r5,zero
    3218:	01800044 	movi	r6,1
    321c:	e1fffe04 	addi	r7,fp,-8
    3220:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    3224:	e037883a 	mov	sp,fp
    3228:	dfc00117 	ldw	ra,4(sp)
    322c:	df000017 	ldw	fp,0(sp)
    3230:	dec00204 	addi	sp,sp,8
    3234:	f800283a 	ret

00003238 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    3238:	defff904 	addi	sp,sp,-28
    323c:	dfc00615 	stw	ra,24(sp)
    3240:	df000515 	stw	fp,20(sp)
    3244:	df000504 	addi	fp,sp,20
    3248:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    324c:	00bffa44 	movi	r2,-23
    3250:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    3254:	e13fff17 	ldw	r4,-4(fp)
    3258:	0002ed00 	call	2ed0 <epcs_write_enable>

  alt_avalon_spi_command(
    325c:	d8000015 	stw	zero,0(sp)
    3260:	d8000115 	stw	zero,4(sp)
    3264:	d8000215 	stw	zero,8(sp)
    3268:	e13fff17 	ldw	r4,-4(fp)
    326c:	000b883a 	mov	r5,zero
    3270:	01800044 	movi	r6,1
    3274:	e1fffe04 	addi	r7,fp,-8
    3278:	0003e8c0 	call	3e8c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    327c:	e037883a 	mov	sp,fp
    3280:	dfc00117 	ldw	ra,4(sp)
    3284:	df000017 	ldw	fp,0(sp)
    3288:	dec00204 	addi	sp,sp,8
    328c:	f800283a 	ret

00003290 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    3290:	defff404 	addi	sp,sp,-48
    3294:	df000b15 	stw	fp,44(sp)
    3298:	df000b04 	addi	fp,sp,44
    329c:	e13ffb15 	stw	r4,-20(fp)
    32a0:	e17ffc15 	stw	r5,-16(fp)
    32a4:	e1bffd15 	stw	r6,-12(fp)
    32a8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    32ac:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    32b0:	00800034 	movhi	r2,0
    32b4:	10992004 	addi	r2,r2,25728
    32b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    32bc:	1005003a 	cmpeq	r2,r2,zero
    32c0:	1000411e 	bne	r2,zero,33c8 <alt_alarm_start+0x138>
  {
    if (alarm)
    32c4:	e0bffb17 	ldw	r2,-20(fp)
    32c8:	1005003a 	cmpeq	r2,r2,zero
    32cc:	10003b1e 	bne	r2,zero,33bc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    32d0:	e0fffb17 	ldw	r3,-20(fp)
    32d4:	e0bffd17 	ldw	r2,-12(fp)
    32d8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    32dc:	e0fffb17 	ldw	r3,-20(fp)
    32e0:	e0bffe17 	ldw	r2,-8(fp)
    32e4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    32e8:	0005303a 	rdctl	r2,status
    32ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    32f0:	e0fff817 	ldw	r3,-32(fp)
    32f4:	00bfff84 	movi	r2,-2
    32f8:	1884703a 	and	r2,r3,r2
    32fc:	1001703a 	wrctl	status,r2
  
  return context;
    3300:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    3304:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    3308:	00800034 	movhi	r2,0
    330c:	10992104 	addi	r2,r2,25732
    3310:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    3314:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    3318:	e0fffc17 	ldw	r3,-16(fp)
    331c:	e0bff917 	ldw	r2,-28(fp)
    3320:	1885883a 	add	r2,r3,r2
    3324:	10c00044 	addi	r3,r2,1
    3328:	e0bffb17 	ldw	r2,-20(fp)
    332c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    3330:	e0bffb17 	ldw	r2,-20(fp)
    3334:	10c00217 	ldw	r3,8(r2)
    3338:	e0bff917 	ldw	r2,-28(fp)
    333c:	1880042e 	bgeu	r3,r2,3350 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    3340:	e0fffb17 	ldw	r3,-20(fp)
    3344:	00800044 	movi	r2,1
    3348:	18800405 	stb	r2,16(r3)
    334c:	00000206 	br	3358 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    3350:	e0bffb17 	ldw	r2,-20(fp)
    3354:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    3358:	e0fffb17 	ldw	r3,-20(fp)
    335c:	00800034 	movhi	r2,0
    3360:	10991404 	addi	r2,r2,25680
    3364:	e0bff615 	stw	r2,-40(fp)
    3368:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    336c:	e0fff717 	ldw	r3,-36(fp)
    3370:	e0bff617 	ldw	r2,-40(fp)
    3374:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    3378:	e0bff617 	ldw	r2,-40(fp)
    337c:	10c00017 	ldw	r3,0(r2)
    3380:	e0bff717 	ldw	r2,-36(fp)
    3384:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3388:	e0bff617 	ldw	r2,-40(fp)
    338c:	10c00017 	ldw	r3,0(r2)
    3390:	e0bff717 	ldw	r2,-36(fp)
    3394:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    3398:	e0fff617 	ldw	r3,-40(fp)
    339c:	e0bff717 	ldw	r2,-36(fp)
    33a0:	18800015 	stw	r2,0(r3)
    33a4:	e0bffa17 	ldw	r2,-24(fp)
    33a8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    33ac:	e0bff517 	ldw	r2,-44(fp)
    33b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    33b4:	e03fff15 	stw	zero,-4(fp)
    33b8:	00000506 	br	33d0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    33bc:	00bffa84 	movi	r2,-22
    33c0:	e0bfff15 	stw	r2,-4(fp)
    33c4:	00000206 	br	33d0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    33c8:	00bfde84 	movi	r2,-134
    33cc:	e0bfff15 	stw	r2,-4(fp)
    33d0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    33d4:	e037883a 	mov	sp,fp
    33d8:	df000017 	ldw	fp,0(sp)
    33dc:	dec00104 	addi	sp,sp,4
    33e0:	f800283a 	ret

000033e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    33e4:	defff804 	addi	sp,sp,-32
    33e8:	dfc00715 	stw	ra,28(sp)
    33ec:	df000615 	stw	fp,24(sp)
    33f0:	df000604 	addi	fp,sp,24
    33f4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    33f8:	e0bffc17 	ldw	r2,-16(fp)
    33fc:	1004803a 	cmplt	r2,r2,zero
    3400:	1000091e 	bne	r2,zero,3428 <close+0x44>
    3404:	e13ffc17 	ldw	r4,-16(fp)
    3408:	01400304 	movi	r5,12
    340c:	00048040 	call	4804 <__mulsi3>
    3410:	1007883a 	mov	r3,r2
    3414:	00800034 	movhi	r2,0
    3418:	1097a204 	addi	r2,r2,24200
    341c:	1887883a 	add	r3,r3,r2
    3420:	e0ffff15 	stw	r3,-4(fp)
    3424:	00000106 	br	342c <close+0x48>
    3428:	e03fff15 	stw	zero,-4(fp)
    342c:	e0bfff17 	ldw	r2,-4(fp)
    3430:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    3434:	e0bffb17 	ldw	r2,-20(fp)
    3438:	1005003a 	cmpeq	r2,r2,zero
    343c:	10001d1e 	bne	r2,zero,34b4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3440:	e0bffb17 	ldw	r2,-20(fp)
    3444:	10800017 	ldw	r2,0(r2)
    3448:	10800417 	ldw	r2,16(r2)
    344c:	1005003a 	cmpeq	r2,r2,zero
    3450:	1000071e 	bne	r2,zero,3470 <close+0x8c>
    3454:	e0bffb17 	ldw	r2,-20(fp)
    3458:	10800017 	ldw	r2,0(r2)
    345c:	10800417 	ldw	r2,16(r2)
    3460:	e13ffb17 	ldw	r4,-20(fp)
    3464:	103ee83a 	callr	r2
    3468:	e0bffe15 	stw	r2,-8(fp)
    346c:	00000106 	br	3474 <close+0x90>
    3470:	e03ffe15 	stw	zero,-8(fp)
    3474:	e0bffe17 	ldw	r2,-8(fp)
    3478:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    347c:	e13ffc17 	ldw	r4,-16(fp)
    3480:	0003c500 	call	3c50 <alt_release_fd>
    if (rval < 0)
    3484:	e0bffa17 	ldw	r2,-24(fp)
    3488:	1004403a 	cmpge	r2,r2,zero
    348c:	1000071e 	bne	r2,zero,34ac <close+0xc8>
    {
      ALT_ERRNO = -rval;
    3490:	00034e40 	call	34e4 <alt_get_errno>
    3494:	e0fffa17 	ldw	r3,-24(fp)
    3498:	00c7c83a 	sub	r3,zero,r3
    349c:	10c00015 	stw	r3,0(r2)
      return -1;
    34a0:	00bfffc4 	movi	r2,-1
    34a4:	e0bffd15 	stw	r2,-12(fp)
    34a8:	00000806 	br	34cc <close+0xe8>
    }
    return 0;
    34ac:	e03ffd15 	stw	zero,-12(fp)
    34b0:	00000606 	br	34cc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    34b4:	00034e40 	call	34e4 <alt_get_errno>
    34b8:	1007883a 	mov	r3,r2
    34bc:	00801444 	movi	r2,81
    34c0:	18800015 	stw	r2,0(r3)
    return -1;
    34c4:	00bfffc4 	movi	r2,-1
    34c8:	e0bffd15 	stw	r2,-12(fp)
    34cc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    34d0:	e037883a 	mov	sp,fp
    34d4:	dfc00117 	ldw	ra,4(sp)
    34d8:	df000017 	ldw	fp,0(sp)
    34dc:	dec00204 	addi	sp,sp,8
    34e0:	f800283a 	ret

000034e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    34e4:	defffd04 	addi	sp,sp,-12
    34e8:	dfc00215 	stw	ra,8(sp)
    34ec:	df000115 	stw	fp,4(sp)
    34f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    34f4:	00800034 	movhi	r2,0
    34f8:	10991104 	addi	r2,r2,25668
    34fc:	10800017 	ldw	r2,0(r2)
    3500:	1005003a 	cmpeq	r2,r2,zero
    3504:	1000061e 	bne	r2,zero,3520 <alt_get_errno+0x3c>
    3508:	00800034 	movhi	r2,0
    350c:	10991104 	addi	r2,r2,25668
    3510:	10800017 	ldw	r2,0(r2)
    3514:	103ee83a 	callr	r2
    3518:	e0bfff15 	stw	r2,-4(fp)
    351c:	00000306 	br	352c <alt_get_errno+0x48>
    3520:	00800034 	movhi	r2,0
    3524:	10992204 	addi	r2,r2,25736
    3528:	e0bfff15 	stw	r2,-4(fp)
    352c:	e0bfff17 	ldw	r2,-4(fp)
}
    3530:	e037883a 	mov	sp,fp
    3534:	dfc00117 	ldw	ra,4(sp)
    3538:	df000017 	ldw	fp,0(sp)
    353c:	dec00204 	addi	sp,sp,8
    3540:	f800283a 	ret

00003544 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3544:	defffc04 	addi	sp,sp,-16
    3548:	df000315 	stw	fp,12(sp)
    354c:	df000304 	addi	fp,sp,12
    3550:	e13ffd15 	stw	r4,-12(fp)
    3554:	e17ffe15 	stw	r5,-8(fp)
    3558:	e1bfff15 	stw	r6,-4(fp)
  return len;
    355c:	e0bfff17 	ldw	r2,-4(fp)
}
    3560:	e037883a 	mov	sp,fp
    3564:	df000017 	ldw	fp,0(sp)
    3568:	dec00104 	addi	sp,sp,4
    356c:	f800283a 	ret

00003570 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3570:	defff904 	addi	sp,sp,-28
    3574:	dfc00615 	stw	ra,24(sp)
    3578:	df000515 	stw	fp,20(sp)
    357c:	df000504 	addi	fp,sp,20
    3580:	e13ffd15 	stw	r4,-12(fp)
    3584:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    3588:	e0bffd17 	ldw	r2,-12(fp)
    358c:	1005003a 	cmpeq	r2,r2,zero
    3590:	1000041e 	bne	r2,zero,35a4 <alt_dev_llist_insert+0x34>
    3594:	e0bffd17 	ldw	r2,-12(fp)
    3598:	10800217 	ldw	r2,8(r2)
    359c:	1004c03a 	cmpne	r2,r2,zero
    35a0:	1000071e 	bne	r2,zero,35c0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    35a4:	00036240 	call	3624 <alt_get_errno>
    35a8:	1007883a 	mov	r3,r2
    35ac:	00800584 	movi	r2,22
    35b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    35b4:	00bffa84 	movi	r2,-22
    35b8:	e0bfff15 	stw	r2,-4(fp)
    35bc:	00001306 	br	360c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    35c0:	e0fffd17 	ldw	r3,-12(fp)
    35c4:	e0bffe17 	ldw	r2,-8(fp)
    35c8:	e0bffb15 	stw	r2,-20(fp)
    35cc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    35d0:	e0fffc17 	ldw	r3,-16(fp)
    35d4:	e0bffb17 	ldw	r2,-20(fp)
    35d8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    35dc:	e0bffb17 	ldw	r2,-20(fp)
    35e0:	10c00017 	ldw	r3,0(r2)
    35e4:	e0bffc17 	ldw	r2,-16(fp)
    35e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    35ec:	e0bffb17 	ldw	r2,-20(fp)
    35f0:	10c00017 	ldw	r3,0(r2)
    35f4:	e0bffc17 	ldw	r2,-16(fp)
    35f8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    35fc:	e0fffb17 	ldw	r3,-20(fp)
    3600:	e0bffc17 	ldw	r2,-16(fp)
    3604:	18800015 	stw	r2,0(r3)

  return 0;  
    3608:	e03fff15 	stw	zero,-4(fp)
    360c:	e0bfff17 	ldw	r2,-4(fp)
}
    3610:	e037883a 	mov	sp,fp
    3614:	dfc00117 	ldw	ra,4(sp)
    3618:	df000017 	ldw	fp,0(sp)
    361c:	dec00204 	addi	sp,sp,8
    3620:	f800283a 	ret

00003624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3624:	defffd04 	addi	sp,sp,-12
    3628:	dfc00215 	stw	ra,8(sp)
    362c:	df000115 	stw	fp,4(sp)
    3630:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3634:	00800034 	movhi	r2,0
    3638:	10991104 	addi	r2,r2,25668
    363c:	10800017 	ldw	r2,0(r2)
    3640:	1005003a 	cmpeq	r2,r2,zero
    3644:	1000061e 	bne	r2,zero,3660 <alt_get_errno+0x3c>
    3648:	00800034 	movhi	r2,0
    364c:	10991104 	addi	r2,r2,25668
    3650:	10800017 	ldw	r2,0(r2)
    3654:	103ee83a 	callr	r2
    3658:	e0bfff15 	stw	r2,-4(fp)
    365c:	00000306 	br	366c <alt_get_errno+0x48>
    3660:	00800034 	movhi	r2,0
    3664:	10992204 	addi	r2,r2,25736
    3668:	e0bfff15 	stw	r2,-4(fp)
    366c:	e0bfff17 	ldw	r2,-4(fp)
}
    3670:	e037883a 	mov	sp,fp
    3674:	dfc00117 	ldw	ra,4(sp)
    3678:	df000017 	ldw	fp,0(sp)
    367c:	dec00204 	addi	sp,sp,8
    3680:	f800283a 	ret

00003684 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    3684:	defffd04 	addi	sp,sp,-12
    3688:	dfc00215 	stw	ra,8(sp)
    368c:	df000115 	stw	fp,4(sp)
    3690:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3694:	00bfff04 	movi	r2,-4
    3698:	00c00034 	movhi	r3,0
    369c:	18d22804 	addi	r3,r3,18592
    36a0:	1885883a 	add	r2,r3,r2
    36a4:	e0bfff15 	stw	r2,-4(fp)
    36a8:	00000606 	br	36c4 <_do_ctors+0x40>
        (*ctor) (); 
    36ac:	e0bfff17 	ldw	r2,-4(fp)
    36b0:	10800017 	ldw	r2,0(r2)
    36b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    36b8:	e0bfff17 	ldw	r2,-4(fp)
    36bc:	10bfff04 	addi	r2,r2,-4
    36c0:	e0bfff15 	stw	r2,-4(fp)
    36c4:	e0ffff17 	ldw	r3,-4(fp)
    36c8:	00800034 	movhi	r2,0
    36cc:	10922704 	addi	r2,r2,18588
    36d0:	18bff62e 	bgeu	r3,r2,36ac <_do_ctors+0x28>
        (*ctor) (); 
}
    36d4:	e037883a 	mov	sp,fp
    36d8:	dfc00117 	ldw	ra,4(sp)
    36dc:	df000017 	ldw	fp,0(sp)
    36e0:	dec00204 	addi	sp,sp,8
    36e4:	f800283a 	ret

000036e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    36e8:	defffd04 	addi	sp,sp,-12
    36ec:	dfc00215 	stw	ra,8(sp)
    36f0:	df000115 	stw	fp,4(sp)
    36f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    36f8:	00bfff04 	movi	r2,-4
    36fc:	00c00034 	movhi	r3,0
    3700:	18d22804 	addi	r3,r3,18592
    3704:	1885883a 	add	r2,r3,r2
    3708:	e0bfff15 	stw	r2,-4(fp)
    370c:	00000606 	br	3728 <_do_dtors+0x40>
        (*dtor) (); 
    3710:	e0bfff17 	ldw	r2,-4(fp)
    3714:	10800017 	ldw	r2,0(r2)
    3718:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    371c:	e0bfff17 	ldw	r2,-4(fp)
    3720:	10bfff04 	addi	r2,r2,-4
    3724:	e0bfff15 	stw	r2,-4(fp)
    3728:	e0ffff17 	ldw	r3,-4(fp)
    372c:	00800034 	movhi	r2,0
    3730:	10922804 	addi	r2,r2,18592
    3734:	18bff62e 	bgeu	r3,r2,3710 <_do_dtors+0x28>
        (*dtor) (); 
}
    3738:	e037883a 	mov	sp,fp
    373c:	dfc00117 	ldw	ra,4(sp)
    3740:	df000017 	ldw	fp,0(sp)
    3744:	dec00204 	addi	sp,sp,8
    3748:	f800283a 	ret

0000374c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    374c:	defffb04 	addi	sp,sp,-20
    3750:	dfc00415 	stw	ra,16(sp)
    3754:	df000315 	stw	fp,12(sp)
    3758:	df000304 	addi	fp,sp,12
    375c:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    3760:	e13ffe17 	ldw	r4,-8(fp)
    3764:	d1601004 	addi	r5,gp,-32704
    3768:	00040c40 	call	40c4 <alt_find_dev>
    376c:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
    3770:	e0bffd17 	ldw	r2,-12(fp)
    3774:	1005003a 	cmpeq	r2,r2,zero
    3778:	10000b1e 	bne	r2,zero,37a8 <alt_flash_open_dev+0x5c>
    377c:	e0bffd17 	ldw	r2,-12(fp)
    3780:	10800317 	ldw	r2,12(r2)
    3784:	1005003a 	cmpeq	r2,r2,zero
    3788:	1000071e 	bne	r2,zero,37a8 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
    378c:	e0bffd17 	ldw	r2,-12(fp)
    3790:	10800317 	ldw	r2,12(r2)
    3794:	e13ffd17 	ldw	r4,-12(fp)
    3798:	e17ffe17 	ldw	r5,-8(fp)
    379c:	103ee83a 	callr	r2
    37a0:	e0bfff15 	stw	r2,-4(fp)
    37a4:	00000206 	br	37b0 <alt_flash_open_dev+0x64>
  }

  return dev;
    37a8:	e0bffd17 	ldw	r2,-12(fp)
    37ac:	e0bfff15 	stw	r2,-4(fp)
    37b0:	e0bfff17 	ldw	r2,-4(fp)
}
    37b4:	e037883a 	mov	sp,fp
    37b8:	dfc00117 	ldw	ra,4(sp)
    37bc:	df000017 	ldw	fp,0(sp)
    37c0:	dec00204 	addi	sp,sp,8
    37c4:	f800283a 	ret

000037c8 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    37c8:	defffd04 	addi	sp,sp,-12
    37cc:	dfc00215 	stw	ra,8(sp)
    37d0:	df000115 	stw	fp,4(sp)
    37d4:	df000104 	addi	fp,sp,4
    37d8:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    37dc:	e0bfff17 	ldw	r2,-4(fp)
    37e0:	1005003a 	cmpeq	r2,r2,zero
    37e4:	1000081e 	bne	r2,zero,3808 <alt_flash_close_dev+0x40>
    37e8:	e0bfff17 	ldw	r2,-4(fp)
    37ec:	10800417 	ldw	r2,16(r2)
    37f0:	1005003a 	cmpeq	r2,r2,zero
    37f4:	1000041e 	bne	r2,zero,3808 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
    37f8:	e0bfff17 	ldw	r2,-4(fp)
    37fc:	10800417 	ldw	r2,16(r2)
    3800:	e13fff17 	ldw	r4,-4(fp)
    3804:	103ee83a 	callr	r2
  }
  return;
}
    3808:	e037883a 	mov	sp,fp
    380c:	dfc00117 	ldw	ra,4(sp)
    3810:	df000017 	ldw	fp,0(sp)
    3814:	dec00204 	addi	sp,sp,8
    3818:	f800283a 	ret

0000381c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    381c:	defff804 	addi	sp,sp,-32
    3820:	dfc00715 	stw	ra,28(sp)
    3824:	df000615 	stw	fp,24(sp)
    3828:	dc000515 	stw	r16,20(sp)
    382c:	df000504 	addi	fp,sp,20
    3830:	e13ffc15 	stw	r4,-16(fp)
    3834:	e17ffd15 	stw	r5,-12(fp)
    3838:	e1bffe15 	stw	r6,-8(fp)
    383c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    3840:	e13ffd17 	ldw	r4,-12(fp)
    3844:	e17ffe17 	ldw	r5,-8(fp)
    3848:	e1bfff17 	ldw	r6,-4(fp)
    384c:	0003a640 	call	3a64 <open>
    3850:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    3854:	e0bffb17 	ldw	r2,-20(fp)
    3858:	1004803a 	cmplt	r2,r2,zero
    385c:	10001f1e 	bne	r2,zero,38dc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    3860:	e13ffb17 	ldw	r4,-20(fp)
    3864:	04000034 	movhi	r16,0
    3868:	8417a204 	addi	r16,r16,24200
    386c:	01400304 	movi	r5,12
    3870:	00048040 	call	4804 <__mulsi3>
    3874:	1405883a 	add	r2,r2,r16
    3878:	10c00017 	ldw	r3,0(r2)
    387c:	e0bffc17 	ldw	r2,-16(fp)
    3880:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    3884:	e13ffb17 	ldw	r4,-20(fp)
    3888:	04000034 	movhi	r16,0
    388c:	8417a204 	addi	r16,r16,24200
    3890:	01400304 	movi	r5,12
    3894:	00048040 	call	4804 <__mulsi3>
    3898:	1405883a 	add	r2,r2,r16
    389c:	10800104 	addi	r2,r2,4
    38a0:	10c00017 	ldw	r3,0(r2)
    38a4:	e0bffc17 	ldw	r2,-16(fp)
    38a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    38ac:	e13ffb17 	ldw	r4,-20(fp)
    38b0:	04000034 	movhi	r16,0
    38b4:	8417a204 	addi	r16,r16,24200
    38b8:	01400304 	movi	r5,12
    38bc:	00048040 	call	4804 <__mulsi3>
    38c0:	1405883a 	add	r2,r2,r16
    38c4:	10800204 	addi	r2,r2,8
    38c8:	10c00017 	ldw	r3,0(r2)
    38cc:	e0bffc17 	ldw	r2,-16(fp)
    38d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    38d4:	e13ffb17 	ldw	r4,-20(fp)
    38d8:	0003c500 	call	3c50 <alt_release_fd>
  }
} 
    38dc:	e037883a 	mov	sp,fp
    38e0:	dfc00217 	ldw	ra,8(sp)
    38e4:	df000117 	ldw	fp,4(sp)
    38e8:	dc000017 	ldw	r16,0(sp)
    38ec:	dec00304 	addi	sp,sp,12
    38f0:	f800283a 	ret

000038f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    38f4:	defffb04 	addi	sp,sp,-20
    38f8:	dfc00415 	stw	ra,16(sp)
    38fc:	df000315 	stw	fp,12(sp)
    3900:	df000304 	addi	fp,sp,12
    3904:	e13ffd15 	stw	r4,-12(fp)
    3908:	e17ffe15 	stw	r5,-8(fp)
    390c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    3910:	01000034 	movhi	r4,0
    3914:	2117a504 	addi	r4,r4,24212
    3918:	e17ffd17 	ldw	r5,-12(fp)
    391c:	01800044 	movi	r6,1
    3920:	01c07fc4 	movi	r7,511
    3924:	000381c0 	call	381c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3928:	01000034 	movhi	r4,0
    392c:	2117a204 	addi	r4,r4,24200
    3930:	e17ffe17 	ldw	r5,-8(fp)
    3934:	000d883a 	mov	r6,zero
    3938:	01c07fc4 	movi	r7,511
    393c:	000381c0 	call	381c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    3940:	01000034 	movhi	r4,0
    3944:	2117a804 	addi	r4,r4,24224
    3948:	e17fff17 	ldw	r5,-4(fp)
    394c:	01800044 	movi	r6,1
    3950:	01c07fc4 	movi	r7,511
    3954:	000381c0 	call	381c <alt_open_fd>
}  
    3958:	e037883a 	mov	sp,fp
    395c:	dfc00117 	ldw	ra,4(sp)
    3960:	df000017 	ldw	fp,0(sp)
    3964:	dec00204 	addi	sp,sp,8
    3968:	f800283a 	ret

0000396c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    396c:	defffa04 	addi	sp,sp,-24
    3970:	dfc00515 	stw	ra,20(sp)
    3974:	df000415 	stw	fp,16(sp)
    3978:	dc000315 	stw	r16,12(sp)
    397c:	df000304 	addi	fp,sp,12
    3980:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    3984:	e0bffe17 	ldw	r2,-8(fp)
    3988:	10800217 	ldw	r2,8(r2)
    398c:	10d00034 	orhi	r3,r2,16384
    3990:	e0bffe17 	ldw	r2,-8(fp)
    3994:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3998:	e03ffd15 	stw	zero,-12(fp)
    399c:	00002306 	br	3a2c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    39a0:	e13ffd17 	ldw	r4,-12(fp)
    39a4:	04000034 	movhi	r16,0
    39a8:	8417a204 	addi	r16,r16,24200
    39ac:	01400304 	movi	r5,12
    39b0:	00048040 	call	4804 <__mulsi3>
    39b4:	1405883a 	add	r2,r2,r16
    39b8:	10c00017 	ldw	r3,0(r2)
    39bc:	e0bffe17 	ldw	r2,-8(fp)
    39c0:	10800017 	ldw	r2,0(r2)
    39c4:	1880161e 	bne	r3,r2,3a20 <alt_file_locked+0xb4>
    39c8:	e13ffd17 	ldw	r4,-12(fp)
    39cc:	04000034 	movhi	r16,0
    39d0:	8417a204 	addi	r16,r16,24200
    39d4:	01400304 	movi	r5,12
    39d8:	00048040 	call	4804 <__mulsi3>
    39dc:	1405883a 	add	r2,r2,r16
    39e0:	10800204 	addi	r2,r2,8
    39e4:	10800017 	ldw	r2,0(r2)
    39e8:	1004403a 	cmpge	r2,r2,zero
    39ec:	10000c1e 	bne	r2,zero,3a20 <alt_file_locked+0xb4>
    39f0:	e13ffd17 	ldw	r4,-12(fp)
    39f4:	01400304 	movi	r5,12
    39f8:	00048040 	call	4804 <__mulsi3>
    39fc:	1007883a 	mov	r3,r2
    3a00:	00800034 	movhi	r2,0
    3a04:	1097a204 	addi	r2,r2,24200
    3a08:	1887883a 	add	r3,r3,r2
    3a0c:	e0bffe17 	ldw	r2,-8(fp)
    3a10:	18800326 	beq	r3,r2,3a20 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3a14:	00bffcc4 	movi	r2,-13
    3a18:	e0bfff15 	stw	r2,-4(fp)
    3a1c:	00000a06 	br	3a48 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3a20:	e0bffd17 	ldw	r2,-12(fp)
    3a24:	10800044 	addi	r2,r2,1
    3a28:	e0bffd15 	stw	r2,-12(fp)
    3a2c:	00800034 	movhi	r2,0
    3a30:	10991004 	addi	r2,r2,25664
    3a34:	10800017 	ldw	r2,0(r2)
    3a38:	1007883a 	mov	r3,r2
    3a3c:	e0bffd17 	ldw	r2,-12(fp)
    3a40:	18bfd72e 	bgeu	r3,r2,39a0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3a44:	e03fff15 	stw	zero,-4(fp)
    3a48:	e0bfff17 	ldw	r2,-4(fp)
}
    3a4c:	e037883a 	mov	sp,fp
    3a50:	dfc00217 	ldw	ra,8(sp)
    3a54:	df000117 	ldw	fp,4(sp)
    3a58:	dc000017 	ldw	r16,0(sp)
    3a5c:	dec00304 	addi	sp,sp,12
    3a60:	f800283a 	ret

00003a64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    3a64:	defff404 	addi	sp,sp,-48
    3a68:	dfc00b15 	stw	ra,44(sp)
    3a6c:	df000a15 	stw	fp,40(sp)
    3a70:	df000a04 	addi	fp,sp,40
    3a74:	e13ffb15 	stw	r4,-20(fp)
    3a78:	e17ffc15 	stw	r5,-16(fp)
    3a7c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    3a80:	00bfffc4 	movi	r2,-1
    3a84:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    3a88:	00bffb44 	movi	r2,-19
    3a8c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    3a90:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    3a94:	e13ffb17 	ldw	r4,-20(fp)
    3a98:	01400034 	movhi	r5,0
    3a9c:	29590e04 	addi	r5,r5,25656
    3aa0:	00040c40 	call	40c4 <alt_find_dev>
    3aa4:	e0bffa15 	stw	r2,-24(fp)
    3aa8:	e0bffa17 	ldw	r2,-24(fp)
    3aac:	1004c03a 	cmpne	r2,r2,zero
    3ab0:	1000051e 	bne	r2,zero,3ac8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    3ab4:	e13ffb17 	ldw	r4,-20(fp)
    3ab8:	00041580 	call	4158 <alt_find_file>
    3abc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    3ac0:	00800044 	movi	r2,1
    3ac4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    3ac8:	e0bffa17 	ldw	r2,-24(fp)
    3acc:	1005003a 	cmpeq	r2,r2,zero
    3ad0:	1000311e 	bne	r2,zero,3b98 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    3ad4:	e13ffa17 	ldw	r4,-24(fp)
    3ad8:	00042780 	call	4278 <alt_get_fd>
    3adc:	e0bff815 	stw	r2,-32(fp)
    3ae0:	e0bff817 	ldw	r2,-32(fp)
    3ae4:	1004403a 	cmpge	r2,r2,zero
    3ae8:	1000031e 	bne	r2,zero,3af8 <open+0x94>
    {
      status = index;
    3aec:	e0bff817 	ldw	r2,-32(fp)
    3af0:	e0bff715 	stw	r2,-36(fp)
    3af4:	00002a06 	br	3ba0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    3af8:	e13ff817 	ldw	r4,-32(fp)
    3afc:	01400304 	movi	r5,12
    3b00:	00048040 	call	4804 <__mulsi3>
    3b04:	1007883a 	mov	r3,r2
    3b08:	00800034 	movhi	r2,0
    3b0c:	1097a204 	addi	r2,r2,24200
    3b10:	1885883a 	add	r2,r3,r2
    3b14:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3b18:	e0fffc17 	ldw	r3,-16(fp)
    3b1c:	00900034 	movhi	r2,16384
    3b20:	10bfffc4 	addi	r2,r2,-1
    3b24:	1886703a 	and	r3,r3,r2
    3b28:	e0bff917 	ldw	r2,-28(fp)
    3b2c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    3b30:	e0bff617 	ldw	r2,-40(fp)
    3b34:	1004c03a 	cmpne	r2,r2,zero
    3b38:	1000061e 	bne	r2,zero,3b54 <open+0xf0>
    3b3c:	e13ff917 	ldw	r4,-28(fp)
    3b40:	000396c0 	call	396c <alt_file_locked>
    3b44:	e0bff715 	stw	r2,-36(fp)
    3b48:	e0bff717 	ldw	r2,-36(fp)
    3b4c:	1004803a 	cmplt	r2,r2,zero
    3b50:	1000131e 	bne	r2,zero,3ba0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3b54:	e0bffa17 	ldw	r2,-24(fp)
    3b58:	10800317 	ldw	r2,12(r2)
    3b5c:	1005003a 	cmpeq	r2,r2,zero
    3b60:	1000091e 	bne	r2,zero,3b88 <open+0x124>
    3b64:	e0bffa17 	ldw	r2,-24(fp)
    3b68:	10800317 	ldw	r2,12(r2)
    3b6c:	e13ff917 	ldw	r4,-28(fp)
    3b70:	e17ffb17 	ldw	r5,-20(fp)
    3b74:	e1bffc17 	ldw	r6,-16(fp)
    3b78:	e1fffd17 	ldw	r7,-12(fp)
    3b7c:	103ee83a 	callr	r2
    3b80:	e0bfff15 	stw	r2,-4(fp)
    3b84:	00000106 	br	3b8c <open+0x128>
    3b88:	e03fff15 	stw	zero,-4(fp)
    3b8c:	e0bfff17 	ldw	r2,-4(fp)
    3b90:	e0bff715 	stw	r2,-36(fp)
    3b94:	00000206 	br	3ba0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3b98:	00bffb44 	movi	r2,-19
    3b9c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    3ba0:	e0bff717 	ldw	r2,-36(fp)
    3ba4:	1004403a 	cmpge	r2,r2,zero
    3ba8:	1000091e 	bne	r2,zero,3bd0 <open+0x16c>
  {
    alt_release_fd (index);  
    3bac:	e13ff817 	ldw	r4,-32(fp)
    3bb0:	0003c500 	call	3c50 <alt_release_fd>
    ALT_ERRNO = -status;
    3bb4:	0003bf00 	call	3bf0 <alt_get_errno>
    3bb8:	e0fff717 	ldw	r3,-36(fp)
    3bbc:	00c7c83a 	sub	r3,zero,r3
    3bc0:	10c00015 	stw	r3,0(r2)
    return -1;
    3bc4:	00bfffc4 	movi	r2,-1
    3bc8:	e0bffe15 	stw	r2,-8(fp)
    3bcc:	00000206 	br	3bd8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    3bd0:	e0bff817 	ldw	r2,-32(fp)
    3bd4:	e0bffe15 	stw	r2,-8(fp)
    3bd8:	e0bffe17 	ldw	r2,-8(fp)
}
    3bdc:	e037883a 	mov	sp,fp
    3be0:	dfc00117 	ldw	ra,4(sp)
    3be4:	df000017 	ldw	fp,0(sp)
    3be8:	dec00204 	addi	sp,sp,8
    3bec:	f800283a 	ret

00003bf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3bf0:	defffd04 	addi	sp,sp,-12
    3bf4:	dfc00215 	stw	ra,8(sp)
    3bf8:	df000115 	stw	fp,4(sp)
    3bfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3c00:	00800034 	movhi	r2,0
    3c04:	10991104 	addi	r2,r2,25668
    3c08:	10800017 	ldw	r2,0(r2)
    3c0c:	1005003a 	cmpeq	r2,r2,zero
    3c10:	1000061e 	bne	r2,zero,3c2c <alt_get_errno+0x3c>
    3c14:	00800034 	movhi	r2,0
    3c18:	10991104 	addi	r2,r2,25668
    3c1c:	10800017 	ldw	r2,0(r2)
    3c20:	103ee83a 	callr	r2
    3c24:	e0bfff15 	stw	r2,-4(fp)
    3c28:	00000306 	br	3c38 <alt_get_errno+0x48>
    3c2c:	00800034 	movhi	r2,0
    3c30:	10992204 	addi	r2,r2,25736
    3c34:	e0bfff15 	stw	r2,-4(fp)
    3c38:	e0bfff17 	ldw	r2,-4(fp)
}
    3c3c:	e037883a 	mov	sp,fp
    3c40:	dfc00117 	ldw	ra,4(sp)
    3c44:	df000017 	ldw	fp,0(sp)
    3c48:	dec00204 	addi	sp,sp,8
    3c4c:	f800283a 	ret

00003c50 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3c50:	defffc04 	addi	sp,sp,-16
    3c54:	dfc00315 	stw	ra,12(sp)
    3c58:	df000215 	stw	fp,8(sp)
    3c5c:	dc000115 	stw	r16,4(sp)
    3c60:	df000104 	addi	fp,sp,4
    3c64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3c68:	e0bfff17 	ldw	r2,-4(fp)
    3c6c:	108000d0 	cmplti	r2,r2,3
    3c70:	10000f1e 	bne	r2,zero,3cb0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    3c74:	e13fff17 	ldw	r4,-4(fp)
    3c78:	04000034 	movhi	r16,0
    3c7c:	8417a204 	addi	r16,r16,24200
    3c80:	01400304 	movi	r5,12
    3c84:	00048040 	call	4804 <__mulsi3>
    3c88:	1405883a 	add	r2,r2,r16
    3c8c:	10800204 	addi	r2,r2,8
    3c90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3c94:	e13fff17 	ldw	r4,-4(fp)
    3c98:	04000034 	movhi	r16,0
    3c9c:	8417a204 	addi	r16,r16,24200
    3ca0:	01400304 	movi	r5,12
    3ca4:	00048040 	call	4804 <__mulsi3>
    3ca8:	1405883a 	add	r2,r2,r16
    3cac:	10000015 	stw	zero,0(r2)
  }
}
    3cb0:	e037883a 	mov	sp,fp
    3cb4:	dfc00217 	ldw	ra,8(sp)
    3cb8:	df000117 	ldw	fp,4(sp)
    3cbc:	dc000017 	ldw	r16,0(sp)
    3cc0:	dec00304 	addi	sp,sp,12
    3cc4:	f800283a 	ret

00003cc8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3cc8:	defffa04 	addi	sp,sp,-24
    3ccc:	df000515 	stw	fp,20(sp)
    3cd0:	df000504 	addi	fp,sp,20
    3cd4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3cd8:	0005303a 	rdctl	r2,status
    3cdc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3ce0:	e0fffd17 	ldw	r3,-12(fp)
    3ce4:	00bfff84 	movi	r2,-2
    3ce8:	1884703a 	and	r2,r3,r2
    3cec:	1001703a 	wrctl	status,r2
  
  return context;
    3cf0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    3cf4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    3cf8:	e0bfff17 	ldw	r2,-4(fp)
    3cfc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    3d00:	e0bffc17 	ldw	r2,-16(fp)
    3d04:	10c00017 	ldw	r3,0(r2)
    3d08:	e0bffc17 	ldw	r2,-16(fp)
    3d0c:	10800117 	ldw	r2,4(r2)
    3d10:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    3d14:	e0bffc17 	ldw	r2,-16(fp)
    3d18:	10c00117 	ldw	r3,4(r2)
    3d1c:	e0bffc17 	ldw	r2,-16(fp)
    3d20:	10800017 	ldw	r2,0(r2)
    3d24:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3d28:	e0fffc17 	ldw	r3,-16(fp)
    3d2c:	e0bffc17 	ldw	r2,-16(fp)
    3d30:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    3d34:	e0fffc17 	ldw	r3,-16(fp)
    3d38:	e0bffc17 	ldw	r2,-16(fp)
    3d3c:	18800015 	stw	r2,0(r3)
    3d40:	e0bffe17 	ldw	r2,-8(fp)
    3d44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d48:	e0bffb17 	ldw	r2,-20(fp)
    3d4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    3d50:	e037883a 	mov	sp,fp
    3d54:	df000017 	ldw	fp,0(sp)
    3d58:	dec00104 	addi	sp,sp,4
    3d5c:	f800283a 	ret

00003d60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3d60:	defffb04 	addi	sp,sp,-20
    3d64:	dfc00415 	stw	ra,16(sp)
    3d68:	df000315 	stw	fp,12(sp)
    3d6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3d70:	d0a01217 	ldw	r2,-32696(gp)
    3d74:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3d78:	d0a01f17 	ldw	r2,-32644(gp)
    3d7c:	10800044 	addi	r2,r2,1
    3d80:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3d84:	00003106 	br	3e4c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    3d88:	e0bffe17 	ldw	r2,-8(fp)
    3d8c:	10800017 	ldw	r2,0(r2)
    3d90:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3d94:	e0bffe17 	ldw	r2,-8(fp)
    3d98:	10800403 	ldbu	r2,16(r2)
    3d9c:	10803fcc 	andi	r2,r2,255
    3da0:	1005003a 	cmpeq	r2,r2,zero
    3da4:	1000051e 	bne	r2,zero,3dbc <alt_tick+0x5c>
    3da8:	d0a01f17 	ldw	r2,-32644(gp)
    3dac:	1004c03a 	cmpne	r2,r2,zero
    3db0:	1000021e 	bne	r2,zero,3dbc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    3db4:	e0bffe17 	ldw	r2,-8(fp)
    3db8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3dbc:	e0bffe17 	ldw	r2,-8(fp)
    3dc0:	10c00217 	ldw	r3,8(r2)
    3dc4:	d0a01f17 	ldw	r2,-32644(gp)
    3dc8:	10c01e36 	bltu	r2,r3,3e44 <alt_tick+0xe4>
    3dcc:	e0bffe17 	ldw	r2,-8(fp)
    3dd0:	10800403 	ldbu	r2,16(r2)
    3dd4:	10803fcc 	andi	r2,r2,255
    3dd8:	1004c03a 	cmpne	r2,r2,zero
    3ddc:	1000191e 	bne	r2,zero,3e44 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    3de0:	e0bffe17 	ldw	r2,-8(fp)
    3de4:	10c00317 	ldw	r3,12(r2)
    3de8:	e0bffe17 	ldw	r2,-8(fp)
    3dec:	11000517 	ldw	r4,20(r2)
    3df0:	183ee83a 	callr	r3
    3df4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3df8:	e0bffd17 	ldw	r2,-12(fp)
    3dfc:	1004c03a 	cmpne	r2,r2,zero
    3e00:	1000031e 	bne	r2,zero,3e10 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    3e04:	e13ffe17 	ldw	r4,-8(fp)
    3e08:	0003cc80 	call	3cc8 <alt_alarm_stop>
    3e0c:	00000d06 	br	3e44 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    3e10:	e0bffe17 	ldw	r2,-8(fp)
    3e14:	10c00217 	ldw	r3,8(r2)
    3e18:	e0bffd17 	ldw	r2,-12(fp)
    3e1c:	1887883a 	add	r3,r3,r2
    3e20:	e0bffe17 	ldw	r2,-8(fp)
    3e24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3e28:	e0bffe17 	ldw	r2,-8(fp)
    3e2c:	10c00217 	ldw	r3,8(r2)
    3e30:	d0a01f17 	ldw	r2,-32644(gp)
    3e34:	1880032e 	bgeu	r3,r2,3e44 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    3e38:	e0fffe17 	ldw	r3,-8(fp)
    3e3c:	00800044 	movi	r2,1
    3e40:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    3e44:	e0bfff17 	ldw	r2,-4(fp)
    3e48:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3e4c:	d0e01204 	addi	r3,gp,-32696
    3e50:	e0bffe17 	ldw	r2,-8(fp)
    3e54:	10ffcc1e 	bne	r2,r3,3d88 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    3e58:	e037883a 	mov	sp,fp
    3e5c:	dfc00117 	ldw	ra,4(sp)
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00204 	addi	sp,sp,8
    3e68:	f800283a 	ret

00003e6c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    3e6c:	deffff04 	addi	sp,sp,-4
    3e70:	df000015 	stw	fp,0(sp)
    3e74:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3e78:	000170fa 	wrctl	ienable,zero
}
    3e7c:	e037883a 	mov	sp,fp
    3e80:	df000017 	ldw	fp,0(sp)
    3e84:	dec00104 	addi	sp,sp,4
    3e88:	f800283a 	ret

00003e8c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    3e8c:	defff404 	addi	sp,sp,-48
    3e90:	df000b15 	stw	fp,44(sp)
    3e94:	df000b04 	addi	fp,sp,44
    3e98:	e13ffc15 	stw	r4,-16(fp)
    3e9c:	e17ffd15 	stw	r5,-12(fp)
    3ea0:	e1bffe15 	stw	r6,-8(fp)
    3ea4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    3ea8:	e0fffe17 	ldw	r3,-8(fp)
    3eac:	e0bfff17 	ldw	r2,-4(fp)
    3eb0:	10c5883a 	add	r2,r2,r3
    3eb4:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
    3eb8:	e0c00117 	ldw	r3,4(fp)
    3ebc:	e0800217 	ldw	r2,8(fp)
    3ec0:	10c5883a 	add	r2,r2,r3
    3ec4:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
    3ec8:	e0800117 	ldw	r2,4(fp)
    3ecc:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
    3ed0:	e0bffe17 	ldw	r2,-8(fp)
    3ed4:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    3ed8:	00800044 	movi	r2,1
    3edc:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    3ee0:	e0bffc17 	ldw	r2,-16(fp)
    3ee4:	11000504 	addi	r4,r2,20
    3ee8:	e0fffd17 	ldw	r3,-12(fp)
    3eec:	00800044 	movi	r2,1
    3ef0:	10c6983a 	sll	r3,r2,r3
    3ef4:	2005883a 	mov	r2,r4
    3ef8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    3efc:	e0800317 	ldw	r2,12(fp)
    3f00:	1080008c 	andi	r2,r2,2
    3f04:	1004c03a 	cmpne	r2,r2,zero
    3f08:	1000051e 	bne	r2,zero,3f20 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    3f0c:	e0bffc17 	ldw	r2,-16(fp)
    3f10:	10800304 	addi	r2,r2,12
    3f14:	1007883a 	mov	r3,r2
    3f18:	00810004 	movi	r2,1024
    3f1c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    3f20:	e0bffc17 	ldw	r2,-16(fp)
    3f24:	10800037 	ldwio	r2,0(r2)
    3f28:	00000006 	br	3f2c <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    3f2c:	e0bffc17 	ldw	r2,-16(fp)
    3f30:	10800204 	addi	r2,r2,8
    3f34:	10800037 	ldwio	r2,0(r2)
    3f38:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    3f3c:	e0bff717 	ldw	r2,-36(fp)
    3f40:	1080100c 	andi	r2,r2,64
    3f44:	1005003a 	cmpeq	r2,r2,zero
    3f48:	1000031e 	bne	r2,zero,3f58 <alt_avalon_spi_command+0xcc>
    3f4c:	e0bff617 	ldw	r2,-40(fp)
    3f50:	1004c03a 	cmpne	r2,r2,zero
    3f54:	1000041e 	bne	r2,zero,3f68 <alt_avalon_spi_command+0xdc>
    3f58:	e0bff717 	ldw	r2,-36(fp)
    3f5c:	1080200c 	andi	r2,r2,128
    3f60:	1005003a 	cmpeq	r2,r2,zero
    3f64:	103ff11e 	bne	r2,zero,3f2c <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    3f68:	e0bff717 	ldw	r2,-36(fp)
    3f6c:	1080100c 	andi	r2,r2,64
    3f70:	1005003a 	cmpeq	r2,r2,zero
    3f74:	1000201e 	bne	r2,zero,3ff8 <alt_avalon_spi_command+0x16c>
    3f78:	e0bff617 	ldw	r2,-40(fp)
    3f7c:	10800050 	cmplti	r2,r2,1
    3f80:	10001d1e 	bne	r2,zero,3ff8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
    3f84:	e0bff617 	ldw	r2,-40(fp)
    3f88:	10bfffc4 	addi	r2,r2,-1
    3f8c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
    3f90:	e0ffff17 	ldw	r3,-4(fp)
    3f94:	e0bffb17 	ldw	r2,-20(fp)
    3f98:	18800b2e 	bgeu	r3,r2,3fc8 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    3f9c:	e0bffc17 	ldw	r2,-16(fp)
    3fa0:	11000104 	addi	r4,r2,4
    3fa4:	e0bfff17 	ldw	r2,-4(fp)
    3fa8:	10800003 	ldbu	r2,0(r2)
    3fac:	10c03fcc 	andi	r3,r2,255
    3fb0:	e0bfff17 	ldw	r2,-4(fp)
    3fb4:	10800044 	addi	r2,r2,1
    3fb8:	e0bfff15 	stw	r2,-4(fp)
    3fbc:	2005883a 	mov	r2,r4
    3fc0:	10c00035 	stwio	r3,0(r2)
    3fc4:	00000c06 	br	3ff8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
    3fc8:	e0bff917 	ldw	r2,-28(fp)
    3fcc:	1005003a 	cmpeq	r2,r2,zero
    3fd0:	1000071e 	bne	r2,zero,3ff0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
    3fd4:	e0bff917 	ldw	r2,-28(fp)
    3fd8:	10bfffc4 	addi	r2,r2,-1
    3fdc:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    3fe0:	e0bffc17 	ldw	r2,-16(fp)
    3fe4:	10800104 	addi	r2,r2,4
    3fe8:	10000035 	stwio	zero,0(r2)
    3fec:	00000206 	br	3ff8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
    3ff0:	00bf0004 	movi	r2,-1024
    3ff4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    3ff8:	e0bff717 	ldw	r2,-36(fp)
    3ffc:	1080200c 	andi	r2,r2,128
    4000:	1005003a 	cmpeq	r2,r2,zero
    4004:	103fc91e 	bne	r2,zero,3f2c <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    4008:	e0bffc17 	ldw	r2,-16(fp)
    400c:	10800037 	ldwio	r2,0(r2)
    4010:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
    4014:	e0bff817 	ldw	r2,-32(fp)
    4018:	1005003a 	cmpeq	r2,r2,zero
    401c:	1000041e 	bne	r2,zero,4030 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
    4020:	e0bff817 	ldw	r2,-32(fp)
    4024:	10bfffc4 	addi	r2,r2,-1
    4028:	e0bff815 	stw	r2,-32(fp)
    402c:	00000706 	br	404c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
    4030:	e0bff517 	ldw	r2,-44(fp)
    4034:	1007883a 	mov	r3,r2
    4038:	e0800217 	ldw	r2,8(fp)
    403c:	10c00005 	stb	r3,0(r2)
    4040:	e0800217 	ldw	r2,8(fp)
    4044:	10800044 	addi	r2,r2,1
    4048:	e0800215 	stw	r2,8(fp)
      credits++;
    404c:	e0bff617 	ldw	r2,-40(fp)
    4050:	10800044 	addi	r2,r2,1
    4054:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
    4058:	e0bff817 	ldw	r2,-32(fp)
    405c:	1004c03a 	cmpne	r2,r2,zero
    4060:	103fb21e 	bne	r2,zero,3f2c <alt_avalon_spi_command+0xa0>
    4064:	e0c00217 	ldw	r3,8(fp)
    4068:	e0bffa17 	ldw	r2,-24(fp)
    406c:	18800126 	beq	r3,r2,4074 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
    4070:	003fae06 	br	3f2c <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    4074:	e0bffc17 	ldw	r2,-16(fp)
    4078:	10800204 	addi	r2,r2,8
    407c:	10800037 	ldwio	r2,0(r2)
    4080:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    4084:	e0bff717 	ldw	r2,-36(fp)
    4088:	1080080c 	andi	r2,r2,32
    408c:	1005003a 	cmpeq	r2,r2,zero
    4090:	103ff81e 	bne	r2,zero,4074 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    4094:	e0800317 	ldw	r2,12(fp)
    4098:	1080004c 	andi	r2,r2,1
    409c:	1004c03a 	cmpne	r2,r2,zero
    40a0:	1000031e 	bne	r2,zero,40b0 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    40a4:	e0bffc17 	ldw	r2,-16(fp)
    40a8:	10800304 	addi	r2,r2,12
    40ac:	10000035 	stwio	zero,0(r2)

  return read_length;
    40b0:	e0800117 	ldw	r2,4(fp)
}
    40b4:	e037883a 	mov	sp,fp
    40b8:	df000017 	ldw	fp,0(sp)
    40bc:	dec00104 	addi	sp,sp,4
    40c0:	f800283a 	ret

000040c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    40c4:	defff904 	addi	sp,sp,-28
    40c8:	dfc00615 	stw	ra,24(sp)
    40cc:	df000515 	stw	fp,20(sp)
    40d0:	df000504 	addi	fp,sp,20
    40d4:	e13ffd15 	stw	r4,-12(fp)
    40d8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    40dc:	e0bffe17 	ldw	r2,-8(fp)
    40e0:	10800017 	ldw	r2,0(r2)
    40e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    40e8:	e13ffd17 	ldw	r4,-12(fp)
    40ec:	00044a80 	call	44a8 <strlen>
    40f0:	10800044 	addi	r2,r2,1
    40f4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    40f8:	00000d06 	br	4130 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    40fc:	e0bffc17 	ldw	r2,-16(fp)
    4100:	11000217 	ldw	r4,8(r2)
    4104:	e1bffb17 	ldw	r6,-20(fp)
    4108:	e17ffd17 	ldw	r5,-12(fp)
    410c:	00043940 	call	4394 <memcmp>
    4110:	1004c03a 	cmpne	r2,r2,zero
    4114:	1000031e 	bne	r2,zero,4124 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4118:	e0bffc17 	ldw	r2,-16(fp)
    411c:	e0bfff15 	stw	r2,-4(fp)
    4120:	00000706 	br	4140 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4124:	e0bffc17 	ldw	r2,-16(fp)
    4128:	10800017 	ldw	r2,0(r2)
    412c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4130:	e0fffe17 	ldw	r3,-8(fp)
    4134:	e0bffc17 	ldw	r2,-16(fp)
    4138:	10fff01e 	bne	r2,r3,40fc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    413c:	e03fff15 	stw	zero,-4(fp)
    4140:	e0bfff17 	ldw	r2,-4(fp)
}
    4144:	e037883a 	mov	sp,fp
    4148:	dfc00117 	ldw	ra,4(sp)
    414c:	df000017 	ldw	fp,0(sp)
    4150:	dec00204 	addi	sp,sp,8
    4154:	f800283a 	ret

00004158 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4158:	defffa04 	addi	sp,sp,-24
    415c:	dfc00515 	stw	ra,20(sp)
    4160:	df000415 	stw	fp,16(sp)
    4164:	df000404 	addi	fp,sp,16
    4168:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    416c:	00800034 	movhi	r2,0
    4170:	10990c04 	addi	r2,r2,25648
    4174:	10800017 	ldw	r2,0(r2)
    4178:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    417c:	00003306 	br	424c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    4180:	e0bffd17 	ldw	r2,-12(fp)
    4184:	11000217 	ldw	r4,8(r2)
    4188:	00044a80 	call	44a8 <strlen>
    418c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    4190:	e0bffd17 	ldw	r2,-12(fp)
    4194:	10c00217 	ldw	r3,8(r2)
    4198:	e0bffc17 	ldw	r2,-16(fp)
    419c:	1885883a 	add	r2,r3,r2
    41a0:	10bfffc4 	addi	r2,r2,-1
    41a4:	10800003 	ldbu	r2,0(r2)
    41a8:	10803fcc 	andi	r2,r2,255
    41ac:	1080201c 	xori	r2,r2,128
    41b0:	10bfe004 	addi	r2,r2,-128
    41b4:	10800bd8 	cmpnei	r2,r2,47
    41b8:	1000031e 	bne	r2,zero,41c8 <alt_find_file+0x70>
    {
      len -= 1;
    41bc:	e0bffc17 	ldw	r2,-16(fp)
    41c0:	10bfffc4 	addi	r2,r2,-1
    41c4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    41c8:	e0bffc17 	ldw	r2,-16(fp)
    41cc:	1007883a 	mov	r3,r2
    41d0:	e0bffe17 	ldw	r2,-8(fp)
    41d4:	1885883a 	add	r2,r3,r2
    41d8:	10800003 	ldbu	r2,0(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	1080201c 	xori	r2,r2,128
    41e4:	10bfe004 	addi	r2,r2,-128
    41e8:	10800be0 	cmpeqi	r2,r2,47
    41ec:	10000a1e 	bne	r2,zero,4218 <alt_find_file+0xc0>
    41f0:	e0bffc17 	ldw	r2,-16(fp)
    41f4:	1007883a 	mov	r3,r2
    41f8:	e0bffe17 	ldw	r2,-8(fp)
    41fc:	1885883a 	add	r2,r3,r2
    4200:	10800003 	ldbu	r2,0(r2)
    4204:	10803fcc 	andi	r2,r2,255
    4208:	1080201c 	xori	r2,r2,128
    420c:	10bfe004 	addi	r2,r2,-128
    4210:	1004c03a 	cmpne	r2,r2,zero
    4214:	10000a1e 	bne	r2,zero,4240 <alt_find_file+0xe8>
    4218:	e0bffd17 	ldw	r2,-12(fp)
    421c:	11000217 	ldw	r4,8(r2)
    4220:	e1bffc17 	ldw	r6,-16(fp)
    4224:	e17ffe17 	ldw	r5,-8(fp)
    4228:	00043940 	call	4394 <memcmp>
    422c:	1004c03a 	cmpne	r2,r2,zero
    4230:	1000031e 	bne	r2,zero,4240 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4234:	e0bffd17 	ldw	r2,-12(fp)
    4238:	e0bfff15 	stw	r2,-4(fp)
    423c:	00000806 	br	4260 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    4240:	e0bffd17 	ldw	r2,-12(fp)
    4244:	10800017 	ldw	r2,0(r2)
    4248:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    424c:	00c00034 	movhi	r3,0
    4250:	18d90c04 	addi	r3,r3,25648
    4254:	e0bffd17 	ldw	r2,-12(fp)
    4258:	10ffc91e 	bne	r2,r3,4180 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    425c:	e03fff15 	stw	zero,-4(fp)
    4260:	e0bfff17 	ldw	r2,-4(fp)
}
    4264:	e037883a 	mov	sp,fp
    4268:	dfc00117 	ldw	ra,4(sp)
    426c:	df000017 	ldw	fp,0(sp)
    4270:	dec00204 	addi	sp,sp,8
    4274:	f800283a 	ret

00004278 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4278:	defffa04 	addi	sp,sp,-24
    427c:	dfc00515 	stw	ra,20(sp)
    4280:	df000415 	stw	fp,16(sp)
    4284:	dc000315 	stw	r16,12(sp)
    4288:	df000304 	addi	fp,sp,12
    428c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    4290:	00bffa04 	movi	r2,-24
    4294:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4298:	e03ffe15 	stw	zero,-8(fp)
    429c:	00002006 	br	4320 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    42a0:	e13ffe17 	ldw	r4,-8(fp)
    42a4:	04000034 	movhi	r16,0
    42a8:	8417a204 	addi	r16,r16,24200
    42ac:	01400304 	movi	r5,12
    42b0:	00048040 	call	4804 <__mulsi3>
    42b4:	1405883a 	add	r2,r2,r16
    42b8:	10800017 	ldw	r2,0(r2)
    42bc:	1004c03a 	cmpne	r2,r2,zero
    42c0:	1000141e 	bne	r2,zero,4314 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    42c4:	e13ffe17 	ldw	r4,-8(fp)
    42c8:	04000034 	movhi	r16,0
    42cc:	8417a204 	addi	r16,r16,24200
    42d0:	01400304 	movi	r5,12
    42d4:	00048040 	call	4804 <__mulsi3>
    42d8:	1407883a 	add	r3,r2,r16
    42dc:	e0bfff17 	ldw	r2,-4(fp)
    42e0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    42e4:	00800034 	movhi	r2,0
    42e8:	10991004 	addi	r2,r2,25664
    42ec:	10c00017 	ldw	r3,0(r2)
    42f0:	e0bffe17 	ldw	r2,-8(fp)
    42f4:	1880040e 	bge	r3,r2,4308 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    42f8:	00c00034 	movhi	r3,0
    42fc:	18d91004 	addi	r3,r3,25664
    4300:	e0bffe17 	ldw	r2,-8(fp)
    4304:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    4308:	e0bffe17 	ldw	r2,-8(fp)
    430c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    4310:	00000606 	br	432c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4314:	e0bffe17 	ldw	r2,-8(fp)
    4318:	10800044 	addi	r2,r2,1
    431c:	e0bffe15 	stw	r2,-8(fp)
    4320:	e0bffe17 	ldw	r2,-8(fp)
    4324:	10800810 	cmplti	r2,r2,32
    4328:	103fdd1e 	bne	r2,zero,42a0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    432c:	e0bffd17 	ldw	r2,-12(fp)
}
    4330:	e037883a 	mov	sp,fp
    4334:	dfc00217 	ldw	ra,8(sp)
    4338:	df000117 	ldw	fp,4(sp)
    433c:	dc000017 	ldw	r16,0(sp)
    4340:	dec00304 	addi	sp,sp,12
    4344:	f800283a 	ret

00004348 <atexit>:
    4348:	200b883a 	mov	r5,r4
    434c:	000d883a 	mov	r6,zero
    4350:	0009883a 	mov	r4,zero
    4354:	000f883a 	mov	r7,zero
    4358:	000451c1 	jmpi	451c <__register_exitproc>

0000435c <exit>:
    435c:	defffe04 	addi	sp,sp,-8
    4360:	000b883a 	mov	r5,zero
    4364:	dc000015 	stw	r16,0(sp)
    4368:	dfc00115 	stw	ra,4(sp)
    436c:	2021883a 	mov	r16,r4
    4370:	00046540 	call	4654 <__call_exitprocs>
    4374:	00800034 	movhi	r2,0
    4378:	10991704 	addi	r2,r2,25692
    437c:	11000017 	ldw	r4,0(r2)
    4380:	20800f17 	ldw	r2,60(r4)
    4384:	10000126 	beq	r2,zero,438c <exit+0x30>
    4388:	103ee83a 	callr	r2
    438c:	8009883a 	mov	r4,r16
    4390:	000487c0 	call	487c <_exit>

00004394 <memcmp>:
    4394:	00c000c4 	movi	r3,3
    4398:	1980032e 	bgeu	r3,r6,43a8 <memcmp+0x14>
    439c:	2144b03a 	or	r2,r4,r5
    43a0:	10c4703a 	and	r2,r2,r3
    43a4:	10000f26 	beq	r2,zero,43e4 <memcmp+0x50>
    43a8:	31ffffc4 	addi	r7,r6,-1
    43ac:	3000061e 	bne	r6,zero,43c8 <memcmp+0x34>
    43b0:	00000a06 	br	43dc <memcmp+0x48>
    43b4:	39ffffc4 	addi	r7,r7,-1
    43b8:	00bfffc4 	movi	r2,-1
    43bc:	21000044 	addi	r4,r4,1
    43c0:	29400044 	addi	r5,r5,1
    43c4:	38800526 	beq	r7,r2,43dc <memcmp+0x48>
    43c8:	20c00003 	ldbu	r3,0(r4)
    43cc:	28800003 	ldbu	r2,0(r5)
    43d0:	18bff826 	beq	r3,r2,43b4 <memcmp+0x20>
    43d4:	1885c83a 	sub	r2,r3,r2
    43d8:	f800283a 	ret
    43dc:	0005883a 	mov	r2,zero
    43e0:	f800283a 	ret
    43e4:	180f883a 	mov	r7,r3
    43e8:	20c00017 	ldw	r3,0(r4)
    43ec:	28800017 	ldw	r2,0(r5)
    43f0:	18bfed1e 	bne	r3,r2,43a8 <memcmp+0x14>
    43f4:	31bfff04 	addi	r6,r6,-4
    43f8:	21000104 	addi	r4,r4,4
    43fc:	29400104 	addi	r5,r5,4
    4400:	39bff936 	bltu	r7,r6,43e8 <memcmp+0x54>
    4404:	003fe806 	br	43a8 <memcmp+0x14>

00004408 <memcpy>:
    4408:	01c003c4 	movi	r7,15
    440c:	2007883a 	mov	r3,r4
    4410:	3980032e 	bgeu	r7,r6,4420 <memcpy+0x18>
    4414:	2904b03a 	or	r2,r5,r4
    4418:	108000cc 	andi	r2,r2,3
    441c:	10000926 	beq	r2,zero,4444 <memcpy+0x3c>
    4420:	30000626 	beq	r6,zero,443c <memcpy+0x34>
    4424:	30cd883a 	add	r6,r6,r3
    4428:	28800003 	ldbu	r2,0(r5)
    442c:	29400044 	addi	r5,r5,1
    4430:	18800005 	stb	r2,0(r3)
    4434:	18c00044 	addi	r3,r3,1
    4438:	30fffb1e 	bne	r6,r3,4428 <memcpy+0x20>
    443c:	2005883a 	mov	r2,r4
    4440:	f800283a 	ret
    4444:	3811883a 	mov	r8,r7
    4448:	200f883a 	mov	r7,r4
    444c:	28c00017 	ldw	r3,0(r5)
    4450:	31bffc04 	addi	r6,r6,-16
    4454:	38c00015 	stw	r3,0(r7)
    4458:	28800117 	ldw	r2,4(r5)
    445c:	38800115 	stw	r2,4(r7)
    4460:	28c00217 	ldw	r3,8(r5)
    4464:	38c00215 	stw	r3,8(r7)
    4468:	28800317 	ldw	r2,12(r5)
    446c:	29400404 	addi	r5,r5,16
    4470:	38800315 	stw	r2,12(r7)
    4474:	39c00404 	addi	r7,r7,16
    4478:	41bff436 	bltu	r8,r6,444c <memcpy+0x44>
    447c:	008000c4 	movi	r2,3
    4480:	1180072e 	bgeu	r2,r6,44a0 <memcpy+0x98>
    4484:	1007883a 	mov	r3,r2
    4488:	28800017 	ldw	r2,0(r5)
    448c:	31bfff04 	addi	r6,r6,-4
    4490:	29400104 	addi	r5,r5,4
    4494:	38800015 	stw	r2,0(r7)
    4498:	39c00104 	addi	r7,r7,4
    449c:	19bffa36 	bltu	r3,r6,4488 <memcpy+0x80>
    44a0:	3807883a 	mov	r3,r7
    44a4:	003fde06 	br	4420 <memcpy+0x18>

000044a8 <strlen>:
    44a8:	208000cc 	andi	r2,r4,3
    44ac:	2011883a 	mov	r8,r4
    44b0:	1000161e 	bne	r2,zero,450c <strlen+0x64>
    44b4:	20c00017 	ldw	r3,0(r4)
    44b8:	017fbff4 	movhi	r5,65279
    44bc:	297fbfc4 	addi	r5,r5,-257
    44c0:	01e02074 	movhi	r7,32897
    44c4:	39e02004 	addi	r7,r7,-32640
    44c8:	1945883a 	add	r2,r3,r5
    44cc:	11c4703a 	and	r2,r2,r7
    44d0:	00c6303a 	nor	r3,zero,r3
    44d4:	1886703a 	and	r3,r3,r2
    44d8:	18000c1e 	bne	r3,zero,450c <strlen+0x64>
    44dc:	280d883a 	mov	r6,r5
    44e0:	380b883a 	mov	r5,r7
    44e4:	21000104 	addi	r4,r4,4
    44e8:	20800017 	ldw	r2,0(r4)
    44ec:	1187883a 	add	r3,r2,r6
    44f0:	1946703a 	and	r3,r3,r5
    44f4:	0084303a 	nor	r2,zero,r2
    44f8:	10c4703a 	and	r2,r2,r3
    44fc:	103ff926 	beq	r2,zero,44e4 <strlen+0x3c>
    4500:	20800007 	ldb	r2,0(r4)
    4504:	10000326 	beq	r2,zero,4514 <strlen+0x6c>
    4508:	21000044 	addi	r4,r4,1
    450c:	20800007 	ldb	r2,0(r4)
    4510:	103ffd1e 	bne	r2,zero,4508 <strlen+0x60>
    4514:	2205c83a 	sub	r2,r4,r8
    4518:	f800283a 	ret

0000451c <__register_exitproc>:
    451c:	defffa04 	addi	sp,sp,-24
    4520:	00800034 	movhi	r2,0
    4524:	10991704 	addi	r2,r2,25692
    4528:	dc000015 	stw	r16,0(sp)
    452c:	14000017 	ldw	r16,0(r2)
    4530:	dd000415 	stw	r20,16(sp)
    4534:	2829883a 	mov	r20,r5
    4538:	81405217 	ldw	r5,328(r16)
    453c:	dcc00315 	stw	r19,12(sp)
    4540:	dc800215 	stw	r18,8(sp)
    4544:	dc400115 	stw	r17,4(sp)
    4548:	dfc00515 	stw	ra,20(sp)
    454c:	2023883a 	mov	r17,r4
    4550:	3027883a 	mov	r19,r6
    4554:	3825883a 	mov	r18,r7
    4558:	28002526 	beq	r5,zero,45f0 <__register_exitproc+0xd4>
    455c:	29000117 	ldw	r4,4(r5)
    4560:	008007c4 	movi	r2,31
    4564:	11002716 	blt	r2,r4,4604 <__register_exitproc+0xe8>
    4568:	8800101e 	bne	r17,zero,45ac <__register_exitproc+0x90>
    456c:	2105883a 	add	r2,r4,r4
    4570:	1085883a 	add	r2,r2,r2
    4574:	20c00044 	addi	r3,r4,1
    4578:	1145883a 	add	r2,r2,r5
    457c:	0009883a 	mov	r4,zero
    4580:	15000215 	stw	r20,8(r2)
    4584:	28c00115 	stw	r3,4(r5)
    4588:	2005883a 	mov	r2,r4
    458c:	dfc00517 	ldw	ra,20(sp)
    4590:	dd000417 	ldw	r20,16(sp)
    4594:	dcc00317 	ldw	r19,12(sp)
    4598:	dc800217 	ldw	r18,8(sp)
    459c:	dc400117 	ldw	r17,4(sp)
    45a0:	dc000017 	ldw	r16,0(sp)
    45a4:	dec00604 	addi	sp,sp,24
    45a8:	f800283a 	ret
    45ac:	29802204 	addi	r6,r5,136
    45b0:	00800044 	movi	r2,1
    45b4:	110e983a 	sll	r7,r2,r4
    45b8:	30c04017 	ldw	r3,256(r6)
    45bc:	2105883a 	add	r2,r4,r4
    45c0:	1085883a 	add	r2,r2,r2
    45c4:	1185883a 	add	r2,r2,r6
    45c8:	19c6b03a 	or	r3,r3,r7
    45cc:	14802015 	stw	r18,128(r2)
    45d0:	14c00015 	stw	r19,0(r2)
    45d4:	00800084 	movi	r2,2
    45d8:	30c04015 	stw	r3,256(r6)
    45dc:	88bfe31e 	bne	r17,r2,456c <__register_exitproc+0x50>
    45e0:	30804117 	ldw	r2,260(r6)
    45e4:	11c4b03a 	or	r2,r2,r7
    45e8:	30804115 	stw	r2,260(r6)
    45ec:	003fdf06 	br	456c <__register_exitproc+0x50>
    45f0:	00800034 	movhi	r2,0
    45f4:	10996304 	addi	r2,r2,25996
    45f8:	100b883a 	mov	r5,r2
    45fc:	80805215 	stw	r2,328(r16)
    4600:	003fd606 	br	455c <__register_exitproc+0x40>
    4604:	00800034 	movhi	r2,0
    4608:	10800004 	addi	r2,r2,0
    460c:	1000021e 	bne	r2,zero,4618 <__register_exitproc+0xfc>
    4610:	013fffc4 	movi	r4,-1
    4614:	003fdc06 	br	4588 <__register_exitproc+0x6c>
    4618:	01006404 	movi	r4,400
    461c:	103ee83a 	callr	r2
    4620:	1007883a 	mov	r3,r2
    4624:	103ffa26 	beq	r2,zero,4610 <__register_exitproc+0xf4>
    4628:	80805217 	ldw	r2,328(r16)
    462c:	180b883a 	mov	r5,r3
    4630:	18000115 	stw	zero,4(r3)
    4634:	18800015 	stw	r2,0(r3)
    4638:	80c05215 	stw	r3,328(r16)
    463c:	18006215 	stw	zero,392(r3)
    4640:	18006315 	stw	zero,396(r3)
    4644:	0009883a 	mov	r4,zero
    4648:	883fc826 	beq	r17,zero,456c <__register_exitproc+0x50>
    464c:	003fd706 	br	45ac <__register_exitproc+0x90>

00004650 <register_fini>:
    4650:	f800283a 	ret

00004654 <__call_exitprocs>:
    4654:	00800034 	movhi	r2,0
    4658:	10991704 	addi	r2,r2,25692
    465c:	10800017 	ldw	r2,0(r2)
    4660:	defff304 	addi	sp,sp,-52
    4664:	df000b15 	stw	fp,44(sp)
    4668:	d8800115 	stw	r2,4(sp)
    466c:	00800034 	movhi	r2,0
    4670:	10800004 	addi	r2,r2,0
    4674:	1005003a 	cmpeq	r2,r2,zero
    4678:	d8800215 	stw	r2,8(sp)
    467c:	d8800117 	ldw	r2,4(sp)
    4680:	dd400815 	stw	r21,32(sp)
    4684:	dd000715 	stw	r20,28(sp)
    4688:	10805204 	addi	r2,r2,328
    468c:	dfc00c15 	stw	ra,48(sp)
    4690:	ddc00a15 	stw	r23,40(sp)
    4694:	dd800915 	stw	r22,36(sp)
    4698:	dcc00615 	stw	r19,24(sp)
    469c:	dc800515 	stw	r18,20(sp)
    46a0:	dc400415 	stw	r17,16(sp)
    46a4:	dc000315 	stw	r16,12(sp)
    46a8:	282b883a 	mov	r21,r5
    46ac:	2039883a 	mov	fp,r4
    46b0:	d8800015 	stw	r2,0(sp)
    46b4:	2829003a 	cmpeq	r20,r5,zero
    46b8:	d8800117 	ldw	r2,4(sp)
    46bc:	14405217 	ldw	r17,328(r2)
    46c0:	88001026 	beq	r17,zero,4704 <__call_exitprocs+0xb0>
    46c4:	ddc00017 	ldw	r23,0(sp)
    46c8:	88800117 	ldw	r2,4(r17)
    46cc:	8c802204 	addi	r18,r17,136
    46d0:	143fffc4 	addi	r16,r2,-1
    46d4:	80000916 	blt	r16,zero,46fc <__call_exitprocs+0xa8>
    46d8:	05bfffc4 	movi	r22,-1
    46dc:	a000151e 	bne	r20,zero,4734 <__call_exitprocs+0xe0>
    46e0:	8409883a 	add	r4,r16,r16
    46e4:	2105883a 	add	r2,r4,r4
    46e8:	1485883a 	add	r2,r2,r18
    46ec:	10c02017 	ldw	r3,128(r2)
    46f0:	a8c01126 	beq	r21,r3,4738 <__call_exitprocs+0xe4>
    46f4:	843fffc4 	addi	r16,r16,-1
    46f8:	85bff81e 	bne	r16,r22,46dc <__call_exitprocs+0x88>
    46fc:	d8800217 	ldw	r2,8(sp)
    4700:	10003126 	beq	r2,zero,47c8 <__call_exitprocs+0x174>
    4704:	dfc00c17 	ldw	ra,48(sp)
    4708:	df000b17 	ldw	fp,44(sp)
    470c:	ddc00a17 	ldw	r23,40(sp)
    4710:	dd800917 	ldw	r22,36(sp)
    4714:	dd400817 	ldw	r21,32(sp)
    4718:	dd000717 	ldw	r20,28(sp)
    471c:	dcc00617 	ldw	r19,24(sp)
    4720:	dc800517 	ldw	r18,20(sp)
    4724:	dc400417 	ldw	r17,16(sp)
    4728:	dc000317 	ldw	r16,12(sp)
    472c:	dec00d04 	addi	sp,sp,52
    4730:	f800283a 	ret
    4734:	8409883a 	add	r4,r16,r16
    4738:	88c00117 	ldw	r3,4(r17)
    473c:	2105883a 	add	r2,r4,r4
    4740:	1445883a 	add	r2,r2,r17
    4744:	18ffffc4 	addi	r3,r3,-1
    4748:	11800217 	ldw	r6,8(r2)
    474c:	1c001526 	beq	r3,r16,47a4 <__call_exitprocs+0x150>
    4750:	10000215 	stw	zero,8(r2)
    4754:	303fe726 	beq	r6,zero,46f4 <__call_exitprocs+0xa0>
    4758:	00c00044 	movi	r3,1
    475c:	1c06983a 	sll	r3,r3,r16
    4760:	90804017 	ldw	r2,256(r18)
    4764:	8cc00117 	ldw	r19,4(r17)
    4768:	1884703a 	and	r2,r3,r2
    476c:	10001426 	beq	r2,zero,47c0 <__call_exitprocs+0x16c>
    4770:	90804117 	ldw	r2,260(r18)
    4774:	1884703a 	and	r2,r3,r2
    4778:	10000c1e 	bne	r2,zero,47ac <__call_exitprocs+0x158>
    477c:	2105883a 	add	r2,r4,r4
    4780:	1485883a 	add	r2,r2,r18
    4784:	11400017 	ldw	r5,0(r2)
    4788:	e009883a 	mov	r4,fp
    478c:	303ee83a 	callr	r6
    4790:	88800117 	ldw	r2,4(r17)
    4794:	98bfc81e 	bne	r19,r2,46b8 <__call_exitprocs+0x64>
    4798:	b8800017 	ldw	r2,0(r23)
    479c:	147fd526 	beq	r2,r17,46f4 <__call_exitprocs+0xa0>
    47a0:	003fc506 	br	46b8 <__call_exitprocs+0x64>
    47a4:	8c000115 	stw	r16,4(r17)
    47a8:	003fea06 	br	4754 <__call_exitprocs+0x100>
    47ac:	2105883a 	add	r2,r4,r4
    47b0:	1485883a 	add	r2,r2,r18
    47b4:	11000017 	ldw	r4,0(r2)
    47b8:	303ee83a 	callr	r6
    47bc:	003ff406 	br	4790 <__call_exitprocs+0x13c>
    47c0:	303ee83a 	callr	r6
    47c4:	003ff206 	br	4790 <__call_exitprocs+0x13c>
    47c8:	88800117 	ldw	r2,4(r17)
    47cc:	1000081e 	bne	r2,zero,47f0 <__call_exitprocs+0x19c>
    47d0:	89000017 	ldw	r4,0(r17)
    47d4:	20000726 	beq	r4,zero,47f4 <__call_exitprocs+0x1a0>
    47d8:	b9000015 	stw	r4,0(r23)
    47dc:	8809883a 	mov	r4,r17
    47e0:	00000000 	call	0 <__alt_mem_sdram>
    47e4:	bc400017 	ldw	r17,0(r23)
    47e8:	883fb71e 	bne	r17,zero,46c8 <__call_exitprocs+0x74>
    47ec:	003fc506 	br	4704 <__call_exitprocs+0xb0>
    47f0:	89000017 	ldw	r4,0(r17)
    47f4:	882f883a 	mov	r23,r17
    47f8:	2023883a 	mov	r17,r4
    47fc:	883fb21e 	bne	r17,zero,46c8 <__call_exitprocs+0x74>
    4800:	003fc006 	br	4704 <__call_exitprocs+0xb0>

00004804 <__mulsi3>:
    4804:	20000a26 	beq	r4,zero,4830 <__mulsi3+0x2c>
    4808:	0007883a 	mov	r3,zero
    480c:	2080004c 	andi	r2,r4,1
    4810:	1005003a 	cmpeq	r2,r2,zero
    4814:	2008d07a 	srli	r4,r4,1
    4818:	1000011e 	bne	r2,zero,4820 <__mulsi3+0x1c>
    481c:	1947883a 	add	r3,r3,r5
    4820:	294b883a 	add	r5,r5,r5
    4824:	203ff91e 	bne	r4,zero,480c <__mulsi3+0x8>
    4828:	1805883a 	mov	r2,r3
    482c:	f800283a 	ret
    4830:	0007883a 	mov	r3,zero
    4834:	1805883a 	mov	r2,r3
    4838:	f800283a 	ret

0000483c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    483c:	defffd04 	addi	sp,sp,-12
    4840:	df000215 	stw	fp,8(sp)
    4844:	df000204 	addi	fp,sp,8
    4848:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    484c:	e0bfff17 	ldw	r2,-4(fp)
    4850:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4854:	e0bffe17 	ldw	r2,-8(fp)
    4858:	1005003a 	cmpeq	r2,r2,zero
    485c:	1000021e 	bne	r2,zero,4868 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    4860:	002af070 	cmpltui	zero,zero,43969
    4864:	00000106 	br	486c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    4868:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    487c:	defffd04 	addi	sp,sp,-12
    4880:	dfc00215 	stw	ra,8(sp)
    4884:	df000115 	stw	fp,4(sp)
    4888:	df000104 	addi	fp,sp,4
    488c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    4890:	e13fff17 	ldw	r4,-4(fp)
    4894:	000483c0 	call	483c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4898:	003fff06 	br	4898 <_exit+0x1c>
    489c:	00004650 	cmplti	zero,zero,281
