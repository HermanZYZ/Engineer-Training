
run.elf:     file format elf32-littlenios2
run.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000928c memsz 0x0000956c flags rwx
    LOAD off    0x0000b000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007130  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000dc  000072e4  000072e4  000082e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001eec  000073c0  000073c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  000092ac  000092ac  0000a2ac  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000b000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000990  00000000  00000000  0000b028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000103f  00000000  00000000  0000b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001bde2  00000000  00000000  0000c9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000057e4  00000000  00000000  000287d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e03a  00000000  00000000  0002dfbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001400  00000000  00000000  0003bff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001866  00000000  00000000  0003d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000043fb  00000000  00000000  0003ec5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0004305c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d8  00000000  00000000  00043070  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00045cd8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00045cdb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00045ce7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00045ce8  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00045ce9  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00045cf4  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00045cff  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00045d0a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000003  00000000  00000000  00045d12  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000e0f1e  00000000  00000000  00045d15  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000072e4 l    d  .rodata	00000000 .rodata
000073c0 l    d  .rwdata	00000000 .rwdata
000092ac l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000073c0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001b58 l     F .text	00000058 std
00001c64 l     F .text	00000008 __fp_lock
00001c6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00002c9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002cfc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00002e00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00002f24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00003078 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000032a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00009294 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003560 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00007d70 l     O .rwdata	000000c8 epcs_flash_controller_0
00007e38 l     O .rwdata	00001060 jtag_uart_0
00008e98 l     O .rwdata	000000c4 New_UltraSound0
00008f5c l     O .rwdata	000000c4 New_UltraSound1
00009020 l     O .rwdata	000000c4 New_UltraSound2
000090e4 l     O .rwdata	000000c4 New_UltraSound3
000091a8 l     O .rwdata	000000c4 uart_0
0000370c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
000037d0 l     F .text	00000288 alt_epcs_flash_query
00003798 l     F .text	00000038 alt_flash_device_register
00003a58 l     F .text	00000108 alt_epcs_flash_memcmp
00003ee0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004330 l     F .text	00000228 altera_avalon_jtag_uart_irq
00004558 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004bd4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00004e94 l     F .text	0000009c altera_avalon_uart_irq
00004f30 l     F .text	000000e0 altera_avalon_uart_rxirq
00005010 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000053fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00005624 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
000057dc l     F .text	00000038 epcs_await_wip_released
00005814 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005f60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00006424 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00006574 l     F .text	000000f8 alt_file_locked
000067f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000070cc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00007280 l     F .text	00000040 alt_sim_halt
00003de0 g     F .text	00000090 alt_epcs_flash_get_info
00002a04 g     F .text	00000070 _isatty_r
000030d8 g     F .text	0000006c alt_main
00000220 g     F .text	000000a0 _puts_r
000092fc g     O .bss	00000100 alt_irq
00002a74 g     F .text	00000078 _lseek_r
0000958c g       *ABS*	00000000 __alt_heap_start
00002640 g     F .text	00000068 __sseek
00001bc0 g     F .text	000000a4 __sinit
00001cc0 g     F .text	0000009c __sfmoreglue
00003164 g     F .text	00000020 __malloc_unlock
000010a8 g     F .text	000000e0 memmove
00001cb0 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
000056e4 g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
00002990 g     F .text	00000074 _fstat_r
000092b8 g     O .bss	00000004 errno
000092c0 g     O .bss	00000004 alt_argv
0001126c g       *ABS*	00000000 _gp
00007bf0 g     O .rwdata	00000180 alt_fd_list
000059e8 g     F .text	00000064 epcs_write_status_register
00006c54 g     F .text	00000094 alt_find_dev
00001008 g     F .text	000000a0 memcpy
00001ca4 g     F .text	0000000c _cleanup_r
000064fc g     F .text	00000078 alt_io_redirect
000072e4 g       *ABS*	00000000 __DTOR_END__
000002c0 g     F .text	00000014 puts
00003f74 g     F .text	0000011c alt_epcs_flash_write_block
00004770 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002e60 g     F .text	000000c4 isatty
000092ac g     O .bss	00000004 __malloc_top_pad
00000348 g     F .text	0000049c __sfvwrite_r
0000177c g     F .text	00000070 _sbrk_r
00002aec g     F .text	00000078 _read_r
0000928c g     O .rwdata	00000004 alt_max_fd
0000286c g     F .text	00000110 _fclose_r
00001b24 g     F .text	00000034 fflush
000092b0 g     O .bss	00000004 __malloc_max_sbrked_mem
00003e70 g     F .text	00000070 alt_epcs_flash_erase_block
00002f84 g     F .text	000000f4 lseek
00009270 g     O .rwdata	00000004 _global_impure_ptr
00005d00 g     F .text	00000058 epcs_exit_4_bytes_mode
00001188 g     F .text	000005f4 _realloc_r
0000958c g       *ABS*	00000000 __bss_end
0000632c g     F .text	000000f8 alt_iic_isr_register
000068f0 g     F .text	0000010c alt_tick
00004dcc g     F .text	000000c8 altera_avalon_uart_init
00001c8c g     F .text	00000018 __fp_lock_all
000062e4 g     F .text	00000048 alt_ic_irq_enabled
00006858 g     F .text	00000098 alt_alarm_stop
000092c8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00007bc8 g     O .rwdata	00000028 alt_dev_null
00009284 g     O .rwdata	00000008 alt_dev_list
0000343c g     F .text	00000124 write
00002d28 g     F .text	000000d8 fstat
00005bbc g     F .text	0000006c epcs_read_electronic_signature
0000958c g       *ABS*	00000000 end
0000545c g     F .text	000001c8 altera_avalon_uart_write
00004270 g     F .text	000000c0 altera_avalon_jtag_uart_init
000072e0 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00004c44 g     F .text	00000090 alt_avalon_timer_sc_init
00004d2c g     F .text	00000058 altera_avalon_uart_write_fd
00004d84 g     F .text	00000048 altera_avalon_uart_close_fd
00004994 g     F .text	00000240 altera_avalon_jtag_uart_write
00001bb0 g     F .text	00000004 __sfp_lock_acquire
00000f24 g     F .text	000000e4 memchr
00001f78 g     F .text	00000314 _free_r
000070d0 g     F .text	000001b0 __call_exitprocs
00009278 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	00000038 _start
000092cc g     O .bss	00000004 _alt_tick_rate
00006a1c g     F .text	00000238 alt_avalon_spi_command
000092d0 g     O .bss	00000004 _alt_nticks
00003184 g     F .text	00000124 read
000035f4 g     F .text	00000118 alt_sys_init
00006f98 g     F .text	00000134 __register_exitproc
00004608 g     F .text	00000074 altera_avalon_jtag_uart_close
00002b64 g     F .text	00000038 __mulsi3
000092d4 g     O .bss	00000028 __malloc_current_mallinfo
00005684 g     F .text	00000060 epcs_read_status_register
00004128 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00006e08 g     F .text	000000d0 alt_get_fd
000027fc g     F .text	00000070 _close_r
00005c28 g     F .text	00000080 epcs_read_device_id
00006f24 g     F .text	00000074 memcmp
000041d8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000958c g       *ABS*	00000000 __alt_stack_base
00004220 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
000017ec g     F .text	0000013c __swsetup_r
00001d5c g     F .text	000000f0 __sfp
000077c0 g     O .rwdata	00000408 __malloc_av_
00001bbc g     F .text	00000004 __sinit_lock_release
00002724 g     F .text	00000060 __sread
00006ce8 g     F .text	00000120 alt_find_file
00005eac g     F .text	000000b4 alt_dev_llist_insert
00003144 g     F .text	00000020 __malloc_lock
00003380 g     F .text	000000bc sbrk
00001928 g     F .text	000001fc _fflush_r
00009298 g     O .rwdata	00000008 alt_flash_dev_list
000092ac g       *ABS*	00000000 __bss_start
000025a0 g     F .text	00000098 memset
000001ec g     F .text	00000034 main
000092c4 g     O .bss	00000004 alt_envp
000092b4 g     O .bss	00000004 __malloc_max_total_mem
00004180 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00002638 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000297c g     F .text	00000014 fclose
000093fc g     O .bss	00000190 _atexit0
000007e4 g     F .text	00000740 _malloc_r
00009290 g     O .rwdata	00000004 alt_errno
00002354 g     F .text	000000b8 _fwalk
00001e4c g     F .text	0000012c _malloc_trim_r
000072e4 g       *ABS*	00000000 __CTOR_END__
00003b60 g     F .text	00000280 alt_epcs_flash_write
000072e4 g       *ABS*	00000000 __DTOR_LIST__
000035c0 g     F .text	00000034 alt_irq_init
00003308 g     F .text	00000078 alt_release_fd
00006ed8 g     F .text	00000014 atexit
00002784 g     F .text	00000078 _write_r
0000926c g     O .rwdata	00000004 _impure_ptr
000092bc g     O .bss	00000004 alt_argc
00006024 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00001c74 g     F .text	00000018 __fp_unlock_all
0000927c g     O .rwdata	00000008 alt_fs_list
0000584c g     F .text	0000014c epcs_read_buffer
00003744 g     F .text	00000054 alt_epcs_flash_init
00006158 g     F .text	00000050 alt_ic_isr_register
000092ac g       *ABS*	00000000 _edata
00004cd4 g     F .text	00000058 altera_avalon_uart_read_fd
0000958c g       *ABS*	00000000 _end
00006088 g     F .text	0000007c alt_flash_open_dev
0000467c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00006244 g     F .text	000000a0 alt_ic_irq_disable
00005ca8 g     F .text	00000058 epcs_enter_4_bytes_mode
000026a8 g     F .text	0000007c __swrite
00009274 g     O .rwdata	00000004 __malloc_trim_threshold
000069fc g     F .text	00000020 altera_nios2_qsys_irq_init
00006eec g     F .text	00000038 exit
0000228c g     F .text	000000c8 _fwalk_reent
00006104 g     F .text	00000054 alt_flash_close_dev
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001bb4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000516c g     F .text	00000060 altera_avalon_uart_close
000072c0 g     F .text	00000020 _exit
00005d58 g     F .text	00000154 alt_alarm_start
0000240c g     F .text	00000194 __smakebuf_r
000002d4 g     F .text	00000074 strlen
00005998 g     F .text	00000050 epcs_write_enable
0000666c g     F .text	0000018c open
000092a0 g     O .rwdata	00000004 alt_priority_mask
000061a8 g     F .text	0000009c alt_ic_irq_enable
000051cc g     F .text	00000230 altera_avalon_uart_read
00004090 g     F .text	00000098 alt_epcs_flash_read
000092a4 g     O .rwdata	00000008 alt_alarm_list
00005fc0 g     F .text	00000064 _do_ctors
00002b9c g     F .text	00000100 close
00000000  w      *UND*	00000000 free
00001bb8 g     F .text	00000004 __sinit_lock_acquire
00005a4c g     F .text	00000170 epcs_write_buffer



Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18e4bf04 	addi	r3,r3,-27908
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18e4bf04 	addi	r3,r3,-27908
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6849b14 	ori	gp,gp,4716
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10a4ab14 	ori	r2,r2,37548

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18e56314 	ori	r3,r3,38284

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e4:	00030d80 	call	30d8 <alt_main>

000001e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1e8:	003fff06 	br	1e8 <alt_after_alt_main>

000001ec <main>:
 */

#include <stdio.h>

int main()
{
     1ec:	defffe04 	addi	sp,sp,-8
     1f0:	dfc00115 	stw	ra,4(sp)
     1f4:	df000015 	stw	fp,0(sp)
     1f8:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
     1fc:	01000034 	movhi	r4,0
     200:	211cb904 	addi	r4,r4,29412
     204:	00002c00 	call	2c0 <puts>

  return 0;
     208:	0005883a 	mov	r2,zero
}
     20c:	e037883a 	mov	sp,fp
     210:	dfc00117 	ldw	ra,4(sp)
     214:	df000017 	ldw	fp,0(sp)
     218:	dec00204 	addi	sp,sp,8
     21c:	f800283a 	ret

00000220 <_puts_r>:
     220:	defff604 	addi	sp,sp,-40
     224:	dc400715 	stw	r17,28(sp)
     228:	2023883a 	mov	r17,r4
     22c:	2809883a 	mov	r4,r5
     230:	dfc00915 	stw	ra,36(sp)
     234:	dcc00815 	stw	r19,32(sp)
     238:	2827883a 	mov	r19,r5
     23c:	00002d40 	call	2d4 <strlen>
     240:	89400217 	ldw	r5,8(r17)
     244:	00c00034 	movhi	r3,0
     248:	18dcbe04 	addi	r3,r3,29432
     24c:	01c00044 	movi	r7,1
     250:	12000044 	addi	r8,r2,1
     254:	d8c00515 	stw	r3,20(sp)
     258:	d9c00615 	stw	r7,24(sp)
     25c:	d8c00304 	addi	r3,sp,12
     260:	01c00084 	movi	r7,2
     264:	8809883a 	mov	r4,r17
     268:	d80d883a 	mov	r6,sp
     26c:	d8c00015 	stw	r3,0(sp)
     270:	dcc00315 	stw	r19,12(sp)
     274:	da000215 	stw	r8,8(sp)
     278:	d9c00115 	stw	r7,4(sp)
     27c:	d8800415 	stw	r2,16(sp)
     280:	00003480 	call	348 <__sfvwrite_r>
     284:	00ffffc4 	movi	r3,-1
     288:	10000626 	beq	r2,zero,2a4 <_puts_r+0x84>
     28c:	1805883a 	mov	r2,r3
     290:	dfc00917 	ldw	ra,36(sp)
     294:	dcc00817 	ldw	r19,32(sp)
     298:	dc400717 	ldw	r17,28(sp)
     29c:	dec00a04 	addi	sp,sp,40
     2a0:	f800283a 	ret
     2a4:	00c00284 	movi	r3,10
     2a8:	1805883a 	mov	r2,r3
     2ac:	dfc00917 	ldw	ra,36(sp)
     2b0:	dcc00817 	ldw	r19,32(sp)
     2b4:	dc400717 	ldw	r17,28(sp)
     2b8:	dec00a04 	addi	sp,sp,40
     2bc:	f800283a 	ret

000002c0 <puts>:
     2c0:	00800074 	movhi	r2,1
     2c4:	10a49b04 	addi	r2,r2,-28052
     2c8:	200b883a 	mov	r5,r4
     2cc:	11000017 	ldw	r4,0(r2)
     2d0:	00002201 	jmpi	220 <_puts_r>

000002d4 <strlen>:
     2d4:	208000cc 	andi	r2,r4,3
     2d8:	2011883a 	mov	r8,r4
     2dc:	1000161e 	bne	r2,zero,338 <strlen+0x64>
     2e0:	20c00017 	ldw	r3,0(r4)
     2e4:	017fbff4 	movhi	r5,65279
     2e8:	297fbfc4 	addi	r5,r5,-257
     2ec:	01e02074 	movhi	r7,32897
     2f0:	39e02004 	addi	r7,r7,-32640
     2f4:	1945883a 	add	r2,r3,r5
     2f8:	11c4703a 	and	r2,r2,r7
     2fc:	00c6303a 	nor	r3,zero,r3
     300:	1886703a 	and	r3,r3,r2
     304:	18000c1e 	bne	r3,zero,338 <strlen+0x64>
     308:	280d883a 	mov	r6,r5
     30c:	380b883a 	mov	r5,r7
     310:	21000104 	addi	r4,r4,4
     314:	20800017 	ldw	r2,0(r4)
     318:	1187883a 	add	r3,r2,r6
     31c:	1946703a 	and	r3,r3,r5
     320:	0084303a 	nor	r2,zero,r2
     324:	10c4703a 	and	r2,r2,r3
     328:	103ff926 	beq	r2,zero,310 <strlen+0x3c>
     32c:	20800007 	ldb	r2,0(r4)
     330:	10000326 	beq	r2,zero,340 <strlen+0x6c>
     334:	21000044 	addi	r4,r4,1
     338:	20800007 	ldb	r2,0(r4)
     33c:	103ffd1e 	bne	r2,zero,334 <strlen+0x60>
     340:	2205c83a 	sub	r2,r4,r8
     344:	f800283a 	ret

00000348 <__sfvwrite_r>:
     348:	30800217 	ldw	r2,8(r6)
     34c:	defff504 	addi	sp,sp,-44
     350:	df000915 	stw	fp,36(sp)
     354:	dd800715 	stw	r22,28(sp)
     358:	dc800315 	stw	r18,12(sp)
     35c:	dfc00a15 	stw	ra,40(sp)
     360:	ddc00815 	stw	r23,32(sp)
     364:	dd400615 	stw	r21,24(sp)
     368:	dd000515 	stw	r20,20(sp)
     36c:	dcc00415 	stw	r19,16(sp)
     370:	dc400215 	stw	r17,8(sp)
     374:	dc000115 	stw	r16,4(sp)
     378:	302d883a 	mov	r22,r6
     37c:	2039883a 	mov	fp,r4
     380:	2825883a 	mov	r18,r5
     384:	10001c26 	beq	r2,zero,3f8 <__sfvwrite_r+0xb0>
     388:	29c0030b 	ldhu	r7,12(r5)
     38c:	3880020c 	andi	r2,r7,8
     390:	10002726 	beq	r2,zero,430 <__sfvwrite_r+0xe8>
     394:	28800417 	ldw	r2,16(r5)
     398:	10002526 	beq	r2,zero,430 <__sfvwrite_r+0xe8>
     39c:	3880008c 	andi	r2,r7,2
     3a0:	b5400017 	ldw	r21,0(r22)
     3a4:	10002826 	beq	r2,zero,448 <__sfvwrite_r+0x100>
     3a8:	0021883a 	mov	r16,zero
     3ac:	0023883a 	mov	r17,zero
     3b0:	880d883a 	mov	r6,r17
     3b4:	e009883a 	mov	r4,fp
     3b8:	00810004 	movi	r2,1024
     3bc:	80006e26 	beq	r16,zero,578 <__sfvwrite_r+0x230>
     3c0:	800f883a 	mov	r7,r16
     3c4:	91400717 	ldw	r5,28(r18)
     3c8:	1400012e 	bgeu	r2,r16,3d0 <__sfvwrite_r+0x88>
     3cc:	100f883a 	mov	r7,r2
     3d0:	90c00917 	ldw	r3,36(r18)
     3d4:	183ee83a 	callr	r3
     3d8:	1007883a 	mov	r3,r2
     3dc:	80a1c83a 	sub	r16,r16,r2
     3e0:	88a3883a 	add	r17,r17,r2
     3e4:	00806d0e 	bge	zero,r2,59c <__sfvwrite_r+0x254>
     3e8:	b0800217 	ldw	r2,8(r22)
     3ec:	10c5c83a 	sub	r2,r2,r3
     3f0:	b0800215 	stw	r2,8(r22)
     3f4:	103fee1e 	bne	r2,zero,3b0 <__sfvwrite_r+0x68>
     3f8:	0009883a 	mov	r4,zero
     3fc:	2005883a 	mov	r2,r4
     400:	dfc00a17 	ldw	ra,40(sp)
     404:	df000917 	ldw	fp,36(sp)
     408:	ddc00817 	ldw	r23,32(sp)
     40c:	dd800717 	ldw	r22,28(sp)
     410:	dd400617 	ldw	r21,24(sp)
     414:	dd000517 	ldw	r20,20(sp)
     418:	dcc00417 	ldw	r19,16(sp)
     41c:	dc800317 	ldw	r18,12(sp)
     420:	dc400217 	ldw	r17,8(sp)
     424:	dc000117 	ldw	r16,4(sp)
     428:	dec00b04 	addi	sp,sp,44
     42c:	f800283a 	ret
     430:	00017ec0 	call	17ec <__swsetup_r>
     434:	1000e41e 	bne	r2,zero,7c8 <__sfvwrite_r+0x480>
     438:	91c0030b 	ldhu	r7,12(r18)
     43c:	b5400017 	ldw	r21,0(r22)
     440:	3880008c 	andi	r2,r7,2
     444:	103fd81e 	bne	r2,zero,3a8 <__sfvwrite_r+0x60>
     448:	3880004c 	andi	r2,r7,1
     44c:	1005003a 	cmpeq	r2,r2,zero
     450:	10005726 	beq	r2,zero,5b0 <__sfvwrite_r+0x268>
     454:	0029883a 	mov	r20,zero
     458:	002f883a 	mov	r23,zero
     45c:	a0004226 	beq	r20,zero,568 <__sfvwrite_r+0x220>
     460:	3880800c 	andi	r2,r7,512
     464:	94000217 	ldw	r16,8(r18)
     468:	10008b26 	beq	r2,zero,698 <__sfvwrite_r+0x350>
     46c:	800d883a 	mov	r6,r16
     470:	a400a536 	bltu	r20,r16,708 <__sfvwrite_r+0x3c0>
     474:	3881200c 	andi	r2,r7,1152
     478:	10002726 	beq	r2,zero,518 <__sfvwrite_r+0x1d0>
     47c:	90800517 	ldw	r2,20(r18)
     480:	92000417 	ldw	r8,16(r18)
     484:	91400017 	ldw	r5,0(r18)
     488:	1087883a 	add	r3,r2,r2
     48c:	1887883a 	add	r3,r3,r2
     490:	1808d7fa 	srli	r4,r3,31
     494:	2a21c83a 	sub	r16,r5,r8
     498:	80800044 	addi	r2,r16,1
     49c:	20c9883a 	add	r4,r4,r3
     4a0:	2027d07a 	srai	r19,r4,1
     4a4:	a085883a 	add	r2,r20,r2
     4a8:	980d883a 	mov	r6,r19
     4ac:	9880022e 	bgeu	r19,r2,4b8 <__sfvwrite_r+0x170>
     4b0:	1027883a 	mov	r19,r2
     4b4:	100d883a 	mov	r6,r2
     4b8:	3881000c 	andi	r2,r7,1024
     4bc:	1000b826 	beq	r2,zero,7a0 <__sfvwrite_r+0x458>
     4c0:	300b883a 	mov	r5,r6
     4c4:	e009883a 	mov	r4,fp
     4c8:	00007e40 	call	7e4 <_malloc_r>
     4cc:	10003126 	beq	r2,zero,594 <__sfvwrite_r+0x24c>
     4d0:	91400417 	ldw	r5,16(r18)
     4d4:	1009883a 	mov	r4,r2
     4d8:	800d883a 	mov	r6,r16
     4dc:	1023883a 	mov	r17,r2
     4e0:	00010080 	call	1008 <memcpy>
     4e4:	90c0030b 	ldhu	r3,12(r18)
     4e8:	00beffc4 	movi	r2,-1025
     4ec:	1886703a 	and	r3,r3,r2
     4f0:	18c02014 	ori	r3,r3,128
     4f4:	90c0030d 	sth	r3,12(r18)
     4f8:	9c07c83a 	sub	r3,r19,r16
     4fc:	8c05883a 	add	r2,r17,r16
     500:	a00d883a 	mov	r6,r20
     504:	a021883a 	mov	r16,r20
     508:	90800015 	stw	r2,0(r18)
     50c:	90c00215 	stw	r3,8(r18)
     510:	94400415 	stw	r17,16(r18)
     514:	94c00515 	stw	r19,20(r18)
     518:	91000017 	ldw	r4,0(r18)
     51c:	b80b883a 	mov	r5,r23
     520:	a023883a 	mov	r17,r20
     524:	00010a80 	call	10a8 <memmove>
     528:	90c00217 	ldw	r3,8(r18)
     52c:	90800017 	ldw	r2,0(r18)
     530:	a027883a 	mov	r19,r20
     534:	1c07c83a 	sub	r3,r3,r16
     538:	1405883a 	add	r2,r2,r16
     53c:	90c00215 	stw	r3,8(r18)
     540:	a021883a 	mov	r16,r20
     544:	90800015 	stw	r2,0(r18)
     548:	b0800217 	ldw	r2,8(r22)
     54c:	1405c83a 	sub	r2,r2,r16
     550:	b0800215 	stw	r2,8(r22)
     554:	103fa826 	beq	r2,zero,3f8 <__sfvwrite_r+0xb0>
     558:	a469c83a 	sub	r20,r20,r17
     55c:	91c0030b 	ldhu	r7,12(r18)
     560:	bcef883a 	add	r23,r23,r19
     564:	a03fbe1e 	bne	r20,zero,460 <__sfvwrite_r+0x118>
     568:	adc00017 	ldw	r23,0(r21)
     56c:	ad000117 	ldw	r20,4(r21)
     570:	ad400204 	addi	r21,r21,8
     574:	003fb906 	br	45c <__sfvwrite_r+0x114>
     578:	ac400017 	ldw	r17,0(r21)
     57c:	ac000117 	ldw	r16,4(r21)
     580:	ad400204 	addi	r21,r21,8
     584:	003f8a06 	br	3b0 <__sfvwrite_r+0x68>
     588:	91400417 	ldw	r5,16(r18)
     58c:	e009883a 	mov	r4,fp
     590:	0001f780 	call	1f78 <_free_r>
     594:	00800304 	movi	r2,12
     598:	e0800015 	stw	r2,0(fp)
     59c:	9080030b 	ldhu	r2,12(r18)
     5a0:	013fffc4 	movi	r4,-1
     5a4:	10801014 	ori	r2,r2,64
     5a8:	9080030d 	sth	r2,12(r18)
     5ac:	003f9306 	br	3fc <__sfvwrite_r+0xb4>
     5b0:	0027883a 	mov	r19,zero
     5b4:	002f883a 	mov	r23,zero
     5b8:	d8000015 	stw	zero,0(sp)
     5bc:	0029883a 	mov	r20,zero
     5c0:	98001e26 	beq	r19,zero,63c <__sfvwrite_r+0x2f4>
     5c4:	d8c00017 	ldw	r3,0(sp)
     5c8:	1804c03a 	cmpne	r2,r3,zero
     5cc:	10005e26 	beq	r2,zero,748 <__sfvwrite_r+0x400>
     5d0:	9821883a 	mov	r16,r19
     5d4:	a4c0012e 	bgeu	r20,r19,5dc <__sfvwrite_r+0x294>
     5d8:	a021883a 	mov	r16,r20
     5dc:	91000017 	ldw	r4,0(r18)
     5e0:	90800417 	ldw	r2,16(r18)
     5e4:	91800217 	ldw	r6,8(r18)
     5e8:	91c00517 	ldw	r7,20(r18)
     5ec:	1100022e 	bgeu	r2,r4,5f8 <__sfvwrite_r+0x2b0>
     5f0:	31e3883a 	add	r17,r6,r7
     5f4:	8c001616 	blt	r17,r16,650 <__sfvwrite_r+0x308>
     5f8:	81c03816 	blt	r16,r7,6dc <__sfvwrite_r+0x394>
     5fc:	90c00917 	ldw	r3,36(r18)
     600:	91400717 	ldw	r5,28(r18)
     604:	e009883a 	mov	r4,fp
     608:	b80d883a 	mov	r6,r23
     60c:	183ee83a 	callr	r3
     610:	1023883a 	mov	r17,r2
     614:	00bfe10e 	bge	zero,r2,59c <__sfvwrite_r+0x254>
     618:	a469c83a 	sub	r20,r20,r17
     61c:	a0001826 	beq	r20,zero,680 <__sfvwrite_r+0x338>
     620:	b0800217 	ldw	r2,8(r22)
     624:	1445c83a 	sub	r2,r2,r17
     628:	b0800215 	stw	r2,8(r22)
     62c:	103f7226 	beq	r2,zero,3f8 <__sfvwrite_r+0xb0>
     630:	9c67c83a 	sub	r19,r19,r17
     634:	bc6f883a 	add	r23,r23,r17
     638:	983fe21e 	bne	r19,zero,5c4 <__sfvwrite_r+0x27c>
     63c:	adc00017 	ldw	r23,0(r21)
     640:	acc00117 	ldw	r19,4(r21)
     644:	ad400204 	addi	r21,r21,8
     648:	d8000015 	stw	zero,0(sp)
     64c:	003fdc06 	br	5c0 <__sfvwrite_r+0x278>
     650:	b80b883a 	mov	r5,r23
     654:	880d883a 	mov	r6,r17
     658:	00010a80 	call	10a8 <memmove>
     65c:	90c00017 	ldw	r3,0(r18)
     660:	e009883a 	mov	r4,fp
     664:	900b883a 	mov	r5,r18
     668:	1c47883a 	add	r3,r3,r17
     66c:	90c00015 	stw	r3,0(r18)
     670:	00019280 	call	1928 <_fflush_r>
     674:	103fc91e 	bne	r2,zero,59c <__sfvwrite_r+0x254>
     678:	a469c83a 	sub	r20,r20,r17
     67c:	a03fe81e 	bne	r20,zero,620 <__sfvwrite_r+0x2d8>
     680:	e009883a 	mov	r4,fp
     684:	900b883a 	mov	r5,r18
     688:	00019280 	call	1928 <_fflush_r>
     68c:	103fc31e 	bne	r2,zero,59c <__sfvwrite_r+0x254>
     690:	d8000015 	stw	zero,0(sp)
     694:	003fe206 	br	620 <__sfvwrite_r+0x2d8>
     698:	91000017 	ldw	r4,0(r18)
     69c:	90800417 	ldw	r2,16(r18)
     6a0:	1100022e 	bgeu	r2,r4,6ac <__sfvwrite_r+0x364>
     6a4:	8023883a 	mov	r17,r16
     6a8:	85003136 	bltu	r16,r20,770 <__sfvwrite_r+0x428>
     6ac:	91c00517 	ldw	r7,20(r18)
     6b0:	a1c01836 	bltu	r20,r7,714 <__sfvwrite_r+0x3cc>
     6b4:	90c00917 	ldw	r3,36(r18)
     6b8:	91400717 	ldw	r5,28(r18)
     6bc:	e009883a 	mov	r4,fp
     6c0:	b80d883a 	mov	r6,r23
     6c4:	183ee83a 	callr	r3
     6c8:	1021883a 	mov	r16,r2
     6cc:	00bfb30e 	bge	zero,r2,59c <__sfvwrite_r+0x254>
     6d0:	1023883a 	mov	r17,r2
     6d4:	1027883a 	mov	r19,r2
     6d8:	003f9b06 	br	548 <__sfvwrite_r+0x200>
     6dc:	b80b883a 	mov	r5,r23
     6e0:	800d883a 	mov	r6,r16
     6e4:	00010a80 	call	10a8 <memmove>
     6e8:	90c00217 	ldw	r3,8(r18)
     6ec:	90800017 	ldw	r2,0(r18)
     6f0:	8023883a 	mov	r17,r16
     6f4:	1c07c83a 	sub	r3,r3,r16
     6f8:	1405883a 	add	r2,r2,r16
     6fc:	90c00215 	stw	r3,8(r18)
     700:	90800015 	stw	r2,0(r18)
     704:	003fc406 	br	618 <__sfvwrite_r+0x2d0>
     708:	a00d883a 	mov	r6,r20
     70c:	a021883a 	mov	r16,r20
     710:	003f8106 	br	518 <__sfvwrite_r+0x1d0>
     714:	b80b883a 	mov	r5,r23
     718:	a00d883a 	mov	r6,r20
     71c:	00010a80 	call	10a8 <memmove>
     720:	90c00217 	ldw	r3,8(r18)
     724:	90800017 	ldw	r2,0(r18)
     728:	a021883a 	mov	r16,r20
     72c:	1d07c83a 	sub	r3,r3,r20
     730:	1505883a 	add	r2,r2,r20
     734:	a023883a 	mov	r17,r20
     738:	a027883a 	mov	r19,r20
     73c:	90c00215 	stw	r3,8(r18)
     740:	90800015 	stw	r2,0(r18)
     744:	003f8006 	br	548 <__sfvwrite_r+0x200>
     748:	b809883a 	mov	r4,r23
     74c:	01400284 	movi	r5,10
     750:	980d883a 	mov	r6,r19
     754:	0000f240 	call	f24 <memchr>
     758:	10001726 	beq	r2,zero,7b8 <__sfvwrite_r+0x470>
     75c:	15c5c83a 	sub	r2,r2,r23
     760:	15000044 	addi	r20,r2,1
     764:	00800044 	movi	r2,1
     768:	d8800015 	stw	r2,0(sp)
     76c:	003f9806 	br	5d0 <__sfvwrite_r+0x288>
     770:	b80b883a 	mov	r5,r23
     774:	800d883a 	mov	r6,r16
     778:	00010a80 	call	10a8 <memmove>
     77c:	90c00017 	ldw	r3,0(r18)
     780:	e009883a 	mov	r4,fp
     784:	900b883a 	mov	r5,r18
     788:	1c07883a 	add	r3,r3,r16
     78c:	90c00015 	stw	r3,0(r18)
     790:	8027883a 	mov	r19,r16
     794:	00019280 	call	1928 <_fflush_r>
     798:	103f6b26 	beq	r2,zero,548 <__sfvwrite_r+0x200>
     79c:	003f7f06 	br	59c <__sfvwrite_r+0x254>
     7a0:	400b883a 	mov	r5,r8
     7a4:	e009883a 	mov	r4,fp
     7a8:	00011880 	call	1188 <_realloc_r>
     7ac:	103f7626 	beq	r2,zero,588 <__sfvwrite_r+0x240>
     7b0:	1023883a 	mov	r17,r2
     7b4:	003f5006 	br	4f8 <__sfvwrite_r+0x1b0>
     7b8:	00c00044 	movi	r3,1
     7bc:	9d000044 	addi	r20,r19,1
     7c0:	d8c00015 	stw	r3,0(sp)
     7c4:	003f8206 	br	5d0 <__sfvwrite_r+0x288>
     7c8:	9080030b 	ldhu	r2,12(r18)
     7cc:	00c00244 	movi	r3,9
     7d0:	013fffc4 	movi	r4,-1
     7d4:	10801014 	ori	r2,r2,64
     7d8:	9080030d 	sth	r2,12(r18)
     7dc:	e0c00015 	stw	r3,0(fp)
     7e0:	003f0606 	br	3fc <__sfvwrite_r+0xb4>

000007e4 <_malloc_r>:
     7e4:	defff604 	addi	sp,sp,-40
     7e8:	28c002c4 	addi	r3,r5,11
     7ec:	00800584 	movi	r2,22
     7f0:	dc800215 	stw	r18,8(sp)
     7f4:	dfc00915 	stw	ra,36(sp)
     7f8:	df000815 	stw	fp,32(sp)
     7fc:	ddc00715 	stw	r23,28(sp)
     800:	dd800615 	stw	r22,24(sp)
     804:	dd400515 	stw	r21,20(sp)
     808:	dd000415 	stw	r20,16(sp)
     80c:	dcc00315 	stw	r19,12(sp)
     810:	dc400115 	stw	r17,4(sp)
     814:	dc000015 	stw	r16,0(sp)
     818:	2025883a 	mov	r18,r4
     81c:	10c01236 	bltu	r2,r3,868 <_malloc_r+0x84>
     820:	04400404 	movi	r17,16
     824:	8940142e 	bgeu	r17,r5,878 <_malloc_r+0x94>
     828:	00800304 	movi	r2,12
     82c:	0007883a 	mov	r3,zero
     830:	90800015 	stw	r2,0(r18)
     834:	1805883a 	mov	r2,r3
     838:	dfc00917 	ldw	ra,36(sp)
     83c:	df000817 	ldw	fp,32(sp)
     840:	ddc00717 	ldw	r23,28(sp)
     844:	dd800617 	ldw	r22,24(sp)
     848:	dd400517 	ldw	r21,20(sp)
     84c:	dd000417 	ldw	r20,16(sp)
     850:	dcc00317 	ldw	r19,12(sp)
     854:	dc800217 	ldw	r18,8(sp)
     858:	dc400117 	ldw	r17,4(sp)
     85c:	dc000017 	ldw	r16,0(sp)
     860:	dec00a04 	addi	sp,sp,40
     864:	f800283a 	ret
     868:	00bffe04 	movi	r2,-8
     86c:	18a2703a 	and	r17,r3,r2
     870:	883fed16 	blt	r17,zero,828 <_malloc_r+0x44>
     874:	897fec36 	bltu	r17,r5,828 <_malloc_r+0x44>
     878:	9009883a 	mov	r4,r18
     87c:	00031440 	call	3144 <__malloc_lock>
     880:	00807dc4 	movi	r2,503
     884:	14402b2e 	bgeu	r2,r17,934 <_malloc_r+0x150>
     888:	8806d27a 	srli	r3,r17,9
     88c:	18003f1e 	bne	r3,zero,98c <_malloc_r+0x1a8>
     890:	880cd0fa 	srli	r6,r17,3
     894:	300490fa 	slli	r2,r6,3
     898:	02c00034 	movhi	r11,0
     89c:	5addf004 	addi	r11,r11,30656
     8a0:	12cb883a 	add	r5,r2,r11
     8a4:	2c000317 	ldw	r16,12(r5)
     8a8:	580f883a 	mov	r7,r11
     8ac:	2c00041e 	bne	r5,r16,8c0 <_malloc_r+0xdc>
     8b0:	00000a06 	br	8dc <_malloc_r+0xf8>
     8b4:	1800860e 	bge	r3,zero,ad0 <_malloc_r+0x2ec>
     8b8:	84000317 	ldw	r16,12(r16)
     8bc:	2c000726 	beq	r5,r16,8dc <_malloc_r+0xf8>
     8c0:	80800117 	ldw	r2,4(r16)
     8c4:	00ffff04 	movi	r3,-4
     8c8:	10c8703a 	and	r4,r2,r3
     8cc:	2447c83a 	sub	r3,r4,r17
     8d0:	008003c4 	movi	r2,15
     8d4:	10fff70e 	bge	r2,r3,8b4 <_malloc_r+0xd0>
     8d8:	31bfffc4 	addi	r6,r6,-1
     8dc:	32400044 	addi	r9,r6,1
     8e0:	02800034 	movhi	r10,0
     8e4:	529df204 	addi	r10,r10,30664
     8e8:	54000217 	ldw	r16,8(r10)
     8ec:	8280a026 	beq	r16,r10,b70 <_malloc_r+0x38c>
     8f0:	80800117 	ldw	r2,4(r16)
     8f4:	00ffff04 	movi	r3,-4
     8f8:	10ca703a 	and	r5,r2,r3
     8fc:	2c4dc83a 	sub	r6,r5,r17
     900:	008003c4 	movi	r2,15
     904:	11808316 	blt	r2,r6,b14 <_malloc_r+0x330>
     908:	52800315 	stw	r10,12(r10)
     90c:	52800215 	stw	r10,8(r10)
     910:	30002916 	blt	r6,zero,9b8 <_malloc_r+0x1d4>
     914:	8147883a 	add	r3,r16,r5
     918:	18800117 	ldw	r2,4(r3)
     91c:	9009883a 	mov	r4,r18
     920:	10800054 	ori	r2,r2,1
     924:	18800115 	stw	r2,4(r3)
     928:	00031640 	call	3164 <__malloc_unlock>
     92c:	80c00204 	addi	r3,r16,8
     930:	003fc006 	br	834 <_malloc_r+0x50>
     934:	02c00034 	movhi	r11,0
     938:	5addf004 	addi	r11,r11,30656
     93c:	8ac5883a 	add	r2,r17,r11
     940:	14000317 	ldw	r16,12(r2)
     944:	580f883a 	mov	r7,r11
     948:	8806d0fa 	srli	r3,r17,3
     94c:	14006c26 	beq	r2,r16,b00 <_malloc_r+0x31c>
     950:	80c00117 	ldw	r3,4(r16)
     954:	00bfff04 	movi	r2,-4
     958:	81800317 	ldw	r6,12(r16)
     95c:	1886703a 	and	r3,r3,r2
     960:	80c7883a 	add	r3,r16,r3
     964:	18800117 	ldw	r2,4(r3)
     968:	81400217 	ldw	r5,8(r16)
     96c:	9009883a 	mov	r4,r18
     970:	10800054 	ori	r2,r2,1
     974:	18800115 	stw	r2,4(r3)
     978:	31400215 	stw	r5,8(r6)
     97c:	29800315 	stw	r6,12(r5)
     980:	00031640 	call	3164 <__malloc_unlock>
     984:	80c00204 	addi	r3,r16,8
     988:	003faa06 	br	834 <_malloc_r+0x50>
     98c:	00800104 	movi	r2,4
     990:	10c0052e 	bgeu	r2,r3,9a8 <_malloc_r+0x1c4>
     994:	00800504 	movi	r2,20
     998:	10c07836 	bltu	r2,r3,b7c <_malloc_r+0x398>
     99c:	198016c4 	addi	r6,r3,91
     9a0:	300490fa 	slli	r2,r6,3
     9a4:	003fbc06 	br	898 <_malloc_r+0xb4>
     9a8:	8804d1ba 	srli	r2,r17,6
     9ac:	11800e04 	addi	r6,r2,56
     9b0:	300490fa 	slli	r2,r6,3
     9b4:	003fb806 	br	898 <_malloc_r+0xb4>
     9b8:	00807fc4 	movi	r2,511
     9bc:	1140bb36 	bltu	r2,r5,cac <_malloc_r+0x4c8>
     9c0:	2806d0fa 	srli	r3,r5,3
     9c4:	573ffe04 	addi	fp,r10,-8
     9c8:	00800044 	movi	r2,1
     9cc:	180890fa 	slli	r4,r3,3
     9d0:	1807d0ba 	srai	r3,r3,2
     9d4:	e1c00117 	ldw	r7,4(fp)
     9d8:	5909883a 	add	r4,r11,r4
     9dc:	21400217 	ldw	r5,8(r4)
     9e0:	10c4983a 	sll	r2,r2,r3
     9e4:	81000315 	stw	r4,12(r16)
     9e8:	81400215 	stw	r5,8(r16)
     9ec:	388eb03a 	or	r7,r7,r2
     9f0:	2c000315 	stw	r16,12(r5)
     9f4:	24000215 	stw	r16,8(r4)
     9f8:	e1c00115 	stw	r7,4(fp)
     9fc:	4807883a 	mov	r3,r9
     a00:	4800cd16 	blt	r9,zero,d38 <_malloc_r+0x554>
     a04:	1807d0ba 	srai	r3,r3,2
     a08:	00800044 	movi	r2,1
     a0c:	10c8983a 	sll	r4,r2,r3
     a10:	39004436 	bltu	r7,r4,b24 <_malloc_r+0x340>
     a14:	21c4703a 	and	r2,r4,r7
     a18:	10000a1e 	bne	r2,zero,a44 <_malloc_r+0x260>
     a1c:	2109883a 	add	r4,r4,r4
     a20:	00bfff04 	movi	r2,-4
     a24:	4884703a 	and	r2,r9,r2
     a28:	3906703a 	and	r3,r7,r4
     a2c:	12400104 	addi	r9,r2,4
     a30:	1800041e 	bne	r3,zero,a44 <_malloc_r+0x260>
     a34:	2109883a 	add	r4,r4,r4
     a38:	3904703a 	and	r2,r7,r4
     a3c:	4a400104 	addi	r9,r9,4
     a40:	103ffc26 	beq	r2,zero,a34 <_malloc_r+0x250>
     a44:	480490fa 	slli	r2,r9,3
     a48:	4819883a 	mov	r12,r9
     a4c:	023fff04 	movi	r8,-4
     a50:	589b883a 	add	r13,r11,r2
     a54:	6807883a 	mov	r3,r13
     a58:	014003c4 	movi	r5,15
     a5c:	1c000317 	ldw	r16,12(r3)
     a60:	1c00041e 	bne	r3,r16,a74 <_malloc_r+0x290>
     a64:	0000a706 	br	d04 <_malloc_r+0x520>
     a68:	3000ab0e 	bge	r6,zero,d18 <_malloc_r+0x534>
     a6c:	84000317 	ldw	r16,12(r16)
     a70:	1c00a426 	beq	r3,r16,d04 <_malloc_r+0x520>
     a74:	80800117 	ldw	r2,4(r16)
     a78:	1204703a 	and	r2,r2,r8
     a7c:	144dc83a 	sub	r6,r2,r17
     a80:	29bff90e 	bge	r5,r6,a68 <_malloc_r+0x284>
     a84:	81000317 	ldw	r4,12(r16)
     a88:	80c00217 	ldw	r3,8(r16)
     a8c:	89400054 	ori	r5,r17,1
     a90:	8445883a 	add	r2,r16,r17
     a94:	20c00215 	stw	r3,8(r4)
     a98:	19000315 	stw	r4,12(r3)
     a9c:	81400115 	stw	r5,4(r16)
     aa0:	1187883a 	add	r3,r2,r6
     aa4:	31000054 	ori	r4,r6,1
     aa8:	50800315 	stw	r2,12(r10)
     aac:	50800215 	stw	r2,8(r10)
     ab0:	19800015 	stw	r6,0(r3)
     ab4:	11000115 	stw	r4,4(r2)
     ab8:	12800215 	stw	r10,8(r2)
     abc:	12800315 	stw	r10,12(r2)
     ac0:	9009883a 	mov	r4,r18
     ac4:	00031640 	call	3164 <__malloc_unlock>
     ac8:	80c00204 	addi	r3,r16,8
     acc:	003f5906 	br	834 <_malloc_r+0x50>
     ad0:	8109883a 	add	r4,r16,r4
     ad4:	20800117 	ldw	r2,4(r4)
     ad8:	80c00217 	ldw	r3,8(r16)
     adc:	81400317 	ldw	r5,12(r16)
     ae0:	10800054 	ori	r2,r2,1
     ae4:	20800115 	stw	r2,4(r4)
     ae8:	28c00215 	stw	r3,8(r5)
     aec:	19400315 	stw	r5,12(r3)
     af0:	9009883a 	mov	r4,r18
     af4:	00031640 	call	3164 <__malloc_unlock>
     af8:	80c00204 	addi	r3,r16,8
     afc:	003f4d06 	br	834 <_malloc_r+0x50>
     b00:	80800204 	addi	r2,r16,8
     b04:	14000317 	ldw	r16,12(r2)
     b08:	143f911e 	bne	r2,r16,950 <_malloc_r+0x16c>
     b0c:	1a400084 	addi	r9,r3,2
     b10:	003f7306 	br	8e0 <_malloc_r+0xfc>
     b14:	88c00054 	ori	r3,r17,1
     b18:	8445883a 	add	r2,r16,r17
     b1c:	80c00115 	stw	r3,4(r16)
     b20:	003fdf06 	br	aa0 <_malloc_r+0x2bc>
     b24:	e4000217 	ldw	r16,8(fp)
     b28:	00bfff04 	movi	r2,-4
     b2c:	80c00117 	ldw	r3,4(r16)
     b30:	802d883a 	mov	r22,r16
     b34:	18aa703a 	and	r21,r3,r2
     b38:	ac401636 	bltu	r21,r17,b94 <_malloc_r+0x3b0>
     b3c:	ac49c83a 	sub	r4,r21,r17
     b40:	008003c4 	movi	r2,15
     b44:	1100130e 	bge	r2,r4,b94 <_malloc_r+0x3b0>
     b48:	88800054 	ori	r2,r17,1
     b4c:	8447883a 	add	r3,r16,r17
     b50:	80800115 	stw	r2,4(r16)
     b54:	20800054 	ori	r2,r4,1
     b58:	18800115 	stw	r2,4(r3)
     b5c:	e0c00215 	stw	r3,8(fp)
     b60:	9009883a 	mov	r4,r18
     b64:	00031640 	call	3164 <__malloc_unlock>
     b68:	80c00204 	addi	r3,r16,8
     b6c:	003f3106 	br	834 <_malloc_r+0x50>
     b70:	39c00117 	ldw	r7,4(r7)
     b74:	573ffe04 	addi	fp,r10,-8
     b78:	003fa006 	br	9fc <_malloc_r+0x218>
     b7c:	00801504 	movi	r2,84
     b80:	10c06736 	bltu	r2,r3,d20 <_malloc_r+0x53c>
     b84:	8804d33a 	srli	r2,r17,12
     b88:	11801b84 	addi	r6,r2,110
     b8c:	300490fa 	slli	r2,r6,3
     b90:	003f4106 	br	898 <_malloc_r+0xb4>
     b94:	d0a01017 	ldw	r2,-32704(gp)
     b98:	d0e00317 	ldw	r3,-32756(gp)
     b9c:	053fffc4 	movi	r20,-1
     ba0:	10800404 	addi	r2,r2,16
     ba4:	88a7883a 	add	r19,r17,r2
     ba8:	1d000326 	beq	r3,r20,bb8 <_malloc_r+0x3d4>
     bac:	98c3ffc4 	addi	r3,r19,4095
     bb0:	00bc0004 	movi	r2,-4096
     bb4:	18a6703a 	and	r19,r3,r2
     bb8:	9009883a 	mov	r4,r18
     bbc:	980b883a 	mov	r5,r19
     bc0:	000177c0 	call	177c <_sbrk_r>
     bc4:	1009883a 	mov	r4,r2
     bc8:	15000426 	beq	r2,r20,bdc <_malloc_r+0x3f8>
     bcc:	854b883a 	add	r5,r16,r21
     bd0:	1029883a 	mov	r20,r2
     bd4:	11405a2e 	bgeu	r2,r5,d40 <_malloc_r+0x55c>
     bd8:	87000c26 	beq	r16,fp,c0c <_malloc_r+0x428>
     bdc:	e4000217 	ldw	r16,8(fp)
     be0:	80c00117 	ldw	r3,4(r16)
     be4:	00bfff04 	movi	r2,-4
     be8:	1884703a 	and	r2,r3,r2
     bec:	14400336 	bltu	r2,r17,bfc <_malloc_r+0x418>
     bf0:	1449c83a 	sub	r4,r2,r17
     bf4:	008003c4 	movi	r2,15
     bf8:	113fd316 	blt	r2,r4,b48 <_malloc_r+0x364>
     bfc:	9009883a 	mov	r4,r18
     c00:	00031640 	call	3164 <__malloc_unlock>
     c04:	0007883a 	mov	r3,zero
     c08:	003f0a06 	br	834 <_malloc_r+0x50>
     c0c:	05c00074 	movhi	r23,1
     c10:	bde4b504 	addi	r23,r23,-27948
     c14:	b8800017 	ldw	r2,0(r23)
     c18:	988d883a 	add	r6,r19,r2
     c1c:	b9800015 	stw	r6,0(r23)
     c20:	d0e00317 	ldw	r3,-32756(gp)
     c24:	00bfffc4 	movi	r2,-1
     c28:	18808e26 	beq	r3,r2,e64 <_malloc_r+0x680>
     c2c:	2145c83a 	sub	r2,r4,r5
     c30:	3085883a 	add	r2,r6,r2
     c34:	b8800015 	stw	r2,0(r23)
     c38:	20c001cc 	andi	r3,r4,7
     c3c:	18005f1e 	bne	r3,zero,dbc <_malloc_r+0x5d8>
     c40:	000b883a 	mov	r5,zero
     c44:	a4c5883a 	add	r2,r20,r19
     c48:	1083ffcc 	andi	r2,r2,4095
     c4c:	00c40004 	movi	r3,4096
     c50:	1887c83a 	sub	r3,r3,r2
     c54:	28e7883a 	add	r19,r5,r3
     c58:	9009883a 	mov	r4,r18
     c5c:	980b883a 	mov	r5,r19
     c60:	000177c0 	call	177c <_sbrk_r>
     c64:	1007883a 	mov	r3,r2
     c68:	00bfffc4 	movi	r2,-1
     c6c:	18807a26 	beq	r3,r2,e58 <_malloc_r+0x674>
     c70:	1d05c83a 	sub	r2,r3,r20
     c74:	9885883a 	add	r2,r19,r2
     c78:	10c00054 	ori	r3,r2,1
     c7c:	b8800017 	ldw	r2,0(r23)
     c80:	a021883a 	mov	r16,r20
     c84:	a0c00115 	stw	r3,4(r20)
     c88:	9885883a 	add	r2,r19,r2
     c8c:	b8800015 	stw	r2,0(r23)
     c90:	e5000215 	stw	r20,8(fp)
     c94:	b7003626 	beq	r22,fp,d70 <_malloc_r+0x58c>
     c98:	018003c4 	movi	r6,15
     c9c:	35404b36 	bltu	r6,r21,dcc <_malloc_r+0x5e8>
     ca0:	00800044 	movi	r2,1
     ca4:	a0800115 	stw	r2,4(r20)
     ca8:	003fcd06 	br	be0 <_malloc_r+0x3fc>
     cac:	2808d27a 	srli	r4,r5,9
     cb0:	2000371e 	bne	r4,zero,d90 <_malloc_r+0x5ac>
     cb4:	2808d0fa 	srli	r4,r5,3
     cb8:	200690fa 	slli	r3,r4,3
     cbc:	1ad1883a 	add	r8,r3,r11
     cc0:	41800217 	ldw	r6,8(r8)
     cc4:	41805b26 	beq	r8,r6,e34 <_malloc_r+0x650>
     cc8:	30800117 	ldw	r2,4(r6)
     ccc:	00ffff04 	movi	r3,-4
     cd0:	10c4703a 	and	r2,r2,r3
     cd4:	2880022e 	bgeu	r5,r2,ce0 <_malloc_r+0x4fc>
     cd8:	31800217 	ldw	r6,8(r6)
     cdc:	41bffa1e 	bne	r8,r6,cc8 <_malloc_r+0x4e4>
     ce0:	32000317 	ldw	r8,12(r6)
     ce4:	39c00117 	ldw	r7,4(r7)
     ce8:	82000315 	stw	r8,12(r16)
     cec:	81800215 	stw	r6,8(r16)
     cf0:	07000034 	movhi	fp,0
     cf4:	e71df004 	addi	fp,fp,30656
     cf8:	34000315 	stw	r16,12(r6)
     cfc:	44000215 	stw	r16,8(r8)
     d00:	003f3e06 	br	9fc <_malloc_r+0x218>
     d04:	63000044 	addi	r12,r12,1
     d08:	608000cc 	andi	r2,r12,3
     d0c:	10005d26 	beq	r2,zero,e84 <_malloc_r+0x6a0>
     d10:	18c00204 	addi	r3,r3,8
     d14:	003f5106 	br	a5c <_malloc_r+0x278>
     d18:	8089883a 	add	r4,r16,r2
     d1c:	003f6d06 	br	ad4 <_malloc_r+0x2f0>
     d20:	00805504 	movi	r2,340
     d24:	10c02036 	bltu	r2,r3,da8 <_malloc_r+0x5c4>
     d28:	8804d3fa 	srli	r2,r17,15
     d2c:	11801dc4 	addi	r6,r2,119
     d30:	300490fa 	slli	r2,r6,3
     d34:	003ed806 	br	898 <_malloc_r+0xb4>
     d38:	48c000c4 	addi	r3,r9,3
     d3c:	003f3106 	br	a04 <_malloc_r+0x220>
     d40:	05c00074 	movhi	r23,1
     d44:	bde4b504 	addi	r23,r23,-27948
     d48:	b8800017 	ldw	r2,0(r23)
     d4c:	988d883a 	add	r6,r19,r2
     d50:	b9800015 	stw	r6,0(r23)
     d54:	293fb21e 	bne	r5,r4,c20 <_malloc_r+0x43c>
     d58:	2083ffcc 	andi	r2,r4,4095
     d5c:	103fb01e 	bne	r2,zero,c20 <_malloc_r+0x43c>
     d60:	e4000217 	ldw	r16,8(fp)
     d64:	9d45883a 	add	r2,r19,r21
     d68:	10800054 	ori	r2,r2,1
     d6c:	80800115 	stw	r2,4(r16)
     d70:	b8c00017 	ldw	r3,0(r23)
     d74:	d0a01117 	ldw	r2,-32700(gp)
     d78:	10c0012e 	bgeu	r2,r3,d80 <_malloc_r+0x59c>
     d7c:	d0e01115 	stw	r3,-32700(gp)
     d80:	d0a01217 	ldw	r2,-32696(gp)
     d84:	10ff962e 	bgeu	r2,r3,be0 <_malloc_r+0x3fc>
     d88:	d0e01215 	stw	r3,-32696(gp)
     d8c:	003f9406 	br	be0 <_malloc_r+0x3fc>
     d90:	00800104 	movi	r2,4
     d94:	11001e36 	bltu	r2,r4,e10 <_malloc_r+0x62c>
     d98:	2804d1ba 	srli	r2,r5,6
     d9c:	11000e04 	addi	r4,r2,56
     da0:	200690fa 	slli	r3,r4,3
     da4:	003fc506 	br	cbc <_malloc_r+0x4d8>
     da8:	00815504 	movi	r2,1364
     dac:	10c01d2e 	bgeu	r2,r3,e24 <_malloc_r+0x640>
     db0:	01801f84 	movi	r6,126
     db4:	0080fc04 	movi	r2,1008
     db8:	003eb706 	br	898 <_malloc_r+0xb4>
     dbc:	00800204 	movi	r2,8
     dc0:	10cbc83a 	sub	r5,r2,r3
     dc4:	2169883a 	add	r20,r4,r5
     dc8:	003f9e06 	br	c44 <_malloc_r+0x460>
     dcc:	00bffe04 	movi	r2,-8
     dd0:	a93ffd04 	addi	r4,r21,-12
     dd4:	2088703a 	and	r4,r4,r2
     dd8:	b10b883a 	add	r5,r22,r4
     ddc:	00c00144 	movi	r3,5
     de0:	28c00215 	stw	r3,8(r5)
     de4:	28c00115 	stw	r3,4(r5)
     de8:	b0800117 	ldw	r2,4(r22)
     dec:	1080004c 	andi	r2,r2,1
     df0:	2084b03a 	or	r2,r4,r2
     df4:	b0800115 	stw	r2,4(r22)
     df8:	313fdd2e 	bgeu	r6,r4,d70 <_malloc_r+0x58c>
     dfc:	b1400204 	addi	r5,r22,8
     e00:	9009883a 	mov	r4,r18
     e04:	0001f780 	call	1f78 <_free_r>
     e08:	e4000217 	ldw	r16,8(fp)
     e0c:	003fd806 	br	d70 <_malloc_r+0x58c>
     e10:	00800504 	movi	r2,20
     e14:	11001536 	bltu	r2,r4,e6c <_malloc_r+0x688>
     e18:	210016c4 	addi	r4,r4,91
     e1c:	200690fa 	slli	r3,r4,3
     e20:	003fa606 	br	cbc <_malloc_r+0x4d8>
     e24:	8804d4ba 	srli	r2,r17,18
     e28:	11801f04 	addi	r6,r2,124
     e2c:	300490fa 	slli	r2,r6,3
     e30:	003e9906 	br	898 <_malloc_r+0xb4>
     e34:	2009d0ba 	srai	r4,r4,2
     e38:	01400034 	movhi	r5,0
     e3c:	295df004 	addi	r5,r5,30656
     e40:	00c00044 	movi	r3,1
     e44:	28800117 	ldw	r2,4(r5)
     e48:	1906983a 	sll	r3,r3,r4
     e4c:	10c4b03a 	or	r2,r2,r3
     e50:	28800115 	stw	r2,4(r5)
     e54:	003fa306 	br	ce4 <_malloc_r+0x500>
     e58:	0027883a 	mov	r19,zero
     e5c:	00c00044 	movi	r3,1
     e60:	003f8606 	br	c7c <_malloc_r+0x498>
     e64:	d1200315 	stw	r4,-32756(gp)
     e68:	003f7306 	br	c38 <_malloc_r+0x454>
     e6c:	00801504 	movi	r2,84
     e70:	11001936 	bltu	r2,r4,ed8 <_malloc_r+0x6f4>
     e74:	2804d33a 	srli	r2,r5,12
     e78:	11001b84 	addi	r4,r2,110
     e7c:	200690fa 	slli	r3,r4,3
     e80:	003f8e06 	br	cbc <_malloc_r+0x4d8>
     e84:	480b883a 	mov	r5,r9
     e88:	6807883a 	mov	r3,r13
     e8c:	288000cc 	andi	r2,r5,3
     e90:	18fffe04 	addi	r3,r3,-8
     e94:	297fffc4 	addi	r5,r5,-1
     e98:	10001526 	beq	r2,zero,ef0 <_malloc_r+0x70c>
     e9c:	18800217 	ldw	r2,8(r3)
     ea0:	10fffa26 	beq	r2,r3,e8c <_malloc_r+0x6a8>
     ea4:	2109883a 	add	r4,r4,r4
     ea8:	393f1e36 	bltu	r7,r4,b24 <_malloc_r+0x340>
     eac:	203f1d26 	beq	r4,zero,b24 <_malloc_r+0x340>
     eb0:	21c4703a 	and	r2,r4,r7
     eb4:	10000226 	beq	r2,zero,ec0 <_malloc_r+0x6dc>
     eb8:	6013883a 	mov	r9,r12
     ebc:	003ee106 	br	a44 <_malloc_r+0x260>
     ec0:	2109883a 	add	r4,r4,r4
     ec4:	3904703a 	and	r2,r7,r4
     ec8:	63000104 	addi	r12,r12,4
     ecc:	103ffc26 	beq	r2,zero,ec0 <_malloc_r+0x6dc>
     ed0:	6013883a 	mov	r9,r12
     ed4:	003edb06 	br	a44 <_malloc_r+0x260>
     ed8:	00805504 	movi	r2,340
     edc:	11000836 	bltu	r2,r4,f00 <_malloc_r+0x71c>
     ee0:	2804d3fa 	srli	r2,r5,15
     ee4:	11001dc4 	addi	r4,r2,119
     ee8:	200690fa 	slli	r3,r4,3
     eec:	003f7306 	br	cbc <_malloc_r+0x4d8>
     ef0:	0104303a 	nor	r2,zero,r4
     ef4:	388e703a 	and	r7,r7,r2
     ef8:	e1c00115 	stw	r7,4(fp)
     efc:	003fe906 	br	ea4 <_malloc_r+0x6c0>
     f00:	00815504 	movi	r2,1364
     f04:	1100032e 	bgeu	r2,r4,f14 <_malloc_r+0x730>
     f08:	01001f84 	movi	r4,126
     f0c:	00c0fc04 	movi	r3,1008
     f10:	003f6a06 	br	cbc <_malloc_r+0x4d8>
     f14:	2804d4ba 	srli	r2,r5,18
     f18:	11001f04 	addi	r4,r2,124
     f1c:	200690fa 	slli	r3,r4,3
     f20:	003f6606 	br	cbc <_malloc_r+0x4d8>

00000f24 <memchr>:
     f24:	008000c4 	movi	r2,3
     f28:	29403fcc 	andi	r5,r5,255
     f2c:	2007883a 	mov	r3,r4
     f30:	1180022e 	bgeu	r2,r6,f3c <memchr+0x18>
     f34:	2084703a 	and	r2,r4,r2
     f38:	10000b26 	beq	r2,zero,f68 <memchr+0x44>
     f3c:	313fffc4 	addi	r4,r6,-1
     f40:	3000051e 	bne	r6,zero,f58 <memchr+0x34>
     f44:	00002c06 	br	ff8 <memchr+0xd4>
     f48:	213fffc4 	addi	r4,r4,-1
     f4c:	00bfffc4 	movi	r2,-1
     f50:	18c00044 	addi	r3,r3,1
     f54:	20802826 	beq	r4,r2,ff8 <memchr+0xd4>
     f58:	18800003 	ldbu	r2,0(r3)
     f5c:	28bffa1e 	bne	r5,r2,f48 <memchr+0x24>
     f60:	1805883a 	mov	r2,r3
     f64:	f800283a 	ret
     f68:	0011883a 	mov	r8,zero
     f6c:	0007883a 	mov	r3,zero
     f70:	01c00104 	movi	r7,4
     f74:	4004923a 	slli	r2,r8,8
     f78:	18c00044 	addi	r3,r3,1
     f7c:	1151883a 	add	r8,r2,r5
     f80:	19fffc1e 	bne	r3,r7,f74 <memchr+0x50>
     f84:	02bfbff4 	movhi	r10,65279
     f88:	52bfbfc4 	addi	r10,r10,-257
     f8c:	02602074 	movhi	r9,32897
     f90:	4a602004 	addi	r9,r9,-32640
     f94:	02c000c4 	movi	r11,3
     f98:	20800017 	ldw	r2,0(r4)
     f9c:	31bfff04 	addi	r6,r6,-4
     fa0:	200f883a 	mov	r7,r4
     fa4:	1204f03a 	xor	r2,r2,r8
     fa8:	1287883a 	add	r3,r2,r10
     fac:	1a46703a 	and	r3,r3,r9
     fb0:	0084303a 	nor	r2,zero,r2
     fb4:	10c4703a 	and	r2,r2,r3
     fb8:	10000b26 	beq	r2,zero,fe8 <memchr+0xc4>
     fbc:	20800003 	ldbu	r2,0(r4)
     fc0:	28800f26 	beq	r5,r2,1000 <memchr+0xdc>
     fc4:	20800043 	ldbu	r2,1(r4)
     fc8:	21c00044 	addi	r7,r4,1
     fcc:	28800c26 	beq	r5,r2,1000 <memchr+0xdc>
     fd0:	20800083 	ldbu	r2,2(r4)
     fd4:	21c00084 	addi	r7,r4,2
     fd8:	28800926 	beq	r5,r2,1000 <memchr+0xdc>
     fdc:	208000c3 	ldbu	r2,3(r4)
     fe0:	21c000c4 	addi	r7,r4,3
     fe4:	28800626 	beq	r5,r2,1000 <memchr+0xdc>
     fe8:	21000104 	addi	r4,r4,4
     fec:	59bfea36 	bltu	r11,r6,f98 <memchr+0x74>
     ff0:	2007883a 	mov	r3,r4
     ff4:	003fd106 	br	f3c <memchr+0x18>
     ff8:	0005883a 	mov	r2,zero
     ffc:	f800283a 	ret
    1000:	3805883a 	mov	r2,r7
    1004:	f800283a 	ret

00001008 <memcpy>:
    1008:	01c003c4 	movi	r7,15
    100c:	2007883a 	mov	r3,r4
    1010:	3980032e 	bgeu	r7,r6,1020 <memcpy+0x18>
    1014:	2904b03a 	or	r2,r5,r4
    1018:	108000cc 	andi	r2,r2,3
    101c:	10000926 	beq	r2,zero,1044 <memcpy+0x3c>
    1020:	30000626 	beq	r6,zero,103c <memcpy+0x34>
    1024:	30cd883a 	add	r6,r6,r3
    1028:	28800003 	ldbu	r2,0(r5)
    102c:	29400044 	addi	r5,r5,1
    1030:	18800005 	stb	r2,0(r3)
    1034:	18c00044 	addi	r3,r3,1
    1038:	30fffb1e 	bne	r6,r3,1028 <memcpy+0x20>
    103c:	2005883a 	mov	r2,r4
    1040:	f800283a 	ret
    1044:	3811883a 	mov	r8,r7
    1048:	200f883a 	mov	r7,r4
    104c:	28c00017 	ldw	r3,0(r5)
    1050:	31bffc04 	addi	r6,r6,-16
    1054:	38c00015 	stw	r3,0(r7)
    1058:	28800117 	ldw	r2,4(r5)
    105c:	38800115 	stw	r2,4(r7)
    1060:	28c00217 	ldw	r3,8(r5)
    1064:	38c00215 	stw	r3,8(r7)
    1068:	28800317 	ldw	r2,12(r5)
    106c:	29400404 	addi	r5,r5,16
    1070:	38800315 	stw	r2,12(r7)
    1074:	39c00404 	addi	r7,r7,16
    1078:	41bff436 	bltu	r8,r6,104c <memcpy+0x44>
    107c:	008000c4 	movi	r2,3
    1080:	1180072e 	bgeu	r2,r6,10a0 <memcpy+0x98>
    1084:	1007883a 	mov	r3,r2
    1088:	28800017 	ldw	r2,0(r5)
    108c:	31bfff04 	addi	r6,r6,-4
    1090:	29400104 	addi	r5,r5,4
    1094:	38800015 	stw	r2,0(r7)
    1098:	39c00104 	addi	r7,r7,4
    109c:	19bffa36 	bltu	r3,r6,1088 <memcpy+0x80>
    10a0:	3807883a 	mov	r3,r7
    10a4:	003fde06 	br	1020 <memcpy+0x18>

000010a8 <memmove>:
    10a8:	2807883a 	mov	r3,r5
    10ac:	2011883a 	mov	r8,r4
    10b0:	29000c2e 	bgeu	r5,r4,10e4 <memmove+0x3c>
    10b4:	298f883a 	add	r7,r5,r6
    10b8:	21c00a2e 	bgeu	r4,r7,10e4 <memmove+0x3c>
    10bc:	30000726 	beq	r6,zero,10dc <memmove+0x34>
    10c0:	2187883a 	add	r3,r4,r6
    10c4:	198dc83a 	sub	r6,r3,r6
    10c8:	39ffffc4 	addi	r7,r7,-1
    10cc:	38800003 	ldbu	r2,0(r7)
    10d0:	18ffffc4 	addi	r3,r3,-1
    10d4:	18800005 	stb	r2,0(r3)
    10d8:	19bffb1e 	bne	r3,r6,10c8 <memmove+0x20>
    10dc:	2005883a 	mov	r2,r4
    10e0:	f800283a 	ret
    10e4:	01c003c4 	movi	r7,15
    10e8:	39800a36 	bltu	r7,r6,1114 <memmove+0x6c>
    10ec:	303ffb26 	beq	r6,zero,10dc <memmove+0x34>
    10f0:	400f883a 	mov	r7,r8
    10f4:	320d883a 	add	r6,r6,r8
    10f8:	28800003 	ldbu	r2,0(r5)
    10fc:	29400044 	addi	r5,r5,1
    1100:	38800005 	stb	r2,0(r7)
    1104:	39c00044 	addi	r7,r7,1
    1108:	39bffb1e 	bne	r7,r6,10f8 <memmove+0x50>
    110c:	2005883a 	mov	r2,r4
    1110:	f800283a 	ret
    1114:	1904b03a 	or	r2,r3,r4
    1118:	108000cc 	andi	r2,r2,3
    111c:	103ff31e 	bne	r2,zero,10ec <memmove+0x44>
    1120:	3811883a 	mov	r8,r7
    1124:	180b883a 	mov	r5,r3
    1128:	200f883a 	mov	r7,r4
    112c:	28c00017 	ldw	r3,0(r5)
    1130:	31bffc04 	addi	r6,r6,-16
    1134:	38c00015 	stw	r3,0(r7)
    1138:	28800117 	ldw	r2,4(r5)
    113c:	38800115 	stw	r2,4(r7)
    1140:	28c00217 	ldw	r3,8(r5)
    1144:	38c00215 	stw	r3,8(r7)
    1148:	28800317 	ldw	r2,12(r5)
    114c:	29400404 	addi	r5,r5,16
    1150:	38800315 	stw	r2,12(r7)
    1154:	39c00404 	addi	r7,r7,16
    1158:	41bff436 	bltu	r8,r6,112c <memmove+0x84>
    115c:	008000c4 	movi	r2,3
    1160:	1180072e 	bgeu	r2,r6,1180 <memmove+0xd8>
    1164:	1007883a 	mov	r3,r2
    1168:	28800017 	ldw	r2,0(r5)
    116c:	31bfff04 	addi	r6,r6,-4
    1170:	29400104 	addi	r5,r5,4
    1174:	38800015 	stw	r2,0(r7)
    1178:	39c00104 	addi	r7,r7,4
    117c:	19bffa36 	bltu	r3,r6,1168 <memmove+0xc0>
    1180:	3811883a 	mov	r8,r7
    1184:	003fd906 	br	10ec <memmove+0x44>

00001188 <_realloc_r>:
    1188:	defff404 	addi	sp,sp,-48
    118c:	dd800815 	stw	r22,32(sp)
    1190:	dc800415 	stw	r18,16(sp)
    1194:	dc400315 	stw	r17,12(sp)
    1198:	dfc00b15 	stw	ra,44(sp)
    119c:	df000a15 	stw	fp,40(sp)
    11a0:	ddc00915 	stw	r23,36(sp)
    11a4:	dd400715 	stw	r21,28(sp)
    11a8:	dd000615 	stw	r20,24(sp)
    11ac:	dcc00515 	stw	r19,20(sp)
    11b0:	dc000215 	stw	r16,8(sp)
    11b4:	2825883a 	mov	r18,r5
    11b8:	3023883a 	mov	r17,r6
    11bc:	202d883a 	mov	r22,r4
    11c0:	2800c926 	beq	r5,zero,14e8 <_realloc_r+0x360>
    11c4:	00031440 	call	3144 <__malloc_lock>
    11c8:	943ffe04 	addi	r16,r18,-8
    11cc:	88c002c4 	addi	r3,r17,11
    11d0:	00800584 	movi	r2,22
    11d4:	82000117 	ldw	r8,4(r16)
    11d8:	10c01b2e 	bgeu	r2,r3,1248 <_realloc_r+0xc0>
    11dc:	00bffe04 	movi	r2,-8
    11e0:	188e703a 	and	r7,r3,r2
    11e4:	3839883a 	mov	fp,r7
    11e8:	38001a16 	blt	r7,zero,1254 <_realloc_r+0xcc>
    11ec:	e4401936 	bltu	fp,r17,1254 <_realloc_r+0xcc>
    11f0:	013fff04 	movi	r4,-4
    11f4:	4126703a 	and	r19,r8,r4
    11f8:	99c02616 	blt	r19,r7,1294 <_realloc_r+0x10c>
    11fc:	802b883a 	mov	r21,r16
    1200:	9829883a 	mov	r20,r19
    1204:	84000204 	addi	r16,r16,8
    1208:	a80f883a 	mov	r7,r21
    120c:	a70dc83a 	sub	r6,r20,fp
    1210:	008003c4 	movi	r2,15
    1214:	1180c136 	bltu	r2,r6,151c <_realloc_r+0x394>
    1218:	38800117 	ldw	r2,4(r7)
    121c:	a549883a 	add	r4,r20,r21
    1220:	1080004c 	andi	r2,r2,1
    1224:	a084b03a 	or	r2,r20,r2
    1228:	38800115 	stw	r2,4(r7)
    122c:	20c00117 	ldw	r3,4(r4)
    1230:	18c00054 	ori	r3,r3,1
    1234:	20c00115 	stw	r3,4(r4)
    1238:	b009883a 	mov	r4,r22
    123c:	00031640 	call	3164 <__malloc_unlock>
    1240:	8023883a 	mov	r17,r16
    1244:	00000606 	br	1260 <_realloc_r+0xd8>
    1248:	01c00404 	movi	r7,16
    124c:	3839883a 	mov	fp,r7
    1250:	e47fe72e 	bgeu	fp,r17,11f0 <_realloc_r+0x68>
    1254:	00800304 	movi	r2,12
    1258:	0023883a 	mov	r17,zero
    125c:	b0800015 	stw	r2,0(r22)
    1260:	8805883a 	mov	r2,r17
    1264:	dfc00b17 	ldw	ra,44(sp)
    1268:	df000a17 	ldw	fp,40(sp)
    126c:	ddc00917 	ldw	r23,36(sp)
    1270:	dd800817 	ldw	r22,32(sp)
    1274:	dd400717 	ldw	r21,28(sp)
    1278:	dd000617 	ldw	r20,24(sp)
    127c:	dcc00517 	ldw	r19,20(sp)
    1280:	dc800417 	ldw	r18,16(sp)
    1284:	dc400317 	ldw	r17,12(sp)
    1288:	dc000217 	ldw	r16,8(sp)
    128c:	dec00c04 	addi	sp,sp,48
    1290:	f800283a 	ret
    1294:	00800034 	movhi	r2,0
    1298:	109df004 	addi	r2,r2,30656
    129c:	12400217 	ldw	r9,8(r2)
    12a0:	84cd883a 	add	r6,r16,r19
    12a4:	802b883a 	mov	r21,r16
    12a8:	3240b926 	beq	r6,r9,1590 <_realloc_r+0x408>
    12ac:	31400117 	ldw	r5,4(r6)
    12b0:	00bfff84 	movi	r2,-2
    12b4:	2884703a 	and	r2,r5,r2
    12b8:	1185883a 	add	r2,r2,r6
    12bc:	10c00117 	ldw	r3,4(r2)
    12c0:	18c0004c 	andi	r3,r3,1
    12c4:	1807003a 	cmpeq	r3,r3,zero
    12c8:	1800a326 	beq	r3,zero,1558 <_realloc_r+0x3d0>
    12cc:	2908703a 	and	r4,r5,r4
    12d0:	9929883a 	add	r20,r19,r4
    12d4:	a1c0a30e 	bge	r20,r7,1564 <_realloc_r+0x3dc>
    12d8:	4080004c 	andi	r2,r8,1
    12dc:	1000551e 	bne	r2,zero,1434 <_realloc_r+0x2ac>
    12e0:	80800017 	ldw	r2,0(r16)
    12e4:	80afc83a 	sub	r23,r16,r2
    12e8:	b8c00117 	ldw	r3,4(r23)
    12ec:	00bfff04 	movi	r2,-4
    12f0:	1884703a 	and	r2,r3,r2
    12f4:	30002e26 	beq	r6,zero,13b0 <_realloc_r+0x228>
    12f8:	3240b926 	beq	r6,r9,15e0 <_realloc_r+0x458>
    12fc:	98a9883a 	add	r20,r19,r2
    1300:	2509883a 	add	r4,r4,r20
    1304:	d9000015 	stw	r4,0(sp)
    1308:	21c02a16 	blt	r4,r7,13b4 <_realloc_r+0x22c>
    130c:	30800317 	ldw	r2,12(r6)
    1310:	30c00217 	ldw	r3,8(r6)
    1314:	01400904 	movi	r5,36
    1318:	99bfff04 	addi	r6,r19,-4
    131c:	18800315 	stw	r2,12(r3)
    1320:	10c00215 	stw	r3,8(r2)
    1324:	b9000317 	ldw	r4,12(r23)
    1328:	b8800217 	ldw	r2,8(r23)
    132c:	b82b883a 	mov	r21,r23
    1330:	bc000204 	addi	r16,r23,8
    1334:	20800215 	stw	r2,8(r4)
    1338:	11000315 	stw	r4,12(r2)
    133c:	2980e436 	bltu	r5,r6,16d0 <_realloc_r+0x548>
    1340:	008004c4 	movi	r2,19
    1344:	9009883a 	mov	r4,r18
    1348:	8011883a 	mov	r8,r16
    134c:	11800f2e 	bgeu	r2,r6,138c <_realloc_r+0x204>
    1350:	90800017 	ldw	r2,0(r18)
    1354:	ba000404 	addi	r8,r23,16
    1358:	91000204 	addi	r4,r18,8
    135c:	b8800215 	stw	r2,8(r23)
    1360:	90c00117 	ldw	r3,4(r18)
    1364:	008006c4 	movi	r2,27
    1368:	b8c00315 	stw	r3,12(r23)
    136c:	1180072e 	bgeu	r2,r6,138c <_realloc_r+0x204>
    1370:	90c00217 	ldw	r3,8(r18)
    1374:	ba000604 	addi	r8,r23,24
    1378:	91000404 	addi	r4,r18,16
    137c:	b8c00415 	stw	r3,16(r23)
    1380:	90800317 	ldw	r2,12(r18)
    1384:	b8800515 	stw	r2,20(r23)
    1388:	3140e726 	beq	r6,r5,1728 <_realloc_r+0x5a0>
    138c:	20800017 	ldw	r2,0(r4)
    1390:	dd000017 	ldw	r20,0(sp)
    1394:	b80f883a 	mov	r7,r23
    1398:	40800015 	stw	r2,0(r8)
    139c:	20c00117 	ldw	r3,4(r4)
    13a0:	40c00115 	stw	r3,4(r8)
    13a4:	20800217 	ldw	r2,8(r4)
    13a8:	40800215 	stw	r2,8(r8)
    13ac:	003f9706 	br	120c <_realloc_r+0x84>
    13b0:	98a9883a 	add	r20,r19,r2
    13b4:	a1c01f16 	blt	r20,r7,1434 <_realloc_r+0x2ac>
    13b8:	b8c00317 	ldw	r3,12(r23)
    13bc:	b8800217 	ldw	r2,8(r23)
    13c0:	99bfff04 	addi	r6,r19,-4
    13c4:	01400904 	movi	r5,36
    13c8:	b82b883a 	mov	r21,r23
    13cc:	18800215 	stw	r2,8(r3)
    13d0:	10c00315 	stw	r3,12(r2)
    13d4:	bc000204 	addi	r16,r23,8
    13d8:	2980c336 	bltu	r5,r6,16e8 <_realloc_r+0x560>
    13dc:	008004c4 	movi	r2,19
    13e0:	9009883a 	mov	r4,r18
    13e4:	8011883a 	mov	r8,r16
    13e8:	11800f2e 	bgeu	r2,r6,1428 <_realloc_r+0x2a0>
    13ec:	90800017 	ldw	r2,0(r18)
    13f0:	ba000404 	addi	r8,r23,16
    13f4:	91000204 	addi	r4,r18,8
    13f8:	b8800215 	stw	r2,8(r23)
    13fc:	90c00117 	ldw	r3,4(r18)
    1400:	008006c4 	movi	r2,27
    1404:	b8c00315 	stw	r3,12(r23)
    1408:	1180072e 	bgeu	r2,r6,1428 <_realloc_r+0x2a0>
    140c:	90c00217 	ldw	r3,8(r18)
    1410:	ba000604 	addi	r8,r23,24
    1414:	91000404 	addi	r4,r18,16
    1418:	b8c00415 	stw	r3,16(r23)
    141c:	90800317 	ldw	r2,12(r18)
    1420:	b8800515 	stw	r2,20(r23)
    1424:	3140c726 	beq	r6,r5,1744 <_realloc_r+0x5bc>
    1428:	20800017 	ldw	r2,0(r4)
    142c:	b80f883a 	mov	r7,r23
    1430:	003fd906 	br	1398 <_realloc_r+0x210>
    1434:	880b883a 	mov	r5,r17
    1438:	b009883a 	mov	r4,r22
    143c:	00007e40 	call	7e4 <_malloc_r>
    1440:	1023883a 	mov	r17,r2
    1444:	10002526 	beq	r2,zero,14dc <_realloc_r+0x354>
    1448:	80800117 	ldw	r2,4(r16)
    144c:	00ffff84 	movi	r3,-2
    1450:	893ffe04 	addi	r4,r17,-8
    1454:	10c4703a 	and	r2,r2,r3
    1458:	8085883a 	add	r2,r16,r2
    145c:	20809526 	beq	r4,r2,16b4 <_realloc_r+0x52c>
    1460:	99bfff04 	addi	r6,r19,-4
    1464:	01c00904 	movi	r7,36
    1468:	39804536 	bltu	r7,r6,1580 <_realloc_r+0x3f8>
    146c:	008004c4 	movi	r2,19
    1470:	9009883a 	mov	r4,r18
    1474:	880b883a 	mov	r5,r17
    1478:	11800f2e 	bgeu	r2,r6,14b8 <_realloc_r+0x330>
    147c:	90800017 	ldw	r2,0(r18)
    1480:	89400204 	addi	r5,r17,8
    1484:	91000204 	addi	r4,r18,8
    1488:	88800015 	stw	r2,0(r17)
    148c:	90c00117 	ldw	r3,4(r18)
    1490:	008006c4 	movi	r2,27
    1494:	88c00115 	stw	r3,4(r17)
    1498:	1180072e 	bgeu	r2,r6,14b8 <_realloc_r+0x330>
    149c:	90c00217 	ldw	r3,8(r18)
    14a0:	89400404 	addi	r5,r17,16
    14a4:	91000404 	addi	r4,r18,16
    14a8:	88c00215 	stw	r3,8(r17)
    14ac:	90800317 	ldw	r2,12(r18)
    14b0:	88800315 	stw	r2,12(r17)
    14b4:	31c09126 	beq	r6,r7,16fc <_realloc_r+0x574>
    14b8:	20800017 	ldw	r2,0(r4)
    14bc:	28800015 	stw	r2,0(r5)
    14c0:	20c00117 	ldw	r3,4(r4)
    14c4:	28c00115 	stw	r3,4(r5)
    14c8:	20800217 	ldw	r2,8(r4)
    14cc:	28800215 	stw	r2,8(r5)
    14d0:	900b883a 	mov	r5,r18
    14d4:	b009883a 	mov	r4,r22
    14d8:	0001f780 	call	1f78 <_free_r>
    14dc:	b009883a 	mov	r4,r22
    14e0:	00031640 	call	3164 <__malloc_unlock>
    14e4:	003f5e06 	br	1260 <_realloc_r+0xd8>
    14e8:	300b883a 	mov	r5,r6
    14ec:	dfc00b17 	ldw	ra,44(sp)
    14f0:	df000a17 	ldw	fp,40(sp)
    14f4:	ddc00917 	ldw	r23,36(sp)
    14f8:	dd800817 	ldw	r22,32(sp)
    14fc:	dd400717 	ldw	r21,28(sp)
    1500:	dd000617 	ldw	r20,24(sp)
    1504:	dcc00517 	ldw	r19,20(sp)
    1508:	dc800417 	ldw	r18,16(sp)
    150c:	dc400317 	ldw	r17,12(sp)
    1510:	dc000217 	ldw	r16,8(sp)
    1514:	dec00c04 	addi	sp,sp,48
    1518:	00007e41 	jmpi	7e4 <_malloc_r>
    151c:	38800117 	ldw	r2,4(r7)
    1520:	e54b883a 	add	r5,fp,r21
    1524:	31000054 	ori	r4,r6,1
    1528:	1080004c 	andi	r2,r2,1
    152c:	1704b03a 	or	r2,r2,fp
    1530:	38800115 	stw	r2,4(r7)
    1534:	29000115 	stw	r4,4(r5)
    1538:	2987883a 	add	r3,r5,r6
    153c:	18800117 	ldw	r2,4(r3)
    1540:	29400204 	addi	r5,r5,8
    1544:	b009883a 	mov	r4,r22
    1548:	10800054 	ori	r2,r2,1
    154c:	18800115 	stw	r2,4(r3)
    1550:	0001f780 	call	1f78 <_free_r>
    1554:	003f3806 	br	1238 <_realloc_r+0xb0>
    1558:	000d883a 	mov	r6,zero
    155c:	0009883a 	mov	r4,zero
    1560:	003f5d06 	br	12d8 <_realloc_r+0x150>
    1564:	30c00217 	ldw	r3,8(r6)
    1568:	30800317 	ldw	r2,12(r6)
    156c:	800f883a 	mov	r7,r16
    1570:	84000204 	addi	r16,r16,8
    1574:	10c00215 	stw	r3,8(r2)
    1578:	18800315 	stw	r2,12(r3)
    157c:	003f2306 	br	120c <_realloc_r+0x84>
    1580:	8809883a 	mov	r4,r17
    1584:	900b883a 	mov	r5,r18
    1588:	00010a80 	call	10a8 <memmove>
    158c:	003fd006 	br	14d0 <_realloc_r+0x348>
    1590:	30800117 	ldw	r2,4(r6)
    1594:	e0c00404 	addi	r3,fp,16
    1598:	1108703a 	and	r4,r2,r4
    159c:	9905883a 	add	r2,r19,r4
    15a0:	10ff4d16 	blt	r2,r3,12d8 <_realloc_r+0x150>
    15a4:	1705c83a 	sub	r2,r2,fp
    15a8:	870b883a 	add	r5,r16,fp
    15ac:	10800054 	ori	r2,r2,1
    15b0:	28800115 	stw	r2,4(r5)
    15b4:	80c00117 	ldw	r3,4(r16)
    15b8:	00800034 	movhi	r2,0
    15bc:	109df004 	addi	r2,r2,30656
    15c0:	b009883a 	mov	r4,r22
    15c4:	18c0004c 	andi	r3,r3,1
    15c8:	e0c6b03a 	or	r3,fp,r3
    15cc:	11400215 	stw	r5,8(r2)
    15d0:	80c00115 	stw	r3,4(r16)
    15d4:	00031640 	call	3164 <__malloc_unlock>
    15d8:	84400204 	addi	r17,r16,8
    15dc:	003f2006 	br	1260 <_realloc_r+0xd8>
    15e0:	98a9883a 	add	r20,r19,r2
    15e4:	2509883a 	add	r4,r4,r20
    15e8:	e0800404 	addi	r2,fp,16
    15ec:	d9000115 	stw	r4,4(sp)
    15f0:	20bf7016 	blt	r4,r2,13b4 <_realloc_r+0x22c>
    15f4:	b8c00317 	ldw	r3,12(r23)
    15f8:	b8800217 	ldw	r2,8(r23)
    15fc:	99bfff04 	addi	r6,r19,-4
    1600:	01400904 	movi	r5,36
    1604:	18800215 	stw	r2,8(r3)
    1608:	10c00315 	stw	r3,12(r2)
    160c:	bc400204 	addi	r17,r23,8
    1610:	29804136 	bltu	r5,r6,1718 <_realloc_r+0x590>
    1614:	008004c4 	movi	r2,19
    1618:	9009883a 	mov	r4,r18
    161c:	880f883a 	mov	r7,r17
    1620:	11800f2e 	bgeu	r2,r6,1660 <_realloc_r+0x4d8>
    1624:	90800017 	ldw	r2,0(r18)
    1628:	b9c00404 	addi	r7,r23,16
    162c:	91000204 	addi	r4,r18,8
    1630:	b8800215 	stw	r2,8(r23)
    1634:	90c00117 	ldw	r3,4(r18)
    1638:	008006c4 	movi	r2,27
    163c:	b8c00315 	stw	r3,12(r23)
    1640:	1180072e 	bgeu	r2,r6,1660 <_realloc_r+0x4d8>
    1644:	90c00217 	ldw	r3,8(r18)
    1648:	b9c00604 	addi	r7,r23,24
    164c:	91000404 	addi	r4,r18,16
    1650:	b8c00415 	stw	r3,16(r23)
    1654:	90800317 	ldw	r2,12(r18)
    1658:	b8800515 	stw	r2,20(r23)
    165c:	31404026 	beq	r6,r5,1760 <_realloc_r+0x5d8>
    1660:	20800017 	ldw	r2,0(r4)
    1664:	38800015 	stw	r2,0(r7)
    1668:	20c00117 	ldw	r3,4(r4)
    166c:	38c00115 	stw	r3,4(r7)
    1670:	20800217 	ldw	r2,8(r4)
    1674:	38800215 	stw	r2,8(r7)
    1678:	d8c00117 	ldw	r3,4(sp)
    167c:	bf0b883a 	add	r5,r23,fp
    1680:	b009883a 	mov	r4,r22
    1684:	1f05c83a 	sub	r2,r3,fp
    1688:	10800054 	ori	r2,r2,1
    168c:	28800115 	stw	r2,4(r5)
    1690:	b8c00117 	ldw	r3,4(r23)
    1694:	00800034 	movhi	r2,0
    1698:	109df004 	addi	r2,r2,30656
    169c:	11400215 	stw	r5,8(r2)
    16a0:	18c0004c 	andi	r3,r3,1
    16a4:	e0c6b03a 	or	r3,fp,r3
    16a8:	b8c00115 	stw	r3,4(r23)
    16ac:	00031640 	call	3164 <__malloc_unlock>
    16b0:	003eeb06 	br	1260 <_realloc_r+0xd8>
    16b4:	20800117 	ldw	r2,4(r4)
    16b8:	00ffff04 	movi	r3,-4
    16bc:	800f883a 	mov	r7,r16
    16c0:	10c4703a 	and	r2,r2,r3
    16c4:	98a9883a 	add	r20,r19,r2
    16c8:	84000204 	addi	r16,r16,8
    16cc:	003ecf06 	br	120c <_realloc_r+0x84>
    16d0:	900b883a 	mov	r5,r18
    16d4:	8009883a 	mov	r4,r16
    16d8:	00010a80 	call	10a8 <memmove>
    16dc:	dd000017 	ldw	r20,0(sp)
    16e0:	b80f883a 	mov	r7,r23
    16e4:	003ec906 	br	120c <_realloc_r+0x84>
    16e8:	900b883a 	mov	r5,r18
    16ec:	8009883a 	mov	r4,r16
    16f0:	00010a80 	call	10a8 <memmove>
    16f4:	b80f883a 	mov	r7,r23
    16f8:	003ec406 	br	120c <_realloc_r+0x84>
    16fc:	90c00417 	ldw	r3,16(r18)
    1700:	89400604 	addi	r5,r17,24
    1704:	91000604 	addi	r4,r18,24
    1708:	88c00415 	stw	r3,16(r17)
    170c:	90800517 	ldw	r2,20(r18)
    1710:	88800515 	stw	r2,20(r17)
    1714:	003f6806 	br	14b8 <_realloc_r+0x330>
    1718:	900b883a 	mov	r5,r18
    171c:	8809883a 	mov	r4,r17
    1720:	00010a80 	call	10a8 <memmove>
    1724:	003fd406 	br	1678 <_realloc_r+0x4f0>
    1728:	90c00417 	ldw	r3,16(r18)
    172c:	91000604 	addi	r4,r18,24
    1730:	ba000804 	addi	r8,r23,32
    1734:	b8c00615 	stw	r3,24(r23)
    1738:	90800517 	ldw	r2,20(r18)
    173c:	b8800715 	stw	r2,28(r23)
    1740:	003f1206 	br	138c <_realloc_r+0x204>
    1744:	90c00417 	ldw	r3,16(r18)
    1748:	91000604 	addi	r4,r18,24
    174c:	ba000804 	addi	r8,r23,32
    1750:	b8c00615 	stw	r3,24(r23)
    1754:	90800517 	ldw	r2,20(r18)
    1758:	b8800715 	stw	r2,28(r23)
    175c:	003f3206 	br	1428 <_realloc_r+0x2a0>
    1760:	90c00417 	ldw	r3,16(r18)
    1764:	91000604 	addi	r4,r18,24
    1768:	b9c00804 	addi	r7,r23,32
    176c:	b8c00615 	stw	r3,24(r23)
    1770:	90800517 	ldw	r2,20(r18)
    1774:	b8800715 	stw	r2,28(r23)
    1778:	003fb906 	br	1660 <_realloc_r+0x4d8>

0000177c <_sbrk_r>:
    177c:	defffd04 	addi	sp,sp,-12
    1780:	dc000015 	stw	r16,0(sp)
    1784:	04000074 	movhi	r16,1
    1788:	8424ae04 	addi	r16,r16,-27976
    178c:	dc400115 	stw	r17,4(sp)
    1790:	80000015 	stw	zero,0(r16)
    1794:	2023883a 	mov	r17,r4
    1798:	2809883a 	mov	r4,r5
    179c:	dfc00215 	stw	ra,8(sp)
    17a0:	00033800 	call	3380 <sbrk>
    17a4:	1007883a 	mov	r3,r2
    17a8:	00bfffc4 	movi	r2,-1
    17ac:	18800626 	beq	r3,r2,17c8 <_sbrk_r+0x4c>
    17b0:	1805883a 	mov	r2,r3
    17b4:	dfc00217 	ldw	ra,8(sp)
    17b8:	dc400117 	ldw	r17,4(sp)
    17bc:	dc000017 	ldw	r16,0(sp)
    17c0:	dec00304 	addi	sp,sp,12
    17c4:	f800283a 	ret
    17c8:	80800017 	ldw	r2,0(r16)
    17cc:	103ff826 	beq	r2,zero,17b0 <_sbrk_r+0x34>
    17d0:	88800015 	stw	r2,0(r17)
    17d4:	1805883a 	mov	r2,r3
    17d8:	dfc00217 	ldw	ra,8(sp)
    17dc:	dc400117 	ldw	r17,4(sp)
    17e0:	dc000017 	ldw	r16,0(sp)
    17e4:	dec00304 	addi	sp,sp,12
    17e8:	f800283a 	ret

000017ec <__swsetup_r>:
    17ec:	00800074 	movhi	r2,1
    17f0:	10a49b04 	addi	r2,r2,-28052
    17f4:	10c00017 	ldw	r3,0(r2)
    17f8:	defffd04 	addi	sp,sp,-12
    17fc:	dc400115 	stw	r17,4(sp)
    1800:	dc000015 	stw	r16,0(sp)
    1804:	dfc00215 	stw	ra,8(sp)
    1808:	2023883a 	mov	r17,r4
    180c:	2821883a 	mov	r16,r5
    1810:	18000226 	beq	r3,zero,181c <__swsetup_r+0x30>
    1814:	18800e17 	ldw	r2,56(r3)
    1818:	10001f26 	beq	r2,zero,1898 <__swsetup_r+0xac>
    181c:	8100030b 	ldhu	r4,12(r16)
    1820:	2080020c 	andi	r2,r4,8
    1824:	10002826 	beq	r2,zero,18c8 <__swsetup_r+0xdc>
    1828:	81400417 	ldw	r5,16(r16)
    182c:	28001d26 	beq	r5,zero,18a4 <__swsetup_r+0xb8>
    1830:	2080004c 	andi	r2,r4,1
    1834:	1005003a 	cmpeq	r2,r2,zero
    1838:	10000b26 	beq	r2,zero,1868 <__swsetup_r+0x7c>
    183c:	2080008c 	andi	r2,r4,2
    1840:	10001226 	beq	r2,zero,188c <__swsetup_r+0xa0>
    1844:	0005883a 	mov	r2,zero
    1848:	80800215 	stw	r2,8(r16)
    184c:	28000b26 	beq	r5,zero,187c <__swsetup_r+0x90>
    1850:	0005883a 	mov	r2,zero
    1854:	dfc00217 	ldw	ra,8(sp)
    1858:	dc400117 	ldw	r17,4(sp)
    185c:	dc000017 	ldw	r16,0(sp)
    1860:	dec00304 	addi	sp,sp,12
    1864:	f800283a 	ret
    1868:	80800517 	ldw	r2,20(r16)
    186c:	80000215 	stw	zero,8(r16)
    1870:	0085c83a 	sub	r2,zero,r2
    1874:	80800615 	stw	r2,24(r16)
    1878:	283ff51e 	bne	r5,zero,1850 <__swsetup_r+0x64>
    187c:	2080200c 	andi	r2,r4,128
    1880:	103ff326 	beq	r2,zero,1850 <__swsetup_r+0x64>
    1884:	00bfffc4 	movi	r2,-1
    1888:	003ff206 	br	1854 <__swsetup_r+0x68>
    188c:	80800517 	ldw	r2,20(r16)
    1890:	80800215 	stw	r2,8(r16)
    1894:	003fed06 	br	184c <__swsetup_r+0x60>
    1898:	1809883a 	mov	r4,r3
    189c:	0001bc00 	call	1bc0 <__sinit>
    18a0:	003fde06 	br	181c <__swsetup_r+0x30>
    18a4:	20c0a00c 	andi	r3,r4,640
    18a8:	00808004 	movi	r2,512
    18ac:	18bfe026 	beq	r3,r2,1830 <__swsetup_r+0x44>
    18b0:	8809883a 	mov	r4,r17
    18b4:	800b883a 	mov	r5,r16
    18b8:	000240c0 	call	240c <__smakebuf_r>
    18bc:	8100030b 	ldhu	r4,12(r16)
    18c0:	81400417 	ldw	r5,16(r16)
    18c4:	003fda06 	br	1830 <__swsetup_r+0x44>
    18c8:	2080040c 	andi	r2,r4,16
    18cc:	103fed26 	beq	r2,zero,1884 <__swsetup_r+0x98>
    18d0:	2080010c 	andi	r2,r4,4
    18d4:	10001226 	beq	r2,zero,1920 <__swsetup_r+0x134>
    18d8:	81400c17 	ldw	r5,48(r16)
    18dc:	28000526 	beq	r5,zero,18f4 <__swsetup_r+0x108>
    18e0:	80801004 	addi	r2,r16,64
    18e4:	28800226 	beq	r5,r2,18f0 <__swsetup_r+0x104>
    18e8:	8809883a 	mov	r4,r17
    18ec:	0001f780 	call	1f78 <_free_r>
    18f0:	80000c15 	stw	zero,48(r16)
    18f4:	8080030b 	ldhu	r2,12(r16)
    18f8:	81400417 	ldw	r5,16(r16)
    18fc:	80000115 	stw	zero,4(r16)
    1900:	10bff6cc 	andi	r2,r2,65499
    1904:	8080030d 	sth	r2,12(r16)
    1908:	81400015 	stw	r5,0(r16)
    190c:	8080030b 	ldhu	r2,12(r16)
    1910:	10800214 	ori	r2,r2,8
    1914:	113fffcc 	andi	r4,r2,65535
    1918:	8080030d 	sth	r2,12(r16)
    191c:	003fc306 	br	182c <__swsetup_r+0x40>
    1920:	81400417 	ldw	r5,16(r16)
    1924:	003ff906 	br	190c <__swsetup_r+0x120>

00001928 <_fflush_r>:
    1928:	defffb04 	addi	sp,sp,-20
    192c:	dcc00315 	stw	r19,12(sp)
    1930:	dc800215 	stw	r18,8(sp)
    1934:	dfc00415 	stw	ra,16(sp)
    1938:	dc400115 	stw	r17,4(sp)
    193c:	dc000015 	stw	r16,0(sp)
    1940:	2027883a 	mov	r19,r4
    1944:	2825883a 	mov	r18,r5
    1948:	20000226 	beq	r4,zero,1954 <_fflush_r+0x2c>
    194c:	20800e17 	ldw	r2,56(r4)
    1950:	10005626 	beq	r2,zero,1aac <_fflush_r+0x184>
    1954:	9100030b 	ldhu	r4,12(r18)
    1958:	20ffffcc 	andi	r3,r4,65535
    195c:	18e0001c 	xori	r3,r3,32768
    1960:	18e00004 	addi	r3,r3,-32768
    1964:	1880020c 	andi	r2,r3,8
    1968:	1000261e 	bne	r2,zero,1a04 <_fflush_r+0xdc>
    196c:	90c00117 	ldw	r3,4(r18)
    1970:	20820014 	ori	r2,r4,2048
    1974:	9080030d 	sth	r2,12(r18)
    1978:	1009883a 	mov	r4,r2
    197c:	00c0400e 	bge	zero,r3,1a80 <_fflush_r+0x158>
    1980:	92000a17 	ldw	r8,40(r18)
    1984:	40004026 	beq	r8,zero,1a88 <_fflush_r+0x160>
    1988:	2084000c 	andi	r2,r4,4096
    198c:	10005326 	beq	r2,zero,1adc <_fflush_r+0x1b4>
    1990:	94001417 	ldw	r16,80(r18)
    1994:	9080030b 	ldhu	r2,12(r18)
    1998:	1080010c 	andi	r2,r2,4
    199c:	1000481e 	bne	r2,zero,1ac0 <_fflush_r+0x198>
    19a0:	91400717 	ldw	r5,28(r18)
    19a4:	9809883a 	mov	r4,r19
    19a8:	800d883a 	mov	r6,r16
    19ac:	000f883a 	mov	r7,zero
    19b0:	403ee83a 	callr	r8
    19b4:	8080261e 	bne	r16,r2,1a50 <_fflush_r+0x128>
    19b8:	9080030b 	ldhu	r2,12(r18)
    19bc:	91000417 	ldw	r4,16(r18)
    19c0:	90000115 	stw	zero,4(r18)
    19c4:	10bdffcc 	andi	r2,r2,63487
    19c8:	10ffffcc 	andi	r3,r2,65535
    19cc:	18c4000c 	andi	r3,r3,4096
    19d0:	9080030d 	sth	r2,12(r18)
    19d4:	91000015 	stw	r4,0(r18)
    19d8:	18002b26 	beq	r3,zero,1a88 <_fflush_r+0x160>
    19dc:	0007883a 	mov	r3,zero
    19e0:	1805883a 	mov	r2,r3
    19e4:	94001415 	stw	r16,80(r18)
    19e8:	dfc00417 	ldw	ra,16(sp)
    19ec:	dcc00317 	ldw	r19,12(sp)
    19f0:	dc800217 	ldw	r18,8(sp)
    19f4:	dc400117 	ldw	r17,4(sp)
    19f8:	dc000017 	ldw	r16,0(sp)
    19fc:	dec00504 	addi	sp,sp,20
    1a00:	f800283a 	ret
    1a04:	94400417 	ldw	r17,16(r18)
    1a08:	88001f26 	beq	r17,zero,1a88 <_fflush_r+0x160>
    1a0c:	90800017 	ldw	r2,0(r18)
    1a10:	18c000cc 	andi	r3,r3,3
    1a14:	94400015 	stw	r17,0(r18)
    1a18:	1461c83a 	sub	r16,r2,r17
    1a1c:	18002526 	beq	r3,zero,1ab4 <_fflush_r+0x18c>
    1a20:	0005883a 	mov	r2,zero
    1a24:	90800215 	stw	r2,8(r18)
    1a28:	0400170e 	bge	zero,r16,1a88 <_fflush_r+0x160>
    1a2c:	90c00917 	ldw	r3,36(r18)
    1a30:	91400717 	ldw	r5,28(r18)
    1a34:	880d883a 	mov	r6,r17
    1a38:	800f883a 	mov	r7,r16
    1a3c:	9809883a 	mov	r4,r19
    1a40:	183ee83a 	callr	r3
    1a44:	88a3883a 	add	r17,r17,r2
    1a48:	80a1c83a 	sub	r16,r16,r2
    1a4c:	00bff616 	blt	zero,r2,1a28 <_fflush_r+0x100>
    1a50:	9080030b 	ldhu	r2,12(r18)
    1a54:	00ffffc4 	movi	r3,-1
    1a58:	10801014 	ori	r2,r2,64
    1a5c:	9080030d 	sth	r2,12(r18)
    1a60:	1805883a 	mov	r2,r3
    1a64:	dfc00417 	ldw	ra,16(sp)
    1a68:	dcc00317 	ldw	r19,12(sp)
    1a6c:	dc800217 	ldw	r18,8(sp)
    1a70:	dc400117 	ldw	r17,4(sp)
    1a74:	dc000017 	ldw	r16,0(sp)
    1a78:	dec00504 	addi	sp,sp,20
    1a7c:	f800283a 	ret
    1a80:	90800f17 	ldw	r2,60(r18)
    1a84:	00bfbe16 	blt	zero,r2,1980 <_fflush_r+0x58>
    1a88:	0007883a 	mov	r3,zero
    1a8c:	1805883a 	mov	r2,r3
    1a90:	dfc00417 	ldw	ra,16(sp)
    1a94:	dcc00317 	ldw	r19,12(sp)
    1a98:	dc800217 	ldw	r18,8(sp)
    1a9c:	dc400117 	ldw	r17,4(sp)
    1aa0:	dc000017 	ldw	r16,0(sp)
    1aa4:	dec00504 	addi	sp,sp,20
    1aa8:	f800283a 	ret
    1aac:	0001bc00 	call	1bc0 <__sinit>
    1ab0:	003fa806 	br	1954 <_fflush_r+0x2c>
    1ab4:	90800517 	ldw	r2,20(r18)
    1ab8:	90800215 	stw	r2,8(r18)
    1abc:	003fda06 	br	1a28 <_fflush_r+0x100>
    1ac0:	90800117 	ldw	r2,4(r18)
    1ac4:	90c00c17 	ldw	r3,48(r18)
    1ac8:	80a1c83a 	sub	r16,r16,r2
    1acc:	183fb426 	beq	r3,zero,19a0 <_fflush_r+0x78>
    1ad0:	90800f17 	ldw	r2,60(r18)
    1ad4:	80a1c83a 	sub	r16,r16,r2
    1ad8:	003fb106 	br	19a0 <_fflush_r+0x78>
    1adc:	91400717 	ldw	r5,28(r18)
    1ae0:	9809883a 	mov	r4,r19
    1ae4:	000d883a 	mov	r6,zero
    1ae8:	01c00044 	movi	r7,1
    1aec:	403ee83a 	callr	r8
    1af0:	1021883a 	mov	r16,r2
    1af4:	00bfffc4 	movi	r2,-1
    1af8:	80800226 	beq	r16,r2,1b04 <_fflush_r+0x1dc>
    1afc:	92000a17 	ldw	r8,40(r18)
    1b00:	003fa406 	br	1994 <_fflush_r+0x6c>
    1b04:	98c00017 	ldw	r3,0(r19)
    1b08:	00800744 	movi	r2,29
    1b0c:	18bfde26 	beq	r3,r2,1a88 <_fflush_r+0x160>
    1b10:	9080030b 	ldhu	r2,12(r18)
    1b14:	8007883a 	mov	r3,r16
    1b18:	10801014 	ori	r2,r2,64
    1b1c:	9080030d 	sth	r2,12(r18)
    1b20:	003fcf06 	br	1a60 <_fflush_r+0x138>

00001b24 <fflush>:
    1b24:	01400034 	movhi	r5,0
    1b28:	29464a04 	addi	r5,r5,6440
    1b2c:	2007883a 	mov	r3,r4
    1b30:	20000526 	beq	r4,zero,1b48 <fflush+0x24>
    1b34:	00800074 	movhi	r2,1
    1b38:	10a49b04 	addi	r2,r2,-28052
    1b3c:	11000017 	ldw	r4,0(r2)
    1b40:	180b883a 	mov	r5,r3
    1b44:	00019281 	jmpi	1928 <_fflush_r>
    1b48:	00800074 	movhi	r2,1
    1b4c:	10a49c04 	addi	r2,r2,-28048
    1b50:	11000017 	ldw	r4,0(r2)
    1b54:	000228c1 	jmpi	228c <_fwalk_reent>

00001b58 <std>:
    1b58:	00800034 	movhi	r2,0
    1b5c:	10898e04 	addi	r2,r2,9784
    1b60:	20800b15 	stw	r2,44(r4)
    1b64:	00800034 	movhi	r2,0
    1b68:	1089c904 	addi	r2,r2,10020
    1b6c:	20800815 	stw	r2,32(r4)
    1b70:	00c00034 	movhi	r3,0
    1b74:	18c9aa04 	addi	r3,r3,9896
    1b78:	00800034 	movhi	r2,0
    1b7c:	10899004 	addi	r2,r2,9792
    1b80:	2140030d 	sth	r5,12(r4)
    1b84:	2180038d 	sth	r6,14(r4)
    1b88:	20c00915 	stw	r3,36(r4)
    1b8c:	20800a15 	stw	r2,40(r4)
    1b90:	20000015 	stw	zero,0(r4)
    1b94:	20000115 	stw	zero,4(r4)
    1b98:	20000215 	stw	zero,8(r4)
    1b9c:	20000415 	stw	zero,16(r4)
    1ba0:	20000515 	stw	zero,20(r4)
    1ba4:	20000615 	stw	zero,24(r4)
    1ba8:	21000715 	stw	r4,28(r4)
    1bac:	f800283a 	ret

00001bb0 <__sfp_lock_acquire>:
    1bb0:	f800283a 	ret

00001bb4 <__sfp_lock_release>:
    1bb4:	f800283a 	ret

00001bb8 <__sinit_lock_acquire>:
    1bb8:	f800283a 	ret

00001bbc <__sinit_lock_release>:
    1bbc:	f800283a 	ret

00001bc0 <__sinit>:
    1bc0:	20800e17 	ldw	r2,56(r4)
    1bc4:	defffd04 	addi	sp,sp,-12
    1bc8:	dc400115 	stw	r17,4(sp)
    1bcc:	dc000015 	stw	r16,0(sp)
    1bd0:	dfc00215 	stw	ra,8(sp)
    1bd4:	04400044 	movi	r17,1
    1bd8:	01400104 	movi	r5,4
    1bdc:	000d883a 	mov	r6,zero
    1be0:	2021883a 	mov	r16,r4
    1be4:	2200bb04 	addi	r8,r4,748
    1be8:	200f883a 	mov	r7,r4
    1bec:	10000526 	beq	r2,zero,1c04 <__sinit+0x44>
    1bf0:	dfc00217 	ldw	ra,8(sp)
    1bf4:	dc400117 	ldw	r17,4(sp)
    1bf8:	dc000017 	ldw	r16,0(sp)
    1bfc:	dec00304 	addi	sp,sp,12
    1c00:	f800283a 	ret
    1c04:	21000117 	ldw	r4,4(r4)
    1c08:	00800034 	movhi	r2,0
    1c0c:	10872904 	addi	r2,r2,7332
    1c10:	00c000c4 	movi	r3,3
    1c14:	80800f15 	stw	r2,60(r16)
    1c18:	80c0b915 	stw	r3,740(r16)
    1c1c:	8200ba15 	stw	r8,744(r16)
    1c20:	84400e15 	stw	r17,56(r16)
    1c24:	8000b815 	stw	zero,736(r16)
    1c28:	0001b580 	call	1b58 <std>
    1c2c:	81000217 	ldw	r4,8(r16)
    1c30:	880d883a 	mov	r6,r17
    1c34:	800f883a 	mov	r7,r16
    1c38:	01400284 	movi	r5,10
    1c3c:	0001b580 	call	1b58 <std>
    1c40:	81000317 	ldw	r4,12(r16)
    1c44:	800f883a 	mov	r7,r16
    1c48:	01400484 	movi	r5,18
    1c4c:	01800084 	movi	r6,2
    1c50:	dfc00217 	ldw	ra,8(sp)
    1c54:	dc400117 	ldw	r17,4(sp)
    1c58:	dc000017 	ldw	r16,0(sp)
    1c5c:	dec00304 	addi	sp,sp,12
    1c60:	0001b581 	jmpi	1b58 <std>

00001c64 <__fp_lock>:
    1c64:	0005883a 	mov	r2,zero
    1c68:	f800283a 	ret

00001c6c <__fp_unlock>:
    1c6c:	0005883a 	mov	r2,zero
    1c70:	f800283a 	ret

00001c74 <__fp_unlock_all>:
    1c74:	00800074 	movhi	r2,1
    1c78:	10a49b04 	addi	r2,r2,-28052
    1c7c:	11000017 	ldw	r4,0(r2)
    1c80:	01400034 	movhi	r5,0
    1c84:	29471b04 	addi	r5,r5,7276
    1c88:	00023541 	jmpi	2354 <_fwalk>

00001c8c <__fp_lock_all>:
    1c8c:	00800074 	movhi	r2,1
    1c90:	10a49b04 	addi	r2,r2,-28052
    1c94:	11000017 	ldw	r4,0(r2)
    1c98:	01400034 	movhi	r5,0
    1c9c:	29471904 	addi	r5,r5,7268
    1ca0:	00023541 	jmpi	2354 <_fwalk>

00001ca4 <_cleanup_r>:
    1ca4:	01400034 	movhi	r5,0
    1ca8:	294a5f04 	addi	r5,r5,10620
    1cac:	00023541 	jmpi	2354 <_fwalk>

00001cb0 <_cleanup>:
    1cb0:	00800074 	movhi	r2,1
    1cb4:	10a49c04 	addi	r2,r2,-28048
    1cb8:	11000017 	ldw	r4,0(r2)
    1cbc:	0001ca41 	jmpi	1ca4 <_cleanup_r>

00001cc0 <__sfmoreglue>:
    1cc0:	defffc04 	addi	sp,sp,-16
    1cc4:	dc000015 	stw	r16,0(sp)
    1cc8:	2821883a 	mov	r16,r5
    1ccc:	dc400115 	stw	r17,4(sp)
    1cd0:	01401704 	movi	r5,92
    1cd4:	2023883a 	mov	r17,r4
    1cd8:	8009883a 	mov	r4,r16
    1cdc:	dfc00315 	stw	ra,12(sp)
    1ce0:	dcc00215 	stw	r19,8(sp)
    1ce4:	0002b640 	call	2b64 <__mulsi3>
    1ce8:	11400304 	addi	r5,r2,12
    1cec:	8809883a 	mov	r4,r17
    1cf0:	1027883a 	mov	r19,r2
    1cf4:	00007e40 	call	7e4 <_malloc_r>
    1cf8:	10c00304 	addi	r3,r2,12
    1cfc:	1023883a 	mov	r17,r2
    1d00:	1809883a 	mov	r4,r3
    1d04:	980d883a 	mov	r6,r19
    1d08:	000b883a 	mov	r5,zero
    1d0c:	10000b26 	beq	r2,zero,1d3c <__sfmoreglue+0x7c>
    1d10:	14000115 	stw	r16,4(r2)
    1d14:	10c00215 	stw	r3,8(r2)
    1d18:	10000015 	stw	zero,0(r2)
    1d1c:	00025a00 	call	25a0 <memset>
    1d20:	8805883a 	mov	r2,r17
    1d24:	dfc00317 	ldw	ra,12(sp)
    1d28:	dcc00217 	ldw	r19,8(sp)
    1d2c:	dc400117 	ldw	r17,4(sp)
    1d30:	dc000017 	ldw	r16,0(sp)
    1d34:	dec00404 	addi	sp,sp,16
    1d38:	f800283a 	ret
    1d3c:	0023883a 	mov	r17,zero
    1d40:	8805883a 	mov	r2,r17
    1d44:	dfc00317 	ldw	ra,12(sp)
    1d48:	dcc00217 	ldw	r19,8(sp)
    1d4c:	dc400117 	ldw	r17,4(sp)
    1d50:	dc000017 	ldw	r16,0(sp)
    1d54:	dec00404 	addi	sp,sp,16
    1d58:	f800283a 	ret

00001d5c <__sfp>:
    1d5c:	defffd04 	addi	sp,sp,-12
    1d60:	00800074 	movhi	r2,1
    1d64:	10a49c04 	addi	r2,r2,-28048
    1d68:	dc000015 	stw	r16,0(sp)
    1d6c:	14000017 	ldw	r16,0(r2)
    1d70:	dc400115 	stw	r17,4(sp)
    1d74:	dfc00215 	stw	ra,8(sp)
    1d78:	80800e17 	ldw	r2,56(r16)
    1d7c:	2023883a 	mov	r17,r4
    1d80:	10002626 	beq	r2,zero,1e1c <__sfp+0xc0>
    1d84:	8400b804 	addi	r16,r16,736
    1d88:	80800117 	ldw	r2,4(r16)
    1d8c:	81000217 	ldw	r4,8(r16)
    1d90:	10ffffc4 	addi	r3,r2,-1
    1d94:	18000916 	blt	r3,zero,1dbc <__sfp+0x60>
    1d98:	2080030f 	ldh	r2,12(r4)
    1d9c:	10000b26 	beq	r2,zero,1dcc <__sfp+0x70>
    1da0:	017fffc4 	movi	r5,-1
    1da4:	00000206 	br	1db0 <__sfp+0x54>
    1da8:	2080030f 	ldh	r2,12(r4)
    1dac:	10000726 	beq	r2,zero,1dcc <__sfp+0x70>
    1db0:	18ffffc4 	addi	r3,r3,-1
    1db4:	21001704 	addi	r4,r4,92
    1db8:	197ffb1e 	bne	r3,r5,1da8 <__sfp+0x4c>
    1dbc:	80800017 	ldw	r2,0(r16)
    1dc0:	10001926 	beq	r2,zero,1e28 <__sfp+0xcc>
    1dc4:	1021883a 	mov	r16,r2
    1dc8:	003fef06 	br	1d88 <__sfp+0x2c>
    1dcc:	00bfffc4 	movi	r2,-1
    1dd0:	00c00044 	movi	r3,1
    1dd4:	2080038d 	sth	r2,14(r4)
    1dd8:	20c0030d 	sth	r3,12(r4)
    1ddc:	20000015 	stw	zero,0(r4)
    1de0:	20000215 	stw	zero,8(r4)
    1de4:	20000115 	stw	zero,4(r4)
    1de8:	20000415 	stw	zero,16(r4)
    1dec:	20000515 	stw	zero,20(r4)
    1df0:	20000615 	stw	zero,24(r4)
    1df4:	20000c15 	stw	zero,48(r4)
    1df8:	20000d15 	stw	zero,52(r4)
    1dfc:	20001115 	stw	zero,68(r4)
    1e00:	20001215 	stw	zero,72(r4)
    1e04:	2005883a 	mov	r2,r4
    1e08:	dfc00217 	ldw	ra,8(sp)
    1e0c:	dc400117 	ldw	r17,4(sp)
    1e10:	dc000017 	ldw	r16,0(sp)
    1e14:	dec00304 	addi	sp,sp,12
    1e18:	f800283a 	ret
    1e1c:	8009883a 	mov	r4,r16
    1e20:	0001bc00 	call	1bc0 <__sinit>
    1e24:	003fd706 	br	1d84 <__sfp+0x28>
    1e28:	8809883a 	mov	r4,r17
    1e2c:	01400104 	movi	r5,4
    1e30:	0001cc00 	call	1cc0 <__sfmoreglue>
    1e34:	80800015 	stw	r2,0(r16)
    1e38:	103fe21e 	bne	r2,zero,1dc4 <__sfp+0x68>
    1e3c:	00800304 	movi	r2,12
    1e40:	0009883a 	mov	r4,zero
    1e44:	88800015 	stw	r2,0(r17)
    1e48:	003fee06 	br	1e04 <__sfp+0xa8>

00001e4c <_malloc_trim_r>:
    1e4c:	defffb04 	addi	sp,sp,-20
    1e50:	dcc00315 	stw	r19,12(sp)
    1e54:	04c00034 	movhi	r19,0
    1e58:	9cddf004 	addi	r19,r19,30656
    1e5c:	dc800215 	stw	r18,8(sp)
    1e60:	dc400115 	stw	r17,4(sp)
    1e64:	dc000015 	stw	r16,0(sp)
    1e68:	2823883a 	mov	r17,r5
    1e6c:	2025883a 	mov	r18,r4
    1e70:	dfc00415 	stw	ra,16(sp)
    1e74:	00031440 	call	3144 <__malloc_lock>
    1e78:	98800217 	ldw	r2,8(r19)
    1e7c:	9009883a 	mov	r4,r18
    1e80:	000b883a 	mov	r5,zero
    1e84:	10c00117 	ldw	r3,4(r2)
    1e88:	00bfff04 	movi	r2,-4
    1e8c:	18a0703a 	and	r16,r3,r2
    1e90:	8463c83a 	sub	r17,r16,r17
    1e94:	8c43fbc4 	addi	r17,r17,4079
    1e98:	8822d33a 	srli	r17,r17,12
    1e9c:	0083ffc4 	movi	r2,4095
    1ea0:	8c7fffc4 	addi	r17,r17,-1
    1ea4:	8822933a 	slli	r17,r17,12
    1ea8:	1440060e 	bge	r2,r17,1ec4 <_malloc_trim_r+0x78>
    1eac:	000177c0 	call	177c <_sbrk_r>
    1eb0:	98c00217 	ldw	r3,8(r19)
    1eb4:	9009883a 	mov	r4,r18
    1eb8:	044bc83a 	sub	r5,zero,r17
    1ebc:	80c7883a 	add	r3,r16,r3
    1ec0:	10c00926 	beq	r2,r3,1ee8 <_malloc_trim_r+0x9c>
    1ec4:	00031640 	call	3164 <__malloc_unlock>
    1ec8:	0005883a 	mov	r2,zero
    1ecc:	dfc00417 	ldw	ra,16(sp)
    1ed0:	dcc00317 	ldw	r19,12(sp)
    1ed4:	dc800217 	ldw	r18,8(sp)
    1ed8:	dc400117 	ldw	r17,4(sp)
    1edc:	dc000017 	ldw	r16,0(sp)
    1ee0:	dec00504 	addi	sp,sp,20
    1ee4:	f800283a 	ret
    1ee8:	9009883a 	mov	r4,r18
    1eec:	000177c0 	call	177c <_sbrk_r>
    1ef0:	844dc83a 	sub	r6,r16,r17
    1ef4:	00ffffc4 	movi	r3,-1
    1ef8:	9009883a 	mov	r4,r18
    1efc:	000b883a 	mov	r5,zero
    1f00:	01c00074 	movhi	r7,1
    1f04:	39e4b504 	addi	r7,r7,-27948
    1f08:	31800054 	ori	r6,r6,1
    1f0c:	10c00926 	beq	r2,r3,1f34 <_malloc_trim_r+0xe8>
    1f10:	38800017 	ldw	r2,0(r7)
    1f14:	98c00217 	ldw	r3,8(r19)
    1f18:	9009883a 	mov	r4,r18
    1f1c:	1445c83a 	sub	r2,r2,r17
    1f20:	38800015 	stw	r2,0(r7)
    1f24:	19800115 	stw	r6,4(r3)
    1f28:	00031640 	call	3164 <__malloc_unlock>
    1f2c:	00800044 	movi	r2,1
    1f30:	003fe606 	br	1ecc <_malloc_trim_r+0x80>
    1f34:	000177c0 	call	177c <_sbrk_r>
    1f38:	99800217 	ldw	r6,8(r19)
    1f3c:	100f883a 	mov	r7,r2
    1f40:	9009883a 	mov	r4,r18
    1f44:	1187c83a 	sub	r3,r2,r6
    1f48:	008003c4 	movi	r2,15
    1f4c:	19400054 	ori	r5,r3,1
    1f50:	10ffdc0e 	bge	r2,r3,1ec4 <_malloc_trim_r+0x78>
    1f54:	00800074 	movhi	r2,1
    1f58:	10a49e04 	addi	r2,r2,-28040
    1f5c:	10c00017 	ldw	r3,0(r2)
    1f60:	00800074 	movhi	r2,1
    1f64:	10a4b504 	addi	r2,r2,-27948
    1f68:	31400115 	stw	r5,4(r6)
    1f6c:	38c7c83a 	sub	r3,r7,r3
    1f70:	10c00015 	stw	r3,0(r2)
    1f74:	003fd306 	br	1ec4 <_malloc_trim_r+0x78>

00001f78 <_free_r>:
    1f78:	defffd04 	addi	sp,sp,-12
    1f7c:	dc400115 	stw	r17,4(sp)
    1f80:	dc000015 	stw	r16,0(sp)
    1f84:	dfc00215 	stw	ra,8(sp)
    1f88:	2821883a 	mov	r16,r5
    1f8c:	2023883a 	mov	r17,r4
    1f90:	28005a26 	beq	r5,zero,20fc <_free_r+0x184>
    1f94:	00031440 	call	3144 <__malloc_lock>
    1f98:	823ffe04 	addi	r8,r16,-8
    1f9c:	41400117 	ldw	r5,4(r8)
    1fa0:	00bfff84 	movi	r2,-2
    1fa4:	02800034 	movhi	r10,0
    1fa8:	529df004 	addi	r10,r10,30656
    1fac:	288e703a 	and	r7,r5,r2
    1fb0:	41cd883a 	add	r6,r8,r7
    1fb4:	30c00117 	ldw	r3,4(r6)
    1fb8:	51000217 	ldw	r4,8(r10)
    1fbc:	00bfff04 	movi	r2,-4
    1fc0:	1892703a 	and	r9,r3,r2
    1fc4:	5017883a 	mov	r11,r10
    1fc8:	31006726 	beq	r6,r4,2168 <_free_r+0x1f0>
    1fcc:	2880004c 	andi	r2,r5,1
    1fd0:	1005003a 	cmpeq	r2,r2,zero
    1fd4:	32400115 	stw	r9,4(r6)
    1fd8:	10001a1e 	bne	r2,zero,2044 <_free_r+0xcc>
    1fdc:	000b883a 	mov	r5,zero
    1fe0:	3247883a 	add	r3,r6,r9
    1fe4:	18800117 	ldw	r2,4(r3)
    1fe8:	1080004c 	andi	r2,r2,1
    1fec:	1000231e 	bne	r2,zero,207c <_free_r+0x104>
    1ff0:	280ac03a 	cmpne	r5,r5,zero
    1ff4:	3a4f883a 	add	r7,r7,r9
    1ff8:	2800451e 	bne	r5,zero,2110 <_free_r+0x198>
    1ffc:	31000217 	ldw	r4,8(r6)
    2000:	00800034 	movhi	r2,0
    2004:	109df204 	addi	r2,r2,30664
    2008:	20807b26 	beq	r4,r2,21f8 <_free_r+0x280>
    200c:	30800317 	ldw	r2,12(r6)
    2010:	3a07883a 	add	r3,r7,r8
    2014:	19c00015 	stw	r7,0(r3)
    2018:	11000215 	stw	r4,8(r2)
    201c:	20800315 	stw	r2,12(r4)
    2020:	38800054 	ori	r2,r7,1
    2024:	40800115 	stw	r2,4(r8)
    2028:	28001a26 	beq	r5,zero,2094 <_free_r+0x11c>
    202c:	8809883a 	mov	r4,r17
    2030:	dfc00217 	ldw	ra,8(sp)
    2034:	dc400117 	ldw	r17,4(sp)
    2038:	dc000017 	ldw	r16,0(sp)
    203c:	dec00304 	addi	sp,sp,12
    2040:	00031641 	jmpi	3164 <__malloc_unlock>
    2044:	80bffe17 	ldw	r2,-8(r16)
    2048:	50c00204 	addi	r3,r10,8
    204c:	4091c83a 	sub	r8,r8,r2
    2050:	41000217 	ldw	r4,8(r8)
    2054:	388f883a 	add	r7,r7,r2
    2058:	20c06126 	beq	r4,r3,21e0 <_free_r+0x268>
    205c:	40800317 	ldw	r2,12(r8)
    2060:	3247883a 	add	r3,r6,r9
    2064:	000b883a 	mov	r5,zero
    2068:	11000215 	stw	r4,8(r2)
    206c:	20800315 	stw	r2,12(r4)
    2070:	18800117 	ldw	r2,4(r3)
    2074:	1080004c 	andi	r2,r2,1
    2078:	103fdd26 	beq	r2,zero,1ff0 <_free_r+0x78>
    207c:	38800054 	ori	r2,r7,1
    2080:	3a07883a 	add	r3,r7,r8
    2084:	280ac03a 	cmpne	r5,r5,zero
    2088:	40800115 	stw	r2,4(r8)
    208c:	19c00015 	stw	r7,0(r3)
    2090:	283fe61e 	bne	r5,zero,202c <_free_r+0xb4>
    2094:	00807fc4 	movi	r2,511
    2098:	11c01f2e 	bgeu	r2,r7,2118 <_free_r+0x1a0>
    209c:	3806d27a 	srli	r3,r7,9
    20a0:	1800481e 	bne	r3,zero,21c4 <_free_r+0x24c>
    20a4:	3804d0fa 	srli	r2,r7,3
    20a8:	100690fa 	slli	r3,r2,3
    20ac:	1acd883a 	add	r6,r3,r11
    20b0:	31400217 	ldw	r5,8(r6)
    20b4:	31405926 	beq	r6,r5,221c <_free_r+0x2a4>
    20b8:	28800117 	ldw	r2,4(r5)
    20bc:	00ffff04 	movi	r3,-4
    20c0:	10c4703a 	and	r2,r2,r3
    20c4:	3880022e 	bgeu	r7,r2,20d0 <_free_r+0x158>
    20c8:	29400217 	ldw	r5,8(r5)
    20cc:	317ffa1e 	bne	r6,r5,20b8 <_free_r+0x140>
    20d0:	29800317 	ldw	r6,12(r5)
    20d4:	41800315 	stw	r6,12(r8)
    20d8:	41400215 	stw	r5,8(r8)
    20dc:	8809883a 	mov	r4,r17
    20e0:	2a000315 	stw	r8,12(r5)
    20e4:	32000215 	stw	r8,8(r6)
    20e8:	dfc00217 	ldw	ra,8(sp)
    20ec:	dc400117 	ldw	r17,4(sp)
    20f0:	dc000017 	ldw	r16,0(sp)
    20f4:	dec00304 	addi	sp,sp,12
    20f8:	00031641 	jmpi	3164 <__malloc_unlock>
    20fc:	dfc00217 	ldw	ra,8(sp)
    2100:	dc400117 	ldw	r17,4(sp)
    2104:	dc000017 	ldw	r16,0(sp)
    2108:	dec00304 	addi	sp,sp,12
    210c:	f800283a 	ret
    2110:	31000217 	ldw	r4,8(r6)
    2114:	003fbd06 	br	200c <_free_r+0x94>
    2118:	3806d0fa 	srli	r3,r7,3
    211c:	00800044 	movi	r2,1
    2120:	51400117 	ldw	r5,4(r10)
    2124:	180890fa 	slli	r4,r3,3
    2128:	1807d0ba 	srai	r3,r3,2
    212c:	22c9883a 	add	r4,r4,r11
    2130:	21800217 	ldw	r6,8(r4)
    2134:	10c4983a 	sll	r2,r2,r3
    2138:	41000315 	stw	r4,12(r8)
    213c:	41800215 	stw	r6,8(r8)
    2140:	288ab03a 	or	r5,r5,r2
    2144:	22000215 	stw	r8,8(r4)
    2148:	8809883a 	mov	r4,r17
    214c:	51400115 	stw	r5,4(r10)
    2150:	32000315 	stw	r8,12(r6)
    2154:	dfc00217 	ldw	ra,8(sp)
    2158:	dc400117 	ldw	r17,4(sp)
    215c:	dc000017 	ldw	r16,0(sp)
    2160:	dec00304 	addi	sp,sp,12
    2164:	00031641 	jmpi	3164 <__malloc_unlock>
    2168:	2880004c 	andi	r2,r5,1
    216c:	3a4d883a 	add	r6,r7,r9
    2170:	1000071e 	bne	r2,zero,2190 <_free_r+0x218>
    2174:	80bffe17 	ldw	r2,-8(r16)
    2178:	4091c83a 	sub	r8,r8,r2
    217c:	41000317 	ldw	r4,12(r8)
    2180:	40c00217 	ldw	r3,8(r8)
    2184:	308d883a 	add	r6,r6,r2
    2188:	20c00215 	stw	r3,8(r4)
    218c:	19000315 	stw	r4,12(r3)
    2190:	00800074 	movhi	r2,1
    2194:	10a49d04 	addi	r2,r2,-28044
    2198:	11000017 	ldw	r4,0(r2)
    219c:	30c00054 	ori	r3,r6,1
    21a0:	52000215 	stw	r8,8(r10)
    21a4:	40c00115 	stw	r3,4(r8)
    21a8:	313fa036 	bltu	r6,r4,202c <_free_r+0xb4>
    21ac:	00800074 	movhi	r2,1
    21b0:	10a4ab04 	addi	r2,r2,-27988
    21b4:	11400017 	ldw	r5,0(r2)
    21b8:	8809883a 	mov	r4,r17
    21bc:	0001e4c0 	call	1e4c <_malloc_trim_r>
    21c0:	003f9a06 	br	202c <_free_r+0xb4>
    21c4:	00800104 	movi	r2,4
    21c8:	10c0072e 	bgeu	r2,r3,21e8 <_free_r+0x270>
    21cc:	00800504 	movi	r2,20
    21d0:	10c01936 	bltu	r2,r3,2238 <_free_r+0x2c0>
    21d4:	188016c4 	addi	r2,r3,91
    21d8:	100690fa 	slli	r3,r2,3
    21dc:	003fb306 	br	20ac <_free_r+0x134>
    21e0:	01400044 	movi	r5,1
    21e4:	003f7e06 	br	1fe0 <_free_r+0x68>
    21e8:	3804d1ba 	srli	r2,r7,6
    21ec:	10800e04 	addi	r2,r2,56
    21f0:	100690fa 	slli	r3,r2,3
    21f4:	003fad06 	br	20ac <_free_r+0x134>
    21f8:	22000315 	stw	r8,12(r4)
    21fc:	22000215 	stw	r8,8(r4)
    2200:	3a05883a 	add	r2,r7,r8
    2204:	38c00054 	ori	r3,r7,1
    2208:	11c00015 	stw	r7,0(r2)
    220c:	41000215 	stw	r4,8(r8)
    2210:	40c00115 	stw	r3,4(r8)
    2214:	41000315 	stw	r4,12(r8)
    2218:	003f8406 	br	202c <_free_r+0xb4>
    221c:	1005d0ba 	srai	r2,r2,2
    2220:	00c00044 	movi	r3,1
    2224:	51000117 	ldw	r4,4(r10)
    2228:	1886983a 	sll	r3,r3,r2
    222c:	20c8b03a 	or	r4,r4,r3
    2230:	51000115 	stw	r4,4(r10)
    2234:	003fa706 	br	20d4 <_free_r+0x15c>
    2238:	00801504 	movi	r2,84
    223c:	10c00436 	bltu	r2,r3,2250 <_free_r+0x2d8>
    2240:	3804d33a 	srli	r2,r7,12
    2244:	10801b84 	addi	r2,r2,110
    2248:	100690fa 	slli	r3,r2,3
    224c:	003f9706 	br	20ac <_free_r+0x134>
    2250:	00805504 	movi	r2,340
    2254:	10c00436 	bltu	r2,r3,2268 <_free_r+0x2f0>
    2258:	3804d3fa 	srli	r2,r7,15
    225c:	10801dc4 	addi	r2,r2,119
    2260:	100690fa 	slli	r3,r2,3
    2264:	003f9106 	br	20ac <_free_r+0x134>
    2268:	00815504 	movi	r2,1364
    226c:	10c0032e 	bgeu	r2,r3,227c <_free_r+0x304>
    2270:	00801f84 	movi	r2,126
    2274:	00c0fc04 	movi	r3,1008
    2278:	003f8c06 	br	20ac <_free_r+0x134>
    227c:	3804d4ba 	srli	r2,r7,18
    2280:	10801f04 	addi	r2,r2,124
    2284:	100690fa 	slli	r3,r2,3
    2288:	003f8806 	br	20ac <_free_r+0x134>

0000228c <_fwalk_reent>:
    228c:	defff704 	addi	sp,sp,-36
    2290:	dcc00315 	stw	r19,12(sp)
    2294:	24c0b804 	addi	r19,r4,736
    2298:	dd800615 	stw	r22,24(sp)
    229c:	dd400515 	stw	r21,20(sp)
    22a0:	dfc00815 	stw	ra,32(sp)
    22a4:	ddc00715 	stw	r23,28(sp)
    22a8:	dd000415 	stw	r20,16(sp)
    22ac:	dc800215 	stw	r18,8(sp)
    22b0:	dc400115 	stw	r17,4(sp)
    22b4:	dc000015 	stw	r16,0(sp)
    22b8:	202b883a 	mov	r21,r4
    22bc:	282d883a 	mov	r22,r5
    22c0:	0001bb00 	call	1bb0 <__sfp_lock_acquire>
    22c4:	98002126 	beq	r19,zero,234c <_fwalk_reent+0xc0>
    22c8:	002f883a 	mov	r23,zero
    22cc:	9c800117 	ldw	r18,4(r19)
    22d0:	9c000217 	ldw	r16,8(r19)
    22d4:	90bfffc4 	addi	r2,r18,-1
    22d8:	10000d16 	blt	r2,zero,2310 <_fwalk_reent+0x84>
    22dc:	0023883a 	mov	r17,zero
    22e0:	053fffc4 	movi	r20,-1
    22e4:	8080030f 	ldh	r2,12(r16)
    22e8:	8c400044 	addi	r17,r17,1
    22ec:	10000626 	beq	r2,zero,2308 <_fwalk_reent+0x7c>
    22f0:	8080038f 	ldh	r2,14(r16)
    22f4:	800b883a 	mov	r5,r16
    22f8:	a809883a 	mov	r4,r21
    22fc:	15000226 	beq	r2,r20,2308 <_fwalk_reent+0x7c>
    2300:	b03ee83a 	callr	r22
    2304:	b8aeb03a 	or	r23,r23,r2
    2308:	84001704 	addi	r16,r16,92
    230c:	947ff51e 	bne	r18,r17,22e4 <_fwalk_reent+0x58>
    2310:	9cc00017 	ldw	r19,0(r19)
    2314:	983fed1e 	bne	r19,zero,22cc <_fwalk_reent+0x40>
    2318:	0001bb40 	call	1bb4 <__sfp_lock_release>
    231c:	b805883a 	mov	r2,r23
    2320:	dfc00817 	ldw	ra,32(sp)
    2324:	ddc00717 	ldw	r23,28(sp)
    2328:	dd800617 	ldw	r22,24(sp)
    232c:	dd400517 	ldw	r21,20(sp)
    2330:	dd000417 	ldw	r20,16(sp)
    2334:	dcc00317 	ldw	r19,12(sp)
    2338:	dc800217 	ldw	r18,8(sp)
    233c:	dc400117 	ldw	r17,4(sp)
    2340:	dc000017 	ldw	r16,0(sp)
    2344:	dec00904 	addi	sp,sp,36
    2348:	f800283a 	ret
    234c:	002f883a 	mov	r23,zero
    2350:	003ff106 	br	2318 <_fwalk_reent+0x8c>

00002354 <_fwalk>:
    2354:	defff804 	addi	sp,sp,-32
    2358:	dcc00315 	stw	r19,12(sp)
    235c:	24c0b804 	addi	r19,r4,736
    2360:	dd400515 	stw	r21,20(sp)
    2364:	dfc00715 	stw	ra,28(sp)
    2368:	dd800615 	stw	r22,24(sp)
    236c:	dd000415 	stw	r20,16(sp)
    2370:	dc800215 	stw	r18,8(sp)
    2374:	dc400115 	stw	r17,4(sp)
    2378:	dc000015 	stw	r16,0(sp)
    237c:	282b883a 	mov	r21,r5
    2380:	0001bb00 	call	1bb0 <__sfp_lock_acquire>
    2384:	98001f26 	beq	r19,zero,2404 <_fwalk+0xb0>
    2388:	002d883a 	mov	r22,zero
    238c:	9c800117 	ldw	r18,4(r19)
    2390:	9c000217 	ldw	r16,8(r19)
    2394:	90bfffc4 	addi	r2,r18,-1
    2398:	10000c16 	blt	r2,zero,23cc <_fwalk+0x78>
    239c:	0023883a 	mov	r17,zero
    23a0:	053fffc4 	movi	r20,-1
    23a4:	8080030f 	ldh	r2,12(r16)
    23a8:	8c400044 	addi	r17,r17,1
    23ac:	10000526 	beq	r2,zero,23c4 <_fwalk+0x70>
    23b0:	8080038f 	ldh	r2,14(r16)
    23b4:	8009883a 	mov	r4,r16
    23b8:	15000226 	beq	r2,r20,23c4 <_fwalk+0x70>
    23bc:	a83ee83a 	callr	r21
    23c0:	b0acb03a 	or	r22,r22,r2
    23c4:	84001704 	addi	r16,r16,92
    23c8:	947ff61e 	bne	r18,r17,23a4 <_fwalk+0x50>
    23cc:	9cc00017 	ldw	r19,0(r19)
    23d0:	983fee1e 	bne	r19,zero,238c <_fwalk+0x38>
    23d4:	0001bb40 	call	1bb4 <__sfp_lock_release>
    23d8:	b005883a 	mov	r2,r22
    23dc:	dfc00717 	ldw	ra,28(sp)
    23e0:	dd800617 	ldw	r22,24(sp)
    23e4:	dd400517 	ldw	r21,20(sp)
    23e8:	dd000417 	ldw	r20,16(sp)
    23ec:	dcc00317 	ldw	r19,12(sp)
    23f0:	dc800217 	ldw	r18,8(sp)
    23f4:	dc400117 	ldw	r17,4(sp)
    23f8:	dc000017 	ldw	r16,0(sp)
    23fc:	dec00804 	addi	sp,sp,32
    2400:	f800283a 	ret
    2404:	002d883a 	mov	r22,zero
    2408:	003ff206 	br	23d4 <_fwalk+0x80>

0000240c <__smakebuf_r>:
    240c:	2880030b 	ldhu	r2,12(r5)
    2410:	deffed04 	addi	sp,sp,-76
    2414:	dc401015 	stw	r17,64(sp)
    2418:	1080008c 	andi	r2,r2,2
    241c:	dc000f15 	stw	r16,60(sp)
    2420:	dfc01215 	stw	ra,72(sp)
    2424:	dc801115 	stw	r18,68(sp)
    2428:	2821883a 	mov	r16,r5
    242c:	2023883a 	mov	r17,r4
    2430:	10000b26 	beq	r2,zero,2460 <__smakebuf_r+0x54>
    2434:	28c010c4 	addi	r3,r5,67
    2438:	00800044 	movi	r2,1
    243c:	28800515 	stw	r2,20(r5)
    2440:	28c00415 	stw	r3,16(r5)
    2444:	28c00015 	stw	r3,0(r5)
    2448:	dfc01217 	ldw	ra,72(sp)
    244c:	dc801117 	ldw	r18,68(sp)
    2450:	dc401017 	ldw	r17,64(sp)
    2454:	dc000f17 	ldw	r16,60(sp)
    2458:	dec01304 	addi	sp,sp,76
    245c:	f800283a 	ret
    2460:	2940038f 	ldh	r5,14(r5)
    2464:	28002116 	blt	r5,zero,24ec <__smakebuf_r+0xe0>
    2468:	d80d883a 	mov	r6,sp
    246c:	00029900 	call	2990 <_fstat_r>
    2470:	10001e16 	blt	r2,zero,24ec <__smakebuf_r+0xe0>
    2474:	d8800117 	ldw	r2,4(sp)
    2478:	00e00014 	movui	r3,32768
    247c:	113c000c 	andi	r4,r2,61440
    2480:	20c03126 	beq	r4,r3,2548 <__smakebuf_r+0x13c>
    2484:	8080030b 	ldhu	r2,12(r16)
    2488:	00c80004 	movi	r3,8192
    248c:	10820014 	ori	r2,r2,2048
    2490:	8080030d 	sth	r2,12(r16)
    2494:	20c01e26 	beq	r4,r3,2510 <__smakebuf_r+0x104>
    2498:	04810004 	movi	r18,1024
    249c:	8809883a 	mov	r4,r17
    24a0:	900b883a 	mov	r5,r18
    24a4:	00007e40 	call	7e4 <_malloc_r>
    24a8:	1009883a 	mov	r4,r2
    24ac:	10003126 	beq	r2,zero,2574 <__smakebuf_r+0x168>
    24b0:	80c0030b 	ldhu	r3,12(r16)
    24b4:	00800034 	movhi	r2,0
    24b8:	10872904 	addi	r2,r2,7332
    24bc:	88800f15 	stw	r2,60(r17)
    24c0:	18c02014 	ori	r3,r3,128
    24c4:	84800515 	stw	r18,20(r16)
    24c8:	80c0030d 	sth	r3,12(r16)
    24cc:	81000415 	stw	r4,16(r16)
    24d0:	81000015 	stw	r4,0(r16)
    24d4:	dfc01217 	ldw	ra,72(sp)
    24d8:	dc801117 	ldw	r18,68(sp)
    24dc:	dc401017 	ldw	r17,64(sp)
    24e0:	dc000f17 	ldw	r16,60(sp)
    24e4:	dec01304 	addi	sp,sp,76
    24e8:	f800283a 	ret
    24ec:	80c0030b 	ldhu	r3,12(r16)
    24f0:	1880200c 	andi	r2,r3,128
    24f4:	10000426 	beq	r2,zero,2508 <__smakebuf_r+0xfc>
    24f8:	04801004 	movi	r18,64
    24fc:	18820014 	ori	r2,r3,2048
    2500:	8080030d 	sth	r2,12(r16)
    2504:	003fe506 	br	249c <__smakebuf_r+0x90>
    2508:	04810004 	movi	r18,1024
    250c:	003ffb06 	br	24fc <__smakebuf_r+0xf0>
    2510:	8140038f 	ldh	r5,14(r16)
    2514:	8809883a 	mov	r4,r17
    2518:	0002a040 	call	2a04 <_isatty_r>
    251c:	103fde26 	beq	r2,zero,2498 <__smakebuf_r+0x8c>
    2520:	8080030b 	ldhu	r2,12(r16)
    2524:	80c010c4 	addi	r3,r16,67
    2528:	04810004 	movi	r18,1024
    252c:	10800054 	ori	r2,r2,1
    2530:	8080030d 	sth	r2,12(r16)
    2534:	00800044 	movi	r2,1
    2538:	80c00415 	stw	r3,16(r16)
    253c:	80800515 	stw	r2,20(r16)
    2540:	80c00015 	stw	r3,0(r16)
    2544:	003fd506 	br	249c <__smakebuf_r+0x90>
    2548:	80c00a17 	ldw	r3,40(r16)
    254c:	00800034 	movhi	r2,0
    2550:	10899004 	addi	r2,r2,9792
    2554:	18bfcb1e 	bne	r3,r2,2484 <__smakebuf_r+0x78>
    2558:	8080030b 	ldhu	r2,12(r16)
    255c:	00c10004 	movi	r3,1024
    2560:	1825883a 	mov	r18,r3
    2564:	10c4b03a 	or	r2,r2,r3
    2568:	8080030d 	sth	r2,12(r16)
    256c:	80c01315 	stw	r3,76(r16)
    2570:	003fca06 	br	249c <__smakebuf_r+0x90>
    2574:	8100030b 	ldhu	r4,12(r16)
    2578:	2080800c 	andi	r2,r4,512
    257c:	103fb21e 	bne	r2,zero,2448 <__smakebuf_r+0x3c>
    2580:	80c010c4 	addi	r3,r16,67
    2584:	21000094 	ori	r4,r4,2
    2588:	00800044 	movi	r2,1
    258c:	80800515 	stw	r2,20(r16)
    2590:	8100030d 	sth	r4,12(r16)
    2594:	80c00415 	stw	r3,16(r16)
    2598:	80c00015 	stw	r3,0(r16)
    259c:	003faa06 	br	2448 <__smakebuf_r+0x3c>

000025a0 <memset>:
    25a0:	008000c4 	movi	r2,3
    25a4:	29403fcc 	andi	r5,r5,255
    25a8:	2007883a 	mov	r3,r4
    25ac:	1180022e 	bgeu	r2,r6,25b8 <memset+0x18>
    25b0:	2084703a 	and	r2,r4,r2
    25b4:	10000826 	beq	r2,zero,25d8 <memset+0x38>
    25b8:	30000526 	beq	r6,zero,25d0 <memset+0x30>
    25bc:	2805883a 	mov	r2,r5
    25c0:	30cd883a 	add	r6,r6,r3
    25c4:	18800005 	stb	r2,0(r3)
    25c8:	18c00044 	addi	r3,r3,1
    25cc:	19bffd1e 	bne	r3,r6,25c4 <memset+0x24>
    25d0:	2005883a 	mov	r2,r4
    25d4:	f800283a 	ret
    25d8:	2804923a 	slli	r2,r5,8
    25dc:	020003c4 	movi	r8,15
    25e0:	200f883a 	mov	r7,r4
    25e4:	2884b03a 	or	r2,r5,r2
    25e8:	1006943a 	slli	r3,r2,16
    25ec:	10c6b03a 	or	r3,r2,r3
    25f0:	41800a2e 	bgeu	r8,r6,261c <memset+0x7c>
    25f4:	4005883a 	mov	r2,r8
    25f8:	31bffc04 	addi	r6,r6,-16
    25fc:	38c00015 	stw	r3,0(r7)
    2600:	38c00115 	stw	r3,4(r7)
    2604:	38c00215 	stw	r3,8(r7)
    2608:	38c00315 	stw	r3,12(r7)
    260c:	39c00404 	addi	r7,r7,16
    2610:	11bff936 	bltu	r2,r6,25f8 <memset+0x58>
    2614:	008000c4 	movi	r2,3
    2618:	1180052e 	bgeu	r2,r6,2630 <memset+0x90>
    261c:	31bfff04 	addi	r6,r6,-4
    2620:	008000c4 	movi	r2,3
    2624:	38c00015 	stw	r3,0(r7)
    2628:	39c00104 	addi	r7,r7,4
    262c:	11bffb36 	bltu	r2,r6,261c <memset+0x7c>
    2630:	3807883a 	mov	r3,r7
    2634:	003fe006 	br	25b8 <memset+0x18>

00002638 <__sclose>:
    2638:	2940038f 	ldh	r5,14(r5)
    263c:	00027fc1 	jmpi	27fc <_close_r>

00002640 <__sseek>:
    2640:	defffe04 	addi	sp,sp,-8
    2644:	dc000015 	stw	r16,0(sp)
    2648:	2821883a 	mov	r16,r5
    264c:	2940038f 	ldh	r5,14(r5)
    2650:	dfc00115 	stw	ra,4(sp)
    2654:	0002a740 	call	2a74 <_lseek_r>
    2658:	1007883a 	mov	r3,r2
    265c:	00bfffc4 	movi	r2,-1
    2660:	18800926 	beq	r3,r2,2688 <__sseek+0x48>
    2664:	8080030b 	ldhu	r2,12(r16)
    2668:	80c01415 	stw	r3,80(r16)
    266c:	10840014 	ori	r2,r2,4096
    2670:	8080030d 	sth	r2,12(r16)
    2674:	1805883a 	mov	r2,r3
    2678:	dfc00117 	ldw	ra,4(sp)
    267c:	dc000017 	ldw	r16,0(sp)
    2680:	dec00204 	addi	sp,sp,8
    2684:	f800283a 	ret
    2688:	8080030b 	ldhu	r2,12(r16)
    268c:	10bbffcc 	andi	r2,r2,61439
    2690:	8080030d 	sth	r2,12(r16)
    2694:	1805883a 	mov	r2,r3
    2698:	dfc00117 	ldw	ra,4(sp)
    269c:	dc000017 	ldw	r16,0(sp)
    26a0:	dec00204 	addi	sp,sp,8
    26a4:	f800283a 	ret

000026a8 <__swrite>:
    26a8:	2880030b 	ldhu	r2,12(r5)
    26ac:	defffb04 	addi	sp,sp,-20
    26b0:	dcc00315 	stw	r19,12(sp)
    26b4:	1080400c 	andi	r2,r2,256
    26b8:	dc800215 	stw	r18,8(sp)
    26bc:	dc400115 	stw	r17,4(sp)
    26c0:	dc000015 	stw	r16,0(sp)
    26c4:	3027883a 	mov	r19,r6
    26c8:	3825883a 	mov	r18,r7
    26cc:	dfc00415 	stw	ra,16(sp)
    26d0:	2821883a 	mov	r16,r5
    26d4:	000d883a 	mov	r6,zero
    26d8:	01c00084 	movi	r7,2
    26dc:	2023883a 	mov	r17,r4
    26e0:	10000226 	beq	r2,zero,26ec <__swrite+0x44>
    26e4:	2940038f 	ldh	r5,14(r5)
    26e8:	0002a740 	call	2a74 <_lseek_r>
    26ec:	8080030b 	ldhu	r2,12(r16)
    26f0:	8140038f 	ldh	r5,14(r16)
    26f4:	8809883a 	mov	r4,r17
    26f8:	10bbffcc 	andi	r2,r2,61439
    26fc:	980d883a 	mov	r6,r19
    2700:	900f883a 	mov	r7,r18
    2704:	8080030d 	sth	r2,12(r16)
    2708:	dfc00417 	ldw	ra,16(sp)
    270c:	dcc00317 	ldw	r19,12(sp)
    2710:	dc800217 	ldw	r18,8(sp)
    2714:	dc400117 	ldw	r17,4(sp)
    2718:	dc000017 	ldw	r16,0(sp)
    271c:	dec00504 	addi	sp,sp,20
    2720:	00027841 	jmpi	2784 <_write_r>

00002724 <__sread>:
    2724:	defffe04 	addi	sp,sp,-8
    2728:	dc000015 	stw	r16,0(sp)
    272c:	2821883a 	mov	r16,r5
    2730:	2940038f 	ldh	r5,14(r5)
    2734:	dfc00115 	stw	ra,4(sp)
    2738:	0002aec0 	call	2aec <_read_r>
    273c:	1007883a 	mov	r3,r2
    2740:	10000816 	blt	r2,zero,2764 <__sread+0x40>
    2744:	80801417 	ldw	r2,80(r16)
    2748:	10c5883a 	add	r2,r2,r3
    274c:	80801415 	stw	r2,80(r16)
    2750:	1805883a 	mov	r2,r3
    2754:	dfc00117 	ldw	ra,4(sp)
    2758:	dc000017 	ldw	r16,0(sp)
    275c:	dec00204 	addi	sp,sp,8
    2760:	f800283a 	ret
    2764:	8080030b 	ldhu	r2,12(r16)
    2768:	10bbffcc 	andi	r2,r2,61439
    276c:	8080030d 	sth	r2,12(r16)
    2770:	1805883a 	mov	r2,r3
    2774:	dfc00117 	ldw	ra,4(sp)
    2778:	dc000017 	ldw	r16,0(sp)
    277c:	dec00204 	addi	sp,sp,8
    2780:	f800283a 	ret

00002784 <_write_r>:
    2784:	defffd04 	addi	sp,sp,-12
    2788:	dc000015 	stw	r16,0(sp)
    278c:	04000074 	movhi	r16,1
    2790:	8424ae04 	addi	r16,r16,-27976
    2794:	dc400115 	stw	r17,4(sp)
    2798:	80000015 	stw	zero,0(r16)
    279c:	2023883a 	mov	r17,r4
    27a0:	2809883a 	mov	r4,r5
    27a4:	300b883a 	mov	r5,r6
    27a8:	380d883a 	mov	r6,r7
    27ac:	dfc00215 	stw	ra,8(sp)
    27b0:	000343c0 	call	343c <write>
    27b4:	1007883a 	mov	r3,r2
    27b8:	00bfffc4 	movi	r2,-1
    27bc:	18800626 	beq	r3,r2,27d8 <_write_r+0x54>
    27c0:	1805883a 	mov	r2,r3
    27c4:	dfc00217 	ldw	ra,8(sp)
    27c8:	dc400117 	ldw	r17,4(sp)
    27cc:	dc000017 	ldw	r16,0(sp)
    27d0:	dec00304 	addi	sp,sp,12
    27d4:	f800283a 	ret
    27d8:	80800017 	ldw	r2,0(r16)
    27dc:	103ff826 	beq	r2,zero,27c0 <_write_r+0x3c>
    27e0:	88800015 	stw	r2,0(r17)
    27e4:	1805883a 	mov	r2,r3
    27e8:	dfc00217 	ldw	ra,8(sp)
    27ec:	dc400117 	ldw	r17,4(sp)
    27f0:	dc000017 	ldw	r16,0(sp)
    27f4:	dec00304 	addi	sp,sp,12
    27f8:	f800283a 	ret

000027fc <_close_r>:
    27fc:	defffd04 	addi	sp,sp,-12
    2800:	dc000015 	stw	r16,0(sp)
    2804:	04000074 	movhi	r16,1
    2808:	8424ae04 	addi	r16,r16,-27976
    280c:	dc400115 	stw	r17,4(sp)
    2810:	80000015 	stw	zero,0(r16)
    2814:	2023883a 	mov	r17,r4
    2818:	2809883a 	mov	r4,r5
    281c:	dfc00215 	stw	ra,8(sp)
    2820:	0002b9c0 	call	2b9c <close>
    2824:	1007883a 	mov	r3,r2
    2828:	00bfffc4 	movi	r2,-1
    282c:	18800626 	beq	r3,r2,2848 <_close_r+0x4c>
    2830:	1805883a 	mov	r2,r3
    2834:	dfc00217 	ldw	ra,8(sp)
    2838:	dc400117 	ldw	r17,4(sp)
    283c:	dc000017 	ldw	r16,0(sp)
    2840:	dec00304 	addi	sp,sp,12
    2844:	f800283a 	ret
    2848:	80800017 	ldw	r2,0(r16)
    284c:	103ff826 	beq	r2,zero,2830 <_close_r+0x34>
    2850:	88800015 	stw	r2,0(r17)
    2854:	1805883a 	mov	r2,r3
    2858:	dfc00217 	ldw	ra,8(sp)
    285c:	dc400117 	ldw	r17,4(sp)
    2860:	dc000017 	ldw	r16,0(sp)
    2864:	dec00304 	addi	sp,sp,12
    2868:	f800283a 	ret

0000286c <_fclose_r>:
    286c:	defffc04 	addi	sp,sp,-16
    2870:	dc400115 	stw	r17,4(sp)
    2874:	dc000015 	stw	r16,0(sp)
    2878:	dfc00315 	stw	ra,12(sp)
    287c:	dc800215 	stw	r18,8(sp)
    2880:	2821883a 	mov	r16,r5
    2884:	2023883a 	mov	r17,r4
    2888:	28002926 	beq	r5,zero,2930 <_fclose_r+0xc4>
    288c:	0001bb00 	call	1bb0 <__sfp_lock_acquire>
    2890:	88000226 	beq	r17,zero,289c <_fclose_r+0x30>
    2894:	88800e17 	ldw	r2,56(r17)
    2898:	10002d26 	beq	r2,zero,2950 <_fclose_r+0xe4>
    289c:	8080030f 	ldh	r2,12(r16)
    28a0:	10002226 	beq	r2,zero,292c <_fclose_r+0xc0>
    28a4:	8809883a 	mov	r4,r17
    28a8:	800b883a 	mov	r5,r16
    28ac:	00019280 	call	1928 <_fflush_r>
    28b0:	1025883a 	mov	r18,r2
    28b4:	80800b17 	ldw	r2,44(r16)
    28b8:	10000426 	beq	r2,zero,28cc <_fclose_r+0x60>
    28bc:	81400717 	ldw	r5,28(r16)
    28c0:	8809883a 	mov	r4,r17
    28c4:	103ee83a 	callr	r2
    28c8:	10002a16 	blt	r2,zero,2974 <_fclose_r+0x108>
    28cc:	8080030b 	ldhu	r2,12(r16)
    28d0:	1080200c 	andi	r2,r2,128
    28d4:	1000231e 	bne	r2,zero,2964 <_fclose_r+0xf8>
    28d8:	81400c17 	ldw	r5,48(r16)
    28dc:	28000526 	beq	r5,zero,28f4 <_fclose_r+0x88>
    28e0:	80801004 	addi	r2,r16,64
    28e4:	28800226 	beq	r5,r2,28f0 <_fclose_r+0x84>
    28e8:	8809883a 	mov	r4,r17
    28ec:	0001f780 	call	1f78 <_free_r>
    28f0:	80000c15 	stw	zero,48(r16)
    28f4:	81401117 	ldw	r5,68(r16)
    28f8:	28000326 	beq	r5,zero,2908 <_fclose_r+0x9c>
    28fc:	8809883a 	mov	r4,r17
    2900:	0001f780 	call	1f78 <_free_r>
    2904:	80001115 	stw	zero,68(r16)
    2908:	8000030d 	sth	zero,12(r16)
    290c:	0001bb40 	call	1bb4 <__sfp_lock_release>
    2910:	9005883a 	mov	r2,r18
    2914:	dfc00317 	ldw	ra,12(sp)
    2918:	dc800217 	ldw	r18,8(sp)
    291c:	dc400117 	ldw	r17,4(sp)
    2920:	dc000017 	ldw	r16,0(sp)
    2924:	dec00404 	addi	sp,sp,16
    2928:	f800283a 	ret
    292c:	0001bb40 	call	1bb4 <__sfp_lock_release>
    2930:	0025883a 	mov	r18,zero
    2934:	9005883a 	mov	r2,r18
    2938:	dfc00317 	ldw	ra,12(sp)
    293c:	dc800217 	ldw	r18,8(sp)
    2940:	dc400117 	ldw	r17,4(sp)
    2944:	dc000017 	ldw	r16,0(sp)
    2948:	dec00404 	addi	sp,sp,16
    294c:	f800283a 	ret
    2950:	8809883a 	mov	r4,r17
    2954:	0001bc00 	call	1bc0 <__sinit>
    2958:	8080030f 	ldh	r2,12(r16)
    295c:	103fd11e 	bne	r2,zero,28a4 <_fclose_r+0x38>
    2960:	003ff206 	br	292c <_fclose_r+0xc0>
    2964:	81400417 	ldw	r5,16(r16)
    2968:	8809883a 	mov	r4,r17
    296c:	0001f780 	call	1f78 <_free_r>
    2970:	003fd906 	br	28d8 <_fclose_r+0x6c>
    2974:	04bfffc4 	movi	r18,-1
    2978:	003fd406 	br	28cc <_fclose_r+0x60>

0000297c <fclose>:
    297c:	00800074 	movhi	r2,1
    2980:	10a49b04 	addi	r2,r2,-28052
    2984:	200b883a 	mov	r5,r4
    2988:	11000017 	ldw	r4,0(r2)
    298c:	000286c1 	jmpi	286c <_fclose_r>

00002990 <_fstat_r>:
    2990:	defffd04 	addi	sp,sp,-12
    2994:	dc000015 	stw	r16,0(sp)
    2998:	04000074 	movhi	r16,1
    299c:	8424ae04 	addi	r16,r16,-27976
    29a0:	dc400115 	stw	r17,4(sp)
    29a4:	80000015 	stw	zero,0(r16)
    29a8:	2023883a 	mov	r17,r4
    29ac:	2809883a 	mov	r4,r5
    29b0:	300b883a 	mov	r5,r6
    29b4:	dfc00215 	stw	ra,8(sp)
    29b8:	0002d280 	call	2d28 <fstat>
    29bc:	1007883a 	mov	r3,r2
    29c0:	00bfffc4 	movi	r2,-1
    29c4:	18800626 	beq	r3,r2,29e0 <_fstat_r+0x50>
    29c8:	1805883a 	mov	r2,r3
    29cc:	dfc00217 	ldw	ra,8(sp)
    29d0:	dc400117 	ldw	r17,4(sp)
    29d4:	dc000017 	ldw	r16,0(sp)
    29d8:	dec00304 	addi	sp,sp,12
    29dc:	f800283a 	ret
    29e0:	80800017 	ldw	r2,0(r16)
    29e4:	103ff826 	beq	r2,zero,29c8 <_fstat_r+0x38>
    29e8:	88800015 	stw	r2,0(r17)
    29ec:	1805883a 	mov	r2,r3
    29f0:	dfc00217 	ldw	ra,8(sp)
    29f4:	dc400117 	ldw	r17,4(sp)
    29f8:	dc000017 	ldw	r16,0(sp)
    29fc:	dec00304 	addi	sp,sp,12
    2a00:	f800283a 	ret

00002a04 <_isatty_r>:
    2a04:	defffd04 	addi	sp,sp,-12
    2a08:	dc000015 	stw	r16,0(sp)
    2a0c:	04000074 	movhi	r16,1
    2a10:	8424ae04 	addi	r16,r16,-27976
    2a14:	dc400115 	stw	r17,4(sp)
    2a18:	80000015 	stw	zero,0(r16)
    2a1c:	2023883a 	mov	r17,r4
    2a20:	2809883a 	mov	r4,r5
    2a24:	dfc00215 	stw	ra,8(sp)
    2a28:	0002e600 	call	2e60 <isatty>
    2a2c:	1007883a 	mov	r3,r2
    2a30:	00bfffc4 	movi	r2,-1
    2a34:	18800626 	beq	r3,r2,2a50 <_isatty_r+0x4c>
    2a38:	1805883a 	mov	r2,r3
    2a3c:	dfc00217 	ldw	ra,8(sp)
    2a40:	dc400117 	ldw	r17,4(sp)
    2a44:	dc000017 	ldw	r16,0(sp)
    2a48:	dec00304 	addi	sp,sp,12
    2a4c:	f800283a 	ret
    2a50:	80800017 	ldw	r2,0(r16)
    2a54:	103ff826 	beq	r2,zero,2a38 <_isatty_r+0x34>
    2a58:	88800015 	stw	r2,0(r17)
    2a5c:	1805883a 	mov	r2,r3
    2a60:	dfc00217 	ldw	ra,8(sp)
    2a64:	dc400117 	ldw	r17,4(sp)
    2a68:	dc000017 	ldw	r16,0(sp)
    2a6c:	dec00304 	addi	sp,sp,12
    2a70:	f800283a 	ret

00002a74 <_lseek_r>:
    2a74:	defffd04 	addi	sp,sp,-12
    2a78:	dc000015 	stw	r16,0(sp)
    2a7c:	04000074 	movhi	r16,1
    2a80:	8424ae04 	addi	r16,r16,-27976
    2a84:	dc400115 	stw	r17,4(sp)
    2a88:	80000015 	stw	zero,0(r16)
    2a8c:	2023883a 	mov	r17,r4
    2a90:	2809883a 	mov	r4,r5
    2a94:	300b883a 	mov	r5,r6
    2a98:	380d883a 	mov	r6,r7
    2a9c:	dfc00215 	stw	ra,8(sp)
    2aa0:	0002f840 	call	2f84 <lseek>
    2aa4:	1007883a 	mov	r3,r2
    2aa8:	00bfffc4 	movi	r2,-1
    2aac:	18800626 	beq	r3,r2,2ac8 <_lseek_r+0x54>
    2ab0:	1805883a 	mov	r2,r3
    2ab4:	dfc00217 	ldw	ra,8(sp)
    2ab8:	dc400117 	ldw	r17,4(sp)
    2abc:	dc000017 	ldw	r16,0(sp)
    2ac0:	dec00304 	addi	sp,sp,12
    2ac4:	f800283a 	ret
    2ac8:	80800017 	ldw	r2,0(r16)
    2acc:	103ff826 	beq	r2,zero,2ab0 <_lseek_r+0x3c>
    2ad0:	88800015 	stw	r2,0(r17)
    2ad4:	1805883a 	mov	r2,r3
    2ad8:	dfc00217 	ldw	ra,8(sp)
    2adc:	dc400117 	ldw	r17,4(sp)
    2ae0:	dc000017 	ldw	r16,0(sp)
    2ae4:	dec00304 	addi	sp,sp,12
    2ae8:	f800283a 	ret

00002aec <_read_r>:
    2aec:	defffd04 	addi	sp,sp,-12
    2af0:	dc000015 	stw	r16,0(sp)
    2af4:	04000074 	movhi	r16,1
    2af8:	8424ae04 	addi	r16,r16,-27976
    2afc:	dc400115 	stw	r17,4(sp)
    2b00:	80000015 	stw	zero,0(r16)
    2b04:	2023883a 	mov	r17,r4
    2b08:	2809883a 	mov	r4,r5
    2b0c:	300b883a 	mov	r5,r6
    2b10:	380d883a 	mov	r6,r7
    2b14:	dfc00215 	stw	ra,8(sp)
    2b18:	00031840 	call	3184 <read>
    2b1c:	1007883a 	mov	r3,r2
    2b20:	00bfffc4 	movi	r2,-1
    2b24:	18800626 	beq	r3,r2,2b40 <_read_r+0x54>
    2b28:	1805883a 	mov	r2,r3
    2b2c:	dfc00217 	ldw	ra,8(sp)
    2b30:	dc400117 	ldw	r17,4(sp)
    2b34:	dc000017 	ldw	r16,0(sp)
    2b38:	dec00304 	addi	sp,sp,12
    2b3c:	f800283a 	ret
    2b40:	80800017 	ldw	r2,0(r16)
    2b44:	103ff826 	beq	r2,zero,2b28 <_read_r+0x3c>
    2b48:	88800015 	stw	r2,0(r17)
    2b4c:	1805883a 	mov	r2,r3
    2b50:	dfc00217 	ldw	ra,8(sp)
    2b54:	dc400117 	ldw	r17,4(sp)
    2b58:	dc000017 	ldw	r16,0(sp)
    2b5c:	dec00304 	addi	sp,sp,12
    2b60:	f800283a 	ret

00002b64 <__mulsi3>:
    2b64:	20000a26 	beq	r4,zero,2b90 <__mulsi3+0x2c>
    2b68:	0007883a 	mov	r3,zero
    2b6c:	2080004c 	andi	r2,r4,1
    2b70:	1005003a 	cmpeq	r2,r2,zero
    2b74:	2008d07a 	srli	r4,r4,1
    2b78:	1000011e 	bne	r2,zero,2b80 <__mulsi3+0x1c>
    2b7c:	1947883a 	add	r3,r3,r5
    2b80:	294b883a 	add	r5,r5,r5
    2b84:	203ff91e 	bne	r4,zero,2b6c <__mulsi3+0x8>
    2b88:	1805883a 	mov	r2,r3
    2b8c:	f800283a 	ret
    2b90:	0007883a 	mov	r3,zero
    2b94:	1805883a 	mov	r2,r3
    2b98:	f800283a 	ret

00002b9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2b9c:	defff804 	addi	sp,sp,-32
    2ba0:	dfc00715 	stw	ra,28(sp)
    2ba4:	df000615 	stw	fp,24(sp)
    2ba8:	df000604 	addi	fp,sp,24
    2bac:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2bb0:	e0bffc17 	ldw	r2,-16(fp)
    2bb4:	1004803a 	cmplt	r2,r2,zero
    2bb8:	1000091e 	bne	r2,zero,2be0 <close+0x44>
    2bbc:	e13ffc17 	ldw	r4,-16(fp)
    2bc0:	01400304 	movi	r5,12
    2bc4:	0002b640 	call	2b64 <__mulsi3>
    2bc8:	1007883a 	mov	r3,r2
    2bcc:	00800034 	movhi	r2,0
    2bd0:	109efc04 	addi	r2,r2,31728
    2bd4:	1887883a 	add	r3,r3,r2
    2bd8:	e0ffff15 	stw	r3,-4(fp)
    2bdc:	00000106 	br	2be4 <close+0x48>
    2be0:	e03fff15 	stw	zero,-4(fp)
    2be4:	e0bfff17 	ldw	r2,-4(fp)
    2be8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2bec:	e0bffb17 	ldw	r2,-20(fp)
    2bf0:	1005003a 	cmpeq	r2,r2,zero
    2bf4:	10001d1e 	bne	r2,zero,2c6c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2bf8:	e0bffb17 	ldw	r2,-20(fp)
    2bfc:	10800017 	ldw	r2,0(r2)
    2c00:	10800417 	ldw	r2,16(r2)
    2c04:	1005003a 	cmpeq	r2,r2,zero
    2c08:	1000071e 	bne	r2,zero,2c28 <close+0x8c>
    2c0c:	e0bffb17 	ldw	r2,-20(fp)
    2c10:	10800017 	ldw	r2,0(r2)
    2c14:	10800417 	ldw	r2,16(r2)
    2c18:	e13ffb17 	ldw	r4,-20(fp)
    2c1c:	103ee83a 	callr	r2
    2c20:	e0bffe15 	stw	r2,-8(fp)
    2c24:	00000106 	br	2c2c <close+0x90>
    2c28:	e03ffe15 	stw	zero,-8(fp)
    2c2c:	e0bffe17 	ldw	r2,-8(fp)
    2c30:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2c34:	e13ffc17 	ldw	r4,-16(fp)
    2c38:	00033080 	call	3308 <alt_release_fd>
    if (rval < 0)
    2c3c:	e0bffa17 	ldw	r2,-24(fp)
    2c40:	1004403a 	cmpge	r2,r2,zero
    2c44:	1000071e 	bne	r2,zero,2c64 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    2c48:	0002c9c0 	call	2c9c <alt_get_errno>
    2c4c:	e0fffa17 	ldw	r3,-24(fp)
    2c50:	00c7c83a 	sub	r3,zero,r3
    2c54:	10c00015 	stw	r3,0(r2)
      return -1;
    2c58:	00bfffc4 	movi	r2,-1
    2c5c:	e0bffd15 	stw	r2,-12(fp)
    2c60:	00000806 	br	2c84 <close+0xe8>
    }
    return 0;
    2c64:	e03ffd15 	stw	zero,-12(fp)
    2c68:	00000606 	br	2c84 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2c6c:	0002c9c0 	call	2c9c <alt_get_errno>
    2c70:	1007883a 	mov	r3,r2
    2c74:	00801444 	movi	r2,81
    2c78:	18800015 	stw	r2,0(r3)
    return -1;
    2c7c:	00bfffc4 	movi	r2,-1
    2c80:	e0bffd15 	stw	r2,-12(fp)
    2c84:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2c88:	e037883a 	mov	sp,fp
    2c8c:	dfc00117 	ldw	ra,4(sp)
    2c90:	df000017 	ldw	fp,0(sp)
    2c94:	dec00204 	addi	sp,sp,8
    2c98:	f800283a 	ret

00002c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2c9c:	defffd04 	addi	sp,sp,-12
    2ca0:	dfc00215 	stw	ra,8(sp)
    2ca4:	df000115 	stw	fp,4(sp)
    2ca8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2cac:	00800074 	movhi	r2,1
    2cb0:	10a4a404 	addi	r2,r2,-28016
    2cb4:	10800017 	ldw	r2,0(r2)
    2cb8:	1005003a 	cmpeq	r2,r2,zero
    2cbc:	1000061e 	bne	r2,zero,2cd8 <alt_get_errno+0x3c>
    2cc0:	00800074 	movhi	r2,1
    2cc4:	10a4a404 	addi	r2,r2,-28016
    2cc8:	10800017 	ldw	r2,0(r2)
    2ccc:	103ee83a 	callr	r2
    2cd0:	e0bfff15 	stw	r2,-4(fp)
    2cd4:	00000306 	br	2ce4 <alt_get_errno+0x48>
    2cd8:	00800074 	movhi	r2,1
    2cdc:	10a4ae04 	addi	r2,r2,-27976
    2ce0:	e0bfff15 	stw	r2,-4(fp)
    2ce4:	e0bfff17 	ldw	r2,-4(fp)
}
    2ce8:	e037883a 	mov	sp,fp
    2cec:	dfc00117 	ldw	ra,4(sp)
    2cf0:	df000017 	ldw	fp,0(sp)
    2cf4:	dec00204 	addi	sp,sp,8
    2cf8:	f800283a 	ret

00002cfc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2cfc:	defffc04 	addi	sp,sp,-16
    2d00:	df000315 	stw	fp,12(sp)
    2d04:	df000304 	addi	fp,sp,12
    2d08:	e13ffd15 	stw	r4,-12(fp)
    2d0c:	e17ffe15 	stw	r5,-8(fp)
    2d10:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2d14:	e0bfff17 	ldw	r2,-4(fp)
}
    2d18:	e037883a 	mov	sp,fp
    2d1c:	df000017 	ldw	fp,0(sp)
    2d20:	dec00104 	addi	sp,sp,4
    2d24:	f800283a 	ret

00002d28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    2d28:	defff904 	addi	sp,sp,-28
    2d2c:	dfc00615 	stw	ra,24(sp)
    2d30:	df000515 	stw	fp,20(sp)
    2d34:	df000504 	addi	fp,sp,20
    2d38:	e13ffc15 	stw	r4,-16(fp)
    2d3c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2d40:	e0bffc17 	ldw	r2,-16(fp)
    2d44:	1004803a 	cmplt	r2,r2,zero
    2d48:	1000091e 	bne	r2,zero,2d70 <fstat+0x48>
    2d4c:	e13ffc17 	ldw	r4,-16(fp)
    2d50:	01400304 	movi	r5,12
    2d54:	0002b640 	call	2b64 <__mulsi3>
    2d58:	1007883a 	mov	r3,r2
    2d5c:	00800034 	movhi	r2,0
    2d60:	109efc04 	addi	r2,r2,31728
    2d64:	1887883a 	add	r3,r3,r2
    2d68:	e0ffff15 	stw	r3,-4(fp)
    2d6c:	00000106 	br	2d74 <fstat+0x4c>
    2d70:	e03fff15 	stw	zero,-4(fp)
    2d74:	e0bfff17 	ldw	r2,-4(fp)
    2d78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2d7c:	e0bffb17 	ldw	r2,-20(fp)
    2d80:	1005003a 	cmpeq	r2,r2,zero
    2d84:	1000121e 	bne	r2,zero,2dd0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    2d88:	e0bffb17 	ldw	r2,-20(fp)
    2d8c:	10800017 	ldw	r2,0(r2)
    2d90:	10800817 	ldw	r2,32(r2)
    2d94:	1005003a 	cmpeq	r2,r2,zero
    2d98:	1000081e 	bne	r2,zero,2dbc <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    2d9c:	e0bffb17 	ldw	r2,-20(fp)
    2da0:	10800017 	ldw	r2,0(r2)
    2da4:	10800817 	ldw	r2,32(r2)
    2da8:	e13ffb17 	ldw	r4,-20(fp)
    2dac:	e17ffd17 	ldw	r5,-12(fp)
    2db0:	103ee83a 	callr	r2
    2db4:	e0bffe15 	stw	r2,-8(fp)
    2db8:	00000b06 	br	2de8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    2dbc:	e0fffd17 	ldw	r3,-12(fp)
    2dc0:	00880004 	movi	r2,8192
    2dc4:	18800115 	stw	r2,4(r3)
      return 0;
    2dc8:	e03ffe15 	stw	zero,-8(fp)
    2dcc:	00000606 	br	2de8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2dd0:	0002e000 	call	2e00 <alt_get_errno>
    2dd4:	1007883a 	mov	r3,r2
    2dd8:	00801444 	movi	r2,81
    2ddc:	18800015 	stw	r2,0(r3)
    return -1;
    2de0:	00bfffc4 	movi	r2,-1
    2de4:	e0bffe15 	stw	r2,-8(fp)
    2de8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2dec:	e037883a 	mov	sp,fp
    2df0:	dfc00117 	ldw	ra,4(sp)
    2df4:	df000017 	ldw	fp,0(sp)
    2df8:	dec00204 	addi	sp,sp,8
    2dfc:	f800283a 	ret

00002e00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2e00:	defffd04 	addi	sp,sp,-12
    2e04:	dfc00215 	stw	ra,8(sp)
    2e08:	df000115 	stw	fp,4(sp)
    2e0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2e10:	00800074 	movhi	r2,1
    2e14:	10a4a404 	addi	r2,r2,-28016
    2e18:	10800017 	ldw	r2,0(r2)
    2e1c:	1005003a 	cmpeq	r2,r2,zero
    2e20:	1000061e 	bne	r2,zero,2e3c <alt_get_errno+0x3c>
    2e24:	00800074 	movhi	r2,1
    2e28:	10a4a404 	addi	r2,r2,-28016
    2e2c:	10800017 	ldw	r2,0(r2)
    2e30:	103ee83a 	callr	r2
    2e34:	e0bfff15 	stw	r2,-4(fp)
    2e38:	00000306 	br	2e48 <alt_get_errno+0x48>
    2e3c:	00800074 	movhi	r2,1
    2e40:	10a4ae04 	addi	r2,r2,-27976
    2e44:	e0bfff15 	stw	r2,-4(fp)
    2e48:	e0bfff17 	ldw	r2,-4(fp)
}
    2e4c:	e037883a 	mov	sp,fp
    2e50:	dfc00117 	ldw	ra,4(sp)
    2e54:	df000017 	ldw	fp,0(sp)
    2e58:	dec00204 	addi	sp,sp,8
    2e5c:	f800283a 	ret

00002e60 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    2e60:	deffeb04 	addi	sp,sp,-84
    2e64:	dfc01415 	stw	ra,80(sp)
    2e68:	df001315 	stw	fp,76(sp)
    2e6c:	df001304 	addi	fp,sp,76
    2e70:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2e74:	e0bffd17 	ldw	r2,-12(fp)
    2e78:	1004803a 	cmplt	r2,r2,zero
    2e7c:	1000091e 	bne	r2,zero,2ea4 <isatty+0x44>
    2e80:	e13ffd17 	ldw	r4,-12(fp)
    2e84:	01400304 	movi	r5,12
    2e88:	0002b640 	call	2b64 <__mulsi3>
    2e8c:	1007883a 	mov	r3,r2
    2e90:	00800034 	movhi	r2,0
    2e94:	109efc04 	addi	r2,r2,31728
    2e98:	1887883a 	add	r3,r3,r2
    2e9c:	e0ffff15 	stw	r3,-4(fp)
    2ea0:	00000106 	br	2ea8 <isatty+0x48>
    2ea4:	e03fff15 	stw	zero,-4(fp)
    2ea8:	e0bfff17 	ldw	r2,-4(fp)
    2eac:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    2eb0:	e0bfed17 	ldw	r2,-76(fp)
    2eb4:	1005003a 	cmpeq	r2,r2,zero
    2eb8:	10000f1e 	bne	r2,zero,2ef8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    2ebc:	e0bfed17 	ldw	r2,-76(fp)
    2ec0:	10800017 	ldw	r2,0(r2)
    2ec4:	10800817 	ldw	r2,32(r2)
    2ec8:	1004c03a 	cmpne	r2,r2,zero
    2ecc:	1000031e 	bne	r2,zero,2edc <isatty+0x7c>
    {
      return 1;
    2ed0:	00800044 	movi	r2,1
    2ed4:	e0bffe15 	stw	r2,-8(fp)
    2ed8:	00000c06 	br	2f0c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    2edc:	e17fee04 	addi	r5,fp,-72
    2ee0:	e13ffd17 	ldw	r4,-12(fp)
    2ee4:	0002d280 	call	2d28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    2ee8:	e0bfef17 	ldw	r2,-68(fp)
    2eec:	10880020 	cmpeqi	r2,r2,8192
    2ef0:	e0bffe15 	stw	r2,-8(fp)
    2ef4:	00000506 	br	2f0c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2ef8:	0002f240 	call	2f24 <alt_get_errno>
    2efc:	1007883a 	mov	r3,r2
    2f00:	00801444 	movi	r2,81
    2f04:	18800015 	stw	r2,0(r3)
    return 0;
    2f08:	e03ffe15 	stw	zero,-8(fp)
    2f0c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2f10:	e037883a 	mov	sp,fp
    2f14:	dfc00117 	ldw	ra,4(sp)
    2f18:	df000017 	ldw	fp,0(sp)
    2f1c:	dec00204 	addi	sp,sp,8
    2f20:	f800283a 	ret

00002f24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f24:	defffd04 	addi	sp,sp,-12
    2f28:	dfc00215 	stw	ra,8(sp)
    2f2c:	df000115 	stw	fp,4(sp)
    2f30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2f34:	00800074 	movhi	r2,1
    2f38:	10a4a404 	addi	r2,r2,-28016
    2f3c:	10800017 	ldw	r2,0(r2)
    2f40:	1005003a 	cmpeq	r2,r2,zero
    2f44:	1000061e 	bne	r2,zero,2f60 <alt_get_errno+0x3c>
    2f48:	00800074 	movhi	r2,1
    2f4c:	10a4a404 	addi	r2,r2,-28016
    2f50:	10800017 	ldw	r2,0(r2)
    2f54:	103ee83a 	callr	r2
    2f58:	e0bfff15 	stw	r2,-4(fp)
    2f5c:	00000306 	br	2f6c <alt_get_errno+0x48>
    2f60:	00800074 	movhi	r2,1
    2f64:	10a4ae04 	addi	r2,r2,-27976
    2f68:	e0bfff15 	stw	r2,-4(fp)
    2f6c:	e0bfff17 	ldw	r2,-4(fp)
}
    2f70:	e037883a 	mov	sp,fp
    2f74:	dfc00117 	ldw	ra,4(sp)
    2f78:	df000017 	ldw	fp,0(sp)
    2f7c:	dec00204 	addi	sp,sp,8
    2f80:	f800283a 	ret

00002f84 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    2f84:	defff804 	addi	sp,sp,-32
    2f88:	dfc00715 	stw	ra,28(sp)
    2f8c:	df000615 	stw	fp,24(sp)
    2f90:	df000604 	addi	fp,sp,24
    2f94:	e13ffc15 	stw	r4,-16(fp)
    2f98:	e17ffd15 	stw	r5,-12(fp)
    2f9c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    2fa0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2fa4:	e0bffc17 	ldw	r2,-16(fp)
    2fa8:	1004803a 	cmplt	r2,r2,zero
    2fac:	1000091e 	bne	r2,zero,2fd4 <lseek+0x50>
    2fb0:	e13ffc17 	ldw	r4,-16(fp)
    2fb4:	01400304 	movi	r5,12
    2fb8:	0002b640 	call	2b64 <__mulsi3>
    2fbc:	1007883a 	mov	r3,r2
    2fc0:	00800034 	movhi	r2,0
    2fc4:	109efc04 	addi	r2,r2,31728
    2fc8:	1887883a 	add	r3,r3,r2
    2fcc:	e0ffff15 	stw	r3,-4(fp)
    2fd0:	00000106 	br	2fd8 <lseek+0x54>
    2fd4:	e03fff15 	stw	zero,-4(fp)
    2fd8:	e0bfff17 	ldw	r2,-4(fp)
    2fdc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    2fe0:	e0bffb17 	ldw	r2,-20(fp)
    2fe4:	1005003a 	cmpeq	r2,r2,zero
    2fe8:	1000111e 	bne	r2,zero,3030 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    2fec:	e0bffb17 	ldw	r2,-20(fp)
    2ff0:	10800017 	ldw	r2,0(r2)
    2ff4:	10800717 	ldw	r2,28(r2)
    2ff8:	1005003a 	cmpeq	r2,r2,zero
    2ffc:	1000091e 	bne	r2,zero,3024 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3000:	e0bffb17 	ldw	r2,-20(fp)
    3004:	10800017 	ldw	r2,0(r2)
    3008:	10800717 	ldw	r2,28(r2)
    300c:	e13ffb17 	ldw	r4,-20(fp)
    3010:	e17ffd17 	ldw	r5,-12(fp)
    3014:	e1bffe17 	ldw	r6,-8(fp)
    3018:	103ee83a 	callr	r2
    301c:	e0bffa15 	stw	r2,-24(fp)
    3020:	00000506 	br	3038 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3024:	00bfde84 	movi	r2,-134
    3028:	e0bffa15 	stw	r2,-24(fp)
    302c:	00000206 	br	3038 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    3030:	00bfebc4 	movi	r2,-81
    3034:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    3038:	e0bffa17 	ldw	r2,-24(fp)
    303c:	1004403a 	cmpge	r2,r2,zero
    3040:	1000071e 	bne	r2,zero,3060 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    3044:	00030780 	call	3078 <alt_get_errno>
    3048:	1007883a 	mov	r3,r2
    304c:	e0bffa17 	ldw	r2,-24(fp)
    3050:	0085c83a 	sub	r2,zero,r2
    3054:	18800015 	stw	r2,0(r3)
    rc = -1;
    3058:	00bfffc4 	movi	r2,-1
    305c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    3060:	e0bffa17 	ldw	r2,-24(fp)
}
    3064:	e037883a 	mov	sp,fp
    3068:	dfc00117 	ldw	ra,4(sp)
    306c:	df000017 	ldw	fp,0(sp)
    3070:	dec00204 	addi	sp,sp,8
    3074:	f800283a 	ret

00003078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3078:	defffd04 	addi	sp,sp,-12
    307c:	dfc00215 	stw	ra,8(sp)
    3080:	df000115 	stw	fp,4(sp)
    3084:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3088:	00800074 	movhi	r2,1
    308c:	10a4a404 	addi	r2,r2,-28016
    3090:	10800017 	ldw	r2,0(r2)
    3094:	1005003a 	cmpeq	r2,r2,zero
    3098:	1000061e 	bne	r2,zero,30b4 <alt_get_errno+0x3c>
    309c:	00800074 	movhi	r2,1
    30a0:	10a4a404 	addi	r2,r2,-28016
    30a4:	10800017 	ldw	r2,0(r2)
    30a8:	103ee83a 	callr	r2
    30ac:	e0bfff15 	stw	r2,-4(fp)
    30b0:	00000306 	br	30c0 <alt_get_errno+0x48>
    30b4:	00800074 	movhi	r2,1
    30b8:	10a4ae04 	addi	r2,r2,-27976
    30bc:	e0bfff15 	stw	r2,-4(fp)
    30c0:	e0bfff17 	ldw	r2,-4(fp)
}
    30c4:	e037883a 	mov	sp,fp
    30c8:	dfc00117 	ldw	ra,4(sp)
    30cc:	df000017 	ldw	fp,0(sp)
    30d0:	dec00204 	addi	sp,sp,8
    30d4:	f800283a 	ret

000030d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    30d8:	defffd04 	addi	sp,sp,-12
    30dc:	dfc00215 	stw	ra,8(sp)
    30e0:	df000115 	stw	fp,4(sp)
    30e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    30e8:	0009883a 	mov	r4,zero
    30ec:	00035c00 	call	35c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    30f0:	00035f40 	call	35f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    30f4:	01000034 	movhi	r4,0
    30f8:	211cc304 	addi	r4,r4,29452
    30fc:	01400034 	movhi	r5,0
    3100:	295cc304 	addi	r5,r5,29452
    3104:	01800034 	movhi	r6,0
    3108:	319cc304 	addi	r6,r6,29452
    310c:	00064fc0 	call	64fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3110:	0005fc00 	call	5fc0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3114:	01000034 	movhi	r4,0
    3118:	21180904 	addi	r4,r4,24612
    311c:	0006ed80 	call	6ed8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3120:	d1201417 	ldw	r4,-32688(gp)
    3124:	d1601517 	ldw	r5,-32684(gp)
    3128:	d1a01617 	ldw	r6,-32680(gp)
    312c:	00001ec0 	call	1ec <main>
    3130:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3134:	01000044 	movi	r4,1
    3138:	0002b9c0 	call	2b9c <close>
  exit (result);
    313c:	e13fff17 	ldw	r4,-4(fp)
    3140:	0006eec0 	call	6eec <exit>

00003144 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3144:	defffe04 	addi	sp,sp,-8
    3148:	df000115 	stw	fp,4(sp)
    314c:	df000104 	addi	fp,sp,4
    3150:	e13fff15 	stw	r4,-4(fp)
}
    3154:	e037883a 	mov	sp,fp
    3158:	df000017 	ldw	fp,0(sp)
    315c:	dec00104 	addi	sp,sp,4
    3160:	f800283a 	ret

00003164 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3164:	defffe04 	addi	sp,sp,-8
    3168:	df000115 	stw	fp,4(sp)
    316c:	df000104 	addi	fp,sp,4
    3170:	e13fff15 	stw	r4,-4(fp)
}
    3174:	e037883a 	mov	sp,fp
    3178:	df000017 	ldw	fp,0(sp)
    317c:	dec00104 	addi	sp,sp,4
    3180:	f800283a 	ret

00003184 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3184:	defff704 	addi	sp,sp,-36
    3188:	dfc00815 	stw	ra,32(sp)
    318c:	df000715 	stw	fp,28(sp)
    3190:	df000704 	addi	fp,sp,28
    3194:	e13ffb15 	stw	r4,-20(fp)
    3198:	e17ffc15 	stw	r5,-16(fp)
    319c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    31a0:	e0bffb17 	ldw	r2,-20(fp)
    31a4:	1004803a 	cmplt	r2,r2,zero
    31a8:	1000091e 	bne	r2,zero,31d0 <read+0x4c>
    31ac:	e13ffb17 	ldw	r4,-20(fp)
    31b0:	01400304 	movi	r5,12
    31b4:	0002b640 	call	2b64 <__mulsi3>
    31b8:	1007883a 	mov	r3,r2
    31bc:	00800034 	movhi	r2,0
    31c0:	109efc04 	addi	r2,r2,31728
    31c4:	1887883a 	add	r3,r3,r2
    31c8:	e0ffff15 	stw	r3,-4(fp)
    31cc:	00000106 	br	31d4 <read+0x50>
    31d0:	e03fff15 	stw	zero,-4(fp)
    31d4:	e0bfff17 	ldw	r2,-4(fp)
    31d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    31dc:	e0bffa17 	ldw	r2,-24(fp)
    31e0:	1005003a 	cmpeq	r2,r2,zero
    31e4:	1000241e 	bne	r2,zero,3278 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    31e8:	e0bffa17 	ldw	r2,-24(fp)
    31ec:	10800217 	ldw	r2,8(r2)
    31f0:	108000cc 	andi	r2,r2,3
    31f4:	10800060 	cmpeqi	r2,r2,1
    31f8:	10001a1e 	bne	r2,zero,3264 <read+0xe0>
    31fc:	e0bffa17 	ldw	r2,-24(fp)
    3200:	10800017 	ldw	r2,0(r2)
    3204:	10800517 	ldw	r2,20(r2)
    3208:	1005003a 	cmpeq	r2,r2,zero
    320c:	1000151e 	bne	r2,zero,3264 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3210:	e0bffa17 	ldw	r2,-24(fp)
    3214:	10800017 	ldw	r2,0(r2)
    3218:	10800517 	ldw	r2,20(r2)
    321c:	e17ffc17 	ldw	r5,-16(fp)
    3220:	e1bffd17 	ldw	r6,-12(fp)
    3224:	e13ffa17 	ldw	r4,-24(fp)
    3228:	103ee83a 	callr	r2
    322c:	e0bff915 	stw	r2,-28(fp)
    3230:	e0bff917 	ldw	r2,-28(fp)
    3234:	1004403a 	cmpge	r2,r2,zero
    3238:	1000071e 	bne	r2,zero,3258 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    323c:	00032a80 	call	32a8 <alt_get_errno>
    3240:	e0fff917 	ldw	r3,-28(fp)
    3244:	00c7c83a 	sub	r3,zero,r3
    3248:	10c00015 	stw	r3,0(r2)
          return -1;
    324c:	00bfffc4 	movi	r2,-1
    3250:	e0bffe15 	stw	r2,-8(fp)
    3254:	00000e06 	br	3290 <read+0x10c>
        }
        return rval;
    3258:	e0bff917 	ldw	r2,-28(fp)
    325c:	e0bffe15 	stw	r2,-8(fp)
    3260:	00000b06 	br	3290 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3264:	00032a80 	call	32a8 <alt_get_errno>
    3268:	1007883a 	mov	r3,r2
    326c:	00800344 	movi	r2,13
    3270:	18800015 	stw	r2,0(r3)
    3274:	00000406 	br	3288 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3278:	00032a80 	call	32a8 <alt_get_errno>
    327c:	1007883a 	mov	r3,r2
    3280:	00801444 	movi	r2,81
    3284:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3288:	00bfffc4 	movi	r2,-1
    328c:	e0bffe15 	stw	r2,-8(fp)
    3290:	e0bffe17 	ldw	r2,-8(fp)
}
    3294:	e037883a 	mov	sp,fp
    3298:	dfc00117 	ldw	ra,4(sp)
    329c:	df000017 	ldw	fp,0(sp)
    32a0:	dec00204 	addi	sp,sp,8
    32a4:	f800283a 	ret

000032a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32a8:	defffd04 	addi	sp,sp,-12
    32ac:	dfc00215 	stw	ra,8(sp)
    32b0:	df000115 	stw	fp,4(sp)
    32b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    32b8:	00800074 	movhi	r2,1
    32bc:	10a4a404 	addi	r2,r2,-28016
    32c0:	10800017 	ldw	r2,0(r2)
    32c4:	1005003a 	cmpeq	r2,r2,zero
    32c8:	1000061e 	bne	r2,zero,32e4 <alt_get_errno+0x3c>
    32cc:	00800074 	movhi	r2,1
    32d0:	10a4a404 	addi	r2,r2,-28016
    32d4:	10800017 	ldw	r2,0(r2)
    32d8:	103ee83a 	callr	r2
    32dc:	e0bfff15 	stw	r2,-4(fp)
    32e0:	00000306 	br	32f0 <alt_get_errno+0x48>
    32e4:	00800074 	movhi	r2,1
    32e8:	10a4ae04 	addi	r2,r2,-27976
    32ec:	e0bfff15 	stw	r2,-4(fp)
    32f0:	e0bfff17 	ldw	r2,-4(fp)
}
    32f4:	e037883a 	mov	sp,fp
    32f8:	dfc00117 	ldw	ra,4(sp)
    32fc:	df000017 	ldw	fp,0(sp)
    3300:	dec00204 	addi	sp,sp,8
    3304:	f800283a 	ret

00003308 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3308:	defffc04 	addi	sp,sp,-16
    330c:	dfc00315 	stw	ra,12(sp)
    3310:	df000215 	stw	fp,8(sp)
    3314:	dc000115 	stw	r16,4(sp)
    3318:	df000104 	addi	fp,sp,4
    331c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3320:	e0bfff17 	ldw	r2,-4(fp)
    3324:	108000d0 	cmplti	r2,r2,3
    3328:	10000f1e 	bne	r2,zero,3368 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    332c:	e13fff17 	ldw	r4,-4(fp)
    3330:	04000034 	movhi	r16,0
    3334:	841efc04 	addi	r16,r16,31728
    3338:	01400304 	movi	r5,12
    333c:	0002b640 	call	2b64 <__mulsi3>
    3340:	1405883a 	add	r2,r2,r16
    3344:	10800204 	addi	r2,r2,8
    3348:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    334c:	e13fff17 	ldw	r4,-4(fp)
    3350:	04000034 	movhi	r16,0
    3354:	841efc04 	addi	r16,r16,31728
    3358:	01400304 	movi	r5,12
    335c:	0002b640 	call	2b64 <__mulsi3>
    3360:	1405883a 	add	r2,r2,r16
    3364:	10000015 	stw	zero,0(r2)
  }
}
    3368:	e037883a 	mov	sp,fp
    336c:	dfc00217 	ldw	ra,8(sp)
    3370:	df000117 	ldw	fp,4(sp)
    3374:	dc000017 	ldw	r16,0(sp)
    3378:	dec00304 	addi	sp,sp,12
    337c:	f800283a 	ret

00003380 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3380:	defff804 	addi	sp,sp,-32
    3384:	df000715 	stw	fp,28(sp)
    3388:	df000704 	addi	fp,sp,28
    338c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3390:	0005303a 	rdctl	r2,status
    3394:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3398:	e0fffb17 	ldw	r3,-20(fp)
    339c:	00bfff84 	movi	r2,-2
    33a0:	1884703a 	and	r2,r3,r2
    33a4:	1001703a 	wrctl	status,r2
  
  return context;
    33a8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    33ac:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    33b0:	d0a00a17 	ldw	r2,-32728(gp)
    33b4:	10c000c4 	addi	r3,r2,3
    33b8:	00bfff04 	movi	r2,-4
    33bc:	1884703a 	and	r2,r3,r2
    33c0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    33c4:	d0e00a17 	ldw	r3,-32728(gp)
    33c8:	e0bffe17 	ldw	r2,-8(fp)
    33cc:	1887883a 	add	r3,r3,r2
    33d0:	00808034 	movhi	r2,512
    33d4:	10800004 	addi	r2,r2,0
    33d8:	10c0072e 	bgeu	r2,r3,33f8 <sbrk+0x78>
    33dc:	e0bffd17 	ldw	r2,-12(fp)
    33e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    33e4:	e0bffa17 	ldw	r2,-24(fp)
    33e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    33ec:	00bfffc4 	movi	r2,-1
    33f0:	e0bfff15 	stw	r2,-4(fp)
    33f4:	00000c06 	br	3428 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    33f8:	d0a00a17 	ldw	r2,-32728(gp)
    33fc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    3400:	d0e00a17 	ldw	r3,-32728(gp)
    3404:	e0bffe17 	ldw	r2,-8(fp)
    3408:	1885883a 	add	r2,r3,r2
    340c:	d0a00a15 	stw	r2,-32728(gp)
    3410:	e0bffd17 	ldw	r2,-12(fp)
    3414:	e0bff915 	stw	r2,-28(fp)
    3418:	e0bff917 	ldw	r2,-28(fp)
    341c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3420:	e0bffc17 	ldw	r2,-16(fp)
    3424:	e0bfff15 	stw	r2,-4(fp)
    3428:	e0bfff17 	ldw	r2,-4(fp)
} 
    342c:	e037883a 	mov	sp,fp
    3430:	df000017 	ldw	fp,0(sp)
    3434:	dec00104 	addi	sp,sp,4
    3438:	f800283a 	ret

0000343c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    343c:	defff704 	addi	sp,sp,-36
    3440:	dfc00815 	stw	ra,32(sp)
    3444:	df000715 	stw	fp,28(sp)
    3448:	df000704 	addi	fp,sp,28
    344c:	e13ffb15 	stw	r4,-20(fp)
    3450:	e17ffc15 	stw	r5,-16(fp)
    3454:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3458:	e0bffb17 	ldw	r2,-20(fp)
    345c:	1004803a 	cmplt	r2,r2,zero
    3460:	1000091e 	bne	r2,zero,3488 <write+0x4c>
    3464:	e13ffb17 	ldw	r4,-20(fp)
    3468:	01400304 	movi	r5,12
    346c:	0002b640 	call	2b64 <__mulsi3>
    3470:	1007883a 	mov	r3,r2
    3474:	00800034 	movhi	r2,0
    3478:	109efc04 	addi	r2,r2,31728
    347c:	1887883a 	add	r3,r3,r2
    3480:	e0ffff15 	stw	r3,-4(fp)
    3484:	00000106 	br	348c <write+0x50>
    3488:	e03fff15 	stw	zero,-4(fp)
    348c:	e0bfff17 	ldw	r2,-4(fp)
    3490:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3494:	e0bffa17 	ldw	r2,-24(fp)
    3498:	1005003a 	cmpeq	r2,r2,zero
    349c:	1000241e 	bne	r2,zero,3530 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    34a0:	e0bffa17 	ldw	r2,-24(fp)
    34a4:	10800217 	ldw	r2,8(r2)
    34a8:	108000cc 	andi	r2,r2,3
    34ac:	1005003a 	cmpeq	r2,r2,zero
    34b0:	10001a1e 	bne	r2,zero,351c <write+0xe0>
    34b4:	e0bffa17 	ldw	r2,-24(fp)
    34b8:	10800017 	ldw	r2,0(r2)
    34bc:	10800617 	ldw	r2,24(r2)
    34c0:	1005003a 	cmpeq	r2,r2,zero
    34c4:	1000151e 	bne	r2,zero,351c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    34c8:	e0bffa17 	ldw	r2,-24(fp)
    34cc:	10800017 	ldw	r2,0(r2)
    34d0:	10800617 	ldw	r2,24(r2)
    34d4:	e17ffc17 	ldw	r5,-16(fp)
    34d8:	e1bffd17 	ldw	r6,-12(fp)
    34dc:	e13ffa17 	ldw	r4,-24(fp)
    34e0:	103ee83a 	callr	r2
    34e4:	e0bff915 	stw	r2,-28(fp)
    34e8:	e0bff917 	ldw	r2,-28(fp)
    34ec:	1004403a 	cmpge	r2,r2,zero
    34f0:	1000071e 	bne	r2,zero,3510 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    34f4:	00035600 	call	3560 <alt_get_errno>
    34f8:	e0fff917 	ldw	r3,-28(fp)
    34fc:	00c7c83a 	sub	r3,zero,r3
    3500:	10c00015 	stw	r3,0(r2)
        return -1;
    3504:	00bfffc4 	movi	r2,-1
    3508:	e0bffe15 	stw	r2,-8(fp)
    350c:	00000e06 	br	3548 <write+0x10c>
      }
      return rval;
    3510:	e0bff917 	ldw	r2,-28(fp)
    3514:	e0bffe15 	stw	r2,-8(fp)
    3518:	00000b06 	br	3548 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    351c:	00035600 	call	3560 <alt_get_errno>
    3520:	1007883a 	mov	r3,r2
    3524:	00800344 	movi	r2,13
    3528:	18800015 	stw	r2,0(r3)
    352c:	00000406 	br	3540 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3530:	00035600 	call	3560 <alt_get_errno>
    3534:	1007883a 	mov	r3,r2
    3538:	00801444 	movi	r2,81
    353c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3540:	00bfffc4 	movi	r2,-1
    3544:	e0bffe15 	stw	r2,-8(fp)
    3548:	e0bffe17 	ldw	r2,-8(fp)
}
    354c:	e037883a 	mov	sp,fp
    3550:	dfc00117 	ldw	ra,4(sp)
    3554:	df000017 	ldw	fp,0(sp)
    3558:	dec00204 	addi	sp,sp,8
    355c:	f800283a 	ret

00003560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3560:	defffd04 	addi	sp,sp,-12
    3564:	dfc00215 	stw	ra,8(sp)
    3568:	df000115 	stw	fp,4(sp)
    356c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3570:	00800074 	movhi	r2,1
    3574:	10a4a404 	addi	r2,r2,-28016
    3578:	10800017 	ldw	r2,0(r2)
    357c:	1005003a 	cmpeq	r2,r2,zero
    3580:	1000061e 	bne	r2,zero,359c <alt_get_errno+0x3c>
    3584:	00800074 	movhi	r2,1
    3588:	10a4a404 	addi	r2,r2,-28016
    358c:	10800017 	ldw	r2,0(r2)
    3590:	103ee83a 	callr	r2
    3594:	e0bfff15 	stw	r2,-4(fp)
    3598:	00000306 	br	35a8 <alt_get_errno+0x48>
    359c:	00800074 	movhi	r2,1
    35a0:	10a4ae04 	addi	r2,r2,-27976
    35a4:	e0bfff15 	stw	r2,-4(fp)
    35a8:	e0bfff17 	ldw	r2,-4(fp)
}
    35ac:	e037883a 	mov	sp,fp
    35b0:	dfc00117 	ldw	ra,4(sp)
    35b4:	df000017 	ldw	fp,0(sp)
    35b8:	dec00204 	addi	sp,sp,8
    35bc:	f800283a 	ret

000035c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    35c0:	defffd04 	addi	sp,sp,-12
    35c4:	dfc00215 	stw	ra,8(sp)
    35c8:	df000115 	stw	fp,4(sp)
    35cc:	df000104 	addi	fp,sp,4
    35d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    35d4:	00069fc0 	call	69fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    35d8:	00800044 	movi	r2,1
    35dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    35e0:	e037883a 	mov	sp,fp
    35e4:	dfc00117 	ldw	ra,4(sp)
    35e8:	df000017 	ldw	fp,0(sp)
    35ec:	dec00204 	addi	sp,sp,8
    35f0:	f800283a 	ret

000035f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    35f4:	defffe04 	addi	sp,sp,-8
    35f8:	dfc00115 	stw	ra,4(sp)
    35fc:	df000015 	stw	fp,0(sp)
    3600:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    3604:	01008074 	movhi	r4,513
    3608:	2128b804 	addi	r4,r4,-23840
    360c:	000b883a 	mov	r5,zero
    3610:	000d883a 	mov	r6,zero
    3614:	01c0fa04 	movi	r7,1000
    3618:	0004c440 	call	4c44 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    361c:	01000034 	movhi	r4,0
    3620:	211f5c04 	addi	r4,r4,32112
    3624:	00037440 	call	3744 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    3628:	01000034 	movhi	r4,0
    362c:	211f9804 	addi	r4,r4,32352
    3630:	000b883a 	mov	r5,zero
    3634:	018000c4 	movi	r6,3
    3638:	00042700 	call	4270 <altera_avalon_jtag_uart_init>
    363c:	01000034 	movhi	r4,0
    3640:	211f8e04 	addi	r4,r4,32312
    3644:	000370c0 	call	370c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    3648:	00c08074 	movhi	r3,513
    364c:	18e80004 	addi	r3,r3,-24576
    3650:	00800044 	movi	r2,1
    3654:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
    3658:	01000074 	movhi	r4,1
    365c:	2123b004 	addi	r4,r4,-28992
    3660:	000b883a 	mov	r5,zero
    3664:	01800184 	movi	r6,6
    3668:	0004dcc0 	call	4dcc <altera_avalon_uart_init>
    366c:	01000074 	movhi	r4,1
    3670:	2123a604 	addi	r4,r4,-29032
    3674:	000370c0 	call	370c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
    3678:	01000074 	movhi	r4,1
    367c:	2123e104 	addi	r4,r4,-28796
    3680:	000b883a 	mov	r5,zero
    3684:	018001c4 	movi	r6,7
    3688:	0004dcc0 	call	4dcc <altera_avalon_uart_init>
    368c:	01000074 	movhi	r4,1
    3690:	2123d704 	addi	r4,r4,-28836
    3694:	000370c0 	call	370c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
    3698:	01000074 	movhi	r4,1
    369c:	21241204 	addi	r4,r4,-28600
    36a0:	000b883a 	mov	r5,zero
    36a4:	01800204 	movi	r6,8
    36a8:	0004dcc0 	call	4dcc <altera_avalon_uart_init>
    36ac:	01000074 	movhi	r4,1
    36b0:	21240804 	addi	r4,r4,-28640
    36b4:	000370c0 	call	370c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
    36b8:	01000074 	movhi	r4,1
    36bc:	21244304 	addi	r4,r4,-28404
    36c0:	000b883a 	mov	r5,zero
    36c4:	01800244 	movi	r6,9
    36c8:	0004dcc0 	call	4dcc <altera_avalon_uart_init>
    36cc:	01000074 	movhi	r4,1
    36d0:	21243904 	addi	r4,r4,-28444
    36d4:	000370c0 	call	370c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    36d8:	01000074 	movhi	r4,1
    36dc:	21247404 	addi	r4,r4,-28208
    36e0:	000b883a 	mov	r5,zero
    36e4:	01800104 	movi	r6,4
    36e8:	0004dcc0 	call	4dcc <altera_avalon_uart_init>
    36ec:	01000074 	movhi	r4,1
    36f0:	21246a04 	addi	r4,r4,-28248
    36f4:	000370c0 	call	370c <alt_dev_reg>
}
    36f8:	e037883a 	mov	sp,fp
    36fc:	dfc00117 	ldw	ra,4(sp)
    3700:	df000017 	ldw	fp,0(sp)
    3704:	dec00204 	addi	sp,sp,8
    3708:	f800283a 	ret

0000370c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    370c:	defffd04 	addi	sp,sp,-12
    3710:	dfc00215 	stw	ra,8(sp)
    3714:	df000115 	stw	fp,4(sp)
    3718:	df000104 	addi	fp,sp,4
    371c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3720:	e13fff17 	ldw	r4,-4(fp)
    3724:	01400074 	movhi	r5,1
    3728:	2964a104 	addi	r5,r5,-28028
    372c:	0005eac0 	call	5eac <alt_dev_llist_insert>
}
    3730:	e037883a 	mov	sp,fp
    3734:	dfc00117 	ldw	ra,4(sp)
    3738:	df000017 	ldw	fp,0(sp)
    373c:	dec00204 	addi	sp,sp,8
    3740:	f800283a 	ret

00003744 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    3744:	defffc04 	addi	sp,sp,-16
    3748:	dfc00315 	stw	ra,12(sp)
    374c:	df000215 	stw	fp,8(sp)
    3750:	df000204 	addi	fp,sp,8
    3754:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    3758:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    375c:	e13fff17 	ldw	r4,-4(fp)
    3760:	00037d00 	call	37d0 <alt_epcs_flash_query>
    3764:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    3768:	e0bffe17 	ldw	r2,-8(fp)
    376c:	1004c03a 	cmpne	r2,r2,zero
    3770:	1000031e 	bne	r2,zero,3780 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    3774:	e13fff17 	ldw	r4,-4(fp)
    3778:	00037980 	call	3798 <alt_flash_device_register>
    377c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    3780:	e0bffe17 	ldw	r2,-8(fp)
}
    3784:	e037883a 	mov	sp,fp
    3788:	dfc00117 	ldw	ra,4(sp)
    378c:	df000017 	ldw	fp,0(sp)
    3790:	dec00204 	addi	sp,sp,8
    3794:	f800283a 	ret

00003798 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    3798:	defffd04 	addi	sp,sp,-12
    379c:	dfc00215 	stw	ra,8(sp)
    37a0:	df000115 	stw	fp,4(sp)
    37a4:	df000104 	addi	fp,sp,4
    37a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    37ac:	e13fff17 	ldw	r4,-4(fp)
    37b0:	01400074 	movhi	r5,1
    37b4:	2964a604 	addi	r5,r5,-28008
    37b8:	0005eac0 	call	5eac <alt_dev_llist_insert>
}
    37bc:	e037883a 	mov	sp,fp
    37c0:	dfc00117 	ldw	ra,4(sp)
    37c4:	df000017 	ldw	fp,0(sp)
    37c8:	dec00204 	addi	sp,sp,8
    37cc:	f800283a 	ret

000037d0 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    37d0:	defffc04 	addi	sp,sp,-16
    37d4:	dfc00315 	stw	ra,12(sp)
    37d8:	df000215 	stw	fp,8(sp)
    37dc:	df000204 	addi	fp,sp,8
    37e0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    37e4:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    37e8:	e0bfff17 	ldw	r2,-4(fp)
    37ec:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    37f0:	e0bfff17 	ldw	r2,-4(fp)
    37f4:	11002d17 	ldw	r4,180(r2)
    37f8:	0005bbc0 	call	5bbc <epcs_read_electronic_signature>
    37fc:	10c03fcc 	andi	r3,r2,255
    3800:	e0bfff17 	ldw	r2,-4(fp)
    3804:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    3808:	e0bfff17 	ldw	r2,-4(fp)
    380c:	10802f17 	ldw	r2,188(r2)
    3810:	10800598 	cmpnei	r2,r2,22
    3814:	10000a1e 	bne	r2,zero,3840 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    3818:	e0ffff17 	ldw	r3,-4(fp)
    381c:	00802034 	movhi	r2,128
    3820:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
    3824:	e0ffff17 	ldw	r3,-4(fp)
    3828:	00802004 	movi	r2,128
    382c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    3830:	e0ffff17 	ldw	r3,-4(fp)
    3834:	00800074 	movhi	r2,1
    3838:	18801015 	stw	r2,64(r3)
    383c:	00007306 	br	3a0c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    3840:	e0bfff17 	ldw	r2,-4(fp)
    3844:	10802f17 	ldw	r2,188(r2)
    3848:	10800518 	cmpnei	r2,r2,20
    384c:	10000a1e 	bne	r2,zero,3878 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    3850:	e0ffff17 	ldw	r3,-4(fp)
    3854:	00800834 	movhi	r2,32
    3858:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
    385c:	e0ffff17 	ldw	r3,-4(fp)
    3860:	00800804 	movi	r2,32
    3864:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    3868:	e0ffff17 	ldw	r3,-4(fp)
    386c:	00800074 	movhi	r2,1
    3870:	18801015 	stw	r2,64(r3)
    3874:	00006506 	br	3a0c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    3878:	e0bfff17 	ldw	r2,-4(fp)
    387c:	10802f17 	ldw	r2,188(r2)
    3880:	108004d8 	cmpnei	r2,r2,19
    3884:	10000a1e 	bne	r2,zero,38b0 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    3888:	e0ffff17 	ldw	r3,-4(fp)
    388c:	00800434 	movhi	r2,16
    3890:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
    3894:	e0ffff17 	ldw	r3,-4(fp)
    3898:	00800404 	movi	r2,16
    389c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    38a0:	e0ffff17 	ldw	r3,-4(fp)
    38a4:	00800074 	movhi	r2,1
    38a8:	18801015 	stw	r2,64(r3)
    38ac:	00005706 	br	3a0c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    38b0:	e0bfff17 	ldw	r2,-4(fp)
    38b4:	10802f17 	ldw	r2,188(r2)
    38b8:	10800498 	cmpnei	r2,r2,18
    38bc:	10000a1e 	bne	r2,zero,38e8 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    38c0:	e0ffff17 	ldw	r3,-4(fp)
    38c4:	00800234 	movhi	r2,8
    38c8:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
    38cc:	e0ffff17 	ldw	r3,-4(fp)
    38d0:	00800204 	movi	r2,8
    38d4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    38d8:	e0ffff17 	ldw	r3,-4(fp)
    38dc:	00800074 	movhi	r2,1
    38e0:	18801015 	stw	r2,64(r3)
    38e4:	00004906 	br	3a0c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    38e8:	e0bfff17 	ldw	r2,-4(fp)
    38ec:	10802f17 	ldw	r2,188(r2)
    38f0:	10800418 	cmpnei	r2,r2,16
    38f4:	10000a1e 	bne	r2,zero,3920 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    38f8:	e0ffff17 	ldw	r3,-4(fp)
    38fc:	008000b4 	movhi	r2,2
    3900:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
    3904:	e0ffff17 	ldw	r3,-4(fp)
    3908:	00800104 	movi	r2,4
    390c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
    3910:	e0ffff17 	ldw	r3,-4(fp)
    3914:	00a00014 	movui	r2,32768
    3918:	18801015 	stw	r2,64(r3)
    391c:	00003b06 	br	3a0c <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    3920:	e0bfff17 	ldw	r2,-4(fp)
    3924:	11002d17 	ldw	r4,180(r2)
    3928:	0005c280 	call	5c28 <epcs_read_device_id>
    392c:	1007883a 	mov	r3,r2
    3930:	e0bfff17 	ldw	r2,-4(fp)
    3934:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    3938:	e0bfff17 	ldw	r2,-4(fp)
    393c:	10c02f17 	ldw	r3,188(r2)
    3940:	00804034 	movhi	r2,256
    3944:	10bfffc4 	addi	r2,r2,-1
    3948:	1886703a 	and	r3,r3,r2
    394c:	00800874 	movhi	r2,33
    3950:	10ae8604 	addi	r2,r2,-17896
    3954:	18800a1e 	bne	r3,r2,3980 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    3958:	e0ffff17 	ldw	r3,-4(fp)
    395c:	00804034 	movhi	r2,256
    3960:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    3964:	e0ffff17 	ldw	r3,-4(fp)
    3968:	00804004 	movi	r2,256
    396c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    3970:	e0ffff17 	ldw	r3,-4(fp)
    3974:	00800074 	movhi	r2,1
    3978:	18801015 	stw	r2,64(r3)
    397c:	00002306 	br	3a0c <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    3980:	e0bfff17 	ldw	r2,-4(fp)
    3984:	10802f17 	ldw	r2,188(r2)
    3988:	10803fcc 	andi	r2,r2,255
    398c:	10800618 	cmpnei	r2,r2,24
    3990:	10000a1e 	bne	r2,zero,39bc <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    3994:	e0ffff17 	ldw	r3,-4(fp)
    3998:	00804034 	movhi	r2,256
    399c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
    39a0:	e0ffff17 	ldw	r3,-4(fp)
    39a4:	00801004 	movi	r2,64
    39a8:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
    39ac:	e0ffff17 	ldw	r3,-4(fp)
    39b0:	00800134 	movhi	r2,4
    39b4:	18801015 	stw	r2,64(r3)
    39b8:	00001406 	br	3a0c <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    39bc:	e0bfff17 	ldw	r2,-4(fp)
    39c0:	10802f17 	ldw	r2,188(r2)
    39c4:	10803fcc 	andi	r2,r2,255
    39c8:	10800658 	cmpnei	r2,r2,25
    39cc:	10000d1e 	bne	r2,zero,3a04 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    39d0:	e0ffff17 	ldw	r3,-4(fp)
    39d4:	00808034 	movhi	r2,512
    39d8:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    39dc:	e0ffff17 	ldw	r3,-4(fp)
    39e0:	00808004 	movi	r2,512
    39e4:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    39e8:	e0ffff17 	ldw	r3,-4(fp)
    39ec:	00800074 	movhi	r2,1
    39f0:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    39f4:	e0ffff17 	ldw	r3,-4(fp)
    39f8:	00800044 	movi	r2,1
    39fc:	18803115 	stw	r2,196(r3)
    3a00:	00000206 	br	3a0c <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    3a04:	00bffb44 	movi	r2,-19
    3a08:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    3a0c:	e0bfff17 	ldw	r2,-4(fp)
    3a10:	10800e17 	ldw	r2,56(r2)
    3a14:	1007883a 	mov	r3,r2
    3a18:	e0bfff17 	ldw	r2,-4(fp)
    3a1c:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
    3a20:	e0ffff17 	ldw	r3,-4(fp)
    3a24:	00800044 	movi	r2,1
    3a28:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
    3a2c:	e0bfff17 	ldw	r2,-4(fp)
    3a30:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    3a34:	e0ffff17 	ldw	r3,-4(fp)
    3a38:	00804004 	movi	r2,256
    3a3c:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
    3a40:	e0bffe17 	ldw	r2,-8(fp)
}
    3a44:	e037883a 	mov	sp,fp
    3a48:	dfc00117 	ldw	ra,4(sp)
    3a4c:	df000017 	ldw	fp,0(sp)
    3a50:	dec00204 	addi	sp,sp,8
    3a54:	f800283a 	ret

00003a58 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    3a58:	deffeb04 	addi	sp,sp,-84
    3a5c:	dfc01415 	stw	ra,80(sp)
    3a60:	df001315 	stw	fp,76(sp)
    3a64:	df001304 	addi	fp,sp,76
    3a68:	e13ff915 	stw	r4,-28(fp)
    3a6c:	e17ffa15 	stw	r5,-24(fp)
    3a70:	e1bffb15 	stw	r6,-20(fp)
    3a74:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    3a78:	00800804 	movi	r2,32
    3a7c:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
    3a80:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
    3a84:	00002c06 	br	3b38 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    3a88:	e0bff017 	ldw	r2,-64(fp)
    3a8c:	e0bfff15 	stw	r2,-4(fp)
    3a90:	e0fffc17 	ldw	r3,-16(fp)
    3a94:	e0fffe15 	stw	r3,-8(fp)
    3a98:	e0bfff17 	ldw	r2,-4(fp)
    3a9c:	e0fffe17 	ldw	r3,-8(fp)
    3aa0:	10c0022e 	bgeu	r2,r3,3aac <alt_epcs_flash_memcmp+0x54>
    3aa4:	e0bfff17 	ldw	r2,-4(fp)
    3aa8:	e0bffe15 	stw	r2,-8(fp)
    3aac:	e0fffe17 	ldw	r3,-8(fp)
    3ab0:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    3ab4:	e0fffb17 	ldw	r3,-20(fp)
    3ab8:	e0bfef17 	ldw	r2,-68(fp)
    3abc:	188b883a 	add	r5,r3,r2
    3ac0:	e1bff104 	addi	r6,fp,-60
    3ac4:	e13ff917 	ldw	r4,-28(fp)
    3ac8:	e1ffee17 	ldw	r7,-72(fp)
    3acc:	00040900 	call	4090 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    3ad0:	1004403a 	cmpge	r2,r2,zero
    3ad4:	1000031e 	bne	r2,zero,3ae4 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    3ad8:	00bfffc4 	movi	r2,-1
    3adc:	e0bffd15 	stw	r2,-12(fp)
    3ae0:	00001906 	br	3b48 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    3ae4:	e0fffa17 	ldw	r3,-24(fp)
    3ae8:	e0bfef17 	ldw	r2,-68(fp)
    3aec:	1889883a 	add	r4,r3,r2
    3af0:	e1bfee17 	ldw	r6,-72(fp)
    3af4:	e17ff104 	addi	r5,fp,-60
    3af8:	0006f240 	call	6f24 <memcmp>
    3afc:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
    3b00:	e0bfed17 	ldw	r2,-76(fp)
    3b04:	1005003a 	cmpeq	r2,r2,zero
    3b08:	1000031e 	bne	r2,zero,3b18 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
    3b0c:	e0ffed17 	ldw	r3,-76(fp)
    3b10:	e0fffd15 	stw	r3,-12(fp)
    3b14:	00000c06 	br	3b48 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
    3b18:	e0ffee17 	ldw	r3,-72(fp)
    3b1c:	e0bffc17 	ldw	r2,-16(fp)
    3b20:	10c5c83a 	sub	r2,r2,r3
    3b24:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
    3b28:	e0ffef17 	ldw	r3,-68(fp)
    3b2c:	e0bfee17 	ldw	r2,-72(fp)
    3b30:	1885883a 	add	r2,r3,r2
    3b34:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    3b38:	e0bffc17 	ldw	r2,-16(fp)
    3b3c:	1004c03a 	cmpne	r2,r2,zero
    3b40:	103fd11e 	bne	r2,zero,3a88 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    3b44:	e03ffd15 	stw	zero,-12(fp)
    3b48:	e0bffd17 	ldw	r2,-12(fp)
}
    3b4c:	e037883a 	mov	sp,fp
    3b50:	dfc00117 	ldw	ra,4(sp)
    3b54:	df000017 	ldw	fp,0(sp)
    3b58:	dec00204 	addi	sp,sp,8
    3b5c:	f800283a 	ret

00003b60 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    3b60:	defff204 	addi	sp,sp,-56
    3b64:	dfc00d15 	stw	ra,52(sp)
    3b68:	df000c15 	stw	fp,48(sp)
    3b6c:	df000c04 	addi	fp,sp,48
    3b70:	e13ffa15 	stw	r4,-24(fp)
    3b74:	e17ffb15 	stw	r5,-20(fp)
    3b78:	e1bffc15 	stw	r6,-16(fp)
    3b7c:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
    3b80:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    3b84:	e03ff815 	stw	zero,-32(fp)
    3b88:	00008b06 	br	3db8 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    3b8c:	e0bff817 	ldw	r2,-32(fp)
    3b90:	e0fffa17 	ldw	r3,-24(fp)
    3b94:	1004913a 	slli	r2,r2,4
    3b98:	10c5883a 	add	r2,r2,r3
    3b9c:	10800d04 	addi	r2,r2,52
    3ba0:	10c00017 	ldw	r3,0(r2)
    3ba4:	e0bffb17 	ldw	r2,-20(fp)
    3ba8:	10c08016 	blt	r2,r3,3dac <alt_epcs_flash_write+0x24c>
    3bac:	e0bff817 	ldw	r2,-32(fp)
    3bb0:	e0fffa17 	ldw	r3,-24(fp)
    3bb4:	1004913a 	slli	r2,r2,4
    3bb8:	10c5883a 	add	r2,r2,r3
    3bbc:	10800d04 	addi	r2,r2,52
    3bc0:	11000017 	ldw	r4,0(r2)
    3bc4:	e0bff817 	ldw	r2,-32(fp)
    3bc8:	e0fffa17 	ldw	r3,-24(fp)
    3bcc:	1004913a 	slli	r2,r2,4
    3bd0:	10c5883a 	add	r2,r2,r3
    3bd4:	10800e04 	addi	r2,r2,56
    3bd8:	10800017 	ldw	r2,0(r2)
    3bdc:	2087883a 	add	r3,r4,r2
    3be0:	e0bffb17 	ldw	r2,-20(fp)
    3be4:	10c0710e 	bge	r2,r3,3dac <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    3be8:	e0bff817 	ldw	r2,-32(fp)
    3bec:	e0fffa17 	ldw	r3,-24(fp)
    3bf0:	1004913a 	slli	r2,r2,4
    3bf4:	10c5883a 	add	r2,r2,r3
    3bf8:	10800d04 	addi	r2,r2,52
    3bfc:	10800017 	ldw	r2,0(r2)
    3c00:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    3c04:	e03ff715 	stw	zero,-36(fp)
    3c08:	00006006 	br	3d8c <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
    3c0c:	e0fffb17 	ldw	r3,-20(fp)
    3c10:	e0bff517 	ldw	r2,-44(fp)
    3c14:	18805116 	blt	r3,r2,3d5c <alt_epcs_flash_write+0x1fc>
    3c18:	e0bff817 	ldw	r2,-32(fp)
    3c1c:	e0fffa17 	ldw	r3,-24(fp)
    3c20:	1004913a 	slli	r2,r2,4
    3c24:	10c5883a 	add	r2,r2,r3
    3c28:	10801004 	addi	r2,r2,64
    3c2c:	10c00017 	ldw	r3,0(r2)
    3c30:	e0bff517 	ldw	r2,-44(fp)
    3c34:	1887883a 	add	r3,r3,r2
    3c38:	e0bffb17 	ldw	r2,-20(fp)
    3c3c:	10c0470e 	bge	r2,r3,3d5c <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    3c40:	e0bff817 	ldw	r2,-32(fp)
    3c44:	e0fffa17 	ldw	r3,-24(fp)
    3c48:	1004913a 	slli	r2,r2,4
    3c4c:	10c5883a 	add	r2,r2,r3
    3c50:	10801004 	addi	r2,r2,64
    3c54:	10c00017 	ldw	r3,0(r2)
    3c58:	e0bff517 	ldw	r2,-44(fp)
    3c5c:	1887883a 	add	r3,r3,r2
    3c60:	e0bffb17 	ldw	r2,-20(fp)
    3c64:	1885c83a 	sub	r2,r3,r2
    3c68:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    3c6c:	e0bff617 	ldw	r2,-40(fp)
    3c70:	e0bfff15 	stw	r2,-4(fp)
    3c74:	e0fffd17 	ldw	r3,-12(fp)
    3c78:	e0fffe15 	stw	r3,-8(fp)
    3c7c:	e0bfff17 	ldw	r2,-4(fp)
    3c80:	e0fffe17 	ldw	r3,-8(fp)
    3c84:	10c0020e 	bge	r2,r3,3c90 <alt_epcs_flash_write+0x130>
    3c88:	e0bfff17 	ldw	r2,-4(fp)
    3c8c:	e0bffe15 	stw	r2,-8(fp)
    3c90:	e0fffe17 	ldw	r3,-8(fp)
    3c94:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    3c98:	e1fff617 	ldw	r7,-40(fp)
    3c9c:	e13ffa17 	ldw	r4,-24(fp)
    3ca0:	e17ffc17 	ldw	r5,-16(fp)
    3ca4:	e1bffb17 	ldw	r6,-20(fp)
    3ca8:	0003a580 	call	3a58 <alt_epcs_flash_memcmp>
    3cac:	1005003a 	cmpeq	r2,r2,zero
    3cb0:	1000131e 	bne	r2,zero,3d00 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    3cb4:	e0bffa17 	ldw	r2,-24(fp)
    3cb8:	10800817 	ldw	r2,32(r2)
    3cbc:	e13ffa17 	ldw	r4,-24(fp)
    3cc0:	e17ff517 	ldw	r5,-44(fp)
    3cc4:	103ee83a 	callr	r2
    3cc8:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
    3ccc:	e0bff917 	ldw	r2,-28(fp)
    3cd0:	1004c03a 	cmpne	r2,r2,zero
    3cd4:	10000a1e 	bne	r2,zero,3d00 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
    3cd8:	e0bffa17 	ldw	r2,-24(fp)
    3cdc:	10c00917 	ldw	r3,36(r2)
    3ce0:	e0bff617 	ldw	r2,-40(fp)
    3ce4:	d8800015 	stw	r2,0(sp)
    3ce8:	e13ffa17 	ldw	r4,-24(fp)
    3cec:	e17ff517 	ldw	r5,-44(fp)
    3cf0:	e1bffb17 	ldw	r6,-20(fp)
    3cf4:	e1fffc17 	ldw	r7,-16(fp)
    3cf8:	183ee83a 	callr	r3
    3cfc:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    3d00:	e0fffd17 	ldw	r3,-12(fp)
    3d04:	e0bff617 	ldw	r2,-40(fp)
    3d08:	18802f26 	beq	r3,r2,3dc8 <alt_epcs_flash_write+0x268>
    3d0c:	e0bff917 	ldw	r2,-28(fp)
    3d10:	1004c03a 	cmpne	r2,r2,zero
    3d14:	10002c1e 	bne	r2,zero,3dc8 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
    3d18:	e0fffd17 	ldw	r3,-12(fp)
    3d1c:	e0bff617 	ldw	r2,-40(fp)
    3d20:	1885c83a 	sub	r2,r3,r2
    3d24:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    3d28:	e0bff817 	ldw	r2,-32(fp)
    3d2c:	e0fffa17 	ldw	r3,-24(fp)
    3d30:	1004913a 	slli	r2,r2,4
    3d34:	10c5883a 	add	r2,r2,r3
    3d38:	10801004 	addi	r2,r2,64
    3d3c:	10c00017 	ldw	r3,0(r2)
    3d40:	e0bff517 	ldw	r2,-44(fp)
    3d44:	1885883a 	add	r2,r3,r2
    3d48:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    3d4c:	e0fffc17 	ldw	r3,-16(fp)
    3d50:	e0bff617 	ldw	r2,-40(fp)
    3d54:	1885883a 	add	r2,r3,r2
    3d58:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    3d5c:	e0bff817 	ldw	r2,-32(fp)
    3d60:	e0fffa17 	ldw	r3,-24(fp)
    3d64:	1004913a 	slli	r2,r2,4
    3d68:	10c5883a 	add	r2,r2,r3
    3d6c:	10801004 	addi	r2,r2,64
    3d70:	10c00017 	ldw	r3,0(r2)
    3d74:	e0bff517 	ldw	r2,-44(fp)
    3d78:	10c5883a 	add	r2,r2,r3
    3d7c:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    3d80:	e0bff717 	ldw	r2,-36(fp)
    3d84:	10800044 	addi	r2,r2,1
    3d88:	e0bff715 	stw	r2,-36(fp)
    3d8c:	e0bff817 	ldw	r2,-32(fp)
    3d90:	e0fffa17 	ldw	r3,-24(fp)
    3d94:	1004913a 	slli	r2,r2,4
    3d98:	10c5883a 	add	r2,r2,r3
    3d9c:	10800f04 	addi	r2,r2,60
    3da0:	10c00017 	ldw	r3,0(r2)
    3da4:	e0bff717 	ldw	r2,-36(fp)
    3da8:	10ff9816 	blt	r2,r3,3c0c <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    3dac:	e0bff817 	ldw	r2,-32(fp)
    3db0:	10800044 	addi	r2,r2,1
    3db4:	e0bff815 	stw	r2,-32(fp)
    3db8:	e0bffa17 	ldw	r2,-24(fp)
    3dbc:	10c00c17 	ldw	r3,48(r2)
    3dc0:	e0bff817 	ldw	r2,-32(fp)
    3dc4:	10ff7116 	blt	r2,r3,3b8c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    3dc8:	e0bff917 	ldw	r2,-28(fp)
}
    3dcc:	e037883a 	mov	sp,fp
    3dd0:	dfc00117 	ldw	ra,4(sp)
    3dd4:	df000017 	ldw	fp,0(sp)
    3dd8:	dec00204 	addi	sp,sp,8
    3ddc:	f800283a 	ret

00003de0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    3de0:	defffa04 	addi	sp,sp,-24
    3de4:	df000515 	stw	fp,20(sp)
    3de8:	df000504 	addi	fp,sp,20
    3dec:	e13ffd15 	stw	r4,-12(fp)
    3df0:	e17ffe15 	stw	r5,-8(fp)
    3df4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    3df8:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    3dfc:	e0bffd17 	ldw	r2,-12(fp)
    3e00:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
    3e04:	e0bffb17 	ldw	r2,-20(fp)
    3e08:	10c00c17 	ldw	r3,48(r2)
    3e0c:	e0bfff17 	ldw	r2,-4(fp)
    3e10:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    3e14:	e0bffb17 	ldw	r2,-20(fp)
    3e18:	10800c17 	ldw	r2,48(r2)
    3e1c:	1004c03a 	cmpne	r2,r2,zero
    3e20:	1000031e 	bne	r2,zero,3e30 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
    3e24:	00bffec4 	movi	r2,-5
    3e28:	e0bffc15 	stw	r2,-16(fp)
    3e2c:	00000b06 	br	3e5c <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    3e30:	e0bffb17 	ldw	r2,-20(fp)
    3e34:	10800c17 	ldw	r2,48(r2)
    3e38:	10800250 	cmplti	r2,r2,9
    3e3c:	1000031e 	bne	r2,zero,3e4c <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
    3e40:	00bffd04 	movi	r2,-12
    3e44:	e0bffc15 	stw	r2,-16(fp)
    3e48:	00000406 	br	3e5c <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
    3e4c:	e0bffb17 	ldw	r2,-20(fp)
    3e50:	10c00d04 	addi	r3,r2,52
    3e54:	e0bffe17 	ldw	r2,-8(fp)
    3e58:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    3e5c:	e0bffc17 	ldw	r2,-16(fp)
}
    3e60:	e037883a 	mov	sp,fp
    3e64:	df000017 	ldw	fp,0(sp)
    3e68:	dec00104 	addi	sp,sp,4
    3e6c:	f800283a 	ret

00003e70 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    3e70:	defffa04 	addi	sp,sp,-24
    3e74:	dfc00515 	stw	ra,20(sp)
    3e78:	df000415 	stw	fp,16(sp)
    3e7c:	df000404 	addi	fp,sp,16
    3e80:	e13ffe15 	stw	r4,-8(fp)
    3e84:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    3e88:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    3e8c:	e0bffe17 	ldw	r2,-8(fp)
    3e90:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    3e94:	e13ffe17 	ldw	r4,-8(fp)
    3e98:	e17fff17 	ldw	r5,-4(fp)
    3e9c:	0003ee00 	call	3ee0 <alt_epcs_test_address>
    3ea0:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
    3ea4:	e0bffd17 	ldw	r2,-12(fp)
    3ea8:	1004803a 	cmplt	r2,r2,zero
    3eac:	1000061e 	bne	r2,zero,3ec8 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    3eb0:	e0bffc17 	ldw	r2,-16(fp)
    3eb4:	11002d17 	ldw	r4,180(r2)
    3eb8:	e17fff17 	ldw	r5,-4(fp)
    3ebc:	e0bffc17 	ldw	r2,-16(fp)
    3ec0:	11803117 	ldw	r6,196(r2)
    3ec4:	00056e40 	call	56e4 <epcs_sector_erase>
  }
  return ret_code;
    3ec8:	e0bffd17 	ldw	r2,-12(fp)
}
    3ecc:	e037883a 	mov	sp,fp
    3ed0:	dfc00117 	ldw	ra,4(sp)
    3ed4:	df000017 	ldw	fp,0(sp)
    3ed8:	dec00204 	addi	sp,sp,8
    3edc:	f800283a 	ret

00003ee0 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    3ee0:	defff904 	addi	sp,sp,-28
    3ee4:	df000615 	stw	fp,24(sp)
    3ee8:	df000604 	addi	fp,sp,24
    3eec:	e13ffe15 	stw	r4,-8(fp)
    3ef0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    3ef4:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    3ef8:	e0bffe17 	ldw	r2,-8(fp)
    3efc:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    3f00:	e0bffc17 	ldw	r2,-16(fp)
    3f04:	10800c17 	ldw	r2,48(r2)
    3f08:	10bfffc4 	addi	r2,r2,-1
    3f0c:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    3f10:	e0bffb17 	ldw	r2,-20(fp)
    3f14:	e0fffc17 	ldw	r3,-16(fp)
    3f18:	1004913a 	slli	r2,r2,4
    3f1c:	10c5883a 	add	r2,r2,r3
    3f20:	10800d04 	addi	r2,r2,52
    3f24:	11000017 	ldw	r4,0(r2)
    3f28:	e0bffb17 	ldw	r2,-20(fp)
    3f2c:	e0fffc17 	ldw	r3,-16(fp)
    3f30:	1004913a 	slli	r2,r2,4
    3f34:	10c5883a 	add	r2,r2,r3
    3f38:	10800e04 	addi	r2,r2,56
    3f3c:	10800017 	ldw	r2,0(r2)
    3f40:	2085883a 	add	r2,r4,r2
    3f44:	10bfffc4 	addi	r2,r2,-1
    3f48:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
    3f4c:	e0ffff17 	ldw	r3,-4(fp)
    3f50:	e0bffa17 	ldw	r2,-24(fp)
    3f54:	10c0022e 	bgeu	r2,r3,3f60 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    3f58:	00bffec4 	movi	r2,-5
    3f5c:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
    3f60:	e0bffd17 	ldw	r2,-12(fp)
}
    3f64:	e037883a 	mov	sp,fp
    3f68:	df000017 	ldw	fp,0(sp)
    3f6c:	dec00104 	addi	sp,sp,4
    3f70:	f800283a 	ret

00003f74 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    3f74:	defff204 	addi	sp,sp,-56
    3f78:	dfc00d15 	stw	ra,52(sp)
    3f7c:	df000c15 	stw	fp,48(sp)
    3f80:	df000c04 	addi	fp,sp,48
    3f84:	e13ffa15 	stw	r4,-24(fp)
    3f88:	e17ffb15 	stw	r5,-20(fp)
    3f8c:	e1bffc15 	stw	r6,-16(fp)
    3f90:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    3f94:	e0bffa17 	ldw	r2,-24(fp)
    3f98:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    3f9c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    3fa0:	e13ffa17 	ldw	r4,-24(fp)
    3fa4:	e17ffc17 	ldw	r5,-16(fp)
    3fa8:	0003ee00 	call	3ee0 <alt_epcs_test_address>
    3fac:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    3fb0:	e0bff917 	ldw	r2,-28(fp)
    3fb4:	1004803a 	cmplt	r2,r2,zero
    3fb8:	10002f1e 	bne	r2,zero,4078 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    3fbc:	00002b06 	br	406c <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    3fc0:	e0bff817 	ldw	r2,-32(fp)
    3fc4:	10c03017 	ldw	r3,192(r2)
    3fc8:	e0bffc17 	ldw	r2,-16(fp)
    3fcc:	1887883a 	add	r3,r3,r2
    3fd0:	e0bff817 	ldw	r2,-32(fp)
    3fd4:	10803017 	ldw	r2,192(r2)
    3fd8:	0085c83a 	sub	r2,zero,r2
    3fdc:	1884703a 	and	r2,r3,r2
    3fe0:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    3fe4:	e0fff517 	ldw	r3,-44(fp)
    3fe8:	e0bffc17 	ldw	r2,-16(fp)
    3fec:	1885c83a 	sub	r2,r3,r2
    3ff0:	e0c00217 	ldw	r3,8(fp)
    3ff4:	e0ffff15 	stw	r3,-4(fp)
    3ff8:	e0bffe15 	stw	r2,-8(fp)
    3ffc:	e0bfff17 	ldw	r2,-4(fp)
    4000:	e0fffe17 	ldw	r3,-8(fp)
    4004:	10c0020e 	bge	r2,r3,4010 <alt_epcs_flash_write_block+0x9c>
    4008:	e0bfff17 	ldw	r2,-4(fp)
    400c:	e0bffe15 	stw	r2,-8(fp)
    4010:	e0fffe17 	ldw	r3,-8(fp)
    4014:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    4018:	e0bff817 	ldw	r2,-32(fp)
    401c:	11002d17 	ldw	r4,180(r2)
    4020:	e0fffd17 	ldw	r3,-12(fp)
    4024:	e0bff717 	ldw	r2,-36(fp)
    4028:	188d883a 	add	r6,r3,r2
    402c:	e0bff817 	ldw	r2,-32(fp)
    4030:	10803117 	ldw	r2,196(r2)
    4034:	d8800015 	stw	r2,0(sp)
    4038:	e17ffc17 	ldw	r5,-16(fp)
    403c:	e1fff617 	ldw	r7,-40(fp)
    4040:	0005a4c0 	call	5a4c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    4044:	e0c00217 	ldw	r3,8(fp)
    4048:	e0bff617 	ldw	r2,-40(fp)
    404c:	1885c83a 	sub	r2,r3,r2
    4050:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    4054:	e0fff717 	ldw	r3,-36(fp)
    4058:	e0bff617 	ldw	r2,-40(fp)
    405c:	1885883a 	add	r2,r3,r2
    4060:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    4064:	e0bff517 	ldw	r2,-44(fp)
    4068:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    406c:	e0800217 	ldw	r2,8(fp)
    4070:	1004c03a 	cmpne	r2,r2,zero
    4074:	103fd21e 	bne	r2,zero,3fc0 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    4078:	e0bff917 	ldw	r2,-28(fp)
}
    407c:	e037883a 	mov	sp,fp
    4080:	dfc00117 	ldw	ra,4(sp)
    4084:	df000017 	ldw	fp,0(sp)
    4088:	dec00204 	addi	sp,sp,8
    408c:	f800283a 	ret

00004090 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    4090:	defff704 	addi	sp,sp,-36
    4094:	dfc00815 	stw	ra,32(sp)
    4098:	df000715 	stw	fp,28(sp)
    409c:	df000704 	addi	fp,sp,28
    40a0:	e13ffc15 	stw	r4,-16(fp)
    40a4:	e17ffd15 	stw	r5,-12(fp)
    40a8:	e1bffe15 	stw	r6,-8(fp)
    40ac:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    40b0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    40b4:	e0bffc17 	ldw	r2,-16(fp)
    40b8:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    40bc:	e13ffc17 	ldw	r4,-16(fp)
    40c0:	e17ffd17 	ldw	r5,-12(fp)
    40c4:	0003ee00 	call	3ee0 <alt_epcs_test_address>
    40c8:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
    40cc:	e0bffb17 	ldw	r2,-20(fp)
    40d0:	1004803a 	cmplt	r2,r2,zero
    40d4:	10000e1e 	bne	r2,zero,4110 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    40d8:	e0bffa17 	ldw	r2,-24(fp)
    40dc:	11002d17 	ldw	r4,180(r2)
    40e0:	e1bffe17 	ldw	r6,-8(fp)
    40e4:	e0bffa17 	ldw	r2,-24(fp)
    40e8:	10803117 	ldw	r2,196(r2)
    40ec:	d8800015 	stw	r2,0(sp)
    40f0:	e17ffd17 	ldw	r5,-12(fp)
    40f4:	e1ffff17 	ldw	r7,-4(fp)
    40f8:	000584c0 	call	584c <epcs_read_buffer>
    40fc:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    4100:	e0fffb17 	ldw	r3,-20(fp)
    4104:	e0bfff17 	ldw	r2,-4(fp)
    4108:	1880011e 	bne	r3,r2,4110 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    410c:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
    4110:	e0bffb17 	ldw	r2,-20(fp)
}
    4114:	e037883a 	mov	sp,fp
    4118:	dfc00117 	ldw	ra,4(sp)
    411c:	df000017 	ldw	fp,0(sp)
    4120:	dec00204 	addi	sp,sp,8
    4124:	f800283a 	ret

00004128 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4128:	defffa04 	addi	sp,sp,-24
    412c:	dfc00515 	stw	ra,20(sp)
    4130:	df000415 	stw	fp,16(sp)
    4134:	df000404 	addi	fp,sp,16
    4138:	e13ffd15 	stw	r4,-12(fp)
    413c:	e17ffe15 	stw	r5,-8(fp)
    4140:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4144:	e0bffd17 	ldw	r2,-12(fp)
    4148:	10800017 	ldw	r2,0(r2)
    414c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4150:	e0bffc17 	ldw	r2,-16(fp)
    4154:	11000a04 	addi	r4,r2,40
    4158:	e0bffd17 	ldw	r2,-12(fp)
    415c:	11c00217 	ldw	r7,8(r2)
    4160:	e17ffe17 	ldw	r5,-8(fp)
    4164:	e1bfff17 	ldw	r6,-4(fp)
    4168:	00047700 	call	4770 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    416c:	e037883a 	mov	sp,fp
    4170:	dfc00117 	ldw	ra,4(sp)
    4174:	df000017 	ldw	fp,0(sp)
    4178:	dec00204 	addi	sp,sp,8
    417c:	f800283a 	ret

00004180 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4180:	defffa04 	addi	sp,sp,-24
    4184:	dfc00515 	stw	ra,20(sp)
    4188:	df000415 	stw	fp,16(sp)
    418c:	df000404 	addi	fp,sp,16
    4190:	e13ffd15 	stw	r4,-12(fp)
    4194:	e17ffe15 	stw	r5,-8(fp)
    4198:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    419c:	e0bffd17 	ldw	r2,-12(fp)
    41a0:	10800017 	ldw	r2,0(r2)
    41a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    41a8:	e0bffc17 	ldw	r2,-16(fp)
    41ac:	11000a04 	addi	r4,r2,40
    41b0:	e0bffd17 	ldw	r2,-12(fp)
    41b4:	11c00217 	ldw	r7,8(r2)
    41b8:	e17ffe17 	ldw	r5,-8(fp)
    41bc:	e1bfff17 	ldw	r6,-4(fp)
    41c0:	00049940 	call	4994 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    41c4:	e037883a 	mov	sp,fp
    41c8:	dfc00117 	ldw	ra,4(sp)
    41cc:	df000017 	ldw	fp,0(sp)
    41d0:	dec00204 	addi	sp,sp,8
    41d4:	f800283a 	ret

000041d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    41d8:	defffc04 	addi	sp,sp,-16
    41dc:	dfc00315 	stw	ra,12(sp)
    41e0:	df000215 	stw	fp,8(sp)
    41e4:	df000204 	addi	fp,sp,8
    41e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    41ec:	e0bfff17 	ldw	r2,-4(fp)
    41f0:	10800017 	ldw	r2,0(r2)
    41f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    41f8:	e0bffe17 	ldw	r2,-8(fp)
    41fc:	11000a04 	addi	r4,r2,40
    4200:	e0bfff17 	ldw	r2,-4(fp)
    4204:	11400217 	ldw	r5,8(r2)
    4208:	00046080 	call	4608 <altera_avalon_jtag_uart_close>
}
    420c:	e037883a 	mov	sp,fp
    4210:	dfc00117 	ldw	ra,4(sp)
    4214:	df000017 	ldw	fp,0(sp)
    4218:	dec00204 	addi	sp,sp,8
    421c:	f800283a 	ret

00004220 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4220:	defffa04 	addi	sp,sp,-24
    4224:	dfc00515 	stw	ra,20(sp)
    4228:	df000415 	stw	fp,16(sp)
    422c:	df000404 	addi	fp,sp,16
    4230:	e13ffd15 	stw	r4,-12(fp)
    4234:	e17ffe15 	stw	r5,-8(fp)
    4238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    423c:	e0bffd17 	ldw	r2,-12(fp)
    4240:	10800017 	ldw	r2,0(r2)
    4244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4248:	e0bffc17 	ldw	r2,-16(fp)
    424c:	11000a04 	addi	r4,r2,40
    4250:	e17ffe17 	ldw	r5,-8(fp)
    4254:	e1bfff17 	ldw	r6,-4(fp)
    4258:	000467c0 	call	467c <altera_avalon_jtag_uart_ioctl>
}
    425c:	e037883a 	mov	sp,fp
    4260:	dfc00117 	ldw	ra,4(sp)
    4264:	df000017 	ldw	fp,0(sp)
    4268:	dec00204 	addi	sp,sp,8
    426c:	f800283a 	ret

00004270 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4270:	defffa04 	addi	sp,sp,-24
    4274:	dfc00515 	stw	ra,20(sp)
    4278:	df000415 	stw	fp,16(sp)
    427c:	df000404 	addi	fp,sp,16
    4280:	e13ffd15 	stw	r4,-12(fp)
    4284:	e17ffe15 	stw	r5,-8(fp)
    4288:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    428c:	e0fffd17 	ldw	r3,-12(fp)
    4290:	00800044 	movi	r2,1
    4294:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4298:	e0bffd17 	ldw	r2,-12(fp)
    429c:	10800017 	ldw	r2,0(r2)
    42a0:	11000104 	addi	r4,r2,4
    42a4:	e0bffd17 	ldw	r2,-12(fp)
    42a8:	10800817 	ldw	r2,32(r2)
    42ac:	1007883a 	mov	r3,r2
    42b0:	2005883a 	mov	r2,r4
    42b4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    42b8:	e13ffe17 	ldw	r4,-8(fp)
    42bc:	e17fff17 	ldw	r5,-4(fp)
    42c0:	d8000015 	stw	zero,0(sp)
    42c4:	01800034 	movhi	r6,0
    42c8:	3190cc04 	addi	r6,r6,17200
    42cc:	e1fffd17 	ldw	r7,-12(fp)
    42d0:	00061580 	call	6158 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    42d4:	e0bffd17 	ldw	r2,-12(fp)
    42d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    42dc:	e0bffd17 	ldw	r2,-12(fp)
    42e0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    42e4:	00800074 	movhi	r2,1
    42e8:	10a4b304 	addi	r2,r2,-27956
    42ec:	10800017 	ldw	r2,0(r2)
    42f0:	100b883a 	mov	r5,r2
    42f4:	01800034 	movhi	r6,0
    42f8:	31915604 	addi	r6,r6,17752
    42fc:	e1fffd17 	ldw	r7,-12(fp)
    4300:	0005d580 	call	5d58 <alt_alarm_start>
    4304:	1004403a 	cmpge	r2,r2,zero
    4308:	1000041e 	bne	r2,zero,431c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    430c:	e0fffd17 	ldw	r3,-12(fp)
    4310:	00a00034 	movhi	r2,32768
    4314:	10bfffc4 	addi	r2,r2,-1
    4318:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    431c:	e037883a 	mov	sp,fp
    4320:	dfc00117 	ldw	ra,4(sp)
    4324:	df000017 	ldw	fp,0(sp)
    4328:	dec00204 	addi	sp,sp,8
    432c:	f800283a 	ret

00004330 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4330:	defff804 	addi	sp,sp,-32
    4334:	df000715 	stw	fp,28(sp)
    4338:	df000704 	addi	fp,sp,28
    433c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4340:	e0bfff17 	ldw	r2,-4(fp)
    4344:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    4348:	e0bffe17 	ldw	r2,-8(fp)
    434c:	10800017 	ldw	r2,0(r2)
    4350:	e0bffd15 	stw	r2,-12(fp)
    4354:	00000006 	br	4358 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4358:	e0bffd17 	ldw	r2,-12(fp)
    435c:	10800104 	addi	r2,r2,4
    4360:	10800037 	ldwio	r2,0(r2)
    4364:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4368:	e0bffc17 	ldw	r2,-16(fp)
    436c:	1080c00c 	andi	r2,r2,768
    4370:	1005003a 	cmpeq	r2,r2,zero
    4374:	1000741e 	bne	r2,zero,4548 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4378:	e0bffc17 	ldw	r2,-16(fp)
    437c:	1080400c 	andi	r2,r2,256
    4380:	1005003a 	cmpeq	r2,r2,zero
    4384:	1000351e 	bne	r2,zero,445c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4388:	00800074 	movhi	r2,1
    438c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4390:	e0bffe17 	ldw	r2,-8(fp)
    4394:	10800a17 	ldw	r2,40(r2)
    4398:	10800044 	addi	r2,r2,1
    439c:	1081ffcc 	andi	r2,r2,2047
    43a0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    43a4:	e0bffe17 	ldw	r2,-8(fp)
    43a8:	10c00b17 	ldw	r3,44(r2)
    43ac:	e0bffa17 	ldw	r2,-24(fp)
    43b0:	18801626 	beq	r3,r2,440c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    43b4:	e0bffd17 	ldw	r2,-12(fp)
    43b8:	10800037 	ldwio	r2,0(r2)
    43bc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    43c0:	e0bffb17 	ldw	r2,-20(fp)
    43c4:	10a0000c 	andi	r2,r2,32768
    43c8:	1005003a 	cmpeq	r2,r2,zero
    43cc:	10000f1e 	bne	r2,zero,440c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10c00a17 	ldw	r3,40(r2)
    43d8:	e0bffb17 	ldw	r2,-20(fp)
    43dc:	1009883a 	mov	r4,r2
    43e0:	e0bffe17 	ldw	r2,-8(fp)
    43e4:	1885883a 	add	r2,r3,r2
    43e8:	10800e04 	addi	r2,r2,56
    43ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    43f0:	e0bffe17 	ldw	r2,-8(fp)
    43f4:	10800a17 	ldw	r2,40(r2)
    43f8:	10800044 	addi	r2,r2,1
    43fc:	10c1ffcc 	andi	r3,r2,2047
    4400:	e0bffe17 	ldw	r2,-8(fp)
    4404:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4408:	003fe106 	br	4390 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    440c:	e0bffb17 	ldw	r2,-20(fp)
    4410:	10bfffec 	andhi	r2,r2,65535
    4414:	1005003a 	cmpeq	r2,r2,zero
    4418:	1000101e 	bne	r2,zero,445c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    441c:	e0bffe17 	ldw	r2,-8(fp)
    4420:	10c00817 	ldw	r3,32(r2)
    4424:	00bfff84 	movi	r2,-2
    4428:	1886703a 	and	r3,r3,r2
    442c:	e0bffe17 	ldw	r2,-8(fp)
    4430:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4434:	e0bffd17 	ldw	r2,-12(fp)
    4438:	11000104 	addi	r4,r2,4
    443c:	e0bffe17 	ldw	r2,-8(fp)
    4440:	10800817 	ldw	r2,32(r2)
    4444:	1007883a 	mov	r3,r2
    4448:	2005883a 	mov	r2,r4
    444c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4450:	e0bffd17 	ldw	r2,-12(fp)
    4454:	10800104 	addi	r2,r2,4
    4458:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    445c:	e0bffc17 	ldw	r2,-16(fp)
    4460:	1080800c 	andi	r2,r2,512
    4464:	1005003a 	cmpeq	r2,r2,zero
    4468:	103fbb1e 	bne	r2,zero,4358 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    446c:	e0bffc17 	ldw	r2,-16(fp)
    4470:	10bfffec 	andhi	r2,r2,65535
    4474:	1004d43a 	srli	r2,r2,16
    4478:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    447c:	00001506 	br	44d4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4480:	e13ffd17 	ldw	r4,-12(fp)
    4484:	e0bffe17 	ldw	r2,-8(fp)
    4488:	10c00d17 	ldw	r3,52(r2)
    448c:	e0bffe17 	ldw	r2,-8(fp)
    4490:	1885883a 	add	r2,r3,r2
    4494:	10820e04 	addi	r2,r2,2104
    4498:	10800003 	ldbu	r2,0(r2)
    449c:	10c03fcc 	andi	r3,r2,255
    44a0:	18c0201c 	xori	r3,r3,128
    44a4:	18ffe004 	addi	r3,r3,-128
    44a8:	2005883a 	mov	r2,r4
    44ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    44b0:	e0bffe17 	ldw	r2,-8(fp)
    44b4:	10800d17 	ldw	r2,52(r2)
    44b8:	10800044 	addi	r2,r2,1
    44bc:	10c1ffcc 	andi	r3,r2,2047
    44c0:	e0bffe17 	ldw	r2,-8(fp)
    44c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    44c8:	e0bff917 	ldw	r2,-28(fp)
    44cc:	10bfffc4 	addi	r2,r2,-1
    44d0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    44d4:	e0bff917 	ldw	r2,-28(fp)
    44d8:	1005003a 	cmpeq	r2,r2,zero
    44dc:	1000051e 	bne	r2,zero,44f4 <altera_avalon_jtag_uart_irq+0x1c4>
    44e0:	e0bffe17 	ldw	r2,-8(fp)
    44e4:	10c00d17 	ldw	r3,52(r2)
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	10800c17 	ldw	r2,48(r2)
    44f0:	18bfe31e 	bne	r3,r2,4480 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    44f4:	e0bff917 	ldw	r2,-28(fp)
    44f8:	1005003a 	cmpeq	r2,r2,zero
    44fc:	103f961e 	bne	r2,zero,4358 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4500:	e0bffe17 	ldw	r2,-8(fp)
    4504:	10c00817 	ldw	r3,32(r2)
    4508:	00bfff44 	movi	r2,-3
    450c:	1886703a 	and	r3,r3,r2
    4510:	e0bffe17 	ldw	r2,-8(fp)
    4514:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4518:	e0bffe17 	ldw	r2,-8(fp)
    451c:	10800017 	ldw	r2,0(r2)
    4520:	11000104 	addi	r4,r2,4
    4524:	e0bffe17 	ldw	r2,-8(fp)
    4528:	10800817 	ldw	r2,32(r2)
    452c:	1007883a 	mov	r3,r2
    4530:	2005883a 	mov	r2,r4
    4534:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4538:	e0bffd17 	ldw	r2,-12(fp)
    453c:	10800104 	addi	r2,r2,4
    4540:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4544:	003f8406 	br	4358 <altera_avalon_jtag_uart_irq+0x28>
}
    4548:	e037883a 	mov	sp,fp
    454c:	df000017 	ldw	fp,0(sp)
    4550:	dec00104 	addi	sp,sp,4
    4554:	f800283a 	ret

00004558 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4558:	defffc04 	addi	sp,sp,-16
    455c:	df000315 	stw	fp,12(sp)
    4560:	df000304 	addi	fp,sp,12
    4564:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4568:	e0bfff17 	ldw	r2,-4(fp)
    456c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4570:	e0bffe17 	ldw	r2,-8(fp)
    4574:	10800017 	ldw	r2,0(r2)
    4578:	10800104 	addi	r2,r2,4
    457c:	10800037 	ldwio	r2,0(r2)
    4580:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4584:	e0bffd17 	ldw	r2,-12(fp)
    4588:	1081000c 	andi	r2,r2,1024
    458c:	1005003a 	cmpeq	r2,r2,zero
    4590:	10000c1e 	bne	r2,zero,45c4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4594:	e0bffe17 	ldw	r2,-8(fp)
    4598:	10800017 	ldw	r2,0(r2)
    459c:	11000104 	addi	r4,r2,4
    45a0:	e0bffe17 	ldw	r2,-8(fp)
    45a4:	10800817 	ldw	r2,32(r2)
    45a8:	10810014 	ori	r2,r2,1024
    45ac:	1007883a 	mov	r3,r2
    45b0:	2005883a 	mov	r2,r4
    45b4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    45b8:	e0bffe17 	ldw	r2,-8(fp)
    45bc:	10000915 	stw	zero,36(r2)
    45c0:	00000a06 	br	45ec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    45c4:	e0bffe17 	ldw	r2,-8(fp)
    45c8:	10c00917 	ldw	r3,36(r2)
    45cc:	00a00034 	movhi	r2,32768
    45d0:	10bfff04 	addi	r2,r2,-4
    45d4:	10c00536 	bltu	r2,r3,45ec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    45d8:	e0bffe17 	ldw	r2,-8(fp)
    45dc:	10800917 	ldw	r2,36(r2)
    45e0:	10c00044 	addi	r3,r2,1
    45e4:	e0bffe17 	ldw	r2,-8(fp)
    45e8:	10c00915 	stw	r3,36(r2)
    45ec:	00800074 	movhi	r2,1
    45f0:	10a4b304 	addi	r2,r2,-27956
    45f4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    45f8:	e037883a 	mov	sp,fp
    45fc:	df000017 	ldw	fp,0(sp)
    4600:	dec00104 	addi	sp,sp,4
    4604:	f800283a 	ret

00004608 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4608:	defffc04 	addi	sp,sp,-16
    460c:	df000315 	stw	fp,12(sp)
    4610:	df000304 	addi	fp,sp,12
    4614:	e13ffd15 	stw	r4,-12(fp)
    4618:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    461c:	00000706 	br	463c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    4620:	e0bffe17 	ldw	r2,-8(fp)
    4624:	1090000c 	andi	r2,r2,16384
    4628:	1005003a 	cmpeq	r2,r2,zero
    462c:	1000031e 	bne	r2,zero,463c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    4630:	00bffd44 	movi	r2,-11
    4634:	e0bfff15 	stw	r2,-4(fp)
    4638:	00000b06 	br	4668 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    463c:	e0bffd17 	ldw	r2,-12(fp)
    4640:	10c00d17 	ldw	r3,52(r2)
    4644:	e0bffd17 	ldw	r2,-12(fp)
    4648:	10800c17 	ldw	r2,48(r2)
    464c:	18800526 	beq	r3,r2,4664 <altera_avalon_jtag_uart_close+0x5c>
    4650:	e0bffd17 	ldw	r2,-12(fp)
    4654:	10c00917 	ldw	r3,36(r2)
    4658:	e0bffd17 	ldw	r2,-12(fp)
    465c:	10800117 	ldw	r2,4(r2)
    4660:	18bfef36 	bltu	r3,r2,4620 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4664:	e03fff15 	stw	zero,-4(fp)
    4668:	e0bfff17 	ldw	r2,-4(fp)
}
    466c:	e037883a 	mov	sp,fp
    4670:	df000017 	ldw	fp,0(sp)
    4674:	dec00104 	addi	sp,sp,4
    4678:	f800283a 	ret

0000467c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    467c:	defff804 	addi	sp,sp,-32
    4680:	df000715 	stw	fp,28(sp)
    4684:	df000704 	addi	fp,sp,28
    4688:	e13ffb15 	stw	r4,-20(fp)
    468c:	e17ffc15 	stw	r5,-16(fp)
    4690:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    4694:	00bff9c4 	movi	r2,-25
    4698:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    469c:	e0bffc17 	ldw	r2,-16(fp)
    46a0:	e0bfff15 	stw	r2,-4(fp)
    46a4:	e0ffff17 	ldw	r3,-4(fp)
    46a8:	189a8060 	cmpeqi	r2,r3,27137
    46ac:	1000041e 	bne	r2,zero,46c0 <altera_avalon_jtag_uart_ioctl+0x44>
    46b0:	e0ffff17 	ldw	r3,-4(fp)
    46b4:	189a80a0 	cmpeqi	r2,r3,27138
    46b8:	10001b1e 	bne	r2,zero,4728 <altera_avalon_jtag_uart_ioctl+0xac>
    46bc:	00002706 	br	475c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    46c0:	e0bffb17 	ldw	r2,-20(fp)
    46c4:	10c00117 	ldw	r3,4(r2)
    46c8:	00a00034 	movhi	r2,32768
    46cc:	10bfffc4 	addi	r2,r2,-1
    46d0:	18802226 	beq	r3,r2,475c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    46d4:	e0bffd17 	ldw	r2,-12(fp)
    46d8:	10800017 	ldw	r2,0(r2)
    46dc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    46e0:	e0bff917 	ldw	r2,-28(fp)
    46e4:	10800090 	cmplti	r2,r2,2
    46e8:	1000071e 	bne	r2,zero,4708 <altera_avalon_jtag_uart_ioctl+0x8c>
    46ec:	e0fff917 	ldw	r3,-28(fp)
    46f0:	00a00034 	movhi	r2,32768
    46f4:	10bfffc4 	addi	r2,r2,-1
    46f8:	18800326 	beq	r3,r2,4708 <altera_avalon_jtag_uart_ioctl+0x8c>
    46fc:	e0bff917 	ldw	r2,-28(fp)
    4700:	e0bffe15 	stw	r2,-8(fp)
    4704:	00000306 	br	4714 <altera_avalon_jtag_uart_ioctl+0x98>
    4708:	00e00034 	movhi	r3,32768
    470c:	18ffff84 	addi	r3,r3,-2
    4710:	e0fffe15 	stw	r3,-8(fp)
    4714:	e0bffb17 	ldw	r2,-20(fp)
    4718:	e0fffe17 	ldw	r3,-8(fp)
    471c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    4720:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    4724:	00000d06 	br	475c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4728:	e0bffb17 	ldw	r2,-20(fp)
    472c:	10c00117 	ldw	r3,4(r2)
    4730:	00a00034 	movhi	r2,32768
    4734:	10bfffc4 	addi	r2,r2,-1
    4738:	18800826 	beq	r3,r2,475c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    473c:	e13ffd17 	ldw	r4,-12(fp)
    4740:	e0bffb17 	ldw	r2,-20(fp)
    4744:	10c00917 	ldw	r3,36(r2)
    4748:	e0bffb17 	ldw	r2,-20(fp)
    474c:	10800117 	ldw	r2,4(r2)
    4750:	1885803a 	cmpltu	r2,r3,r2
    4754:	20800015 	stw	r2,0(r4)
      rc = 0;
    4758:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    475c:	e0bffa17 	ldw	r2,-24(fp)
}
    4760:	e037883a 	mov	sp,fp
    4764:	df000017 	ldw	fp,0(sp)
    4768:	dec00104 	addi	sp,sp,4
    476c:	f800283a 	ret

00004770 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4770:	defff204 	addi	sp,sp,-56
    4774:	dfc00d15 	stw	ra,52(sp)
    4778:	df000c15 	stw	fp,48(sp)
    477c:	df000c04 	addi	fp,sp,48
    4780:	e13ffb15 	stw	r4,-20(fp)
    4784:	e17ffc15 	stw	r5,-16(fp)
    4788:	e1bffd15 	stw	r6,-12(fp)
    478c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    4790:	e0bffc17 	ldw	r2,-16(fp)
    4794:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4798:	00004806 	br	48bc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    479c:	e0bffb17 	ldw	r2,-20(fp)
    47a0:	10800a17 	ldw	r2,40(r2)
    47a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    47a8:	e0bffb17 	ldw	r2,-20(fp)
    47ac:	10800b17 	ldw	r2,44(r2)
    47b0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    47b4:	e0fff717 	ldw	r3,-36(fp)
    47b8:	e0bff617 	ldw	r2,-40(fp)
    47bc:	18800536 	bltu	r3,r2,47d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    47c0:	e0bff717 	ldw	r2,-36(fp)
    47c4:	e0fff617 	ldw	r3,-40(fp)
    47c8:	10c5c83a 	sub	r2,r2,r3
    47cc:	e0bff815 	stw	r2,-32(fp)
    47d0:	00000406 	br	47e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    47d4:	00820004 	movi	r2,2048
    47d8:	e0fff617 	ldw	r3,-40(fp)
    47dc:	10c5c83a 	sub	r2,r2,r3
    47e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    47e4:	e0bff817 	ldw	r2,-32(fp)
    47e8:	1005003a 	cmpeq	r2,r2,zero
    47ec:	10001f1e 	bne	r2,zero,486c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    47f0:	e0fffd17 	ldw	r3,-12(fp)
    47f4:	e0bff817 	ldw	r2,-32(fp)
    47f8:	1880022e 	bgeu	r3,r2,4804 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    47fc:	e0bffd17 	ldw	r2,-12(fp)
    4800:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4804:	e0bffb17 	ldw	r2,-20(fp)
    4808:	10c00e04 	addi	r3,r2,56
    480c:	e0bff617 	ldw	r2,-40(fp)
    4810:	1887883a 	add	r3,r3,r2
    4814:	e0bffa17 	ldw	r2,-24(fp)
    4818:	1009883a 	mov	r4,r2
    481c:	180b883a 	mov	r5,r3
    4820:	e1bff817 	ldw	r6,-32(fp)
    4824:	00010080 	call	1008 <memcpy>
      ptr   += n;
    4828:	e0fff817 	ldw	r3,-32(fp)
    482c:	e0bffa17 	ldw	r2,-24(fp)
    4830:	10c5883a 	add	r2,r2,r3
    4834:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    4838:	e0fffd17 	ldw	r3,-12(fp)
    483c:	e0bff817 	ldw	r2,-32(fp)
    4840:	1885c83a 	sub	r2,r3,r2
    4844:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4848:	e0fff617 	ldw	r3,-40(fp)
    484c:	e0bff817 	ldw	r2,-32(fp)
    4850:	1885883a 	add	r2,r3,r2
    4854:	10c1ffcc 	andi	r3,r2,2047
    4858:	e0bffb17 	ldw	r2,-20(fp)
    485c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4860:	e0bffd17 	ldw	r2,-12(fp)
    4864:	10800048 	cmpgei	r2,r2,1
    4868:	103fcc1e 	bne	r2,zero,479c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    486c:	e0fffa17 	ldw	r3,-24(fp)
    4870:	e0bffc17 	ldw	r2,-16(fp)
    4874:	1880141e 	bne	r3,r2,48c8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4878:	e0bffe17 	ldw	r2,-8(fp)
    487c:	1090000c 	andi	r2,r2,16384
    4880:	1004c03a 	cmpne	r2,r2,zero
    4884:	1000101e 	bne	r2,zero,48c8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4888:	e0bffb17 	ldw	r2,-20(fp)
    488c:	10c00a17 	ldw	r3,40(r2)
    4890:	e0bff717 	ldw	r2,-36(fp)
    4894:	1880051e 	bne	r3,r2,48ac <altera_avalon_jtag_uart_read+0x13c>
    4898:	e0bffb17 	ldw	r2,-20(fp)
    489c:	10c00917 	ldw	r3,36(r2)
    48a0:	e0bffb17 	ldw	r2,-20(fp)
    48a4:	10800117 	ldw	r2,4(r2)
    48a8:	18bff736 	bltu	r3,r2,4888 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    48ac:	e0bffb17 	ldw	r2,-20(fp)
    48b0:	10c00a17 	ldw	r3,40(r2)
    48b4:	e0bff717 	ldw	r2,-36(fp)
    48b8:	18800326 	beq	r3,r2,48c8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    48bc:	e0bffd17 	ldw	r2,-12(fp)
    48c0:	10800048 	cmpgei	r2,r2,1
    48c4:	103fb51e 	bne	r2,zero,479c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    48c8:	e0fffa17 	ldw	r3,-24(fp)
    48cc:	e0bffc17 	ldw	r2,-16(fp)
    48d0:	18801926 	beq	r3,r2,4938 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    48d4:	0005303a 	rdctl	r2,status
    48d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48dc:	e0fff517 	ldw	r3,-44(fp)
    48e0:	00bfff84 	movi	r2,-2
    48e4:	1884703a 	and	r2,r3,r2
    48e8:	1001703a 	wrctl	status,r2
  
  return context;
    48ec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    48f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    48f4:	e0bffb17 	ldw	r2,-20(fp)
    48f8:	10800817 	ldw	r2,32(r2)
    48fc:	10c00054 	ori	r3,r2,1
    4900:	e0bffb17 	ldw	r2,-20(fp)
    4904:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4908:	e0bffb17 	ldw	r2,-20(fp)
    490c:	10800017 	ldw	r2,0(r2)
    4910:	11000104 	addi	r4,r2,4
    4914:	e0bffb17 	ldw	r2,-20(fp)
    4918:	10800817 	ldw	r2,32(r2)
    491c:	1007883a 	mov	r3,r2
    4920:	2005883a 	mov	r2,r4
    4924:	10c00035 	stwio	r3,0(r2)
    4928:	e0bff917 	ldw	r2,-28(fp)
    492c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4930:	e0bff417 	ldw	r2,-48(fp)
    4934:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4938:	e0fffa17 	ldw	r3,-24(fp)
    493c:	e0bffc17 	ldw	r2,-16(fp)
    4940:	18800526 	beq	r3,r2,4958 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    4944:	e0fffa17 	ldw	r3,-24(fp)
    4948:	e0bffc17 	ldw	r2,-16(fp)
    494c:	1887c83a 	sub	r3,r3,r2
    4950:	e0ffff15 	stw	r3,-4(fp)
    4954:	00000906 	br	497c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    4958:	e0bffe17 	ldw	r2,-8(fp)
    495c:	1090000c 	andi	r2,r2,16384
    4960:	1005003a 	cmpeq	r2,r2,zero
    4964:	1000031e 	bne	r2,zero,4974 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4968:	00bffd44 	movi	r2,-11
    496c:	e0bfff15 	stw	r2,-4(fp)
    4970:	00000206 	br	497c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    4974:	00bffec4 	movi	r2,-5
    4978:	e0bfff15 	stw	r2,-4(fp)
    497c:	e0bfff17 	ldw	r2,-4(fp)
}
    4980:	e037883a 	mov	sp,fp
    4984:	dfc00117 	ldw	ra,4(sp)
    4988:	df000017 	ldw	fp,0(sp)
    498c:	dec00204 	addi	sp,sp,8
    4990:	f800283a 	ret

00004994 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4994:	defff204 	addi	sp,sp,-56
    4998:	dfc00d15 	stw	ra,52(sp)
    499c:	df000c15 	stw	fp,48(sp)
    49a0:	df000c04 	addi	fp,sp,48
    49a4:	e13ffb15 	stw	r4,-20(fp)
    49a8:	e17ffc15 	stw	r5,-16(fp)
    49ac:	e1bffd15 	stw	r6,-12(fp)
    49b0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    49b4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    49b8:	e0bffc17 	ldw	r2,-16(fp)
    49bc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    49c0:	00003a06 	br	4aac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    49c4:	e0bffb17 	ldw	r2,-20(fp)
    49c8:	10800c17 	ldw	r2,48(r2)
    49cc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    49d0:	e0bffb17 	ldw	r2,-20(fp)
    49d4:	10800d17 	ldw	r2,52(r2)
    49d8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    49dc:	e0fffa17 	ldw	r3,-24(fp)
    49e0:	e0bff917 	ldw	r2,-28(fp)
    49e4:	1880062e 	bgeu	r3,r2,4a00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    49e8:	e0fff917 	ldw	r3,-28(fp)
    49ec:	e0bffa17 	ldw	r2,-24(fp)
    49f0:	1885c83a 	sub	r2,r3,r2
    49f4:	10bfffc4 	addi	r2,r2,-1
    49f8:	e0bff815 	stw	r2,-32(fp)
    49fc:	00000c06 	br	4a30 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    4a00:	e0bff917 	ldw	r2,-28(fp)
    4a04:	1005003a 	cmpeq	r2,r2,zero
    4a08:	1000051e 	bne	r2,zero,4a20 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4a0c:	00820004 	movi	r2,2048
    4a10:	e0fffa17 	ldw	r3,-24(fp)
    4a14:	10c5c83a 	sub	r2,r2,r3
    4a18:	e0bff815 	stw	r2,-32(fp)
    4a1c:	00000406 	br	4a30 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4a20:	0081ffc4 	movi	r2,2047
    4a24:	e0fffa17 	ldw	r3,-24(fp)
    4a28:	10c5c83a 	sub	r2,r2,r3
    4a2c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    4a30:	e0bff817 	ldw	r2,-32(fp)
    4a34:	1005003a 	cmpeq	r2,r2,zero
    4a38:	10001f1e 	bne	r2,zero,4ab8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    4a3c:	e0fffd17 	ldw	r3,-12(fp)
    4a40:	e0bff817 	ldw	r2,-32(fp)
    4a44:	1880022e 	bgeu	r3,r2,4a50 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    4a48:	e0bffd17 	ldw	r2,-12(fp)
    4a4c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4a50:	e0bffb17 	ldw	r2,-20(fp)
    4a54:	10c20e04 	addi	r3,r2,2104
    4a58:	e0bffa17 	ldw	r2,-24(fp)
    4a5c:	1885883a 	add	r2,r3,r2
    4a60:	e0fffc17 	ldw	r3,-16(fp)
    4a64:	1009883a 	mov	r4,r2
    4a68:	180b883a 	mov	r5,r3
    4a6c:	e1bff817 	ldw	r6,-32(fp)
    4a70:	00010080 	call	1008 <memcpy>
      ptr   += n;
    4a74:	e0fff817 	ldw	r3,-32(fp)
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	10c5883a 	add	r2,r2,r3
    4a80:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    4a84:	e0fffd17 	ldw	r3,-12(fp)
    4a88:	e0bff817 	ldw	r2,-32(fp)
    4a8c:	1885c83a 	sub	r2,r3,r2
    4a90:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4a94:	e0fffa17 	ldw	r3,-24(fp)
    4a98:	e0bff817 	ldw	r2,-32(fp)
    4a9c:	1885883a 	add	r2,r3,r2
    4aa0:	10c1ffcc 	andi	r3,r2,2047
    4aa4:	e0bffb17 	ldw	r2,-20(fp)
    4aa8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4aac:	e0bffd17 	ldw	r2,-12(fp)
    4ab0:	10800048 	cmpgei	r2,r2,1
    4ab4:	103fc31e 	bne	r2,zero,49c4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ab8:	0005303a 	rdctl	r2,status
    4abc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ac0:	e0fff517 	ldw	r3,-44(fp)
    4ac4:	00bfff84 	movi	r2,-2
    4ac8:	1884703a 	and	r2,r3,r2
    4acc:	1001703a 	wrctl	status,r2
  
  return context;
    4ad0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4ad4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4ad8:	e0bffb17 	ldw	r2,-20(fp)
    4adc:	10800817 	ldw	r2,32(r2)
    4ae0:	10c00094 	ori	r3,r2,2
    4ae4:	e0bffb17 	ldw	r2,-20(fp)
    4ae8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4aec:	e0bffb17 	ldw	r2,-20(fp)
    4af0:	10800017 	ldw	r2,0(r2)
    4af4:	11000104 	addi	r4,r2,4
    4af8:	e0bffb17 	ldw	r2,-20(fp)
    4afc:	10800817 	ldw	r2,32(r2)
    4b00:	1007883a 	mov	r3,r2
    4b04:	2005883a 	mov	r2,r4
    4b08:	10c00035 	stwio	r3,0(r2)
    4b0c:	e0bff717 	ldw	r2,-36(fp)
    4b10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b14:	e0bff417 	ldw	r2,-48(fp)
    4b18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4b1c:	e0bffd17 	ldw	r2,-12(fp)
    4b20:	10800050 	cmplti	r2,r2,1
    4b24:	1000111e 	bne	r2,zero,4b6c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    4b28:	e0bffe17 	ldw	r2,-8(fp)
    4b2c:	1090000c 	andi	r2,r2,16384
    4b30:	1004c03a 	cmpne	r2,r2,zero
    4b34:	1000101e 	bne	r2,zero,4b78 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4b38:	e0bffb17 	ldw	r2,-20(fp)
    4b3c:	10c00d17 	ldw	r3,52(r2)
    4b40:	e0bff917 	ldw	r2,-28(fp)
    4b44:	1880051e 	bne	r3,r2,4b5c <altera_avalon_jtag_uart_write+0x1c8>
    4b48:	e0bffb17 	ldw	r2,-20(fp)
    4b4c:	10c00917 	ldw	r3,36(r2)
    4b50:	e0bffb17 	ldw	r2,-20(fp)
    4b54:	10800117 	ldw	r2,4(r2)
    4b58:	18bff736 	bltu	r3,r2,4b38 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    4b5c:	e0bffb17 	ldw	r2,-20(fp)
    4b60:	10c00d17 	ldw	r3,52(r2)
    4b64:	e0bff917 	ldw	r2,-28(fp)
    4b68:	18800326 	beq	r3,r2,4b78 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    4b6c:	e0bffd17 	ldw	r2,-12(fp)
    4b70:	10800048 	cmpgei	r2,r2,1
    4b74:	103fcd1e 	bne	r2,zero,4aac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4b78:	e0fffc17 	ldw	r3,-16(fp)
    4b7c:	e0bff617 	ldw	r2,-40(fp)
    4b80:	18800526 	beq	r3,r2,4b98 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    4b84:	e0fffc17 	ldw	r3,-16(fp)
    4b88:	e0bff617 	ldw	r2,-40(fp)
    4b8c:	1887c83a 	sub	r3,r3,r2
    4b90:	e0ffff15 	stw	r3,-4(fp)
    4b94:	00000906 	br	4bbc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    4b98:	e0bffe17 	ldw	r2,-8(fp)
    4b9c:	1090000c 	andi	r2,r2,16384
    4ba0:	1005003a 	cmpeq	r2,r2,zero
    4ba4:	1000031e 	bne	r2,zero,4bb4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    4ba8:	00bffd44 	movi	r2,-11
    4bac:	e0bfff15 	stw	r2,-4(fp)
    4bb0:	00000206 	br	4bbc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4bb4:	00bffec4 	movi	r2,-5
    4bb8:	e0bfff15 	stw	r2,-4(fp)
    4bbc:	e0bfff17 	ldw	r2,-4(fp)
}
    4bc0:	e037883a 	mov	sp,fp
    4bc4:	dfc00117 	ldw	ra,4(sp)
    4bc8:	df000017 	ldw	fp,0(sp)
    4bcc:	dec00204 	addi	sp,sp,8
    4bd0:	f800283a 	ret

00004bd4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4bd4:	defffa04 	addi	sp,sp,-24
    4bd8:	dfc00515 	stw	ra,20(sp)
    4bdc:	df000415 	stw	fp,16(sp)
    4be0:	df000404 	addi	fp,sp,16
    4be4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4be8:	e0bfff17 	ldw	r2,-4(fp)
    4bec:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4bf0:	e0bfff17 	ldw	r2,-4(fp)
    4bf4:	10800104 	addi	r2,r2,4
    4bf8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4bfc:	0005303a 	rdctl	r2,status
    4c00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c04:	e0fffd17 	ldw	r3,-12(fp)
    4c08:	00bfff84 	movi	r2,-2
    4c0c:	1884703a 	and	r2,r3,r2
    4c10:	1001703a 	wrctl	status,r2
  
  return context;
    4c14:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4c18:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    4c1c:	00068f00 	call	68f0 <alt_tick>
    4c20:	e0bffe17 	ldw	r2,-8(fp)
    4c24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c28:	e0bffc17 	ldw	r2,-16(fp)
    4c2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4c30:	e037883a 	mov	sp,fp
    4c34:	dfc00117 	ldw	ra,4(sp)
    4c38:	df000017 	ldw	fp,0(sp)
    4c3c:	dec00204 	addi	sp,sp,8
    4c40:	f800283a 	ret

00004c44 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4c44:	defff804 	addi	sp,sp,-32
    4c48:	dfc00715 	stw	ra,28(sp)
    4c4c:	df000615 	stw	fp,24(sp)
    4c50:	df000604 	addi	fp,sp,24
    4c54:	e13ffc15 	stw	r4,-16(fp)
    4c58:	e17ffd15 	stw	r5,-12(fp)
    4c5c:	e1bffe15 	stw	r6,-8(fp)
    4c60:	e1ffff15 	stw	r7,-4(fp)
    4c64:	e0bfff17 	ldw	r2,-4(fp)
    4c68:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4c6c:	00800074 	movhi	r2,1
    4c70:	10a4b304 	addi	r2,r2,-27956
    4c74:	10800017 	ldw	r2,0(r2)
    4c78:	1004c03a 	cmpne	r2,r2,zero
    4c7c:	1000041e 	bne	r2,zero,4c90 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    4c80:	00c00074 	movhi	r3,1
    4c84:	18e4b304 	addi	r3,r3,-27956
    4c88:	e0bffb17 	ldw	r2,-20(fp)
    4c8c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4c90:	e0bffc17 	ldw	r2,-16(fp)
    4c94:	10800104 	addi	r2,r2,4
    4c98:	1007883a 	mov	r3,r2
    4c9c:	008001c4 	movi	r2,7
    4ca0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4ca4:	d8000015 	stw	zero,0(sp)
    4ca8:	e13ffd17 	ldw	r4,-12(fp)
    4cac:	e17ffe17 	ldw	r5,-8(fp)
    4cb0:	01800034 	movhi	r6,0
    4cb4:	3192f504 	addi	r6,r6,19412
    4cb8:	e1fffc17 	ldw	r7,-16(fp)
    4cbc:	00061580 	call	6158 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4cc0:	e037883a 	mov	sp,fp
    4cc4:	dfc00117 	ldw	ra,4(sp)
    4cc8:	df000017 	ldw	fp,0(sp)
    4ccc:	dec00204 	addi	sp,sp,8
    4cd0:	f800283a 	ret

00004cd4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4cd4:	defffa04 	addi	sp,sp,-24
    4cd8:	dfc00515 	stw	ra,20(sp)
    4cdc:	df000415 	stw	fp,16(sp)
    4ce0:	df000404 	addi	fp,sp,16
    4ce4:	e13ffd15 	stw	r4,-12(fp)
    4ce8:	e17ffe15 	stw	r5,-8(fp)
    4cec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    4cf0:	e0bffd17 	ldw	r2,-12(fp)
    4cf4:	10800017 	ldw	r2,0(r2)
    4cf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    4cfc:	e0bffc17 	ldw	r2,-16(fp)
    4d00:	11000a04 	addi	r4,r2,40
    4d04:	e0bffd17 	ldw	r2,-12(fp)
    4d08:	11c00217 	ldw	r7,8(r2)
    4d0c:	e17ffe17 	ldw	r5,-8(fp)
    4d10:	e1bfff17 	ldw	r6,-4(fp)
    4d14:	00051cc0 	call	51cc <altera_avalon_uart_read>
      fd->fd_flags);
}
    4d18:	e037883a 	mov	sp,fp
    4d1c:	dfc00117 	ldw	ra,4(sp)
    4d20:	df000017 	ldw	fp,0(sp)
    4d24:	dec00204 	addi	sp,sp,8
    4d28:	f800283a 	ret

00004d2c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4d2c:	defffa04 	addi	sp,sp,-24
    4d30:	dfc00515 	stw	ra,20(sp)
    4d34:	df000415 	stw	fp,16(sp)
    4d38:	df000404 	addi	fp,sp,16
    4d3c:	e13ffd15 	stw	r4,-12(fp)
    4d40:	e17ffe15 	stw	r5,-8(fp)
    4d44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    4d48:	e0bffd17 	ldw	r2,-12(fp)
    4d4c:	10800017 	ldw	r2,0(r2)
    4d50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    4d54:	e0bffc17 	ldw	r2,-16(fp)
    4d58:	11000a04 	addi	r4,r2,40
    4d5c:	e0bffd17 	ldw	r2,-12(fp)
    4d60:	11c00217 	ldw	r7,8(r2)
    4d64:	e17ffe17 	ldw	r5,-8(fp)
    4d68:	e1bfff17 	ldw	r6,-4(fp)
    4d6c:	000545c0 	call	545c <altera_avalon_uart_write>
      fd->fd_flags);
}
    4d70:	e037883a 	mov	sp,fp
    4d74:	dfc00117 	ldw	ra,4(sp)
    4d78:	df000017 	ldw	fp,0(sp)
    4d7c:	dec00204 	addi	sp,sp,8
    4d80:	f800283a 	ret

00004d84 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    4d84:	defffc04 	addi	sp,sp,-16
    4d88:	dfc00315 	stw	ra,12(sp)
    4d8c:	df000215 	stw	fp,8(sp)
    4d90:	df000204 	addi	fp,sp,8
    4d94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    4d98:	e0bfff17 	ldw	r2,-4(fp)
    4d9c:	10800017 	ldw	r2,0(r2)
    4da0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    4da4:	e0bffe17 	ldw	r2,-8(fp)
    4da8:	11000a04 	addi	r4,r2,40
    4dac:	e0bfff17 	ldw	r2,-4(fp)
    4db0:	11400217 	ldw	r5,8(r2)
    4db4:	000516c0 	call	516c <altera_avalon_uart_close>
}
    4db8:	e037883a 	mov	sp,fp
    4dbc:	dfc00117 	ldw	ra,4(sp)
    4dc0:	df000017 	ldw	fp,0(sp)
    4dc4:	dec00204 	addi	sp,sp,8
    4dc8:	f800283a 	ret

00004dcc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    4dcc:	defff704 	addi	sp,sp,-36
    4dd0:	dfc00815 	stw	ra,32(sp)
    4dd4:	df000715 	stw	fp,28(sp)
    4dd8:	df000704 	addi	fp,sp,28
    4ddc:	e13ffc15 	stw	r4,-16(fp)
    4de0:	e17ffd15 	stw	r5,-12(fp)
    4de4:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    4de8:	e0bffc17 	ldw	r2,-16(fp)
    4dec:	10800017 	ldw	r2,0(r2)
    4df0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    4df4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    4df8:	1004c03a 	cmpne	r2,r2,zero
    4dfc:	1000061e 	bne	r2,zero,4e18 <altera_avalon_uart_init+0x4c>
    4e00:	0005883a 	mov	r2,zero
    4e04:	1004c03a 	cmpne	r2,r2,zero
    4e08:	1000031e 	bne	r2,zero,4e18 <altera_avalon_uart_init+0x4c>
    4e0c:	0005883a 	mov	r2,zero
    4e10:	1005003a 	cmpeq	r2,r2,zero
    4e14:	1000031e 	bne	r2,zero,4e24 <altera_avalon_uart_init+0x58>
    4e18:	00800044 	movi	r2,1
    4e1c:	e0bfff15 	stw	r2,-4(fp)
    4e20:	00000106 	br	4e28 <altera_avalon_uart_init+0x5c>
    4e24:	e03fff15 	stw	zero,-4(fp)
    4e28:	e0bfff17 	ldw	r2,-4(fp)
    4e2c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    4e30:	e0bffa17 	ldw	r2,-24(fp)
    4e34:	1004c03a 	cmpne	r2,r2,zero
    4e38:	1000111e 	bne	r2,zero,4e80 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    4e3c:	e0fffc17 	ldw	r3,-16(fp)
    4e40:	00832004 	movi	r2,3200
    4e44:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    4e48:	e0bffb17 	ldw	r2,-20(fp)
    4e4c:	11000304 	addi	r4,r2,12
    4e50:	e0bffc17 	ldw	r2,-16(fp)
    4e54:	10800117 	ldw	r2,4(r2)
    4e58:	1007883a 	mov	r3,r2
    4e5c:	2005883a 	mov	r2,r4
    4e60:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    4e64:	d8000015 	stw	zero,0(sp)
    4e68:	e13ffd17 	ldw	r4,-12(fp)
    4e6c:	e17ffe17 	ldw	r5,-8(fp)
    4e70:	01800034 	movhi	r6,0
    4e74:	3193a504 	addi	r6,r6,20116
    4e78:	e1fffc17 	ldw	r7,-16(fp)
    4e7c:	00061580 	call	6158 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    4e80:	e037883a 	mov	sp,fp
    4e84:	dfc00117 	ldw	ra,4(sp)
    4e88:	df000017 	ldw	fp,0(sp)
    4e8c:	dec00204 	addi	sp,sp,8
    4e90:	f800283a 	ret

00004e94 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    4e94:	defffa04 	addi	sp,sp,-24
    4e98:	dfc00515 	stw	ra,20(sp)
    4e9c:	df000415 	stw	fp,16(sp)
    4ea0:	df000404 	addi	fp,sp,16
    4ea4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    4ea8:	e0bfff17 	ldw	r2,-4(fp)
    4eac:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    4eb0:	e0bffd17 	ldw	r2,-12(fp)
    4eb4:	10800017 	ldw	r2,0(r2)
    4eb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    4ebc:	e0bffc17 	ldw	r2,-16(fp)
    4ec0:	10800204 	addi	r2,r2,8
    4ec4:	10800037 	ldwio	r2,0(r2)
    4ec8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    4ecc:	e0bffc17 	ldw	r2,-16(fp)
    4ed0:	10800204 	addi	r2,r2,8
    4ed4:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    4ed8:	e0bffc17 	ldw	r2,-16(fp)
    4edc:	10800204 	addi	r2,r2,8
    4ee0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    4ee4:	e0bffe17 	ldw	r2,-8(fp)
    4ee8:	1080200c 	andi	r2,r2,128
    4eec:	1005003a 	cmpeq	r2,r2,zero
    4ef0:	1000031e 	bne	r2,zero,4f00 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    4ef4:	e13ffd17 	ldw	r4,-12(fp)
    4ef8:	e17ffe17 	ldw	r5,-8(fp)
    4efc:	0004f300 	call	4f30 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    4f00:	e0bffe17 	ldw	r2,-8(fp)
    4f04:	1081100c 	andi	r2,r2,1088
    4f08:	1005003a 	cmpeq	r2,r2,zero
    4f0c:	1000031e 	bne	r2,zero,4f1c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    4f10:	e13ffd17 	ldw	r4,-12(fp)
    4f14:	e17ffe17 	ldw	r5,-8(fp)
    4f18:	00050100 	call	5010 <altera_avalon_uart_txirq>
  }
  

}
    4f1c:	e037883a 	mov	sp,fp
    4f20:	dfc00117 	ldw	ra,4(sp)
    4f24:	df000017 	ldw	fp,0(sp)
    4f28:	dec00204 	addi	sp,sp,8
    4f2c:	f800283a 	ret

00004f30 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    4f30:	defffc04 	addi	sp,sp,-16
    4f34:	df000315 	stw	fp,12(sp)
    4f38:	df000304 	addi	fp,sp,12
    4f3c:	e13ffe15 	stw	r4,-8(fp)
    4f40:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    4f44:	e0bfff17 	ldw	r2,-4(fp)
    4f48:	108000cc 	andi	r2,r2,3
    4f4c:	1004c03a 	cmpne	r2,r2,zero
    4f50:	10002b1e 	bne	r2,zero,5000 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    4f54:	e0bffe17 	ldw	r2,-8(fp)
    4f58:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    4f5c:	e0bffe17 	ldw	r2,-8(fp)
    4f60:	10800317 	ldw	r2,12(r2)
    4f64:	10800044 	addi	r2,r2,1
    4f68:	10800fcc 	andi	r2,r2,63
    4f6c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    4f70:	e0bffe17 	ldw	r2,-8(fp)
    4f74:	11000317 	ldw	r4,12(r2)
    4f78:	e0bffe17 	ldw	r2,-8(fp)
    4f7c:	10800017 	ldw	r2,0(r2)
    4f80:	10800037 	ldwio	r2,0(r2)
    4f84:	1007883a 	mov	r3,r2
    4f88:	e0bffe17 	ldw	r2,-8(fp)
    4f8c:	2085883a 	add	r2,r4,r2
    4f90:	10800704 	addi	r2,r2,28
    4f94:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    4f98:	e0fffe17 	ldw	r3,-8(fp)
    4f9c:	e0bffd17 	ldw	r2,-12(fp)
    4fa0:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	10800317 	ldw	r2,12(r2)
    4fac:	10800044 	addi	r2,r2,1
    4fb0:	10800fcc 	andi	r2,r2,63
    4fb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    4fb8:	e0bffe17 	ldw	r2,-8(fp)
    4fbc:	10c00217 	ldw	r3,8(r2)
    4fc0:	e0bffd17 	ldw	r2,-12(fp)
    4fc4:	18800e1e 	bne	r3,r2,5000 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    4fc8:	e0bffe17 	ldw	r2,-8(fp)
    4fcc:	10c00117 	ldw	r3,4(r2)
    4fd0:	00bfdfc4 	movi	r2,-129
    4fd4:	1886703a 	and	r3,r3,r2
    4fd8:	e0bffe17 	ldw	r2,-8(fp)
    4fdc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    4fe0:	e0bffe17 	ldw	r2,-8(fp)
    4fe4:	10800017 	ldw	r2,0(r2)
    4fe8:	11000304 	addi	r4,r2,12
    4fec:	e0bffe17 	ldw	r2,-8(fp)
    4ff0:	10800117 	ldw	r2,4(r2)
    4ff4:	1007883a 	mov	r3,r2
    4ff8:	2005883a 	mov	r2,r4
    4ffc:	10c00035 	stwio	r3,0(r2)
  }   
}
    5000:	e037883a 	mov	sp,fp
    5004:	df000017 	ldw	fp,0(sp)
    5008:	dec00104 	addi	sp,sp,4
    500c:	f800283a 	ret

00005010 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    5010:	defffd04 	addi	sp,sp,-12
    5014:	df000215 	stw	fp,8(sp)
    5018:	df000204 	addi	fp,sp,8
    501c:	e13ffe15 	stw	r4,-8(fp)
    5020:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    5024:	e0bffe17 	ldw	r2,-8(fp)
    5028:	10c00417 	ldw	r3,16(r2)
    502c:	e0bffe17 	ldw	r2,-8(fp)
    5030:	10800517 	ldw	r2,20(r2)
    5034:	18803626 	beq	r3,r2,5110 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    5038:	e0bffe17 	ldw	r2,-8(fp)
    503c:	10800617 	ldw	r2,24(r2)
    5040:	1080008c 	andi	r2,r2,2
    5044:	1005003a 	cmpeq	r2,r2,zero
    5048:	1000041e 	bne	r2,zero,505c <altera_avalon_uart_txirq+0x4c>
    504c:	e0bfff17 	ldw	r2,-4(fp)
    5050:	1082000c 	andi	r2,r2,2048
    5054:	1005003a 	cmpeq	r2,r2,zero
    5058:	10001e1e 	bne	r2,zero,50d4 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    505c:	e0bffe17 	ldw	r2,-8(fp)
    5060:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    5064:	e0bffe17 	ldw	r2,-8(fp)
    5068:	10800017 	ldw	r2,0(r2)
    506c:	11000104 	addi	r4,r2,4
    5070:	e0bffe17 	ldw	r2,-8(fp)
    5074:	10c00417 	ldw	r3,16(r2)
    5078:	e0bffe17 	ldw	r2,-8(fp)
    507c:	1885883a 	add	r2,r3,r2
    5080:	10801704 	addi	r2,r2,92
    5084:	10800003 	ldbu	r2,0(r2)
    5088:	10c03fcc 	andi	r3,r2,255
    508c:	2005883a 	mov	r2,r4
    5090:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    5094:	e0bffe17 	ldw	r2,-8(fp)
    5098:	10800417 	ldw	r2,16(r2)
    509c:	10c00044 	addi	r3,r2,1
    50a0:	e0bffe17 	ldw	r2,-8(fp)
    50a4:	10c00415 	stw	r3,16(r2)
    50a8:	e0bffe17 	ldw	r2,-8(fp)
    50ac:	10800417 	ldw	r2,16(r2)
    50b0:	10c00fcc 	andi	r3,r2,63
    50b4:	e0bffe17 	ldw	r2,-8(fp)
    50b8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    50bc:	e0bffe17 	ldw	r2,-8(fp)
    50c0:	10800117 	ldw	r2,4(r2)
    50c4:	10c01014 	ori	r3,r2,64
    50c8:	e0bffe17 	ldw	r2,-8(fp)
    50cc:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    50d0:	00000f06 	br	5110 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    50d4:	e0bffe17 	ldw	r2,-8(fp)
    50d8:	10800017 	ldw	r2,0(r2)
    50dc:	10800204 	addi	r2,r2,8
    50e0:	10800037 	ldwio	r2,0(r2)
    50e4:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    50e8:	e0bfff17 	ldw	r2,-4(fp)
    50ec:	1082000c 	andi	r2,r2,2048
    50f0:	1004c03a 	cmpne	r2,r2,zero
    50f4:	1000061e 	bne	r2,zero,5110 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    50f8:	e0bffe17 	ldw	r2,-8(fp)
    50fc:	10c00117 	ldw	r3,4(r2)
    5100:	00bfefc4 	movi	r2,-65
    5104:	1886703a 	and	r3,r3,r2
    5108:	e0bffe17 	ldw	r2,-8(fp)
    510c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    5110:	e0bffe17 	ldw	r2,-8(fp)
    5114:	10c00417 	ldw	r3,16(r2)
    5118:	e0bffe17 	ldw	r2,-8(fp)
    511c:	10800517 	ldw	r2,20(r2)
    5120:	1880061e 	bne	r3,r2,513c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    5124:	e0bffe17 	ldw	r2,-8(fp)
    5128:	10c00117 	ldw	r3,4(r2)
    512c:	00beefc4 	movi	r2,-1089
    5130:	1886703a 	and	r3,r3,r2
    5134:	e0bffe17 	ldw	r2,-8(fp)
    5138:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    513c:	e0bffe17 	ldw	r2,-8(fp)
    5140:	10800017 	ldw	r2,0(r2)
    5144:	11000304 	addi	r4,r2,12
    5148:	e0bffe17 	ldw	r2,-8(fp)
    514c:	10800117 	ldw	r2,4(r2)
    5150:	1007883a 	mov	r3,r2
    5154:	2005883a 	mov	r2,r4
    5158:	10c00035 	stwio	r3,0(r2)
}
    515c:	e037883a 	mov	sp,fp
    5160:	df000017 	ldw	fp,0(sp)
    5164:	dec00104 	addi	sp,sp,4
    5168:	f800283a 	ret

0000516c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    516c:	defffc04 	addi	sp,sp,-16
    5170:	df000315 	stw	fp,12(sp)
    5174:	df000304 	addi	fp,sp,12
    5178:	e13ffd15 	stw	r4,-12(fp)
    517c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    5180:	00000706 	br	51a0 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    5184:	e0bffe17 	ldw	r2,-8(fp)
    5188:	1090000c 	andi	r2,r2,16384
    518c:	1005003a 	cmpeq	r2,r2,zero
    5190:	1000031e 	bne	r2,zero,51a0 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    5194:	00bffd44 	movi	r2,-11
    5198:	e0bfff15 	stw	r2,-4(fp)
    519c:	00000606 	br	51b8 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    51a0:	e0bffd17 	ldw	r2,-12(fp)
    51a4:	10c00417 	ldw	r3,16(r2)
    51a8:	e0bffd17 	ldw	r2,-12(fp)
    51ac:	10800517 	ldw	r2,20(r2)
    51b0:	18bff41e 	bne	r3,r2,5184 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    51b4:	e03fff15 	stw	zero,-4(fp)
    51b8:	e0bfff17 	ldw	r2,-4(fp)
}
    51bc:	e037883a 	mov	sp,fp
    51c0:	df000017 	ldw	fp,0(sp)
    51c4:	dec00104 	addi	sp,sp,4
    51c8:	f800283a 	ret

000051cc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    51cc:	defff004 	addi	sp,sp,-64
    51d0:	dfc00f15 	stw	ra,60(sp)
    51d4:	df000e15 	stw	fp,56(sp)
    51d8:	df000e04 	addi	fp,sp,56
    51dc:	e13ffb15 	stw	r4,-20(fp)
    51e0:	e17ffc15 	stw	r5,-16(fp)
    51e4:	e1bffd15 	stw	r6,-12(fp)
    51e8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    51ec:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    51f0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    51f4:	e0bffe17 	ldw	r2,-8(fp)
    51f8:	1090000c 	andi	r2,r2,16384
    51fc:	1005003a 	cmpeq	r2,r2,zero
    5200:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    5204:	e0bffb17 	ldw	r2,-20(fp)
    5208:	10800217 	ldw	r2,8(r2)
    520c:	10800044 	addi	r2,r2,1
    5210:	10800fcc 	andi	r2,r2,63
    5214:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    5218:	00001906 	br	5280 <altera_avalon_uart_read+0xb4>
    {
      count++;
    521c:	e0bff617 	ldw	r2,-40(fp)
    5220:	10800044 	addi	r2,r2,1
    5224:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    5228:	e0bffb17 	ldw	r2,-20(fp)
    522c:	10c00217 	ldw	r3,8(r2)
    5230:	e0bffb17 	ldw	r2,-20(fp)
    5234:	1885883a 	add	r2,r3,r2
    5238:	10800704 	addi	r2,r2,28
    523c:	10800003 	ldbu	r2,0(r2)
    5240:	1007883a 	mov	r3,r2
    5244:	e0bffc17 	ldw	r2,-16(fp)
    5248:	10c00005 	stb	r3,0(r2)
    524c:	e0bffc17 	ldw	r2,-16(fp)
    5250:	10800044 	addi	r2,r2,1
    5254:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    5258:	e0bffb17 	ldw	r2,-20(fp)
    525c:	10800217 	ldw	r2,8(r2)
    5260:	10c00044 	addi	r3,r2,1
    5264:	e0bffb17 	ldw	r2,-20(fp)
    5268:	10c00215 	stw	r3,8(r2)
    526c:	e0bffb17 	ldw	r2,-20(fp)
    5270:	10800217 	ldw	r2,8(r2)
    5274:	10c00fcc 	andi	r3,r2,63
    5278:	e0bffb17 	ldw	r2,-20(fp)
    527c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    5280:	e0fff617 	ldw	r3,-40(fp)
    5284:	e0bffd17 	ldw	r2,-12(fp)
    5288:	1880050e 	bge	r3,r2,52a0 <altera_avalon_uart_read+0xd4>
    528c:	e0bffb17 	ldw	r2,-20(fp)
    5290:	10c00217 	ldw	r3,8(r2)
    5294:	e0bffb17 	ldw	r2,-20(fp)
    5298:	10800317 	ldw	r2,12(r2)
    529c:	18bfdf1e 	bne	r3,r2,521c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    52a0:	e0bff617 	ldw	r2,-40(fp)
    52a4:	1004c03a 	cmpne	r2,r2,zero
    52a8:	1000271e 	bne	r2,zero,5348 <altera_avalon_uart_read+0x17c>
    52ac:	e0bffb17 	ldw	r2,-20(fp)
    52b0:	10c00217 	ldw	r3,8(r2)
    52b4:	e0bffb17 	ldw	r2,-20(fp)
    52b8:	10800317 	ldw	r2,12(r2)
    52bc:	1880221e 	bne	r3,r2,5348 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    52c0:	e0bff917 	ldw	r2,-28(fp)
    52c4:	1004c03a 	cmpne	r2,r2,zero
    52c8:	1000061e 	bne	r2,zero,52e4 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    52cc:	00053fc0 	call	53fc <alt_get_errno>
    52d0:	00c002c4 	movi	r3,11
    52d4:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    52d8:	00800044 	movi	r2,1
    52dc:	e0bff705 	stb	r2,-36(fp)
        break;
    52e0:	00001f06 	br	5360 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    52e4:	0005303a 	rdctl	r2,status
    52e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    52ec:	e0fff517 	ldw	r3,-44(fp)
    52f0:	00bfff84 	movi	r2,-2
    52f4:	1884703a 	and	r2,r3,r2
    52f8:	1001703a 	wrctl	status,r2
  
  return context;
    52fc:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    5300:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    5304:	e0bffb17 	ldw	r2,-20(fp)
    5308:	10800117 	ldw	r2,4(r2)
    530c:	10c02014 	ori	r3,r2,128
    5310:	e0bffb17 	ldw	r2,-20(fp)
    5314:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    5318:	e0bffb17 	ldw	r2,-20(fp)
    531c:	10800017 	ldw	r2,0(r2)
    5320:	11000304 	addi	r4,r2,12
    5324:	e0bffb17 	ldw	r2,-20(fp)
    5328:	10800117 	ldw	r2,4(r2)
    532c:	1007883a 	mov	r3,r2
    5330:	2005883a 	mov	r2,r4
    5334:	10c00035 	stwio	r3,0(r2)
    5338:	e0bffa17 	ldw	r2,-24(fp)
    533c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5340:	e0bff417 	ldw	r2,-48(fp)
    5344:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    5348:	e0bff617 	ldw	r2,-40(fp)
    534c:	1004c03a 	cmpne	r2,r2,zero
    5350:	1000031e 	bne	r2,zero,5360 <altera_avalon_uart_read+0x194>
    5354:	e0bffd17 	ldw	r2,-12(fp)
    5358:	1004c03a 	cmpne	r2,r2,zero
    535c:	103fc81e 	bne	r2,zero,5280 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5360:	0005303a 	rdctl	r2,status
    5364:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5368:	e0fff317 	ldw	r3,-52(fp)
    536c:	00bfff84 	movi	r2,-2
    5370:	1884703a 	and	r2,r3,r2
    5374:	1001703a 	wrctl	status,r2
  
  return context;
    5378:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    537c:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    5380:	e0bffb17 	ldw	r2,-20(fp)
    5384:	10800117 	ldw	r2,4(r2)
    5388:	10c02014 	ori	r3,r2,128
    538c:	e0bffb17 	ldw	r2,-20(fp)
    5390:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    5394:	e0bffb17 	ldw	r2,-20(fp)
    5398:	10800017 	ldw	r2,0(r2)
    539c:	11000304 	addi	r4,r2,12
    53a0:	e0bffb17 	ldw	r2,-20(fp)
    53a4:	10800117 	ldw	r2,4(r2)
    53a8:	1007883a 	mov	r3,r2
    53ac:	2005883a 	mov	r2,r4
    53b0:	10c00035 	stwio	r3,0(r2)
    53b4:	e0bffa17 	ldw	r2,-24(fp)
    53b8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    53bc:	e0bff217 	ldw	r2,-56(fp)
    53c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    53c4:	e0bff703 	ldbu	r2,-36(fp)
    53c8:	1005003a 	cmpeq	r2,r2,zero
    53cc:	1000031e 	bne	r2,zero,53dc <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    53d0:	00bffd04 	movi	r2,-12
    53d4:	e0bfff15 	stw	r2,-4(fp)
    53d8:	00000206 	br	53e4 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    53dc:	e0bff617 	ldw	r2,-40(fp)
    53e0:	e0bfff15 	stw	r2,-4(fp)
    53e4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    53e8:	e037883a 	mov	sp,fp
    53ec:	dfc00117 	ldw	ra,4(sp)
    53f0:	df000017 	ldw	fp,0(sp)
    53f4:	dec00204 	addi	sp,sp,8
    53f8:	f800283a 	ret

000053fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    53fc:	defffd04 	addi	sp,sp,-12
    5400:	dfc00215 	stw	ra,8(sp)
    5404:	df000115 	stw	fp,4(sp)
    5408:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    540c:	00800074 	movhi	r2,1
    5410:	10a4a404 	addi	r2,r2,-28016
    5414:	10800017 	ldw	r2,0(r2)
    5418:	1005003a 	cmpeq	r2,r2,zero
    541c:	1000061e 	bne	r2,zero,5438 <alt_get_errno+0x3c>
    5420:	00800074 	movhi	r2,1
    5424:	10a4a404 	addi	r2,r2,-28016
    5428:	10800017 	ldw	r2,0(r2)
    542c:	103ee83a 	callr	r2
    5430:	e0bfff15 	stw	r2,-4(fp)
    5434:	00000306 	br	5444 <alt_get_errno+0x48>
    5438:	00800074 	movhi	r2,1
    543c:	10a4ae04 	addi	r2,r2,-27976
    5440:	e0bfff15 	stw	r2,-4(fp)
    5444:	e0bfff17 	ldw	r2,-4(fp)
}
    5448:	e037883a 	mov	sp,fp
    544c:	dfc00117 	ldw	ra,4(sp)
    5450:	df000017 	ldw	fp,0(sp)
    5454:	dec00204 	addi	sp,sp,8
    5458:	f800283a 	ret

0000545c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    545c:	defff204 	addi	sp,sp,-56
    5460:	dfc00d15 	stw	ra,52(sp)
    5464:	df000c15 	stw	fp,48(sp)
    5468:	df000c04 	addi	fp,sp,48
    546c:	e13ffc15 	stw	r4,-16(fp)
    5470:	e17ffd15 	stw	r5,-12(fp)
    5474:	e1bffe15 	stw	r6,-8(fp)
    5478:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    547c:	e0bffe17 	ldw	r2,-8(fp)
    5480:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    5484:	e0bfff17 	ldw	r2,-4(fp)
    5488:	1090000c 	andi	r2,r2,16384
    548c:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    5490:	00004006 	br	5594 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    5494:	e0bffc17 	ldw	r2,-16(fp)
    5498:	10800517 	ldw	r2,20(r2)
    549c:	10800044 	addi	r2,r2,1
    54a0:	10800fcc 	andi	r2,r2,63
    54a4:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    54a8:	e0bffc17 	ldw	r2,-16(fp)
    54ac:	10c00417 	ldw	r3,16(r2)
    54b0:	e0bff917 	ldw	r2,-28(fp)
    54b4:	1880251e 	bne	r3,r2,554c <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    54b8:	e0bffa17 	ldw	r2,-24(fp)
    54bc:	1005003a 	cmpeq	r2,r2,zero
    54c0:	1000051e 	bne	r2,zero,54d8 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    54c4:	00056240 	call	5624 <alt_get_errno>
    54c8:	1007883a 	mov	r3,r2
    54cc:	008002c4 	movi	r2,11
    54d0:	18800015 	stw	r2,0(r3)
        break;
    54d4:	00003206 	br	55a0 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54d8:	0005303a 	rdctl	r2,status
    54dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54e0:	e0fff717 	ldw	r3,-36(fp)
    54e4:	00bfff84 	movi	r2,-2
    54e8:	1884703a 	and	r2,r3,r2
    54ec:	1001703a 	wrctl	status,r2
  
  return context;
    54f0:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    54f4:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    54f8:	e0bffc17 	ldw	r2,-16(fp)
    54fc:	10800117 	ldw	r2,4(r2)
    5500:	10c11014 	ori	r3,r2,1088
    5504:	e0bffc17 	ldw	r2,-16(fp)
    5508:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    550c:	e0bffc17 	ldw	r2,-16(fp)
    5510:	10800017 	ldw	r2,0(r2)
    5514:	11000304 	addi	r4,r2,12
    5518:	e0bffc17 	ldw	r2,-16(fp)
    551c:	10800117 	ldw	r2,4(r2)
    5520:	1007883a 	mov	r3,r2
    5524:	2005883a 	mov	r2,r4
    5528:	10c00035 	stwio	r3,0(r2)
    552c:	e0bffb17 	ldw	r2,-20(fp)
    5530:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5534:	e0bff617 	ldw	r2,-40(fp)
    5538:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    553c:	e0bffc17 	ldw	r2,-16(fp)
    5540:	10c00417 	ldw	r3,16(r2)
    5544:	e0bff917 	ldw	r2,-28(fp)
    5548:	18bffc26 	beq	r3,r2,553c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    554c:	e0bff817 	ldw	r2,-32(fp)
    5550:	10bfffc4 	addi	r2,r2,-1
    5554:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    5558:	e0bffc17 	ldw	r2,-16(fp)
    555c:	10c00517 	ldw	r3,20(r2)
    5560:	e0bffd17 	ldw	r2,-12(fp)
    5564:	10800003 	ldbu	r2,0(r2)
    5568:	1009883a 	mov	r4,r2
    556c:	e0bffc17 	ldw	r2,-16(fp)
    5570:	1885883a 	add	r2,r3,r2
    5574:	10801704 	addi	r2,r2,92
    5578:	11000005 	stb	r4,0(r2)
    557c:	e0bffd17 	ldw	r2,-12(fp)
    5580:	10800044 	addi	r2,r2,1
    5584:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    5588:	e0fffc17 	ldw	r3,-16(fp)
    558c:	e0bff917 	ldw	r2,-28(fp)
    5590:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    5594:	e0bff817 	ldw	r2,-32(fp)
    5598:	1004c03a 	cmpne	r2,r2,zero
    559c:	103fbd1e 	bne	r2,zero,5494 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55a0:	0005303a 	rdctl	r2,status
    55a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55a8:	e0fff517 	ldw	r3,-44(fp)
    55ac:	00bfff84 	movi	r2,-2
    55b0:	1884703a 	and	r2,r3,r2
    55b4:	1001703a 	wrctl	status,r2
  
  return context;
    55b8:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    55bc:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    55c0:	e0bffc17 	ldw	r2,-16(fp)
    55c4:	10800117 	ldw	r2,4(r2)
    55c8:	10c11014 	ori	r3,r2,1088
    55cc:	e0bffc17 	ldw	r2,-16(fp)
    55d0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    55d4:	e0bffc17 	ldw	r2,-16(fp)
    55d8:	10800017 	ldw	r2,0(r2)
    55dc:	11000304 	addi	r4,r2,12
    55e0:	e0bffc17 	ldw	r2,-16(fp)
    55e4:	10800117 	ldw	r2,4(r2)
    55e8:	1007883a 	mov	r3,r2
    55ec:	2005883a 	mov	r2,r4
    55f0:	10c00035 	stwio	r3,0(r2)
    55f4:	e0bffb17 	ldw	r2,-20(fp)
    55f8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55fc:	e0bff417 	ldw	r2,-48(fp)
    5600:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    5604:	e0fffe17 	ldw	r3,-8(fp)
    5608:	e0bff817 	ldw	r2,-32(fp)
    560c:	1885c83a 	sub	r2,r3,r2
}
    5610:	e037883a 	mov	sp,fp
    5614:	dfc00117 	ldw	ra,4(sp)
    5618:	df000017 	ldw	fp,0(sp)
    561c:	dec00204 	addi	sp,sp,8
    5620:	f800283a 	ret

00005624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5624:	defffd04 	addi	sp,sp,-12
    5628:	dfc00215 	stw	ra,8(sp)
    562c:	df000115 	stw	fp,4(sp)
    5630:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5634:	00800074 	movhi	r2,1
    5638:	10a4a404 	addi	r2,r2,-28016
    563c:	10800017 	ldw	r2,0(r2)
    5640:	1005003a 	cmpeq	r2,r2,zero
    5644:	1000061e 	bne	r2,zero,5660 <alt_get_errno+0x3c>
    5648:	00800074 	movhi	r2,1
    564c:	10a4a404 	addi	r2,r2,-28016
    5650:	10800017 	ldw	r2,0(r2)
    5654:	103ee83a 	callr	r2
    5658:	e0bfff15 	stw	r2,-4(fp)
    565c:	00000306 	br	566c <alt_get_errno+0x48>
    5660:	00800074 	movhi	r2,1
    5664:	10a4ae04 	addi	r2,r2,-27976
    5668:	e0bfff15 	stw	r2,-4(fp)
    566c:	e0bfff17 	ldw	r2,-4(fp)
}
    5670:	e037883a 	mov	sp,fp
    5674:	dfc00117 	ldw	ra,4(sp)
    5678:	df000017 	ldw	fp,0(sp)
    567c:	dec00204 	addi	sp,sp,8
    5680:	f800283a 	ret

00005684 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    5684:	defff904 	addi	sp,sp,-28
    5688:	dfc00615 	stw	ra,24(sp)
    568c:	df000515 	stw	fp,20(sp)
    5690:	df000504 	addi	fp,sp,20
    5694:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    5698:	00800144 	movi	r2,5
    569c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    56a0:	00800044 	movi	r2,1
    56a4:	d8800015 	stw	r2,0(sp)
    56a8:	e0bffe44 	addi	r2,fp,-7
    56ac:	d8800115 	stw	r2,4(sp)
    56b0:	d8000215 	stw	zero,8(sp)
    56b4:	e13fff17 	ldw	r4,-4(fp)
    56b8:	000b883a 	mov	r5,zero
    56bc:	01800044 	movi	r6,1
    56c0:	e1fffe04 	addi	r7,fp,-8
    56c4:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    56c8:	e0bffe43 	ldbu	r2,-7(fp)
    56cc:	10803fcc 	andi	r2,r2,255
}
    56d0:	e037883a 	mov	sp,fp
    56d4:	dfc00117 	ldw	ra,4(sp)
    56d8:	df000017 	ldw	fp,0(sp)
    56dc:	dec00204 	addi	sp,sp,8
    56e0:	f800283a 	ret

000056e4 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    56e4:	defff604 	addi	sp,sp,-40
    56e8:	dfc00915 	stw	ra,36(sp)
    56ec:	df000815 	stw	fp,32(sp)
    56f0:	df000804 	addi	fp,sp,32
    56f4:	e13ffd15 	stw	r4,-12(fp)
    56f8:	e17ffe15 	stw	r5,-8(fp)
    56fc:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    5700:	e0bfff17 	ldw	r2,-4(fp)
    5704:	1005003a 	cmpeq	r2,r2,zero
    5708:	1000121e 	bne	r2,zero,5754 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    570c:	00bff604 	movi	r2,-40
    5710:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    5714:	e0bffe17 	ldw	r2,-8(fp)
    5718:	1004d63a 	srli	r2,r2,24
    571c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    5720:	e0bffe17 	ldw	r2,-8(fp)
    5724:	1004d43a 	srli	r2,r2,16
    5728:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    572c:	e0bffe17 	ldw	r2,-8(fp)
    5730:	1004d23a 	srli	r2,r2,8
    5734:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    5738:	e0bffe17 	ldw	r2,-8(fp)
    573c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    5740:	00800144 	movi	r2,5
    5744:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    5748:	e13ffd17 	ldw	r4,-12(fp)
    574c:	0005ca80 	call	5ca8 <epcs_enter_4_bytes_mode>
    5750:	00000c06 	br	5784 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
    5754:	00bff604 	movi	r2,-40
    5758:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    575c:	e0bffe17 	ldw	r2,-8(fp)
    5760:	1004d43a 	srli	r2,r2,16
    5764:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    5768:	e0bffe17 	ldw	r2,-8(fp)
    576c:	1004d23a 	srli	r2,r2,8
    5770:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    5774:	e0bffe17 	ldw	r2,-8(fp)
    5778:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    577c:	00800104 	movi	r2,4
    5780:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    5784:	e13ffd17 	ldw	r4,-12(fp)
    5788:	00059980 	call	5998 <epcs_write_enable>

  alt_avalon_spi_command(
    578c:	e1bffb03 	ldbu	r6,-20(fp)
    5790:	e1fffb44 	addi	r7,fp,-19
    5794:	d8000015 	stw	zero,0(sp)
    5798:	d8000115 	stw	zero,4(sp)
    579c:	d8000215 	stw	zero,8(sp)
    57a0:	e13ffd17 	ldw	r4,-12(fp)
    57a4:	000b883a 	mov	r5,zero
    57a8:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    57ac:	e13ffd17 	ldw	r4,-12(fp)
    57b0:	00057dc0 	call	57dc <epcs_await_wip_released>

  if(four_bytes_mode)
    57b4:	e0bfff17 	ldw	r2,-4(fp)
    57b8:	1005003a 	cmpeq	r2,r2,zero
    57bc:	1000021e 	bne	r2,zero,57c8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    57c0:	e13ffd17 	ldw	r4,-12(fp)
    57c4:	0005d000 	call	5d00 <epcs_exit_4_bytes_mode>
  }
}
    57c8:	e037883a 	mov	sp,fp
    57cc:	dfc00117 	ldw	ra,4(sp)
    57d0:	df000017 	ldw	fp,0(sp)
    57d4:	dec00204 	addi	sp,sp,8
    57d8:	f800283a 	ret

000057dc <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    57dc:	defffd04 	addi	sp,sp,-12
    57e0:	dfc00215 	stw	ra,8(sp)
    57e4:	df000115 	stw	fp,4(sp)
    57e8:	df000104 	addi	fp,sp,4
    57ec:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    57f0:	e13fff17 	ldw	r4,-4(fp)
    57f4:	00058140 	call	5814 <epcs_test_wip>
    57f8:	1004c03a 	cmpne	r2,r2,zero
    57fc:	103ffc1e 	bne	r2,zero,57f0 <epcs_await_wip_released+0x14>
  {
  }
}
    5800:	e037883a 	mov	sp,fp
    5804:	dfc00117 	ldw	ra,4(sp)
    5808:	df000017 	ldw	fp,0(sp)
    580c:	dec00204 	addi	sp,sp,8
    5810:	f800283a 	ret

00005814 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    5814:	defffd04 	addi	sp,sp,-12
    5818:	dfc00215 	stw	ra,8(sp)
    581c:	df000115 	stw	fp,4(sp)
    5820:	df000104 	addi	fp,sp,4
    5824:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    5828:	e13fff17 	ldw	r4,-4(fp)
    582c:	00056840 	call	5684 <epcs_read_status_register>
    5830:	10803fcc 	andi	r2,r2,255
    5834:	1080004c 	andi	r2,r2,1
}
    5838:	e037883a 	mov	sp,fp
    583c:	dfc00117 	ldw	ra,4(sp)
    5840:	df000017 	ldw	fp,0(sp)
    5844:	dec00204 	addi	sp,sp,8
    5848:	f800283a 	ret

0000584c <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    584c:	defff404 	addi	sp,sp,-48
    5850:	dfc00b15 	stw	ra,44(sp)
    5854:	df000a15 	stw	fp,40(sp)
    5858:	df000a04 	addi	fp,sp,40
    585c:	e13ffc15 	stw	r4,-16(fp)
    5860:	e17ffd15 	stw	r5,-12(fp)
    5864:	e1bffe15 	stw	r6,-8(fp)
    5868:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    586c:	008000c4 	movi	r2,3
    5870:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    5874:	e0800217 	ldw	r2,8(fp)
    5878:	1005003a 	cmpeq	r2,r2,zero
    587c:	10001c1e 	bne	r2,zero,58f0 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    5880:	e0bffd17 	ldw	r2,-12(fp)
    5884:	1005d63a 	srai	r2,r2,24
    5888:	1007883a 	mov	r3,r2
    588c:	00bfffc4 	movi	r2,-1
    5890:	1884703a 	and	r2,r3,r2
    5894:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    5898:	e0bffd17 	ldw	r2,-12(fp)
    589c:	1005d43a 	srai	r2,r2,16
    58a0:	1007883a 	mov	r3,r2
    58a4:	00bfffc4 	movi	r2,-1
    58a8:	1884703a 	and	r2,r3,r2
    58ac:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    58b0:	e0bffd17 	ldw	r2,-12(fp)
    58b4:	1005d23a 	srai	r2,r2,8
    58b8:	1007883a 	mov	r3,r2
    58bc:	00bfffc4 	movi	r2,-1
    58c0:	1884703a 	and	r2,r3,r2
    58c4:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    58c8:	e0bffd17 	ldw	r2,-12(fp)
    58cc:	1007883a 	mov	r3,r2
    58d0:	00bfffc4 	movi	r2,-1
    58d4:	1884703a 	and	r2,r3,r2
    58d8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    58dc:	00800144 	movi	r2,5
    58e0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    58e4:	e13ffc17 	ldw	r4,-16(fp)
    58e8:	0005ca80 	call	5ca8 <epcs_enter_4_bytes_mode>
    58ec:	00001306 	br	593c <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    58f0:	e0bffd17 	ldw	r2,-12(fp)
    58f4:	1005d43a 	srai	r2,r2,16
    58f8:	1007883a 	mov	r3,r2
    58fc:	00bfffc4 	movi	r2,-1
    5900:	1884703a 	and	r2,r3,r2
    5904:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    5908:	e0bffd17 	ldw	r2,-12(fp)
    590c:	1005d23a 	srai	r2,r2,8
    5910:	1007883a 	mov	r3,r2
    5914:	00bfffc4 	movi	r2,-1
    5918:	1884703a 	and	r2,r3,r2
    591c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    5920:	e0bffd17 	ldw	r2,-12(fp)
    5924:	1007883a 	mov	r3,r2
    5928:	00bfffc4 	movi	r2,-1
    592c:	1884703a 	and	r2,r3,r2
    5930:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    5934:	00800104 	movi	r2,4
    5938:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    593c:	e13ffc17 	ldw	r4,-16(fp)
    5940:	00057dc0 	call	57dc <epcs_await_wip_released>

  alt_avalon_spi_command(
    5944:	e0bfff17 	ldw	r2,-4(fp)
    5948:	e1fffa04 	addi	r7,fp,-24
    594c:	d8800015 	stw	r2,0(sp)
    5950:	e0bffe17 	ldw	r2,-8(fp)
    5954:	d8800115 	stw	r2,4(sp)
    5958:	d8000215 	stw	zero,8(sp)
    595c:	e13ffc17 	ldw	r4,-16(fp)
    5960:	000b883a 	mov	r5,zero
    5964:	e1bff917 	ldw	r6,-28(fp)
    5968:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    596c:	e0800217 	ldw	r2,8(fp)
    5970:	1005003a 	cmpeq	r2,r2,zero
    5974:	1000021e 	bne	r2,zero,5980 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
    5978:	e13ffc17 	ldw	r4,-16(fp)
    597c:	0005d000 	call	5d00 <epcs_exit_4_bytes_mode>
  }

  return length;
    5980:	e0bfff17 	ldw	r2,-4(fp)
}
    5984:	e037883a 	mov	sp,fp
    5988:	dfc00117 	ldw	ra,4(sp)
    598c:	df000017 	ldw	fp,0(sp)
    5990:	dec00204 	addi	sp,sp,8
    5994:	f800283a 	ret

00005998 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    5998:	defff904 	addi	sp,sp,-28
    599c:	dfc00615 	stw	ra,24(sp)
    59a0:	df000515 	stw	fp,20(sp)
    59a4:	df000504 	addi	fp,sp,20
    59a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    59ac:	00800184 	movi	r2,6
    59b0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    59b4:	d8000015 	stw	zero,0(sp)
    59b8:	d8000115 	stw	zero,4(sp)
    59bc:	d8000215 	stw	zero,8(sp)
    59c0:	e13fff17 	ldw	r4,-4(fp)
    59c4:	000b883a 	mov	r5,zero
    59c8:	01800044 	movi	r6,1
    59cc:	e1fffe04 	addi	r7,fp,-8
    59d0:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    59d4:	e037883a 	mov	sp,fp
    59d8:	dfc00117 	ldw	ra,4(sp)
    59dc:	df000017 	ldw	fp,0(sp)
    59e0:	dec00204 	addi	sp,sp,8
    59e4:	f800283a 	ret

000059e8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    59e8:	defff804 	addi	sp,sp,-32
    59ec:	dfc00715 	stw	ra,28(sp)
    59f0:	df000615 	stw	fp,24(sp)
    59f4:	df000604 	addi	fp,sp,24
    59f8:	e13ffe15 	stw	r4,-8(fp)
    59fc:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    5a00:	00800044 	movi	r2,1
    5a04:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    5a08:	e0bfff03 	ldbu	r2,-4(fp)
    5a0c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    5a10:	d8000015 	stw	zero,0(sp)
    5a14:	d8000115 	stw	zero,4(sp)
    5a18:	d8000215 	stw	zero,8(sp)
    5a1c:	e13ffe17 	ldw	r4,-8(fp)
    5a20:	000b883a 	mov	r5,zero
    5a24:	01800084 	movi	r6,2
    5a28:	e1fffd04 	addi	r7,fp,-12
    5a2c:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    5a30:	e13ffe17 	ldw	r4,-8(fp)
    5a34:	00057dc0 	call	57dc <epcs_await_wip_released>
}
    5a38:	e037883a 	mov	sp,fp
    5a3c:	dfc00117 	ldw	ra,4(sp)
    5a40:	df000017 	ldw	fp,0(sp)
    5a44:	dec00204 	addi	sp,sp,8
    5a48:	f800283a 	ret

00005a4c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    5a4c:	defff404 	addi	sp,sp,-48
    5a50:	dfc00b15 	stw	ra,44(sp)
    5a54:	df000a15 	stw	fp,40(sp)
    5a58:	df000a04 	addi	fp,sp,40
    5a5c:	e13ffc15 	stw	r4,-16(fp)
    5a60:	e17ffd15 	stw	r5,-12(fp)
    5a64:	e1bffe15 	stw	r6,-8(fp)
    5a68:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    5a6c:	00800084 	movi	r2,2
    5a70:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    5a74:	e0800217 	ldw	r2,8(fp)
    5a78:	1005003a 	cmpeq	r2,r2,zero
    5a7c:	10001c1e 	bne	r2,zero,5af0 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
    5a80:	e0bffd17 	ldw	r2,-12(fp)
    5a84:	1005d63a 	srai	r2,r2,24
    5a88:	1007883a 	mov	r3,r2
    5a8c:	00bfffc4 	movi	r2,-1
    5a90:	1884703a 	and	r2,r3,r2
    5a94:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	1005d43a 	srai	r2,r2,16
    5aa0:	1007883a 	mov	r3,r2
    5aa4:	00bfffc4 	movi	r2,-1
    5aa8:	1884703a 	and	r2,r3,r2
    5aac:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    5ab0:	e0bffd17 	ldw	r2,-12(fp)
    5ab4:	1005d23a 	srai	r2,r2,8
    5ab8:	1007883a 	mov	r3,r2
    5abc:	00bfffc4 	movi	r2,-1
    5ac0:	1884703a 	and	r2,r3,r2
    5ac4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    5ac8:	e0bffd17 	ldw	r2,-12(fp)
    5acc:	1007883a 	mov	r3,r2
    5ad0:	00bfffc4 	movi	r2,-1
    5ad4:	1884703a 	and	r2,r3,r2
    5ad8:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    5adc:	00800144 	movi	r2,5
    5ae0:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    5ae4:	e13ffc17 	ldw	r4,-16(fp)
    5ae8:	0005ca80 	call	5ca8 <epcs_enter_4_bytes_mode>
    5aec:	00001306 	br	5b3c <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    5af0:	e0bffd17 	ldw	r2,-12(fp)
    5af4:	1005d43a 	srai	r2,r2,16
    5af8:	1007883a 	mov	r3,r2
    5afc:	00bfffc4 	movi	r2,-1
    5b00:	1884703a 	and	r2,r3,r2
    5b04:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    5b08:	e0bffd17 	ldw	r2,-12(fp)
    5b0c:	1005d23a 	srai	r2,r2,8
    5b10:	1007883a 	mov	r3,r2
    5b14:	00bfffc4 	movi	r2,-1
    5b18:	1884703a 	and	r2,r3,r2
    5b1c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    5b20:	e0bffd17 	ldw	r2,-12(fp)
    5b24:	1007883a 	mov	r3,r2
    5b28:	00bfffc4 	movi	r2,-1
    5b2c:	1884703a 	and	r2,r3,r2
    5b30:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    5b34:	00800104 	movi	r2,4
    5b38:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    5b3c:	e13ffc17 	ldw	r4,-16(fp)
    5b40:	00059980 	call	5998 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    5b44:	e1fffa04 	addi	r7,fp,-24
    5b48:	d8000015 	stw	zero,0(sp)
    5b4c:	d8000115 	stw	zero,4(sp)
    5b50:	00800044 	movi	r2,1
    5b54:	d8800215 	stw	r2,8(sp)
    5b58:	e13ffc17 	ldw	r4,-16(fp)
    5b5c:	000b883a 	mov	r5,zero
    5b60:	e1bff917 	ldw	r6,-28(fp)
    5b64:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    5b68:	e1bfff17 	ldw	r6,-4(fp)
    5b6c:	d8000015 	stw	zero,0(sp)
    5b70:	d8000115 	stw	zero,4(sp)
    5b74:	d8000215 	stw	zero,8(sp)
    5b78:	e13ffc17 	ldw	r4,-16(fp)
    5b7c:	000b883a 	mov	r5,zero
    5b80:	e1fffe17 	ldw	r7,-8(fp)
    5b84:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    5b88:	e13ffc17 	ldw	r4,-16(fp)
    5b8c:	00057dc0 	call	57dc <epcs_await_wip_released>

  if(four_bytes_mode)
    5b90:	e0800217 	ldw	r2,8(fp)
    5b94:	1005003a 	cmpeq	r2,r2,zero
    5b98:	1000021e 	bne	r2,zero,5ba4 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
    5b9c:	e13ffc17 	ldw	r4,-16(fp)
    5ba0:	0005d000 	call	5d00 <epcs_exit_4_bytes_mode>
  }

  return length;
    5ba4:	e0bfff17 	ldw	r2,-4(fp)
}
    5ba8:	e037883a 	mov	sp,fp
    5bac:	dfc00117 	ldw	ra,4(sp)
    5bb0:	df000017 	ldw	fp,0(sp)
    5bb4:	dec00204 	addi	sp,sp,8
    5bb8:	f800283a 	ret

00005bbc <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    5bbc:	defff804 	addi	sp,sp,-32
    5bc0:	dfc00715 	stw	ra,28(sp)
    5bc4:	df000615 	stw	fp,24(sp)
    5bc8:	df000604 	addi	fp,sp,24
    5bcc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    5bd0:	00bfeac4 	movi	r2,-85
    5bd4:	e0bffd05 	stb	r2,-12(fp)
    5bd8:	e03ffd45 	stb	zero,-11(fp)
    5bdc:	e03ffd85 	stb	zero,-10(fp)
    5be0:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    5be4:	00800044 	movi	r2,1
    5be8:	d8800015 	stw	r2,0(sp)
    5bec:	e0bffe04 	addi	r2,fp,-8
    5bf0:	d8800115 	stw	r2,4(sp)
    5bf4:	d8000215 	stw	zero,8(sp)
    5bf8:	e13fff17 	ldw	r4,-4(fp)
    5bfc:	000b883a 	mov	r5,zero
    5c00:	01800104 	movi	r6,4
    5c04:	e1fffd04 	addi	r7,fp,-12
    5c08:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    5c0c:	e0bffe03 	ldbu	r2,-8(fp)
    5c10:	10803fcc 	andi	r2,r2,255
}
    5c14:	e037883a 	mov	sp,fp
    5c18:	dfc00117 	ldw	ra,4(sp)
    5c1c:	df000017 	ldw	fp,0(sp)
    5c20:	dec00204 	addi	sp,sp,8
    5c24:	f800283a 	ret

00005c28 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    5c28:	defff904 	addi	sp,sp,-28
    5c2c:	dfc00615 	stw	ra,24(sp)
    5c30:	df000515 	stw	fp,20(sp)
    5c34:	df000504 	addi	fp,sp,20
    5c38:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    5c3c:	00bfe7c4 	movi	r2,-97
    5c40:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    5c44:	008000c4 	movi	r2,3
    5c48:	d8800015 	stw	r2,0(sp)
    5c4c:	e0bffe44 	addi	r2,fp,-7
    5c50:	d8800115 	stw	r2,4(sp)
    5c54:	d8000215 	stw	zero,8(sp)
    5c58:	e13fff17 	ldw	r4,-4(fp)
    5c5c:	000b883a 	mov	r5,zero
    5c60:	01800044 	movi	r6,1
    5c64:	e1fffe04 	addi	r7,fp,-8
    5c68:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    5c6c:	e0bffe43 	ldbu	r2,-7(fp)
    5c70:	10803fcc 	andi	r2,r2,255
    5c74:	1006943a 	slli	r3,r2,16
    5c78:	e0bffe83 	ldbu	r2,-6(fp)
    5c7c:	10803fcc 	andi	r2,r2,255
    5c80:	1004923a 	slli	r2,r2,8
    5c84:	1886b03a 	or	r3,r3,r2
    5c88:	e0bffec3 	ldbu	r2,-5(fp)
    5c8c:	10803fcc 	andi	r2,r2,255
    5c90:	1884b03a 	or	r2,r3,r2
}
    5c94:	e037883a 	mov	sp,fp
    5c98:	dfc00117 	ldw	ra,4(sp)
    5c9c:	df000017 	ldw	fp,0(sp)
    5ca0:	dec00204 	addi	sp,sp,8
    5ca4:	f800283a 	ret

00005ca8 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    5ca8:	defff904 	addi	sp,sp,-28
    5cac:	dfc00615 	stw	ra,24(sp)
    5cb0:	df000515 	stw	fp,20(sp)
    5cb4:	df000504 	addi	fp,sp,20
    5cb8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    5cbc:	00bfedc4 	movi	r2,-73
    5cc0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    5cc4:	e13fff17 	ldw	r4,-4(fp)
    5cc8:	00059980 	call	5998 <epcs_write_enable>

  alt_avalon_spi_command(
    5ccc:	d8000015 	stw	zero,0(sp)
    5cd0:	d8000115 	stw	zero,4(sp)
    5cd4:	d8000215 	stw	zero,8(sp)
    5cd8:	e13fff17 	ldw	r4,-4(fp)
    5cdc:	000b883a 	mov	r5,zero
    5ce0:	01800044 	movi	r6,1
    5ce4:	e1fffe04 	addi	r7,fp,-8
    5ce8:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    5cec:	e037883a 	mov	sp,fp
    5cf0:	dfc00117 	ldw	ra,4(sp)
    5cf4:	df000017 	ldw	fp,0(sp)
    5cf8:	dec00204 	addi	sp,sp,8
    5cfc:	f800283a 	ret

00005d00 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    5d00:	defff904 	addi	sp,sp,-28
    5d04:	dfc00615 	stw	ra,24(sp)
    5d08:	df000515 	stw	fp,20(sp)
    5d0c:	df000504 	addi	fp,sp,20
    5d10:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    5d14:	00bffa44 	movi	r2,-23
    5d18:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    5d1c:	e13fff17 	ldw	r4,-4(fp)
    5d20:	00059980 	call	5998 <epcs_write_enable>

  alt_avalon_spi_command(
    5d24:	d8000015 	stw	zero,0(sp)
    5d28:	d8000115 	stw	zero,4(sp)
    5d2c:	d8000215 	stw	zero,8(sp)
    5d30:	e13fff17 	ldw	r4,-4(fp)
    5d34:	000b883a 	mov	r5,zero
    5d38:	01800044 	movi	r6,1
    5d3c:	e1fffe04 	addi	r7,fp,-8
    5d40:	0006a1c0 	call	6a1c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    5d44:	e037883a 	mov	sp,fp
    5d48:	dfc00117 	ldw	ra,4(sp)
    5d4c:	df000017 	ldw	fp,0(sp)
    5d50:	dec00204 	addi	sp,sp,8
    5d54:	f800283a 	ret

00005d58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    5d58:	defff404 	addi	sp,sp,-48
    5d5c:	df000b15 	stw	fp,44(sp)
    5d60:	df000b04 	addi	fp,sp,44
    5d64:	e13ffb15 	stw	r4,-20(fp)
    5d68:	e17ffc15 	stw	r5,-16(fp)
    5d6c:	e1bffd15 	stw	r6,-12(fp)
    5d70:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    5d74:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    5d78:	00800074 	movhi	r2,1
    5d7c:	10a4b304 	addi	r2,r2,-27956
    5d80:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    5d84:	1005003a 	cmpeq	r2,r2,zero
    5d88:	1000411e 	bne	r2,zero,5e90 <alt_alarm_start+0x138>
  {
    if (alarm)
    5d8c:	e0bffb17 	ldw	r2,-20(fp)
    5d90:	1005003a 	cmpeq	r2,r2,zero
    5d94:	10003b1e 	bne	r2,zero,5e84 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    5d98:	e0fffb17 	ldw	r3,-20(fp)
    5d9c:	e0bffd17 	ldw	r2,-12(fp)
    5da0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    5da4:	e0fffb17 	ldw	r3,-20(fp)
    5da8:	e0bffe17 	ldw	r2,-8(fp)
    5dac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5db0:	0005303a 	rdctl	r2,status
    5db4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5db8:	e0fff817 	ldw	r3,-32(fp)
    5dbc:	00bfff84 	movi	r2,-2
    5dc0:	1884703a 	and	r2,r3,r2
    5dc4:	1001703a 	wrctl	status,r2
  
  return context;
    5dc8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    5dcc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    5dd0:	00800074 	movhi	r2,1
    5dd4:	10a4b404 	addi	r2,r2,-27952
    5dd8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    5ddc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    5de0:	e0fffc17 	ldw	r3,-16(fp)
    5de4:	e0bff917 	ldw	r2,-28(fp)
    5de8:	1885883a 	add	r2,r3,r2
    5dec:	10c00044 	addi	r3,r2,1
    5df0:	e0bffb17 	ldw	r2,-20(fp)
    5df4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5df8:	e0bffb17 	ldw	r2,-20(fp)
    5dfc:	10c00217 	ldw	r3,8(r2)
    5e00:	e0bff917 	ldw	r2,-28(fp)
    5e04:	1880042e 	bgeu	r3,r2,5e18 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    5e08:	e0fffb17 	ldw	r3,-20(fp)
    5e0c:	00800044 	movi	r2,1
    5e10:	18800405 	stb	r2,16(r3)
    5e14:	00000206 	br	5e20 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    5e18:	e0bffb17 	ldw	r2,-20(fp)
    5e1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    5e20:	e0fffb17 	ldw	r3,-20(fp)
    5e24:	00800074 	movhi	r2,1
    5e28:	10a4a904 	addi	r2,r2,-27996
    5e2c:	e0bff615 	stw	r2,-40(fp)
    5e30:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5e34:	e0fff717 	ldw	r3,-36(fp)
    5e38:	e0bff617 	ldw	r2,-40(fp)
    5e3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5e40:	e0bff617 	ldw	r2,-40(fp)
    5e44:	10c00017 	ldw	r3,0(r2)
    5e48:	e0bff717 	ldw	r2,-36(fp)
    5e4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5e50:	e0bff617 	ldw	r2,-40(fp)
    5e54:	10c00017 	ldw	r3,0(r2)
    5e58:	e0bff717 	ldw	r2,-36(fp)
    5e5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    5e60:	e0fff617 	ldw	r3,-40(fp)
    5e64:	e0bff717 	ldw	r2,-36(fp)
    5e68:	18800015 	stw	r2,0(r3)
    5e6c:	e0bffa17 	ldw	r2,-24(fp)
    5e70:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e74:	e0bff517 	ldw	r2,-44(fp)
    5e78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    5e7c:	e03fff15 	stw	zero,-4(fp)
    5e80:	00000506 	br	5e98 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    5e84:	00bffa84 	movi	r2,-22
    5e88:	e0bfff15 	stw	r2,-4(fp)
    5e8c:	00000206 	br	5e98 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    5e90:	00bfde84 	movi	r2,-134
    5e94:	e0bfff15 	stw	r2,-4(fp)
    5e98:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    5e9c:	e037883a 	mov	sp,fp
    5ea0:	df000017 	ldw	fp,0(sp)
    5ea4:	dec00104 	addi	sp,sp,4
    5ea8:	f800283a 	ret

00005eac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5eac:	defff904 	addi	sp,sp,-28
    5eb0:	dfc00615 	stw	ra,24(sp)
    5eb4:	df000515 	stw	fp,20(sp)
    5eb8:	df000504 	addi	fp,sp,20
    5ebc:	e13ffd15 	stw	r4,-12(fp)
    5ec0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5ec4:	e0bffd17 	ldw	r2,-12(fp)
    5ec8:	1005003a 	cmpeq	r2,r2,zero
    5ecc:	1000041e 	bne	r2,zero,5ee0 <alt_dev_llist_insert+0x34>
    5ed0:	e0bffd17 	ldw	r2,-12(fp)
    5ed4:	10800217 	ldw	r2,8(r2)
    5ed8:	1004c03a 	cmpne	r2,r2,zero
    5edc:	1000071e 	bne	r2,zero,5efc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    5ee0:	0005f600 	call	5f60 <alt_get_errno>
    5ee4:	1007883a 	mov	r3,r2
    5ee8:	00800584 	movi	r2,22
    5eec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5ef0:	00bffa84 	movi	r2,-22
    5ef4:	e0bfff15 	stw	r2,-4(fp)
    5ef8:	00001306 	br	5f48 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5efc:	e0fffd17 	ldw	r3,-12(fp)
    5f00:	e0bffe17 	ldw	r2,-8(fp)
    5f04:	e0bffb15 	stw	r2,-20(fp)
    5f08:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5f0c:	e0fffc17 	ldw	r3,-16(fp)
    5f10:	e0bffb17 	ldw	r2,-20(fp)
    5f14:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5f18:	e0bffb17 	ldw	r2,-20(fp)
    5f1c:	10c00017 	ldw	r3,0(r2)
    5f20:	e0bffc17 	ldw	r2,-16(fp)
    5f24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5f28:	e0bffb17 	ldw	r2,-20(fp)
    5f2c:	10c00017 	ldw	r3,0(r2)
    5f30:	e0bffc17 	ldw	r2,-16(fp)
    5f34:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    5f38:	e0fffb17 	ldw	r3,-20(fp)
    5f3c:	e0bffc17 	ldw	r2,-16(fp)
    5f40:	18800015 	stw	r2,0(r3)

  return 0;  
    5f44:	e03fff15 	stw	zero,-4(fp)
    5f48:	e0bfff17 	ldw	r2,-4(fp)
}
    5f4c:	e037883a 	mov	sp,fp
    5f50:	dfc00117 	ldw	ra,4(sp)
    5f54:	df000017 	ldw	fp,0(sp)
    5f58:	dec00204 	addi	sp,sp,8
    5f5c:	f800283a 	ret

00005f60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5f60:	defffd04 	addi	sp,sp,-12
    5f64:	dfc00215 	stw	ra,8(sp)
    5f68:	df000115 	stw	fp,4(sp)
    5f6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5f70:	00800074 	movhi	r2,1
    5f74:	10a4a404 	addi	r2,r2,-28016
    5f78:	10800017 	ldw	r2,0(r2)
    5f7c:	1005003a 	cmpeq	r2,r2,zero
    5f80:	1000061e 	bne	r2,zero,5f9c <alt_get_errno+0x3c>
    5f84:	00800074 	movhi	r2,1
    5f88:	10a4a404 	addi	r2,r2,-28016
    5f8c:	10800017 	ldw	r2,0(r2)
    5f90:	103ee83a 	callr	r2
    5f94:	e0bfff15 	stw	r2,-4(fp)
    5f98:	00000306 	br	5fa8 <alt_get_errno+0x48>
    5f9c:	00800074 	movhi	r2,1
    5fa0:	10a4ae04 	addi	r2,r2,-27976
    5fa4:	e0bfff15 	stw	r2,-4(fp)
    5fa8:	e0bfff17 	ldw	r2,-4(fp)
}
    5fac:	e037883a 	mov	sp,fp
    5fb0:	dfc00117 	ldw	ra,4(sp)
    5fb4:	df000017 	ldw	fp,0(sp)
    5fb8:	dec00204 	addi	sp,sp,8
    5fbc:	f800283a 	ret

00005fc0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5fc0:	defffd04 	addi	sp,sp,-12
    5fc4:	dfc00215 	stw	ra,8(sp)
    5fc8:	df000115 	stw	fp,4(sp)
    5fcc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5fd0:	00bfff04 	movi	r2,-4
    5fd4:	00c00034 	movhi	r3,0
    5fd8:	18dcb904 	addi	r3,r3,29412
    5fdc:	1885883a 	add	r2,r3,r2
    5fe0:	e0bfff15 	stw	r2,-4(fp)
    5fe4:	00000606 	br	6000 <_do_ctors+0x40>
        (*ctor) (); 
    5fe8:	e0bfff17 	ldw	r2,-4(fp)
    5fec:	10800017 	ldw	r2,0(r2)
    5ff0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5ff4:	e0bfff17 	ldw	r2,-4(fp)
    5ff8:	10bfff04 	addi	r2,r2,-4
    5ffc:	e0bfff15 	stw	r2,-4(fp)
    6000:	e0ffff17 	ldw	r3,-4(fp)
    6004:	00800034 	movhi	r2,0
    6008:	109cb804 	addi	r2,r2,29408
    600c:	18bff62e 	bgeu	r3,r2,5fe8 <_do_ctors+0x28>
        (*ctor) (); 
}
    6010:	e037883a 	mov	sp,fp
    6014:	dfc00117 	ldw	ra,4(sp)
    6018:	df000017 	ldw	fp,0(sp)
    601c:	dec00204 	addi	sp,sp,8
    6020:	f800283a 	ret

00006024 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    6024:	defffd04 	addi	sp,sp,-12
    6028:	dfc00215 	stw	ra,8(sp)
    602c:	df000115 	stw	fp,4(sp)
    6030:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6034:	00bfff04 	movi	r2,-4
    6038:	00c00034 	movhi	r3,0
    603c:	18dcb904 	addi	r3,r3,29412
    6040:	1885883a 	add	r2,r3,r2
    6044:	e0bfff15 	stw	r2,-4(fp)
    6048:	00000606 	br	6064 <_do_dtors+0x40>
        (*dtor) (); 
    604c:	e0bfff17 	ldw	r2,-4(fp)
    6050:	10800017 	ldw	r2,0(r2)
    6054:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6058:	e0bfff17 	ldw	r2,-4(fp)
    605c:	10bfff04 	addi	r2,r2,-4
    6060:	e0bfff15 	stw	r2,-4(fp)
    6064:	e0ffff17 	ldw	r3,-4(fp)
    6068:	00800034 	movhi	r2,0
    606c:	109cb904 	addi	r2,r2,29412
    6070:	18bff62e 	bgeu	r3,r2,604c <_do_dtors+0x28>
        (*dtor) (); 
}
    6074:	e037883a 	mov	sp,fp
    6078:	dfc00117 	ldw	ra,4(sp)
    607c:	df000017 	ldw	fp,0(sp)
    6080:	dec00204 	addi	sp,sp,8
    6084:	f800283a 	ret

00006088 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    6088:	defffb04 	addi	sp,sp,-20
    608c:	dfc00415 	stw	ra,16(sp)
    6090:	df000315 	stw	fp,12(sp)
    6094:	df000304 	addi	fp,sp,12
    6098:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    609c:	e13ffe17 	ldw	r4,-8(fp)
    60a0:	d1600b04 	addi	r5,gp,-32724
    60a4:	0006c540 	call	6c54 <alt_find_dev>
    60a8:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
    60ac:	e0bffd17 	ldw	r2,-12(fp)
    60b0:	1005003a 	cmpeq	r2,r2,zero
    60b4:	10000b1e 	bne	r2,zero,60e4 <alt_flash_open_dev+0x5c>
    60b8:	e0bffd17 	ldw	r2,-12(fp)
    60bc:	10800317 	ldw	r2,12(r2)
    60c0:	1005003a 	cmpeq	r2,r2,zero
    60c4:	1000071e 	bne	r2,zero,60e4 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
    60c8:	e0bffd17 	ldw	r2,-12(fp)
    60cc:	10800317 	ldw	r2,12(r2)
    60d0:	e13ffd17 	ldw	r4,-12(fp)
    60d4:	e17ffe17 	ldw	r5,-8(fp)
    60d8:	103ee83a 	callr	r2
    60dc:	e0bfff15 	stw	r2,-4(fp)
    60e0:	00000206 	br	60ec <alt_flash_open_dev+0x64>
  }

  return dev;
    60e4:	e0bffd17 	ldw	r2,-12(fp)
    60e8:	e0bfff15 	stw	r2,-4(fp)
    60ec:	e0bfff17 	ldw	r2,-4(fp)
}
    60f0:	e037883a 	mov	sp,fp
    60f4:	dfc00117 	ldw	ra,4(sp)
    60f8:	df000017 	ldw	fp,0(sp)
    60fc:	dec00204 	addi	sp,sp,8
    6100:	f800283a 	ret

00006104 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    6104:	defffd04 	addi	sp,sp,-12
    6108:	dfc00215 	stw	ra,8(sp)
    610c:	df000115 	stw	fp,4(sp)
    6110:	df000104 	addi	fp,sp,4
    6114:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    6118:	e0bfff17 	ldw	r2,-4(fp)
    611c:	1005003a 	cmpeq	r2,r2,zero
    6120:	1000081e 	bne	r2,zero,6144 <alt_flash_close_dev+0x40>
    6124:	e0bfff17 	ldw	r2,-4(fp)
    6128:	10800417 	ldw	r2,16(r2)
    612c:	1005003a 	cmpeq	r2,r2,zero
    6130:	1000041e 	bne	r2,zero,6144 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
    6134:	e0bfff17 	ldw	r2,-4(fp)
    6138:	10800417 	ldw	r2,16(r2)
    613c:	e13fff17 	ldw	r4,-4(fp)
    6140:	103ee83a 	callr	r2
  }
  return;
}
    6144:	e037883a 	mov	sp,fp
    6148:	dfc00117 	ldw	ra,4(sp)
    614c:	df000017 	ldw	fp,0(sp)
    6150:	dec00204 	addi	sp,sp,8
    6154:	f800283a 	ret

00006158 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    6158:	defff904 	addi	sp,sp,-28
    615c:	dfc00615 	stw	ra,24(sp)
    6160:	df000515 	stw	fp,20(sp)
    6164:	df000504 	addi	fp,sp,20
    6168:	e13ffc15 	stw	r4,-16(fp)
    616c:	e17ffd15 	stw	r5,-12(fp)
    6170:	e1bffe15 	stw	r6,-8(fp)
    6174:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    6178:	e0800217 	ldw	r2,8(fp)
    617c:	d8800015 	stw	r2,0(sp)
    6180:	e13ffc17 	ldw	r4,-16(fp)
    6184:	e17ffd17 	ldw	r5,-12(fp)
    6188:	e1bffe17 	ldw	r6,-8(fp)
    618c:	e1ffff17 	ldw	r7,-4(fp)
    6190:	000632c0 	call	632c <alt_iic_isr_register>
}  
    6194:	e037883a 	mov	sp,fp
    6198:	dfc00117 	ldw	ra,4(sp)
    619c:	df000017 	ldw	fp,0(sp)
    61a0:	dec00204 	addi	sp,sp,8
    61a4:	f800283a 	ret

000061a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    61a8:	defff904 	addi	sp,sp,-28
    61ac:	df000615 	stw	fp,24(sp)
    61b0:	df000604 	addi	fp,sp,24
    61b4:	e13ffe15 	stw	r4,-8(fp)
    61b8:	e17fff15 	stw	r5,-4(fp)
    61bc:	e0bfff17 	ldw	r2,-4(fp)
    61c0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    61c4:	0005303a 	rdctl	r2,status
    61c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    61cc:	e0fffb17 	ldw	r3,-20(fp)
    61d0:	00bfff84 	movi	r2,-2
    61d4:	1884703a 	and	r2,r3,r2
    61d8:	1001703a 	wrctl	status,r2
  
  return context;
    61dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    61e0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    61e4:	e0fffc17 	ldw	r3,-16(fp)
    61e8:	00800044 	movi	r2,1
    61ec:	10c4983a 	sll	r2,r2,r3
    61f0:	1007883a 	mov	r3,r2
    61f4:	00800074 	movhi	r2,1
    61f8:	10a4b204 	addi	r2,r2,-27960
    61fc:	10800017 	ldw	r2,0(r2)
    6200:	1886b03a 	or	r3,r3,r2
    6204:	00800074 	movhi	r2,1
    6208:	10a4b204 	addi	r2,r2,-27960
    620c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    6210:	00800074 	movhi	r2,1
    6214:	10a4b204 	addi	r2,r2,-27960
    6218:	10800017 	ldw	r2,0(r2)
    621c:	100170fa 	wrctl	ienable,r2
    6220:	e0bffd17 	ldw	r2,-12(fp)
    6224:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6228:	e0bffa17 	ldw	r2,-24(fp)
    622c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    6230:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    6234:	e037883a 	mov	sp,fp
    6238:	df000017 	ldw	fp,0(sp)
    623c:	dec00104 	addi	sp,sp,4
    6240:	f800283a 	ret

00006244 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    6244:	defff904 	addi	sp,sp,-28
    6248:	df000615 	stw	fp,24(sp)
    624c:	df000604 	addi	fp,sp,24
    6250:	e13ffe15 	stw	r4,-8(fp)
    6254:	e17fff15 	stw	r5,-4(fp)
    6258:	e0bfff17 	ldw	r2,-4(fp)
    625c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6260:	0005303a 	rdctl	r2,status
    6264:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6268:	e0fffb17 	ldw	r3,-20(fp)
    626c:	00bfff84 	movi	r2,-2
    6270:	1884703a 	and	r2,r3,r2
    6274:	1001703a 	wrctl	status,r2
  
  return context;
    6278:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    627c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    6280:	e0fffc17 	ldw	r3,-16(fp)
    6284:	00800044 	movi	r2,1
    6288:	10c4983a 	sll	r2,r2,r3
    628c:	0084303a 	nor	r2,zero,r2
    6290:	1007883a 	mov	r3,r2
    6294:	00800074 	movhi	r2,1
    6298:	10a4b204 	addi	r2,r2,-27960
    629c:	10800017 	ldw	r2,0(r2)
    62a0:	1886703a 	and	r3,r3,r2
    62a4:	00800074 	movhi	r2,1
    62a8:	10a4b204 	addi	r2,r2,-27960
    62ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    62b0:	00800074 	movhi	r2,1
    62b4:	10a4b204 	addi	r2,r2,-27960
    62b8:	10800017 	ldw	r2,0(r2)
    62bc:	100170fa 	wrctl	ienable,r2
    62c0:	e0bffd17 	ldw	r2,-12(fp)
    62c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    62c8:	e0bffa17 	ldw	r2,-24(fp)
    62cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    62d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    62d4:	e037883a 	mov	sp,fp
    62d8:	df000017 	ldw	fp,0(sp)
    62dc:	dec00104 	addi	sp,sp,4
    62e0:	f800283a 	ret

000062e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    62e4:	defffc04 	addi	sp,sp,-16
    62e8:	df000315 	stw	fp,12(sp)
    62ec:	df000304 	addi	fp,sp,12
    62f0:	e13ffe15 	stw	r4,-8(fp)
    62f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    62f8:	000530fa 	rdctl	r2,ienable
    62fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    6300:	e0ffff17 	ldw	r3,-4(fp)
    6304:	00800044 	movi	r2,1
    6308:	10c4983a 	sll	r2,r2,r3
    630c:	1007883a 	mov	r3,r2
    6310:	e0bffd17 	ldw	r2,-12(fp)
    6314:	1884703a 	and	r2,r3,r2
    6318:	1004c03a 	cmpne	r2,r2,zero
}
    631c:	e037883a 	mov	sp,fp
    6320:	df000017 	ldw	fp,0(sp)
    6324:	dec00104 	addi	sp,sp,4
    6328:	f800283a 	ret

0000632c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    632c:	defff404 	addi	sp,sp,-48
    6330:	dfc00b15 	stw	ra,44(sp)
    6334:	df000a15 	stw	fp,40(sp)
    6338:	df000a04 	addi	fp,sp,40
    633c:	e13ffb15 	stw	r4,-20(fp)
    6340:	e17ffc15 	stw	r5,-16(fp)
    6344:	e1bffd15 	stw	r6,-12(fp)
    6348:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    634c:	00bffa84 	movi	r2,-22
    6350:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    6354:	e0bffc17 	ldw	r2,-16(fp)
    6358:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    635c:	e0bff917 	ldw	r2,-28(fp)
    6360:	10800808 	cmpgei	r2,r2,32
    6364:	1000291e 	bne	r2,zero,640c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6368:	0005303a 	rdctl	r2,status
    636c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6370:	e0fff717 	ldw	r3,-36(fp)
    6374:	00bfff84 	movi	r2,-2
    6378:	1884703a 	and	r2,r3,r2
    637c:	1001703a 	wrctl	status,r2
  
  return context;
    6380:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    6384:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    6388:	e0bff917 	ldw	r2,-28(fp)
    638c:	00c00074 	movhi	r3,1
    6390:	18e4bf04 	addi	r3,r3,-27908
    6394:	100490fa 	slli	r2,r2,3
    6398:	10c7883a 	add	r3,r2,r3
    639c:	e0bffd17 	ldw	r2,-12(fp)
    63a0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    63a4:	e0bff917 	ldw	r2,-28(fp)
    63a8:	00c00074 	movhi	r3,1
    63ac:	18e4bf04 	addi	r3,r3,-27908
    63b0:	100490fa 	slli	r2,r2,3
    63b4:	10c5883a 	add	r2,r2,r3
    63b8:	10c00104 	addi	r3,r2,4
    63bc:	e0bffe17 	ldw	r2,-8(fp)
    63c0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    63c4:	e0bffd17 	ldw	r2,-12(fp)
    63c8:	1005003a 	cmpeq	r2,r2,zero
    63cc:	1000051e 	bne	r2,zero,63e4 <alt_iic_isr_register+0xb8>
    63d0:	e17ff917 	ldw	r5,-28(fp)
    63d4:	e13ffb17 	ldw	r4,-20(fp)
    63d8:	00061a80 	call	61a8 <alt_ic_irq_enable>
    63dc:	e0bfff15 	stw	r2,-4(fp)
    63e0:	00000406 	br	63f4 <alt_iic_isr_register+0xc8>
    63e4:	e17ff917 	ldw	r5,-28(fp)
    63e8:	e13ffb17 	ldw	r4,-20(fp)
    63ec:	00062440 	call	6244 <alt_ic_irq_disable>
    63f0:	e0bfff15 	stw	r2,-4(fp)
    63f4:	e0bfff17 	ldw	r2,-4(fp)
    63f8:	e0bffa15 	stw	r2,-24(fp)
    63fc:	e0bff817 	ldw	r2,-32(fp)
    6400:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6404:	e0bff617 	ldw	r2,-40(fp)
    6408:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    640c:	e0bffa17 	ldw	r2,-24(fp)
}
    6410:	e037883a 	mov	sp,fp
    6414:	dfc00117 	ldw	ra,4(sp)
    6418:	df000017 	ldw	fp,0(sp)
    641c:	dec00204 	addi	sp,sp,8
    6420:	f800283a 	ret

00006424 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    6424:	defff804 	addi	sp,sp,-32
    6428:	dfc00715 	stw	ra,28(sp)
    642c:	df000615 	stw	fp,24(sp)
    6430:	dc000515 	stw	r16,20(sp)
    6434:	df000504 	addi	fp,sp,20
    6438:	e13ffc15 	stw	r4,-16(fp)
    643c:	e17ffd15 	stw	r5,-12(fp)
    6440:	e1bffe15 	stw	r6,-8(fp)
    6444:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    6448:	e13ffd17 	ldw	r4,-12(fp)
    644c:	e17ffe17 	ldw	r5,-8(fp)
    6450:	e1bfff17 	ldw	r6,-4(fp)
    6454:	000666c0 	call	666c <open>
    6458:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    645c:	e0bffb17 	ldw	r2,-20(fp)
    6460:	1004803a 	cmplt	r2,r2,zero
    6464:	10001f1e 	bne	r2,zero,64e4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    6468:	e13ffb17 	ldw	r4,-20(fp)
    646c:	04000034 	movhi	r16,0
    6470:	841efc04 	addi	r16,r16,31728
    6474:	01400304 	movi	r5,12
    6478:	0002b640 	call	2b64 <__mulsi3>
    647c:	1405883a 	add	r2,r2,r16
    6480:	10c00017 	ldw	r3,0(r2)
    6484:	e0bffc17 	ldw	r2,-16(fp)
    6488:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    648c:	e13ffb17 	ldw	r4,-20(fp)
    6490:	04000034 	movhi	r16,0
    6494:	841efc04 	addi	r16,r16,31728
    6498:	01400304 	movi	r5,12
    649c:	0002b640 	call	2b64 <__mulsi3>
    64a0:	1405883a 	add	r2,r2,r16
    64a4:	10800104 	addi	r2,r2,4
    64a8:	10c00017 	ldw	r3,0(r2)
    64ac:	e0bffc17 	ldw	r2,-16(fp)
    64b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    64b4:	e13ffb17 	ldw	r4,-20(fp)
    64b8:	04000034 	movhi	r16,0
    64bc:	841efc04 	addi	r16,r16,31728
    64c0:	01400304 	movi	r5,12
    64c4:	0002b640 	call	2b64 <__mulsi3>
    64c8:	1405883a 	add	r2,r2,r16
    64cc:	10800204 	addi	r2,r2,8
    64d0:	10c00017 	ldw	r3,0(r2)
    64d4:	e0bffc17 	ldw	r2,-16(fp)
    64d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    64dc:	e13ffb17 	ldw	r4,-20(fp)
    64e0:	00033080 	call	3308 <alt_release_fd>
  }
} 
    64e4:	e037883a 	mov	sp,fp
    64e8:	dfc00217 	ldw	ra,8(sp)
    64ec:	df000117 	ldw	fp,4(sp)
    64f0:	dc000017 	ldw	r16,0(sp)
    64f4:	dec00304 	addi	sp,sp,12
    64f8:	f800283a 	ret

000064fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    64fc:	defffb04 	addi	sp,sp,-20
    6500:	dfc00415 	stw	ra,16(sp)
    6504:	df000315 	stw	fp,12(sp)
    6508:	df000304 	addi	fp,sp,12
    650c:	e13ffd15 	stw	r4,-12(fp)
    6510:	e17ffe15 	stw	r5,-8(fp)
    6514:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6518:	01000034 	movhi	r4,0
    651c:	211eff04 	addi	r4,r4,31740
    6520:	e17ffd17 	ldw	r5,-12(fp)
    6524:	01800044 	movi	r6,1
    6528:	01c07fc4 	movi	r7,511
    652c:	00064240 	call	6424 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6530:	01000034 	movhi	r4,0
    6534:	211efc04 	addi	r4,r4,31728
    6538:	e17ffe17 	ldw	r5,-8(fp)
    653c:	000d883a 	mov	r6,zero
    6540:	01c07fc4 	movi	r7,511
    6544:	00064240 	call	6424 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6548:	01000034 	movhi	r4,0
    654c:	211f0204 	addi	r4,r4,31752
    6550:	e17fff17 	ldw	r5,-4(fp)
    6554:	01800044 	movi	r6,1
    6558:	01c07fc4 	movi	r7,511
    655c:	00064240 	call	6424 <alt_open_fd>
}  
    6560:	e037883a 	mov	sp,fp
    6564:	dfc00117 	ldw	ra,4(sp)
    6568:	df000017 	ldw	fp,0(sp)
    656c:	dec00204 	addi	sp,sp,8
    6570:	f800283a 	ret

00006574 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6574:	defffa04 	addi	sp,sp,-24
    6578:	dfc00515 	stw	ra,20(sp)
    657c:	df000415 	stw	fp,16(sp)
    6580:	dc000315 	stw	r16,12(sp)
    6584:	df000304 	addi	fp,sp,12
    6588:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    658c:	e0bffe17 	ldw	r2,-8(fp)
    6590:	10800217 	ldw	r2,8(r2)
    6594:	10d00034 	orhi	r3,r2,16384
    6598:	e0bffe17 	ldw	r2,-8(fp)
    659c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    65a0:	e03ffd15 	stw	zero,-12(fp)
    65a4:	00002306 	br	6634 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    65a8:	e13ffd17 	ldw	r4,-12(fp)
    65ac:	04000034 	movhi	r16,0
    65b0:	841efc04 	addi	r16,r16,31728
    65b4:	01400304 	movi	r5,12
    65b8:	0002b640 	call	2b64 <__mulsi3>
    65bc:	1405883a 	add	r2,r2,r16
    65c0:	10c00017 	ldw	r3,0(r2)
    65c4:	e0bffe17 	ldw	r2,-8(fp)
    65c8:	10800017 	ldw	r2,0(r2)
    65cc:	1880161e 	bne	r3,r2,6628 <alt_file_locked+0xb4>
    65d0:	e13ffd17 	ldw	r4,-12(fp)
    65d4:	04000034 	movhi	r16,0
    65d8:	841efc04 	addi	r16,r16,31728
    65dc:	01400304 	movi	r5,12
    65e0:	0002b640 	call	2b64 <__mulsi3>
    65e4:	1405883a 	add	r2,r2,r16
    65e8:	10800204 	addi	r2,r2,8
    65ec:	10800017 	ldw	r2,0(r2)
    65f0:	1004403a 	cmpge	r2,r2,zero
    65f4:	10000c1e 	bne	r2,zero,6628 <alt_file_locked+0xb4>
    65f8:	e13ffd17 	ldw	r4,-12(fp)
    65fc:	01400304 	movi	r5,12
    6600:	0002b640 	call	2b64 <__mulsi3>
    6604:	1007883a 	mov	r3,r2
    6608:	00800034 	movhi	r2,0
    660c:	109efc04 	addi	r2,r2,31728
    6610:	1887883a 	add	r3,r3,r2
    6614:	e0bffe17 	ldw	r2,-8(fp)
    6618:	18800326 	beq	r3,r2,6628 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    661c:	00bffcc4 	movi	r2,-13
    6620:	e0bfff15 	stw	r2,-4(fp)
    6624:	00000a06 	br	6650 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6628:	e0bffd17 	ldw	r2,-12(fp)
    662c:	10800044 	addi	r2,r2,1
    6630:	e0bffd15 	stw	r2,-12(fp)
    6634:	00800074 	movhi	r2,1
    6638:	10a4a304 	addi	r2,r2,-28020
    663c:	10800017 	ldw	r2,0(r2)
    6640:	1007883a 	mov	r3,r2
    6644:	e0bffd17 	ldw	r2,-12(fp)
    6648:	18bfd72e 	bgeu	r3,r2,65a8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    664c:	e03fff15 	stw	zero,-4(fp)
    6650:	e0bfff17 	ldw	r2,-4(fp)
}
    6654:	e037883a 	mov	sp,fp
    6658:	dfc00217 	ldw	ra,8(sp)
    665c:	df000117 	ldw	fp,4(sp)
    6660:	dc000017 	ldw	r16,0(sp)
    6664:	dec00304 	addi	sp,sp,12
    6668:	f800283a 	ret

0000666c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    666c:	defff404 	addi	sp,sp,-48
    6670:	dfc00b15 	stw	ra,44(sp)
    6674:	df000a15 	stw	fp,40(sp)
    6678:	df000a04 	addi	fp,sp,40
    667c:	e13ffb15 	stw	r4,-20(fp)
    6680:	e17ffc15 	stw	r5,-16(fp)
    6684:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6688:	00bfffc4 	movi	r2,-1
    668c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    6690:	00bffb44 	movi	r2,-19
    6694:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    6698:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    669c:	e13ffb17 	ldw	r4,-20(fp)
    66a0:	01400074 	movhi	r5,1
    66a4:	2964a104 	addi	r5,r5,-28028
    66a8:	0006c540 	call	6c54 <alt_find_dev>
    66ac:	e0bffa15 	stw	r2,-24(fp)
    66b0:	e0bffa17 	ldw	r2,-24(fp)
    66b4:	1004c03a 	cmpne	r2,r2,zero
    66b8:	1000051e 	bne	r2,zero,66d0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    66bc:	e13ffb17 	ldw	r4,-20(fp)
    66c0:	0006ce80 	call	6ce8 <alt_find_file>
    66c4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    66c8:	00800044 	movi	r2,1
    66cc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    66d0:	e0bffa17 	ldw	r2,-24(fp)
    66d4:	1005003a 	cmpeq	r2,r2,zero
    66d8:	1000311e 	bne	r2,zero,67a0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    66dc:	e13ffa17 	ldw	r4,-24(fp)
    66e0:	0006e080 	call	6e08 <alt_get_fd>
    66e4:	e0bff815 	stw	r2,-32(fp)
    66e8:	e0bff817 	ldw	r2,-32(fp)
    66ec:	1004403a 	cmpge	r2,r2,zero
    66f0:	1000031e 	bne	r2,zero,6700 <open+0x94>
    {
      status = index;
    66f4:	e0bff817 	ldw	r2,-32(fp)
    66f8:	e0bff715 	stw	r2,-36(fp)
    66fc:	00002a06 	br	67a8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    6700:	e13ff817 	ldw	r4,-32(fp)
    6704:	01400304 	movi	r5,12
    6708:	0002b640 	call	2b64 <__mulsi3>
    670c:	1007883a 	mov	r3,r2
    6710:	00800034 	movhi	r2,0
    6714:	109efc04 	addi	r2,r2,31728
    6718:	1885883a 	add	r2,r3,r2
    671c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6720:	e0fffc17 	ldw	r3,-16(fp)
    6724:	00900034 	movhi	r2,16384
    6728:	10bfffc4 	addi	r2,r2,-1
    672c:	1886703a 	and	r3,r3,r2
    6730:	e0bff917 	ldw	r2,-28(fp)
    6734:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6738:	e0bff617 	ldw	r2,-40(fp)
    673c:	1004c03a 	cmpne	r2,r2,zero
    6740:	1000061e 	bne	r2,zero,675c <open+0xf0>
    6744:	e13ff917 	ldw	r4,-28(fp)
    6748:	00065740 	call	6574 <alt_file_locked>
    674c:	e0bff715 	stw	r2,-36(fp)
    6750:	e0bff717 	ldw	r2,-36(fp)
    6754:	1004803a 	cmplt	r2,r2,zero
    6758:	1000131e 	bne	r2,zero,67a8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    675c:	e0bffa17 	ldw	r2,-24(fp)
    6760:	10800317 	ldw	r2,12(r2)
    6764:	1005003a 	cmpeq	r2,r2,zero
    6768:	1000091e 	bne	r2,zero,6790 <open+0x124>
    676c:	e0bffa17 	ldw	r2,-24(fp)
    6770:	10800317 	ldw	r2,12(r2)
    6774:	e13ff917 	ldw	r4,-28(fp)
    6778:	e17ffb17 	ldw	r5,-20(fp)
    677c:	e1bffc17 	ldw	r6,-16(fp)
    6780:	e1fffd17 	ldw	r7,-12(fp)
    6784:	103ee83a 	callr	r2
    6788:	e0bfff15 	stw	r2,-4(fp)
    678c:	00000106 	br	6794 <open+0x128>
    6790:	e03fff15 	stw	zero,-4(fp)
    6794:	e0bfff17 	ldw	r2,-4(fp)
    6798:	e0bff715 	stw	r2,-36(fp)
    679c:	00000206 	br	67a8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    67a0:	00bffb44 	movi	r2,-19
    67a4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    67a8:	e0bff717 	ldw	r2,-36(fp)
    67ac:	1004403a 	cmpge	r2,r2,zero
    67b0:	1000091e 	bne	r2,zero,67d8 <open+0x16c>
  {
    alt_release_fd (index);  
    67b4:	e13ff817 	ldw	r4,-32(fp)
    67b8:	00033080 	call	3308 <alt_release_fd>
    ALT_ERRNO = -status;
    67bc:	00067f80 	call	67f8 <alt_get_errno>
    67c0:	e0fff717 	ldw	r3,-36(fp)
    67c4:	00c7c83a 	sub	r3,zero,r3
    67c8:	10c00015 	stw	r3,0(r2)
    return -1;
    67cc:	00bfffc4 	movi	r2,-1
    67d0:	e0bffe15 	stw	r2,-8(fp)
    67d4:	00000206 	br	67e0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    67d8:	e0bff817 	ldw	r2,-32(fp)
    67dc:	e0bffe15 	stw	r2,-8(fp)
    67e0:	e0bffe17 	ldw	r2,-8(fp)
}
    67e4:	e037883a 	mov	sp,fp
    67e8:	dfc00117 	ldw	ra,4(sp)
    67ec:	df000017 	ldw	fp,0(sp)
    67f0:	dec00204 	addi	sp,sp,8
    67f4:	f800283a 	ret

000067f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    67f8:	defffd04 	addi	sp,sp,-12
    67fc:	dfc00215 	stw	ra,8(sp)
    6800:	df000115 	stw	fp,4(sp)
    6804:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    6808:	00800074 	movhi	r2,1
    680c:	10a4a404 	addi	r2,r2,-28016
    6810:	10800017 	ldw	r2,0(r2)
    6814:	1005003a 	cmpeq	r2,r2,zero
    6818:	1000061e 	bne	r2,zero,6834 <alt_get_errno+0x3c>
    681c:	00800074 	movhi	r2,1
    6820:	10a4a404 	addi	r2,r2,-28016
    6824:	10800017 	ldw	r2,0(r2)
    6828:	103ee83a 	callr	r2
    682c:	e0bfff15 	stw	r2,-4(fp)
    6830:	00000306 	br	6840 <alt_get_errno+0x48>
    6834:	00800074 	movhi	r2,1
    6838:	10a4ae04 	addi	r2,r2,-27976
    683c:	e0bfff15 	stw	r2,-4(fp)
    6840:	e0bfff17 	ldw	r2,-4(fp)
}
    6844:	e037883a 	mov	sp,fp
    6848:	dfc00117 	ldw	ra,4(sp)
    684c:	df000017 	ldw	fp,0(sp)
    6850:	dec00204 	addi	sp,sp,8
    6854:	f800283a 	ret

00006858 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    6858:	defffa04 	addi	sp,sp,-24
    685c:	df000515 	stw	fp,20(sp)
    6860:	df000504 	addi	fp,sp,20
    6864:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6868:	0005303a 	rdctl	r2,status
    686c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6870:	e0fffd17 	ldw	r3,-12(fp)
    6874:	00bfff84 	movi	r2,-2
    6878:	1884703a 	and	r2,r3,r2
    687c:	1001703a 	wrctl	status,r2
  
  return context;
    6880:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    6884:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    6888:	e0bfff17 	ldw	r2,-4(fp)
    688c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    6890:	e0bffc17 	ldw	r2,-16(fp)
    6894:	10c00017 	ldw	r3,0(r2)
    6898:	e0bffc17 	ldw	r2,-16(fp)
    689c:	10800117 	ldw	r2,4(r2)
    68a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    68a4:	e0bffc17 	ldw	r2,-16(fp)
    68a8:	10c00117 	ldw	r3,4(r2)
    68ac:	e0bffc17 	ldw	r2,-16(fp)
    68b0:	10800017 	ldw	r2,0(r2)
    68b4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    68b8:	e0fffc17 	ldw	r3,-16(fp)
    68bc:	e0bffc17 	ldw	r2,-16(fp)
    68c0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    68c4:	e0fffc17 	ldw	r3,-16(fp)
    68c8:	e0bffc17 	ldw	r2,-16(fp)
    68cc:	18800015 	stw	r2,0(r3)
    68d0:	e0bffe17 	ldw	r2,-8(fp)
    68d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    68d8:	e0bffb17 	ldw	r2,-20(fp)
    68dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    68e0:	e037883a 	mov	sp,fp
    68e4:	df000017 	ldw	fp,0(sp)
    68e8:	dec00104 	addi	sp,sp,4
    68ec:	f800283a 	ret

000068f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    68f0:	defffb04 	addi	sp,sp,-20
    68f4:	dfc00415 	stw	ra,16(sp)
    68f8:	df000315 	stw	fp,12(sp)
    68fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6900:	d0a00e17 	ldw	r2,-32712(gp)
    6904:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    6908:	d0a01917 	ldw	r2,-32668(gp)
    690c:	10800044 	addi	r2,r2,1
    6910:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6914:	00003106 	br	69dc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    6918:	e0bffe17 	ldw	r2,-8(fp)
    691c:	10800017 	ldw	r2,0(r2)
    6920:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6924:	e0bffe17 	ldw	r2,-8(fp)
    6928:	10800403 	ldbu	r2,16(r2)
    692c:	10803fcc 	andi	r2,r2,255
    6930:	1005003a 	cmpeq	r2,r2,zero
    6934:	1000051e 	bne	r2,zero,694c <alt_tick+0x5c>
    6938:	d0a01917 	ldw	r2,-32668(gp)
    693c:	1004c03a 	cmpne	r2,r2,zero
    6940:	1000021e 	bne	r2,zero,694c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    6944:	e0bffe17 	ldw	r2,-8(fp)
    6948:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    694c:	e0bffe17 	ldw	r2,-8(fp)
    6950:	10c00217 	ldw	r3,8(r2)
    6954:	d0a01917 	ldw	r2,-32668(gp)
    6958:	10c01e36 	bltu	r2,r3,69d4 <alt_tick+0xe4>
    695c:	e0bffe17 	ldw	r2,-8(fp)
    6960:	10800403 	ldbu	r2,16(r2)
    6964:	10803fcc 	andi	r2,r2,255
    6968:	1004c03a 	cmpne	r2,r2,zero
    696c:	1000191e 	bne	r2,zero,69d4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    6970:	e0bffe17 	ldw	r2,-8(fp)
    6974:	10c00317 	ldw	r3,12(r2)
    6978:	e0bffe17 	ldw	r2,-8(fp)
    697c:	11000517 	ldw	r4,20(r2)
    6980:	183ee83a 	callr	r3
    6984:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    6988:	e0bffd17 	ldw	r2,-12(fp)
    698c:	1004c03a 	cmpne	r2,r2,zero
    6990:	1000031e 	bne	r2,zero,69a0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    6994:	e13ffe17 	ldw	r4,-8(fp)
    6998:	00068580 	call	6858 <alt_alarm_stop>
    699c:	00000d06 	br	69d4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    69a0:	e0bffe17 	ldw	r2,-8(fp)
    69a4:	10c00217 	ldw	r3,8(r2)
    69a8:	e0bffd17 	ldw	r2,-12(fp)
    69ac:	1887883a 	add	r3,r3,r2
    69b0:	e0bffe17 	ldw	r2,-8(fp)
    69b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    69b8:	e0bffe17 	ldw	r2,-8(fp)
    69bc:	10c00217 	ldw	r3,8(r2)
    69c0:	d0a01917 	ldw	r2,-32668(gp)
    69c4:	1880032e 	bgeu	r3,r2,69d4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    69c8:	e0fffe17 	ldw	r3,-8(fp)
    69cc:	00800044 	movi	r2,1
    69d0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    69d4:	e0bfff17 	ldw	r2,-4(fp)
    69d8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    69dc:	d0e00e04 	addi	r3,gp,-32712
    69e0:	e0bffe17 	ldw	r2,-8(fp)
    69e4:	10ffcc1e 	bne	r2,r3,6918 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    69e8:	e037883a 	mov	sp,fp
    69ec:	dfc00117 	ldw	ra,4(sp)
    69f0:	df000017 	ldw	fp,0(sp)
    69f4:	dec00204 	addi	sp,sp,8
    69f8:	f800283a 	ret

000069fc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    69fc:	deffff04 	addi	sp,sp,-4
    6a00:	df000015 	stw	fp,0(sp)
    6a04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6a08:	000170fa 	wrctl	ienable,zero
}
    6a0c:	e037883a 	mov	sp,fp
    6a10:	df000017 	ldw	fp,0(sp)
    6a14:	dec00104 	addi	sp,sp,4
    6a18:	f800283a 	ret

00006a1c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    6a1c:	defff404 	addi	sp,sp,-48
    6a20:	df000b15 	stw	fp,44(sp)
    6a24:	df000b04 	addi	fp,sp,44
    6a28:	e13ffc15 	stw	r4,-16(fp)
    6a2c:	e17ffd15 	stw	r5,-12(fp)
    6a30:	e1bffe15 	stw	r6,-8(fp)
    6a34:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    6a38:	e0fffe17 	ldw	r3,-8(fp)
    6a3c:	e0bfff17 	ldw	r2,-4(fp)
    6a40:	10c5883a 	add	r2,r2,r3
    6a44:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
    6a48:	e0c00117 	ldw	r3,4(fp)
    6a4c:	e0800217 	ldw	r2,8(fp)
    6a50:	10c5883a 	add	r2,r2,r3
    6a54:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
    6a58:	e0800117 	ldw	r2,4(fp)
    6a5c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
    6a60:	e0bffe17 	ldw	r2,-8(fp)
    6a64:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    6a68:	00800044 	movi	r2,1
    6a6c:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    6a70:	e0bffc17 	ldw	r2,-16(fp)
    6a74:	11000504 	addi	r4,r2,20
    6a78:	e0fffd17 	ldw	r3,-12(fp)
    6a7c:	00800044 	movi	r2,1
    6a80:	10c6983a 	sll	r3,r2,r3
    6a84:	2005883a 	mov	r2,r4
    6a88:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    6a8c:	e0800317 	ldw	r2,12(fp)
    6a90:	1080008c 	andi	r2,r2,2
    6a94:	1004c03a 	cmpne	r2,r2,zero
    6a98:	1000051e 	bne	r2,zero,6ab0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    6a9c:	e0bffc17 	ldw	r2,-16(fp)
    6aa0:	10800304 	addi	r2,r2,12
    6aa4:	1007883a 	mov	r3,r2
    6aa8:	00810004 	movi	r2,1024
    6aac:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    6ab0:	e0bffc17 	ldw	r2,-16(fp)
    6ab4:	10800037 	ldwio	r2,0(r2)
    6ab8:	00000006 	br	6abc <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    6abc:	e0bffc17 	ldw	r2,-16(fp)
    6ac0:	10800204 	addi	r2,r2,8
    6ac4:	10800037 	ldwio	r2,0(r2)
    6ac8:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    6acc:	e0bff717 	ldw	r2,-36(fp)
    6ad0:	1080100c 	andi	r2,r2,64
    6ad4:	1005003a 	cmpeq	r2,r2,zero
    6ad8:	1000031e 	bne	r2,zero,6ae8 <alt_avalon_spi_command+0xcc>
    6adc:	e0bff617 	ldw	r2,-40(fp)
    6ae0:	1004c03a 	cmpne	r2,r2,zero
    6ae4:	1000041e 	bne	r2,zero,6af8 <alt_avalon_spi_command+0xdc>
    6ae8:	e0bff717 	ldw	r2,-36(fp)
    6aec:	1080200c 	andi	r2,r2,128
    6af0:	1005003a 	cmpeq	r2,r2,zero
    6af4:	103ff11e 	bne	r2,zero,6abc <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    6af8:	e0bff717 	ldw	r2,-36(fp)
    6afc:	1080100c 	andi	r2,r2,64
    6b00:	1005003a 	cmpeq	r2,r2,zero
    6b04:	1000201e 	bne	r2,zero,6b88 <alt_avalon_spi_command+0x16c>
    6b08:	e0bff617 	ldw	r2,-40(fp)
    6b0c:	10800050 	cmplti	r2,r2,1
    6b10:	10001d1e 	bne	r2,zero,6b88 <alt_avalon_spi_command+0x16c>
    {
      credits--;
    6b14:	e0bff617 	ldw	r2,-40(fp)
    6b18:	10bfffc4 	addi	r2,r2,-1
    6b1c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
    6b20:	e0ffff17 	ldw	r3,-4(fp)
    6b24:	e0bffb17 	ldw	r2,-20(fp)
    6b28:	18800b2e 	bgeu	r3,r2,6b58 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    6b2c:	e0bffc17 	ldw	r2,-16(fp)
    6b30:	11000104 	addi	r4,r2,4
    6b34:	e0bfff17 	ldw	r2,-4(fp)
    6b38:	10800003 	ldbu	r2,0(r2)
    6b3c:	10c03fcc 	andi	r3,r2,255
    6b40:	e0bfff17 	ldw	r2,-4(fp)
    6b44:	10800044 	addi	r2,r2,1
    6b48:	e0bfff15 	stw	r2,-4(fp)
    6b4c:	2005883a 	mov	r2,r4
    6b50:	10c00035 	stwio	r3,0(r2)
    6b54:	00000c06 	br	6b88 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
    6b58:	e0bff917 	ldw	r2,-28(fp)
    6b5c:	1005003a 	cmpeq	r2,r2,zero
    6b60:	1000071e 	bne	r2,zero,6b80 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
    6b64:	e0bff917 	ldw	r2,-28(fp)
    6b68:	10bfffc4 	addi	r2,r2,-1
    6b6c:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    6b70:	e0bffc17 	ldw	r2,-16(fp)
    6b74:	10800104 	addi	r2,r2,4
    6b78:	10000035 	stwio	zero,0(r2)
    6b7c:	00000206 	br	6b88 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
    6b80:	00bf0004 	movi	r2,-1024
    6b84:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    6b88:	e0bff717 	ldw	r2,-36(fp)
    6b8c:	1080200c 	andi	r2,r2,128
    6b90:	1005003a 	cmpeq	r2,r2,zero
    6b94:	103fc91e 	bne	r2,zero,6abc <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    6b98:	e0bffc17 	ldw	r2,-16(fp)
    6b9c:	10800037 	ldwio	r2,0(r2)
    6ba0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
    6ba4:	e0bff817 	ldw	r2,-32(fp)
    6ba8:	1005003a 	cmpeq	r2,r2,zero
    6bac:	1000041e 	bne	r2,zero,6bc0 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
    6bb0:	e0bff817 	ldw	r2,-32(fp)
    6bb4:	10bfffc4 	addi	r2,r2,-1
    6bb8:	e0bff815 	stw	r2,-32(fp)
    6bbc:	00000706 	br	6bdc <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
    6bc0:	e0bff517 	ldw	r2,-44(fp)
    6bc4:	1007883a 	mov	r3,r2
    6bc8:	e0800217 	ldw	r2,8(fp)
    6bcc:	10c00005 	stb	r3,0(r2)
    6bd0:	e0800217 	ldw	r2,8(fp)
    6bd4:	10800044 	addi	r2,r2,1
    6bd8:	e0800215 	stw	r2,8(fp)
      credits++;
    6bdc:	e0bff617 	ldw	r2,-40(fp)
    6be0:	10800044 	addi	r2,r2,1
    6be4:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
    6be8:	e0bff817 	ldw	r2,-32(fp)
    6bec:	1004c03a 	cmpne	r2,r2,zero
    6bf0:	103fb21e 	bne	r2,zero,6abc <alt_avalon_spi_command+0xa0>
    6bf4:	e0c00217 	ldw	r3,8(fp)
    6bf8:	e0bffa17 	ldw	r2,-24(fp)
    6bfc:	18800126 	beq	r3,r2,6c04 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
    6c00:	003fae06 	br	6abc <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    6c04:	e0bffc17 	ldw	r2,-16(fp)
    6c08:	10800204 	addi	r2,r2,8
    6c0c:	10800037 	ldwio	r2,0(r2)
    6c10:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    6c14:	e0bff717 	ldw	r2,-36(fp)
    6c18:	1080080c 	andi	r2,r2,32
    6c1c:	1005003a 	cmpeq	r2,r2,zero
    6c20:	103ff81e 	bne	r2,zero,6c04 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    6c24:	e0800317 	ldw	r2,12(fp)
    6c28:	1080004c 	andi	r2,r2,1
    6c2c:	1004c03a 	cmpne	r2,r2,zero
    6c30:	1000031e 	bne	r2,zero,6c40 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    6c34:	e0bffc17 	ldw	r2,-16(fp)
    6c38:	10800304 	addi	r2,r2,12
    6c3c:	10000035 	stwio	zero,0(r2)

  return read_length;
    6c40:	e0800117 	ldw	r2,4(fp)
}
    6c44:	e037883a 	mov	sp,fp
    6c48:	df000017 	ldw	fp,0(sp)
    6c4c:	dec00104 	addi	sp,sp,4
    6c50:	f800283a 	ret

00006c54 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6c54:	defff904 	addi	sp,sp,-28
    6c58:	dfc00615 	stw	ra,24(sp)
    6c5c:	df000515 	stw	fp,20(sp)
    6c60:	df000504 	addi	fp,sp,20
    6c64:	e13ffd15 	stw	r4,-12(fp)
    6c68:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    6c6c:	e0bffe17 	ldw	r2,-8(fp)
    6c70:	10800017 	ldw	r2,0(r2)
    6c74:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    6c78:	e13ffd17 	ldw	r4,-12(fp)
    6c7c:	00002d40 	call	2d4 <strlen>
    6c80:	10800044 	addi	r2,r2,1
    6c84:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6c88:	00000d06 	br	6cc0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    6c8c:	e0bffc17 	ldw	r2,-16(fp)
    6c90:	11000217 	ldw	r4,8(r2)
    6c94:	e1bffb17 	ldw	r6,-20(fp)
    6c98:	e17ffd17 	ldw	r5,-12(fp)
    6c9c:	0006f240 	call	6f24 <memcmp>
    6ca0:	1004c03a 	cmpne	r2,r2,zero
    6ca4:	1000031e 	bne	r2,zero,6cb4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    6ca8:	e0bffc17 	ldw	r2,-16(fp)
    6cac:	e0bfff15 	stw	r2,-4(fp)
    6cb0:	00000706 	br	6cd0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    6cb4:	e0bffc17 	ldw	r2,-16(fp)
    6cb8:	10800017 	ldw	r2,0(r2)
    6cbc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6cc0:	e0fffe17 	ldw	r3,-8(fp)
    6cc4:	e0bffc17 	ldw	r2,-16(fp)
    6cc8:	10fff01e 	bne	r2,r3,6c8c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    6ccc:	e03fff15 	stw	zero,-4(fp)
    6cd0:	e0bfff17 	ldw	r2,-4(fp)
}
    6cd4:	e037883a 	mov	sp,fp
    6cd8:	dfc00117 	ldw	ra,4(sp)
    6cdc:	df000017 	ldw	fp,0(sp)
    6ce0:	dec00204 	addi	sp,sp,8
    6ce4:	f800283a 	ret

00006ce8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6ce8:	defffa04 	addi	sp,sp,-24
    6cec:	dfc00515 	stw	ra,20(sp)
    6cf0:	df000415 	stw	fp,16(sp)
    6cf4:	df000404 	addi	fp,sp,16
    6cf8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6cfc:	00800074 	movhi	r2,1
    6d00:	10a49f04 	addi	r2,r2,-28036
    6d04:	10800017 	ldw	r2,0(r2)
    6d08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6d0c:	00003306 	br	6ddc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    6d10:	e0bffd17 	ldw	r2,-12(fp)
    6d14:	11000217 	ldw	r4,8(r2)
    6d18:	00002d40 	call	2d4 <strlen>
    6d1c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    6d20:	e0bffd17 	ldw	r2,-12(fp)
    6d24:	10c00217 	ldw	r3,8(r2)
    6d28:	e0bffc17 	ldw	r2,-16(fp)
    6d2c:	1885883a 	add	r2,r3,r2
    6d30:	10bfffc4 	addi	r2,r2,-1
    6d34:	10800003 	ldbu	r2,0(r2)
    6d38:	10803fcc 	andi	r2,r2,255
    6d3c:	1080201c 	xori	r2,r2,128
    6d40:	10bfe004 	addi	r2,r2,-128
    6d44:	10800bd8 	cmpnei	r2,r2,47
    6d48:	1000031e 	bne	r2,zero,6d58 <alt_find_file+0x70>
    {
      len -= 1;
    6d4c:	e0bffc17 	ldw	r2,-16(fp)
    6d50:	10bfffc4 	addi	r2,r2,-1
    6d54:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6d58:	e0bffc17 	ldw	r2,-16(fp)
    6d5c:	1007883a 	mov	r3,r2
    6d60:	e0bffe17 	ldw	r2,-8(fp)
    6d64:	1885883a 	add	r2,r3,r2
    6d68:	10800003 	ldbu	r2,0(r2)
    6d6c:	10803fcc 	andi	r2,r2,255
    6d70:	1080201c 	xori	r2,r2,128
    6d74:	10bfe004 	addi	r2,r2,-128
    6d78:	10800be0 	cmpeqi	r2,r2,47
    6d7c:	10000a1e 	bne	r2,zero,6da8 <alt_find_file+0xc0>
    6d80:	e0bffc17 	ldw	r2,-16(fp)
    6d84:	1007883a 	mov	r3,r2
    6d88:	e0bffe17 	ldw	r2,-8(fp)
    6d8c:	1885883a 	add	r2,r3,r2
    6d90:	10800003 	ldbu	r2,0(r2)
    6d94:	10803fcc 	andi	r2,r2,255
    6d98:	1080201c 	xori	r2,r2,128
    6d9c:	10bfe004 	addi	r2,r2,-128
    6da0:	1004c03a 	cmpne	r2,r2,zero
    6da4:	10000a1e 	bne	r2,zero,6dd0 <alt_find_file+0xe8>
    6da8:	e0bffd17 	ldw	r2,-12(fp)
    6dac:	11000217 	ldw	r4,8(r2)
    6db0:	e1bffc17 	ldw	r6,-16(fp)
    6db4:	e17ffe17 	ldw	r5,-8(fp)
    6db8:	0006f240 	call	6f24 <memcmp>
    6dbc:	1004c03a 	cmpne	r2,r2,zero
    6dc0:	1000031e 	bne	r2,zero,6dd0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6dc4:	e0bffd17 	ldw	r2,-12(fp)
    6dc8:	e0bfff15 	stw	r2,-4(fp)
    6dcc:	00000806 	br	6df0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    6dd0:	e0bffd17 	ldw	r2,-12(fp)
    6dd4:	10800017 	ldw	r2,0(r2)
    6dd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6ddc:	00c00074 	movhi	r3,1
    6de0:	18e49f04 	addi	r3,r3,-28036
    6de4:	e0bffd17 	ldw	r2,-12(fp)
    6de8:	10ffc91e 	bne	r2,r3,6d10 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6dec:	e03fff15 	stw	zero,-4(fp)
    6df0:	e0bfff17 	ldw	r2,-4(fp)
}
    6df4:	e037883a 	mov	sp,fp
    6df8:	dfc00117 	ldw	ra,4(sp)
    6dfc:	df000017 	ldw	fp,0(sp)
    6e00:	dec00204 	addi	sp,sp,8
    6e04:	f800283a 	ret

00006e08 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6e08:	defffa04 	addi	sp,sp,-24
    6e0c:	dfc00515 	stw	ra,20(sp)
    6e10:	df000415 	stw	fp,16(sp)
    6e14:	dc000315 	stw	r16,12(sp)
    6e18:	df000304 	addi	fp,sp,12
    6e1c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6e20:	00bffa04 	movi	r2,-24
    6e24:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6e28:	e03ffe15 	stw	zero,-8(fp)
    6e2c:	00002006 	br	6eb0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    6e30:	e13ffe17 	ldw	r4,-8(fp)
    6e34:	04000034 	movhi	r16,0
    6e38:	841efc04 	addi	r16,r16,31728
    6e3c:	01400304 	movi	r5,12
    6e40:	0002b640 	call	2b64 <__mulsi3>
    6e44:	1405883a 	add	r2,r2,r16
    6e48:	10800017 	ldw	r2,0(r2)
    6e4c:	1004c03a 	cmpne	r2,r2,zero
    6e50:	1000141e 	bne	r2,zero,6ea4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    6e54:	e13ffe17 	ldw	r4,-8(fp)
    6e58:	04000034 	movhi	r16,0
    6e5c:	841efc04 	addi	r16,r16,31728
    6e60:	01400304 	movi	r5,12
    6e64:	0002b640 	call	2b64 <__mulsi3>
    6e68:	1407883a 	add	r3,r2,r16
    6e6c:	e0bfff17 	ldw	r2,-4(fp)
    6e70:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    6e74:	00800074 	movhi	r2,1
    6e78:	10a4a304 	addi	r2,r2,-28020
    6e7c:	10c00017 	ldw	r3,0(r2)
    6e80:	e0bffe17 	ldw	r2,-8(fp)
    6e84:	1880040e 	bge	r3,r2,6e98 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    6e88:	00c00074 	movhi	r3,1
    6e8c:	18e4a304 	addi	r3,r3,-28020
    6e90:	e0bffe17 	ldw	r2,-8(fp)
    6e94:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    6e98:	e0bffe17 	ldw	r2,-8(fp)
    6e9c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    6ea0:	00000606 	br	6ebc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6ea4:	e0bffe17 	ldw	r2,-8(fp)
    6ea8:	10800044 	addi	r2,r2,1
    6eac:	e0bffe15 	stw	r2,-8(fp)
    6eb0:	e0bffe17 	ldw	r2,-8(fp)
    6eb4:	10800810 	cmplti	r2,r2,32
    6eb8:	103fdd1e 	bne	r2,zero,6e30 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6ebc:	e0bffd17 	ldw	r2,-12(fp)
}
    6ec0:	e037883a 	mov	sp,fp
    6ec4:	dfc00217 	ldw	ra,8(sp)
    6ec8:	df000117 	ldw	fp,4(sp)
    6ecc:	dc000017 	ldw	r16,0(sp)
    6ed0:	dec00304 	addi	sp,sp,12
    6ed4:	f800283a 	ret

00006ed8 <atexit>:
    6ed8:	200b883a 	mov	r5,r4
    6edc:	000d883a 	mov	r6,zero
    6ee0:	0009883a 	mov	r4,zero
    6ee4:	000f883a 	mov	r7,zero
    6ee8:	0006f981 	jmpi	6f98 <__register_exitproc>

00006eec <exit>:
    6eec:	defffe04 	addi	sp,sp,-8
    6ef0:	000b883a 	mov	r5,zero
    6ef4:	dc000015 	stw	r16,0(sp)
    6ef8:	dfc00115 	stw	ra,4(sp)
    6efc:	2021883a 	mov	r16,r4
    6f00:	00070d00 	call	70d0 <__call_exitprocs>
    6f04:	00800074 	movhi	r2,1
    6f08:	10a49c04 	addi	r2,r2,-28048
    6f0c:	11000017 	ldw	r4,0(r2)
    6f10:	20800f17 	ldw	r2,60(r4)
    6f14:	10000126 	beq	r2,zero,6f1c <exit+0x30>
    6f18:	103ee83a 	callr	r2
    6f1c:	8009883a 	mov	r4,r16
    6f20:	00072c00 	call	72c0 <_exit>

00006f24 <memcmp>:
    6f24:	00c000c4 	movi	r3,3
    6f28:	1980032e 	bgeu	r3,r6,6f38 <memcmp+0x14>
    6f2c:	2144b03a 	or	r2,r4,r5
    6f30:	10c4703a 	and	r2,r2,r3
    6f34:	10000f26 	beq	r2,zero,6f74 <memcmp+0x50>
    6f38:	31ffffc4 	addi	r7,r6,-1
    6f3c:	3000061e 	bne	r6,zero,6f58 <memcmp+0x34>
    6f40:	00000a06 	br	6f6c <memcmp+0x48>
    6f44:	39ffffc4 	addi	r7,r7,-1
    6f48:	00bfffc4 	movi	r2,-1
    6f4c:	21000044 	addi	r4,r4,1
    6f50:	29400044 	addi	r5,r5,1
    6f54:	38800526 	beq	r7,r2,6f6c <memcmp+0x48>
    6f58:	20c00003 	ldbu	r3,0(r4)
    6f5c:	28800003 	ldbu	r2,0(r5)
    6f60:	18bff826 	beq	r3,r2,6f44 <memcmp+0x20>
    6f64:	1885c83a 	sub	r2,r3,r2
    6f68:	f800283a 	ret
    6f6c:	0005883a 	mov	r2,zero
    6f70:	f800283a 	ret
    6f74:	180f883a 	mov	r7,r3
    6f78:	20c00017 	ldw	r3,0(r4)
    6f7c:	28800017 	ldw	r2,0(r5)
    6f80:	18bfed1e 	bne	r3,r2,6f38 <memcmp+0x14>
    6f84:	31bfff04 	addi	r6,r6,-4
    6f88:	21000104 	addi	r4,r4,4
    6f8c:	29400104 	addi	r5,r5,4
    6f90:	39bff936 	bltu	r7,r6,6f78 <memcmp+0x54>
    6f94:	003fe806 	br	6f38 <memcmp+0x14>

00006f98 <__register_exitproc>:
    6f98:	defffa04 	addi	sp,sp,-24
    6f9c:	00800074 	movhi	r2,1
    6fa0:	10a49c04 	addi	r2,r2,-28048
    6fa4:	dc000015 	stw	r16,0(sp)
    6fa8:	14000017 	ldw	r16,0(r2)
    6fac:	dd000415 	stw	r20,16(sp)
    6fb0:	2829883a 	mov	r20,r5
    6fb4:	81405217 	ldw	r5,328(r16)
    6fb8:	dcc00315 	stw	r19,12(sp)
    6fbc:	dc800215 	stw	r18,8(sp)
    6fc0:	dc400115 	stw	r17,4(sp)
    6fc4:	dfc00515 	stw	ra,20(sp)
    6fc8:	2023883a 	mov	r17,r4
    6fcc:	3027883a 	mov	r19,r6
    6fd0:	3825883a 	mov	r18,r7
    6fd4:	28002526 	beq	r5,zero,706c <__register_exitproc+0xd4>
    6fd8:	29000117 	ldw	r4,4(r5)
    6fdc:	008007c4 	movi	r2,31
    6fe0:	11002716 	blt	r2,r4,7080 <__register_exitproc+0xe8>
    6fe4:	8800101e 	bne	r17,zero,7028 <__register_exitproc+0x90>
    6fe8:	2105883a 	add	r2,r4,r4
    6fec:	1085883a 	add	r2,r2,r2
    6ff0:	20c00044 	addi	r3,r4,1
    6ff4:	1145883a 	add	r2,r2,r5
    6ff8:	0009883a 	mov	r4,zero
    6ffc:	15000215 	stw	r20,8(r2)
    7000:	28c00115 	stw	r3,4(r5)
    7004:	2005883a 	mov	r2,r4
    7008:	dfc00517 	ldw	ra,20(sp)
    700c:	dd000417 	ldw	r20,16(sp)
    7010:	dcc00317 	ldw	r19,12(sp)
    7014:	dc800217 	ldw	r18,8(sp)
    7018:	dc400117 	ldw	r17,4(sp)
    701c:	dc000017 	ldw	r16,0(sp)
    7020:	dec00604 	addi	sp,sp,24
    7024:	f800283a 	ret
    7028:	29802204 	addi	r6,r5,136
    702c:	00800044 	movi	r2,1
    7030:	110e983a 	sll	r7,r2,r4
    7034:	30c04017 	ldw	r3,256(r6)
    7038:	2105883a 	add	r2,r4,r4
    703c:	1085883a 	add	r2,r2,r2
    7040:	1185883a 	add	r2,r2,r6
    7044:	19c6b03a 	or	r3,r3,r7
    7048:	14802015 	stw	r18,128(r2)
    704c:	14c00015 	stw	r19,0(r2)
    7050:	00800084 	movi	r2,2
    7054:	30c04015 	stw	r3,256(r6)
    7058:	88bfe31e 	bne	r17,r2,6fe8 <__register_exitproc+0x50>
    705c:	30804117 	ldw	r2,260(r6)
    7060:	11c4b03a 	or	r2,r2,r7
    7064:	30804115 	stw	r2,260(r6)
    7068:	003fdf06 	br	6fe8 <__register_exitproc+0x50>
    706c:	00800074 	movhi	r2,1
    7070:	10a4ff04 	addi	r2,r2,-27652
    7074:	100b883a 	mov	r5,r2
    7078:	80805215 	stw	r2,328(r16)
    707c:	003fd606 	br	6fd8 <__register_exitproc+0x40>
    7080:	00800034 	movhi	r2,0
    7084:	10800004 	addi	r2,r2,0
    7088:	1000021e 	bne	r2,zero,7094 <__register_exitproc+0xfc>
    708c:	013fffc4 	movi	r4,-1
    7090:	003fdc06 	br	7004 <__register_exitproc+0x6c>
    7094:	01006404 	movi	r4,400
    7098:	103ee83a 	callr	r2
    709c:	1007883a 	mov	r3,r2
    70a0:	103ffa26 	beq	r2,zero,708c <__register_exitproc+0xf4>
    70a4:	80805217 	ldw	r2,328(r16)
    70a8:	180b883a 	mov	r5,r3
    70ac:	18000115 	stw	zero,4(r3)
    70b0:	18800015 	stw	r2,0(r3)
    70b4:	80c05215 	stw	r3,328(r16)
    70b8:	18006215 	stw	zero,392(r3)
    70bc:	18006315 	stw	zero,396(r3)
    70c0:	0009883a 	mov	r4,zero
    70c4:	883fc826 	beq	r17,zero,6fe8 <__register_exitproc+0x50>
    70c8:	003fd706 	br	7028 <__register_exitproc+0x90>

000070cc <register_fini>:
    70cc:	f800283a 	ret

000070d0 <__call_exitprocs>:
    70d0:	00800074 	movhi	r2,1
    70d4:	10a49c04 	addi	r2,r2,-28048
    70d8:	10800017 	ldw	r2,0(r2)
    70dc:	defff304 	addi	sp,sp,-52
    70e0:	df000b15 	stw	fp,44(sp)
    70e4:	d8800115 	stw	r2,4(sp)
    70e8:	00800034 	movhi	r2,0
    70ec:	10800004 	addi	r2,r2,0
    70f0:	1005003a 	cmpeq	r2,r2,zero
    70f4:	d8800215 	stw	r2,8(sp)
    70f8:	d8800117 	ldw	r2,4(sp)
    70fc:	dd400815 	stw	r21,32(sp)
    7100:	dd000715 	stw	r20,28(sp)
    7104:	10805204 	addi	r2,r2,328
    7108:	dfc00c15 	stw	ra,48(sp)
    710c:	ddc00a15 	stw	r23,40(sp)
    7110:	dd800915 	stw	r22,36(sp)
    7114:	dcc00615 	stw	r19,24(sp)
    7118:	dc800515 	stw	r18,20(sp)
    711c:	dc400415 	stw	r17,16(sp)
    7120:	dc000315 	stw	r16,12(sp)
    7124:	282b883a 	mov	r21,r5
    7128:	2039883a 	mov	fp,r4
    712c:	d8800015 	stw	r2,0(sp)
    7130:	2829003a 	cmpeq	r20,r5,zero
    7134:	d8800117 	ldw	r2,4(sp)
    7138:	14405217 	ldw	r17,328(r2)
    713c:	88001026 	beq	r17,zero,7180 <__call_exitprocs+0xb0>
    7140:	ddc00017 	ldw	r23,0(sp)
    7144:	88800117 	ldw	r2,4(r17)
    7148:	8c802204 	addi	r18,r17,136
    714c:	143fffc4 	addi	r16,r2,-1
    7150:	80000916 	blt	r16,zero,7178 <__call_exitprocs+0xa8>
    7154:	05bfffc4 	movi	r22,-1
    7158:	a000151e 	bne	r20,zero,71b0 <__call_exitprocs+0xe0>
    715c:	8409883a 	add	r4,r16,r16
    7160:	2105883a 	add	r2,r4,r4
    7164:	1485883a 	add	r2,r2,r18
    7168:	10c02017 	ldw	r3,128(r2)
    716c:	a8c01126 	beq	r21,r3,71b4 <__call_exitprocs+0xe4>
    7170:	843fffc4 	addi	r16,r16,-1
    7174:	85bff81e 	bne	r16,r22,7158 <__call_exitprocs+0x88>
    7178:	d8800217 	ldw	r2,8(sp)
    717c:	10003126 	beq	r2,zero,7244 <__call_exitprocs+0x174>
    7180:	dfc00c17 	ldw	ra,48(sp)
    7184:	df000b17 	ldw	fp,44(sp)
    7188:	ddc00a17 	ldw	r23,40(sp)
    718c:	dd800917 	ldw	r22,36(sp)
    7190:	dd400817 	ldw	r21,32(sp)
    7194:	dd000717 	ldw	r20,28(sp)
    7198:	dcc00617 	ldw	r19,24(sp)
    719c:	dc800517 	ldw	r18,20(sp)
    71a0:	dc400417 	ldw	r17,16(sp)
    71a4:	dc000317 	ldw	r16,12(sp)
    71a8:	dec00d04 	addi	sp,sp,52
    71ac:	f800283a 	ret
    71b0:	8409883a 	add	r4,r16,r16
    71b4:	88c00117 	ldw	r3,4(r17)
    71b8:	2105883a 	add	r2,r4,r4
    71bc:	1445883a 	add	r2,r2,r17
    71c0:	18ffffc4 	addi	r3,r3,-1
    71c4:	11800217 	ldw	r6,8(r2)
    71c8:	1c001526 	beq	r3,r16,7220 <__call_exitprocs+0x150>
    71cc:	10000215 	stw	zero,8(r2)
    71d0:	303fe726 	beq	r6,zero,7170 <__call_exitprocs+0xa0>
    71d4:	00c00044 	movi	r3,1
    71d8:	1c06983a 	sll	r3,r3,r16
    71dc:	90804017 	ldw	r2,256(r18)
    71e0:	8cc00117 	ldw	r19,4(r17)
    71e4:	1884703a 	and	r2,r3,r2
    71e8:	10001426 	beq	r2,zero,723c <__call_exitprocs+0x16c>
    71ec:	90804117 	ldw	r2,260(r18)
    71f0:	1884703a 	and	r2,r3,r2
    71f4:	10000c1e 	bne	r2,zero,7228 <__call_exitprocs+0x158>
    71f8:	2105883a 	add	r2,r4,r4
    71fc:	1485883a 	add	r2,r2,r18
    7200:	11400017 	ldw	r5,0(r2)
    7204:	e009883a 	mov	r4,fp
    7208:	303ee83a 	callr	r6
    720c:	88800117 	ldw	r2,4(r17)
    7210:	98bfc81e 	bne	r19,r2,7134 <__call_exitprocs+0x64>
    7214:	b8800017 	ldw	r2,0(r23)
    7218:	147fd526 	beq	r2,r17,7170 <__call_exitprocs+0xa0>
    721c:	003fc506 	br	7134 <__call_exitprocs+0x64>
    7220:	8c000115 	stw	r16,4(r17)
    7224:	003fea06 	br	71d0 <__call_exitprocs+0x100>
    7228:	2105883a 	add	r2,r4,r4
    722c:	1485883a 	add	r2,r2,r18
    7230:	11000017 	ldw	r4,0(r2)
    7234:	303ee83a 	callr	r6
    7238:	003ff406 	br	720c <__call_exitprocs+0x13c>
    723c:	303ee83a 	callr	r6
    7240:	003ff206 	br	720c <__call_exitprocs+0x13c>
    7244:	88800117 	ldw	r2,4(r17)
    7248:	1000081e 	bne	r2,zero,726c <__call_exitprocs+0x19c>
    724c:	89000017 	ldw	r4,0(r17)
    7250:	20000726 	beq	r4,zero,7270 <__call_exitprocs+0x1a0>
    7254:	b9000015 	stw	r4,0(r23)
    7258:	8809883a 	mov	r4,r17
    725c:	00000000 	call	0 <__alt_mem_sdram>
    7260:	bc400017 	ldw	r17,0(r23)
    7264:	883fb71e 	bne	r17,zero,7144 <__call_exitprocs+0x74>
    7268:	003fc506 	br	7180 <__call_exitprocs+0xb0>
    726c:	89000017 	ldw	r4,0(r17)
    7270:	882f883a 	mov	r23,r17
    7274:	2023883a 	mov	r17,r4
    7278:	883fb21e 	bne	r17,zero,7144 <__call_exitprocs+0x74>
    727c:	003fc006 	br	7180 <__call_exitprocs+0xb0>

00007280 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    7280:	defffd04 	addi	sp,sp,-12
    7284:	df000215 	stw	fp,8(sp)
    7288:	df000204 	addi	fp,sp,8
    728c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    7290:	e0bfff17 	ldw	r2,-4(fp)
    7294:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    7298:	e0bffe17 	ldw	r2,-8(fp)
    729c:	1005003a 	cmpeq	r2,r2,zero
    72a0:	1000021e 	bne	r2,zero,72ac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    72a4:	002af070 	cmpltui	zero,zero,43969
    72a8:	00000106 	br	72b0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    72ac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    72b0:	e037883a 	mov	sp,fp
    72b4:	df000017 	ldw	fp,0(sp)
    72b8:	dec00104 	addi	sp,sp,4
    72bc:	f800283a 	ret

000072c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    72c0:	defffd04 	addi	sp,sp,-12
    72c4:	dfc00215 	stw	ra,8(sp)
    72c8:	df000115 	stw	fp,4(sp)
    72cc:	df000104 	addi	fp,sp,4
    72d0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    72d4:	e13fff17 	ldw	r4,-4(fp)
    72d8:	00072800 	call	7280 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    72dc:	003fff06 	br	72dc <_exit+0x1c>
    72e0:	000070cc 	andi	zero,zero,451
