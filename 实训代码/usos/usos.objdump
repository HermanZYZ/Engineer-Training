
usos.elf:     file format elf32-littlenios2
usos.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010b4c memsz 0x0001c080 flags rwx
    LOAD off    0x00012000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  00012000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eb18  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002fc  0000ecd4  0000ecd4  0000fcd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b9c  0000efd0  0000efd0  0000ffd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b534  00010b6c  00010b6c  00011b6c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00012000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000930  00000000  00000000  00012028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a1c  00000000  00000000  00012958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c89f  00000000  00000000  00014374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005cc2  00000000  00000000  00030c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00011524  00000000  00000000  000368d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c04  00000000  00000000  00047dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012be  00000000  00000000  00049a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003790  00000000  00000000  0004acbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0004e450  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000298  00000000  00000000  0004e460  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000522d9  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000522df  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000522eb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000522ec  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000522ed  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000522f8  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00052303  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0005230e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000003  00000000  00000000  00052316  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000e0f1e  00000000  00000000  00052319  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0000ecd4 l    d  .rodata	00000000 .rodata
0000efd0 l    d  .rwdata	00000000 .rwdata
00010b6c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00010abc l     O .rwdata	00000004 lockid
00010b78 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00010ac0 l     O .rwdata	00000004 lockid
00010b80 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00001df8 l     F .text	00000044 OS_InitMisc
00001e3c l     F .text	0000006c OS_InitRdyList
00001fa0 l     F .text	000000e0 OS_InitTCBList
00001d1c l     F .text	000000dc OS_InitEventList
00001ea8 l     F .text	0000007c OS_InitTaskIdle
00001f24 l     F .text	0000007c OS_InitTaskStat
00002214 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00004134 l     F .text	00000110 OS_FlagTaskRdy
00003e8c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000efd0 l     O .rwdata	000000c8 epcs_flash_controller_0
0000f098 l     O .rwdata	0000106c jtag_uart_0
00010104 l     O .rwdata	000000d0 New_UltraSound0
000101d4 l     O .rwdata	000000d0 New_UltraSound1
000102a4 l     O .rwdata	000000d0 New_UltraSound2
00010374 l     O .rwdata	000000d0 New_UltraSound3
00010444 l     O .rwdata	000000d0 uart_0
00008c00 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00008cc4 l     F .text	00000288 alt_epcs_flash_query
00008c8c l     F .text	00000038 alt_flash_device_register
00008f4c l     F .text	00000108 alt_epcs_flash_memcmp
000093d4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000989c l     F .text	000002c4 altera_avalon_jtag_uart_irq
00009b60 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000a378 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000a6f4 l     F .text	0000009c altera_avalon_uart_irq
0000a790 l     F .text	0000013c altera_avalon_uart_rxirq
0000a8cc l     F .text	000001c0 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000ad9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000b044 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0000b1fc l     F .text	00000038 epcs_await_wip_released
0000b234 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b9cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ba2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bb0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bfd0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c120 l     F .text	000000f8 alt_file_locked
0000c3a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000106bc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000d3bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000d614 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000e428 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ec64 l     F .text	00000040 alt_sim_halt
00010b0e g     O .rwdata	00000002 OSTaskNameSize
000092d4 g     F .text	00000090 alt_epcs_flash_get_info
00000358 g     F .text	000000c8 alt_main
0001be10 g     O .bss	00000100 alt_irq
00004a28 g     F .text	000000d4 OS_MemInit
00008a50 g     F .text	00000064 OSTimeSet
00000974 g     F .text	000006b4 OSEventPendMulti
0000ca24 g     F .text	00000020 OSTaskCreateHook
00010ae6 g     O .rwdata	00000002 OSMboxEn
0000107c g     F .text	0000007c OSIntEnter
00010af6 g     O .rwdata	00000002 OSQEn
00000630 g     F .text	000000d0 __malloc_unlock
0000ca80 g     F .text	0000001c OSTaskStatHook
00010b88 g     O .bss	00000001 OSLockNesting
00010b34 g     O .rwdata	00000002 OSDataSize
00010b89 g     O .bss	00000001 OSRunning
0000cab8 g     F .text	0000001c OSInitHookBegin
00010b2c g     O .rwdata	00000002 OSTmrSize
00010b8c g     O .bss	00000004 OSIdleCtr
0000c6f0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00002548 g     F .text	000002e0 OS_TCBInit
0000b104 g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
00010b32 g     O .rwdata	00000002 OSTmrWheelTblSize
00010ad2 g     O .rwdata	00000002 OSEventSize
00010b90 g     O .bss	00000001 OSPrioHighRdy
0000ca44 g     F .text	00000020 OSTaskDelHook
00010be8 g     O .bss	00000004 errno
0000c6d0 g       .text	00000000 OSStartHighRdy
00007140 g     F .text	00000200 OSTaskCreateExt
000039a8 g     F .text	00000068 OSFlagPendGetFlagsRdy
00010b12 g     O .rwdata	00000002 OSTaskStatStkSize
000029b4 g     F .text	00000334 OSFlagAccept
00005164 g     F .text	000000c8 OSQFlush
00004afc g     F .text	00000154 OSQAccept
00010b70 g     O .bss	00000004 alt_argv
00018abc g       *ABS*	00000000 _gp
00006f6c g     F .text	000001d4 OSTaskCreate
000069f8 g     F .text	00000574 OSTaskChangePrio
00010b84 g     O .bss	00000004 alt_heapsem
00002828 g     F .text	0000018c OSDebugInit
00007340 g     F .text	0000040c OSTaskDel
0001053c g     O .rwdata	00000180 alt_fd_list
00018bec g     O .bss	00000370 OSFlagTbl
00001af8 g     F .text	000000b8 OS_EventTaskRemove
0000b408 g     F .text	00000064 epcs_write_status_register
0000cd64 g     F .text	00000094 alt_find_dev
0000d0dc g     F .text	000000a0 memcpy
00010afc g     O .rwdata	00000002 OSRdyTblSize
0000c0a8 g     F .text	00000078 alt_io_redirect
0000ecd4 g       *ABS*	00000000 __DTOR_END__
00000700 g     F .text	00000130 OSEventNameGet
00010ae0 g     O .rwdata	00000002 OSFlagMax
00009468 g     F .text	0000011c alt_epcs_flash_write_block
000010f8 g     F .text	00000100 OSIntExit
00010b1a g     O .rwdata	00000002 OSTCBSize
00010b91 g     O .bss	00000001 OSPrioCur
00009ddc g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000e564 g     F .text	00000008 __udivsi3
00010b00 g     O .rwdata	00000002 OSStkWidth
00010af4 g     O .rwdata	00000002 OSPtrSize
00010ad4 g     O .rwdata	00000002 OSEventTblSize
0000d570 g     F .text	000000a4 __fixunsdfsi
0000c644 g       .text	00000000 OSCtxSw
00010b94 g     O .bss	00000004 OSTCBList
00010bd8 g     O .bss	00000004 alt_fd_list_lock
00018f5c g     O .bss	00000c30 OSMemTbl
00010b98 g     O .bss	00000001 OSTickStepState
00010af8 g     O .rwdata	00000002 OSQMax
00019b8c g     O .bss	00000800 OSTaskStatStk
00004610 g     F .text	0000010c OSMemNameGet
00010ad8 g     O .rwdata	00000002 OSFlagEn
00010b1e g     O .rwdata	00000002 OSTimeTickHookEn
000056c8 g     F .text	00000180 OSQPost
00004244 g     F .text	000000ac OS_FlagUnlink
00010b48 g     O .rwdata	00000004 alt_max_fd
000020d4 g     F .text	0000006c OS_MemCopy
0000ea64 g     F .text	00000138 __unpack_d
00002140 g     F .text	000000d4 OS_Sched
0000450c g     F .text	00000104 OSMemGet
00007a74 g     F .text	000001c4 OSTaskNameSet
00010b9c g     O .bss	00000004 OSCtxSwCtr
0000ca9c g     F .text	0000001c OSTimeTickHook
00010ae2 g     O .rwdata	00000002 OSFlagNameSize
00001bb0 g     F .text	00000104 OS_EventTaskRemoveMulti
0000daa4 g     F .text	00000074 __adddf3
000019a4 g     F .text	00000154 OS_EventTaskWaitMulti
00009364 g     F .text	00000070 alt_epcs_flash_erase_block
00010afa g     O .rwdata	00000002 OSQSize
000062a4 g     F .text	0000027c OSSemPend
00010b68 g     O .rwdata	00000004 _global_impure_ptr
0000b720 g     F .text	00000058 epcs_exit_4_bytes_mode
00010ae4 g     O .rwdata	00000002 OSLowestPrio
0001c0a0 g       *ABS*	00000000 __bss_end
0000bed8 g     F .text	000000f8 alt_iic_isr_register
0000cb0c g     F .text	00000020 OSTCBInitHook
00010b2a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000c514 g     F .text	00000110 alt_tick
00010acc g     O .rwdata	00000002 OSEventEn
00010b26 g     O .rwdata	00000002 OSTmrCfgNameSize
0000e294 g     F .text	00000194 __floatunsidf
0000a570 g     F .text	00000184 altera_avalon_uart_init
0000be90 g     F .text	00000048 alt_ic_irq_enabled
00004050 g     F .text	000000e4 OS_FlagInit
0000c47c g     F .text	00000098 alt_alarm_stop
00010b08 g     O .rwdata	00000002 OSTaskIdleStkSize
00010bdc g     O .bss	00000004 alt_irq_active
00005e30 g     F .text	000000c0 OSSemAccept
0000483c g     F .text	000000f0 OSMemPut
000042f0 g     F .text	0000021c OSMemCreate
00010ba0 g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d0 alt_irq_handler
00010514 g     O .rwdata	00000028 alt_dev_null
00010b1c g     O .rwdata	00000002 OSTicksPerSec
0000c644 g       .text	00000000 OSIntCtxSw
0000e1bc g     F .text	000000d8 __fixdfsi
00010ba4 g     O .bss	00000004 OSTCBFreeList
00006520 g     F .text	0000017c OSSemPendAbort
00010b40 g     O .rwdata	00000008 alt_dev_list
00010b20 g     O .rwdata	00000002 OSVersionNbr
00010ac8 g     O .rwdata	00000004 OSEndiannessTest
0000e56c g     F .text	00000008 __umodsi3
0000b5dc g     F .text	0000006c epcs_read_electronic_signature
00010ada g     O .rwdata	00000002 OSFlagGrpSize
0001c0a0 g       *ABS*	00000000 end
0000adfc g     F .text	00000248 altera_avalon_uart_write
00009764 g     F .text	00000138 altera_avalon_jtag_uart_init
000023b8 g     F .text	000000c8 OS_TaskStat
0000ecd0 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000a3e8 g     F .text	00000090 alt_avalon_timer_sc_init
0000e6d0 g     F .text	00000080 __clzsi2
0000a4d0 g     F .text	00000058 altera_avalon_uart_write_fd
0000a528 g     F .text	00000048 altera_avalon_uart_close_fd
0000a09c g     F .text	000002dc altera_avalon_jtag_uart_write
00002080 g     F .text	00000054 OS_MemClr
0000c714 g     F .text	00000310 OSTaskStkInit
000001f4 g     F .text	000000d4 task1
00001700 g     F .text	00000194 OS_EventTaskRdy
0000d3c0 g     F .text	000001b0 __call_exitprocs
00010ba8 g     O .bss	00000001 OSCPUUsage
000001bc g     F .text	00000038 _start
00010be0 g     O .bss	00000004 _alt_tick_rate
0000522c g     F .text	00000320 OSQPend
00008438 g     F .text	0000014c OSTimeDly
0000cb2c g     F .text	00000238 alt_avalon_spi_command
00010be4 g     O .bss	00000004 _alt_nticks
00008ae8 g     F .text	00000118 alt_sys_init
0000d288 g     F .text	00000134 __register_exitproc
00010ba9 g     O .bss	00000001 OSTaskCtr
00008584 g     F .text	00000258 OSTimeDlyHMSM
00009c74 g     F .text	00000074 altera_avalon_jtag_uart_close
0000e574 g     F .text	00000038 __mulsi3
00010ace g     O .rwdata	00000002 OSEventMax
0000669c g     F .text	00000128 OSSemPost
0000b0a4 g     F .text	00000060 epcs_read_status_register
00001284 g     F .text	000000e4 OSSchedUnlock
0000961c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000cf18 g     F .text	00000104 alt_get_fd
00010bac g     O .bss	00000004 OSMemFreeList
000013d8 g     F .text	000000ac OSStatInit
00003db8 g     F .text	000000d4 OSFlagQuery
0000eb9c g     F .text	000000c8 __fpcmp_parts_d
00010b04 g     O .rwdata	00000002 OSTaskCreateExtEn
0000b648 g     F .text	00000080 epcs_read_device_id
0000d068 g     F .text	00000074 memcmp
000016e4 g     F .text	0000001c OS_Dummy
000096cc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0001c0a0 g       *ABS*	00000000 __alt_stack_base
00009714 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0001a38c g     O .bss	000001e0 OSQTbl
0000dedc g     F .text	00000258 __divdf3
0000db18 g     F .text	000003c4 __muldf3
00010bb0 g     O .bss	00000004 OSTCBHighRdy
00010bb4 g     O .bss	00000004 OSQFreeList
0000cdf8 g     F .text	00000120 alt_find_file
0000ba58 g     F .text	000000b4 alt_dev_llist_insert
00000528 g     F .text	00000108 __malloc_lock
00000830 g     F .text	00000144 OSEventNameSet
00010bb8 g     O .bss	00000001 OSRdyGrp
00010b50 g     O .rwdata	00000008 alt_flash_dev_list
00010b6c g       *ABS*	00000000 __bss_start
0000d17c g     F .text	00000098 memset
000002c8 g     F .text	00000090 main
00010b74 g     O .bss	00000004 alt_envp
00009674 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000ece8 g     O .rodata	00000100 OSUnMapTbl
00010afe g     O .rwdata	00000002 OSSemEn
00003a10 g     F .text	000003a8 OSFlagPost
00001894 g     F .text	00000110 OS_EventTaskWait
00002480 g     F .text	000000c8 OS_TaskStatStkChk
0001bf10 g     O .bss	00000190 _atexit0
0000774c g     F .text	00000170 OSTaskDelReq
00010b4c g     O .rwdata	00000004 alt_errno
00001368 g     F .text	00000070 OSStart
000004cc g     F .text	0000005c __env_unlock
00007c38 g     F .text	00000218 OSTaskResume
0000492c g     F .text	000000fc OSMemQuery
00010b10 g     O .rwdata	00000002 OSTaskStatEn
00010aea g     O .rwdata	00000002 OSMemMax
00005848 g     F .text	00000188 OSQPostFront
0000e4a4 g     F .text	00000060 __divsi3
00010bb9 g     O .bss	00000003 OSRdyTbl
00010ac4 g     O .rwdata	00000002 OSDebugEn
0000eebc g     O .rodata	00000014 __thenan_df
0000ecd4 g       *ABS*	00000000 __CTOR_END__
00010adc g     O .rwdata	00000002 OSFlagNodeSize
00010b24 g     O .rwdata	00000002 OSTmrCfgMax
00009054 g     F .text	00000280 alt_epcs_flash_write
00004c50 g     F .text	00000214 OSQCreate
000078bc g     F .text	000001b8 OSTaskNameGet
000059d0 g     F .text	00000234 OSQPostOpt
00001484 g     F .text	00000240 OSTimeTick
00010b0c g     O .rwdata	00000002 OSTaskMax
0000ecd4 g       *ABS*	00000000 __DTOR_LIST__
00005ef0 g     F .text	00000114 OSSemCreate
00010b30 g     O .rwdata	00000002 OSTmrWheelSize
00010b06 g     O .rwdata	00000002 OSTaskDelEn
000067c4 g     F .text	00000130 OSSemQuery
00004e64 g     F .text	00000300 OSQDel
0000554c g     F .text	0000017c OSQPendAbort
00008ab4 g     F .text	00000034 alt_irq_init
0000c404 g     F .text	00000078 alt_release_fd
0000eed0 g     O .rodata	00000100 __clz_tab
0000d01c g     F .text	00000014 atexit
000011f8 g     F .text	0000008c OSSchedLock
00002ce8 g     F .text	0000013c OSFlagCreate
00010b64 g     O .rwdata	00000004 _impure_ptr
00010b6c g     O .bss	00000004 alt_argc
0000bbd0 g     F .text	00000064 _do_dtors
00010ad6 g     O .rwdata	00000002 OSEventMultiEn
00002e24 g     F .text	000002a8 OSFlagDel
00010bbc g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00003364 g     F .text	00000644 OSFlagPend
00010b22 g     O .rwdata	00000002 OSTmrEn
00010b38 g     O .rwdata	00000008 alt_fs_list
00002284 g     F .text	00000080 OS_StrCopy
00010aec g     O .rwdata	00000002 OSMemNameSize
0000cad4 g     F .text	0000001c OSInitHookEnd
00010b18 g     O .rwdata	00000002 OSTCBPrioTblMax
0000b26c g     F .text	0000014c epcs_read_buffer
00010b14 g     O .rwdata	00000002 OSTaskStatStkChkEn
00008c38 g     F .text	00000054 alt_epcs_flash_init
0000bd04 g     F .text	00000050 alt_ic_isr_register
00010ae8 g     O .rwdata	00000002 OSMemEn
00010af2 g     O .rwdata	00000002 OSMutexEn
00010b6c g       *ABS*	00000000 _edata
0000a478 g     F .text	00000058 altera_avalon_uart_read_fd
0001c0a0 g       *ABS*	00000000 _end
0000bc34 g     F .text	0000007c alt_flash_open_dev
00010bc0 g     O .bss	00000001 OSIntNesting
00009ce8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000087dc g     F .text	00000210 OSTimeDlyResume
00003210 g     F .text	00000154 OSFlagNameSet
00007e50 g     F .text	000001fc OSTaskStkChk
0000bdf0 g     F .text	000000a0 alt_ic_irq_disable
0000b6c8 g     F .text	00000058 epcs_enter_4_bytes_mode
00010aee g     O .rwdata	00000002 OSMemSize
0000c624 g     F .text	00000020 altera_nios2_qsys_irq_init
00010bc4 g     O .bss	00000004 OSTCBCur
0000d030 g     F .text	00000038 exit
00010af0 g     O .rwdata	00000002 OSMemTblSize
0000bcb0 g     F .text	00000054 alt_flash_close_dev
0000e504 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00010bec g     O .bss	00008000 TaskStk
00000020 g     F .exceptions	00000000 alt_exception
00001028 g     F .text	00000054 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
00008278 g     F .text	00000144 OSTaskQuery
00005d84 g     F .text	000000ac OS_QInit
00002304 g     F .text	00000058 OS_StrLen
0000471c g     F .text	00000120 OSMemNameSet
00010b0a g     O .rwdata	00000002 OSTaskProfileEn
00010bc8 g     O .bss	00000004 OSTime
0000aa8c g     F .text	00000060 altera_avalon_uart_close
0001a56c g     O .bss	00000800 OSTaskIdleStk
0000eca4 g     F .text	0000002c _exit
0000b778 g     F .text	00000154 alt_alarm_start
000030cc g     F .text	00000144 OSFlagNameGet
000089ec g     F .text	00000064 OSTimeGet
0000e5ac g     F .text	00000124 __muldi3
0000d214 g     F .text	00000074 strlen
0000b3b8 g     F .text	00000050 epcs_write_enable
0000ca64 g     F .text	0000001c OSTaskSwHook
0000c218 g     F .text	0000018c open
0001ad6c g     O .bss	00000b40 OSEventTbl
0000e134 g     F .text	00000088 __gedf2
0001b8ac g     O .bss	00000510 OSTCBTbl
000068f4 g     F .text	00000104 OSSemSet
00010b58 g     O .rwdata	00000004 alt_priority_mask
00006004 g     F .text	000002a0 OSSemDel
00010bcc g     O .bss	00000004 OSFlagFreeList
0000bd54 g     F .text	0000009c alt_ic_irq_enable
00010ad0 g     O .rwdata	00000002 OSEventNameSize
00010bd0 g     O .bss	00000001 OSStatRdy
0001bdbc g     O .bss	00000054 OSTCBPrioTbl
0000aaec g     F .text	000002b0 altera_avalon_uart_read
00000420 g     F .text	000000ac __env_lock
00010b16 g     O .rwdata	00000002 OSTaskSwHookEn
0000da24 g     F .text	00000080 __subdf3
00009584 g     F .text	00000098 alt_epcs_flash_read
00010b5c g     O .rwdata	00000008 alt_alarm_list
00010ade g     O .rwdata	00000002 OSFlagWidth
0000bb6c g     F .text	00000064 _do_ctors
0000b8cc g     F .text	00000100 close
00010b7c g     O .bss	00000004 alt_envsem
00010bd4 g     O .bss	00000004 OSIdleCtrRun
000016c4 g     F .text	00000020 OSVersion
00010b28 g     O .rwdata	00000002 OSTmrCfgWheelSize
000083bc g     F .text	0000007c OS_TaskStkClr
0000e750 g     F .text	00000314 __pack_d
00010b02 g     O .rwdata	00000002 OSTaskCreateEn
00001cb4 g     F .text	00000068 OS_EventWaitListInit
0000caf0 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0000b46c g     F .text	00000170 epcs_write_buffer
0000804c g     F .text	0000022c OSTaskSuspend
0000235c g     F .text	0000005c OS_TaskIdle
00010b2e g     O .rwdata	00000002 OSTmrTblSize
00005c04 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <OSCtxSw_SWITCH_PC+0x58>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	000107c0 	call	107c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0ffff17 	ldw	r3,-4(fp)
 120:	e0bffe17 	ldw	r2,-8(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	1005003a 	cmpeq	r2,r2,zero
 12c:	1000161e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 130:	e0bffd17 	ldw	r2,-12(fp)
 134:	00c000b4 	movhi	r3,2
 138:	18ef8404 	addi	r3,r3,-16880
 13c:	100490fa 	slli	r2,r2,3
 140:	10c5883a 	add	r2,r2,r3
 144:	11400017 	ldw	r5,0(r2)
 148:	e0bffd17 	ldw	r2,-12(fp)
 14c:	00c000b4 	movhi	r3,2
 150:	18ef8404 	addi	r3,r3,-16880
 154:	100490fa 	slli	r2,r2,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10800104 	addi	r2,r2,4
 160:	11000017 	ldw	r4,0(r2)
 164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	00010f80 	call	10f8 <OSIntExit>
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d6a2af14 	ori	gp,gp,35516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	1082db14 	ori	r2,r2,2924

    movhi r3, %hi(__bss_end)
     1d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d8:	18f02814 	ori	r3,r3,49312

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00003580 	call	358 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <task1>:
#define   N_TASK 8

OS_STK TaskStk[N_TASK][1024];

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata) {
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13fff15 	stw	r4,-4(fp)
	int i = (int) pdata;
     208:	e0bfff17 	ldw	r2,-4(fp)
     20c:	e0bffe15 	stw	r2,-8(fp)
	unsigned char led;
	while (1) {
		led = IORD(LED_BASE,0);
     210:	00808074 	movhi	r2,513
     214:	10a8f004 	addi	r2,r2,-23616
     218:	10800037 	ldwio	r2,0(r2)
     21c:	e0bffd05 	stb	r2,-12(fp)
		led = 1 << i | led;
     220:	00c00044 	movi	r3,1
     224:	e0bffe17 	ldw	r2,-8(fp)
     228:	1884983a 	sll	r2,r3,r2
     22c:	1007883a 	mov	r3,r2
     230:	e0bffd03 	ldbu	r2,-12(fp)
     234:	1884b03a 	or	r2,r3,r2
     238:	e0bffd05 	stb	r2,-12(fp)
		IOWR(LED_BASE, 0, led);
     23c:	e0fffd03 	ldbu	r3,-12(fp)
     240:	00808074 	movhi	r2,513
     244:	10a8f004 	addi	r2,r2,-23616
     248:	10c00035 	stwio	r3,0(r2)
		OSTimeDlyHMSM(0, 0, i + 1, 0);
     24c:	e0bffe17 	ldw	r2,-8(fp)
     250:	10800044 	addi	r2,r2,1
     254:	11803fcc 	andi	r6,r2,255
     258:	0009883a 	mov	r4,zero
     25c:	000b883a 	mov	r5,zero
     260:	000f883a 	mov	r7,zero
     264:	00085840 	call	8584 <OSTimeDlyHMSM>
		led = IORD(LED_BASE,0);
     268:	00808074 	movhi	r2,513
     26c:	10a8f004 	addi	r2,r2,-23616
     270:	10800037 	ldwio	r2,0(r2)
     274:	e0bffd05 	stb	r2,-12(fp)
		led = ~(1 << i) & led;
     278:	00c00044 	movi	r3,1
     27c:	e0bffe17 	ldw	r2,-8(fp)
     280:	1884983a 	sll	r2,r3,r2
     284:	0084303a 	nor	r2,zero,r2
     288:	1007883a 	mov	r3,r2
     28c:	e0bffd03 	ldbu	r2,-12(fp)
     290:	1884703a 	and	r2,r3,r2
     294:	e0bffd05 	stb	r2,-12(fp)
		IOWR(LED_BASE, 0, led);
     298:	e0fffd03 	ldbu	r3,-12(fp)
     29c:	00808074 	movhi	r2,513
     2a0:	10a8f004 	addi	r2,r2,-23616
     2a4:	10c00035 	stwio	r3,0(r2)
		OSTimeDlyHMSM(0, 0, i + 1, 0);
     2a8:	e0bffe17 	ldw	r2,-8(fp)
     2ac:	10800044 	addi	r2,r2,1
     2b0:	11803fcc 	andi	r6,r2,255
     2b4:	0009883a 	mov	r4,zero
     2b8:	000b883a 	mov	r5,zero
     2bc:	000f883a 	mov	r7,zero
     2c0:	00085840 	call	8584 <OSTimeDlyHMSM>

	}
     2c4:	003fd206 	br	210 <task1+0x1c>

000002c8 <main>:
}

int main(void) {
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	dfc00215 	stw	ra,8(sp)
     2d0:	df000115 	stw	fp,4(sp)
     2d4:	df000104 	addi	fp,sp,4
	OSInit();
     2d8:	00010280 	call	1028 <OSInit>
	int i;
	for (i = 0; i < N_TASK; i++)
     2dc:	e03fff15 	stw	zero,-4(fp)
     2e0:	00001306 	br	330 <main+0x68>
		OSTaskCreate(task1, (void *) i, (void *) &TaskStk[i][1024], N_TASK - i);
     2e4:	e17fff17 	ldw	r5,-4(fp)
     2e8:	e0bfff17 	ldw	r2,-4(fp)
     2ec:	1004933a 	slli	r2,r2,12
     2f0:	1007883a 	mov	r3,r2
     2f4:	00800074 	movhi	r2,1
     2f8:	1082fb04 	addi	r2,r2,3052
     2fc:	10840004 	addi	r2,r2,4096
     300:	188d883a 	add	r6,r3,r2
     304:	e0bfff17 	ldw	r2,-4(fp)
     308:	1007883a 	mov	r3,r2
     30c:	00800204 	movi	r2,8
     310:	10c5c83a 	sub	r2,r2,r3
     314:	11c03fcc 	andi	r7,r2,255
     318:	01000034 	movhi	r4,0
     31c:	21007d04 	addi	r4,r4,500
     320:	0006f6c0 	call	6f6c <OSTaskCreate>
}

int main(void) {
	OSInit();
	int i;
	for (i = 0; i < N_TASK; i++)
     324:	e0bfff17 	ldw	r2,-4(fp)
     328:	10800044 	addi	r2,r2,1
     32c:	e0bfff15 	stw	r2,-4(fp)
     330:	e0bfff17 	ldw	r2,-4(fp)
     334:	10800210 	cmplti	r2,r2,8
     338:	103fea1e 	bne	r2,zero,2e4 <main+0x1c>
		OSTaskCreate(task1, (void *) i, (void *) &TaskStk[i][1024], N_TASK - i);
	OSStart();
     33c:	00013680 	call	1368 <OSStart>
	return 0;
     340:	0005883a 	mov	r2,zero
}
     344:	e037883a 	mov	sp,fp
     348:	dfc00117 	ldw	ra,4(sp)
     34c:	df000017 	ldw	fp,0(sp)
     350:	dec00204 	addi	sp,sp,8
     354:	f800283a 	ret

00000358 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     358:	defffb04 	addi	sp,sp,-20
     35c:	dfc00415 	stw	ra,16(sp)
     360:	df000315 	stw	fp,12(sp)
     364:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     368:	0009883a 	mov	r4,zero
     36c:	0008ab40 	call	8ab4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     370:	00010280 	call	1028 <OSInit>
     374:	01000044 	movi	r4,1
     378:	0005ef00 	call	5ef0 <OSSemCreate>
     37c:	1007883a 	mov	r3,r2
     380:	00800074 	movhi	r2,1
     384:	1082df04 	addi	r2,r2,2940
     388:	10c00015 	stw	r3,0(r2)
     38c:	01000044 	movi	r4,1
     390:	0005ef00 	call	5ef0 <OSSemCreate>
     394:	1007883a 	mov	r3,r2
     398:	00800074 	movhi	r2,1
     39c:	1082e104 	addi	r2,r2,2948
     3a0:	10c00015 	stw	r3,0(r2)
     3a4:	00800074 	movhi	r2,1
     3a8:	1082f604 	addi	r2,r2,3032
     3ac:	e0bffd15 	stw	r2,-12(fp)
     3b0:	00800044 	movi	r2,1
     3b4:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
     3b8:	e13ffe0b 	ldhu	r4,-8(fp)
     3bc:	0005ef00 	call	5ef0 <OSSemCreate>
     3c0:	1007883a 	mov	r3,r2
     3c4:	e0bffd17 	ldw	r2,-12(fp)
     3c8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     3cc:	0008ae80 	call	8ae8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     3d0:	01000074 	movhi	r4,1
     3d4:	213b3504 	addi	r4,r4,-4908
     3d8:	01400074 	movhi	r5,1
     3dc:	297b3504 	addi	r5,r5,-4908
     3e0:	01800074 	movhi	r6,1
     3e4:	31bb3504 	addi	r6,r6,-4908
     3e8:	000c0a80 	call	c0a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     3ec:	000bb6c0 	call	bb6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     3f0:	01000074 	movhi	r4,1
     3f4:	212ef404 	addi	r4,r4,-17456
     3f8:	000d01c0 	call	d01c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     3fc:	d1202c17 	ldw	r4,-32592(gp)
     400:	d1602d17 	ldw	r5,-32588(gp)
     404:	d1a02e17 	ldw	r6,-32584(gp)
     408:	00002c80 	call	2c8 <main>
     40c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     410:	01000044 	movi	r4,1
     414:	000b8cc0 	call	b8cc <close>
  exit (result);
     418:	e13fff17 	ldw	r4,-4(fp)
     41c:	000d0300 	call	d030 <exit>

00000420 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
     420:	deffdf04 	addi	sp,sp,-132
     424:	dfc02015 	stw	ra,128(sp)
     428:	df001f15 	stw	fp,124(sp)
     42c:	df001f04 	addi	fp,sp,124
     430:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     434:	e17fe204 	addi	r5,fp,-120
     438:	01003fc4 	movi	r4,255
     43c:	00082780 	call	8278 <OSTaskQuery>
     440:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
     444:	e0bffe83 	ldbu	r2,-6(fp)
     448:	10803fcc 	andi	r2,r2,255
     44c:	1004c03a 	cmpne	r2,r2,zero
     450:	1000191e 	bne	r2,zero,4b8 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
     454:	e0bfee83 	ldbu	r2,-70(fp)
     458:	10803fcc 	andi	r2,r2,255
     45c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
     460:	d1203017 	ldw	r4,-32576(gp)
     464:	e17ffd04 	addi	r5,fp,-12
     468:	00067c40 	call	67c4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
     46c:	e0bffe43 	ldbu	r2,-7(fp)
     470:	10803fcc 	andi	r2,r2,255
     474:	1005003a 	cmpeq	r2,r2,zero
     478:	1000071e 	bne	r2,zero,498 <__env_lock+0x78>
     47c:	d0e00017 	ldw	r3,-32768(gp)
     480:	e0bfe117 	ldw	r2,-124(fp)
     484:	10c0041e 	bne	r2,r3,498 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
     488:	d0a02f17 	ldw	r2,-32580(gp)
     48c:	10800044 	addi	r2,r2,1
     490:	d0a02f15 	stw	r2,-32580(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
     494:	00000806 	br	4b8 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
     498:	d1203017 	ldw	r4,-32576(gp)
     49c:	e1bffe84 	addi	r6,fp,-6
     4a0:	000b883a 	mov	r5,zero
     4a4:	00062a40 	call	62a4 <OSSemPend>
    locks  = 1;
     4a8:	00800044 	movi	r2,1
     4ac:	d0a02f15 	stw	r2,-32580(gp)
    lockid = id;
     4b0:	e0bfe117 	ldw	r2,-124(fp)
     4b4:	d0a00015 	stw	r2,-32768(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
     4b8:	e037883a 	mov	sp,fp
     4bc:	dfc00117 	ldw	ra,4(sp)
     4c0:	df000017 	ldw	fp,0(sp)
     4c4:	dec00204 	addi	sp,sp,8
     4c8:	f800283a 	ret

000004cc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
     4cc:	defffd04 	addi	sp,sp,-12
     4d0:	dfc00215 	stw	ra,8(sp)
     4d4:	df000115 	stw	fp,4(sp)
     4d8:	df000104 	addi	fp,sp,4
     4dc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
     4e0:	d0a02f17 	ldw	r2,-32580(gp)
     4e4:	1005003a 	cmpeq	r2,r2,zero
     4e8:	10000a1e 	bne	r2,zero,514 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
     4ec:	d0a02f17 	ldw	r2,-32580(gp)
     4f0:	10bfffc4 	addi	r2,r2,-1
     4f4:	d0a02f15 	stw	r2,-32580(gp)
     4f8:	d0a02f17 	ldw	r2,-32580(gp)
     4fc:	1004c03a 	cmpne	r2,r2,zero
     500:	1000041e 	bne	r2,zero,514 <__env_unlock+0x48>
  {
    lockid = -1;
     504:	00bfffc4 	movi	r2,-1
     508:	d0a00015 	stw	r2,-32768(gp)
    OSSemPost( alt_envsem );
     50c:	d1203017 	ldw	r4,-32576(gp)
     510:	000669c0 	call	669c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     514:	e037883a 	mov	sp,fp
     518:	dfc00117 	ldw	ra,4(sp)
     51c:	df000017 	ldw	fp,0(sp)
     520:	dec00204 	addi	sp,sp,8
     524:	f800283a 	ret

00000528 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
     528:	deffdb04 	addi	sp,sp,-148
     52c:	dfc02415 	stw	ra,144(sp)
     530:	df002315 	stw	fp,140(sp)
     534:	df002304 	addi	fp,sp,140
     538:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     53c:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
     540:	00800074 	movhi	r2,1
     544:	1082e244 	addi	r2,r2,2953
     548:	10800003 	ldbu	r2,0(r2)
     54c:	10803fcc 	andi	r2,r2,255
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000311e 	bne	r2,zero,61c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     558:	e17fe204 	addi	r5,fp,-120
     55c:	01003fc4 	movi	r4,255
     560:	00082780 	call	8278 <OSTaskQuery>
     564:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
     568:	e0bffe83 	ldbu	r2,-6(fp)
     56c:	10803fcc 	andi	r2,r2,255
     570:	1004c03a 	cmpne	r2,r2,zero
     574:	1000291e 	bne	r2,zero,61c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
     578:	e0bfee83 	ldbu	r2,-70(fp)
     57c:	10803fcc 	andi	r2,r2,255
     580:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
     584:	d1203217 	ldw	r4,-32568(gp)
     588:	e17ffd04 	addi	r5,fp,-12
     58c:	00067c40 	call	67c4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     590:	0005303a 	rdctl	r2,status
     594:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     598:	e0ffdf17 	ldw	r3,-132(fp)
     59c:	00bfff84 	movi	r2,-2
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	1001703a 	wrctl	status,r2
  
  return context;
     5a8:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
     5ac:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
     5b0:	e0bffd0b 	ldhu	r2,-12(fp)
     5b4:	10bfffcc 	andi	r2,r2,65535
     5b8:	1004c03a 	cmpne	r2,r2,zero
     5bc:	10000b1e 	bne	r2,zero,5ec <__malloc_lock+0xc4>
     5c0:	d0e00117 	ldw	r3,-32764(gp)
     5c4:	e0bfe117 	ldw	r2,-124(fp)
     5c8:	10c0081e 	bne	r2,r3,5ec <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
     5cc:	d0a03117 	ldw	r2,-32572(gp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	d0a03115 	stw	r2,-32572(gp)
     5d8:	e0bfe017 	ldw	r2,-128(fp)
     5dc:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     5e0:	e0bfde17 	ldw	r2,-136(fp)
     5e4:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
     5e8:	00000c06 	br	61c <__malloc_lock+0xf4>
     5ec:	e0bfe017 	ldw	r2,-128(fp)
     5f0:	e0bfdd15 	stw	r2,-140(fp)
     5f4:	e0bfdd17 	ldw	r2,-140(fp)
     5f8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
     5fc:	d1203217 	ldw	r4,-32568(gp)
     600:	e1bffe84 	addi	r6,fp,-6
     604:	000b883a 	mov	r5,zero
     608:	00062a40 	call	62a4 <OSSemPend>
    locks  = 1;
     60c:	00800044 	movi	r2,1
     610:	d0a03115 	stw	r2,-32572(gp)
    lockid = id;
     614:	e0bfe117 	ldw	r2,-124(fp)
     618:	d0a00115 	stw	r2,-32764(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
     61c:	e037883a 	mov	sp,fp
     620:	dfc00117 	ldw	ra,4(sp)
     624:	df000017 	ldw	fp,0(sp)
     628:	dec00204 	addi	sp,sp,8
     62c:	f800283a 	ret

00000630 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
     630:	defff804 	addi	sp,sp,-32
     634:	dfc00715 	stw	ra,28(sp)
     638:	df000615 	stw	fp,24(sp)
     63c:	df000604 	addi	fp,sp,24
     640:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     644:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
     648:	00800074 	movhi	r2,1
     64c:	1082e244 	addi	r2,r2,2953
     650:	10800003 	ldbu	r2,0(r2)
     654:	10803fcc 	andi	r2,r2,255
     658:	10800058 	cmpnei	r2,r2,1
     65c:	1000231e 	bne	r2,zero,6ec <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     660:	0005303a 	rdctl	r2,status
     664:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     668:	e0fffd17 	ldw	r3,-12(fp)
     66c:	00bfff84 	movi	r2,-2
     670:	1884703a 	and	r2,r3,r2
     674:	1001703a 	wrctl	status,r2
  
  return context;
     678:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
     67c:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
     680:	d0a03117 	ldw	r2,-32572(gp)
     684:	1004c03a 	cmpne	r2,r2,zero
     688:	1000051e 	bne	r2,zero,6a0 <__malloc_unlock+0x70>
     68c:	e0bffe17 	ldw	r2,-8(fp)
     690:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     694:	e0bffc17 	ldw	r2,-16(fp)
     698:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
     69c:	00001306 	br	6ec <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
     6a0:	d0a03117 	ldw	r2,-32572(gp)
     6a4:	10bfffc4 	addi	r2,r2,-1
     6a8:	d0a03115 	stw	r2,-32572(gp)
     6ac:	d0a03117 	ldw	r2,-32572(gp)
     6b0:	1004c03a 	cmpne	r2,r2,zero
     6b4:	1000091e 	bne	r2,zero,6dc <__malloc_unlock+0xac>
  {
    lockid = -1;
     6b8:	00bfffc4 	movi	r2,-1
     6bc:	d0a00115 	stw	r2,-32764(gp)
     6c0:	e0bffe17 	ldw	r2,-8(fp)
     6c4:	e0bffb15 	stw	r2,-20(fp)
     6c8:	e0bffb17 	ldw	r2,-20(fp)
     6cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
     6d0:	d1203217 	ldw	r4,-32568(gp)
     6d4:	000669c0 	call	669c <OSSemPost>
     6d8:	00000406 	br	6ec <__malloc_unlock+0xbc>
     6dc:	e0bffe17 	ldw	r2,-8(fp)
     6e0:	e0bffa15 	stw	r2,-24(fp)
     6e4:	e0bffa17 	ldw	r2,-24(fp)
     6e8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     6ec:	e037883a 	mov	sp,fp
     6f0:	dfc00117 	ldw	ra,4(sp)
     6f4:	df000017 	ldw	fp,0(sp)
     6f8:	dec00204 	addi	sp,sp,8
     6fc:	f800283a 	ret

00000700 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     700:	defff604 	addi	sp,sp,-40
     704:	dfc00915 	stw	ra,36(sp)
     708:	df000815 	stw	fp,32(sp)
     70c:	df000804 	addi	fp,sp,32
     710:	e13ffc15 	stw	r4,-16(fp)
     714:	e17ffd15 	stw	r5,-12(fp)
     718:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     71c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
     720:	e0bffe17 	ldw	r2,-8(fp)
     724:	1004c03a 	cmpne	r2,r2,zero
     728:	1000021e 	bne	r2,zero,734 <OSEventNameGet+0x34>
        return (0);
     72c:	e03fff15 	stw	zero,-4(fp)
     730:	00003906 	br	818 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     734:	e0bffc17 	ldw	r2,-16(fp)
     738:	1004c03a 	cmpne	r2,r2,zero
     73c:	1000051e 	bne	r2,zero,754 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
     740:	e0fffe17 	ldw	r3,-8(fp)
     744:	00800104 	movi	r2,4
     748:	18800005 	stb	r2,0(r3)
        return (0);
     74c:	e03fff15 	stw	zero,-4(fp)
     750:	00003106 	br	818 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
     754:	e0bffd17 	ldw	r2,-12(fp)
     758:	1004c03a 	cmpne	r2,r2,zero
     75c:	1000051e 	bne	r2,zero,774 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
     760:	e0fffe17 	ldw	r3,-8(fp)
     764:	00800304 	movi	r2,12
     768:	18800005 	stb	r2,0(r3)
        return (0);
     76c:	e03fff15 	stw	zero,-4(fp)
     770:	00002906 	br	818 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     774:	d0a04103 	ldbu	r2,-32508(gp)
     778:	10803fcc 	andi	r2,r2,255
     77c:	1005003a 	cmpeq	r2,r2,zero
     780:	1000051e 	bne	r2,zero,798 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
     784:	e0fffe17 	ldw	r3,-8(fp)
     788:	00800444 	movi	r2,17
     78c:	18800005 	stb	r2,0(r3)
        return (0);
     790:	e03fff15 	stw	zero,-4(fp)
     794:	00002006 	br	818 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
     798:	e0bffc17 	ldw	r2,-16(fp)
     79c:	10800003 	ldbu	r2,0(r2)
     7a0:	10803fcc 	andi	r2,r2,255
     7a4:	10bfffc4 	addi	r2,r2,-1
     7a8:	10800128 	cmpgeui	r2,r2,4
     7ac:	1000161e 	bne	r2,zero,808 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     7b0:	0005303a 	rdctl	r2,status
     7b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     7b8:	e0fff917 	ldw	r3,-28(fp)
     7bc:	00bfff84 	movi	r2,-2
     7c0:	1884703a 	and	r2,r3,r2
     7c4:	1001703a 	wrctl	status,r2
  
  return context;
     7c8:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
     7cc:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
     7d0:	e0bffc17 	ldw	r2,-16(fp)
     7d4:	11400384 	addi	r5,r2,14
     7d8:	e13ffd17 	ldw	r4,-12(fp)
     7dc:	00022840 	call	2284 <OS_StrCopy>
     7e0:	e0bffb05 	stb	r2,-20(fp)
     7e4:	e0bffa17 	ldw	r2,-24(fp)
     7e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     7ec:	e0bff817 	ldw	r2,-32(fp)
     7f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
     7f4:	e0bffe17 	ldw	r2,-8(fp)
     7f8:	10000005 	stb	zero,0(r2)
    return (len);
     7fc:	e0bffb03 	ldbu	r2,-20(fp)
     800:	e0bfff15 	stw	r2,-4(fp)
     804:	00000406 	br	818 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     808:	e0fffe17 	ldw	r3,-8(fp)
     80c:	00800044 	movi	r2,1
     810:	18800005 	stb	r2,0(r3)
             return (0);
     814:	e03fff15 	stw	zero,-4(fp)
     818:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
     81c:	e037883a 	mov	sp,fp
     820:	dfc00117 	ldw	ra,4(sp)
     824:	df000017 	ldw	fp,0(sp)
     828:	dec00204 	addi	sp,sp,8
     82c:	f800283a 	ret

00000830 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     830:	defff604 	addi	sp,sp,-40
     834:	dfc00915 	stw	ra,36(sp)
     838:	df000815 	stw	fp,32(sp)
     83c:	df000804 	addi	fp,sp,32
     840:	e13ffd15 	stw	r4,-12(fp)
     844:	e17ffe15 	stw	r5,-8(fp)
     848:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     84c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
     850:	e0bfff17 	ldw	r2,-4(fp)
     854:	1005003a 	cmpeq	r2,r2,zero
     858:	1000411e 	bne	r2,zero,960 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     85c:	e0bffd17 	ldw	r2,-12(fp)
     860:	1004c03a 	cmpne	r2,r2,zero
     864:	1000041e 	bne	r2,zero,878 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
     868:	e0ffff17 	ldw	r3,-4(fp)
     86c:	00800104 	movi	r2,4
     870:	18800005 	stb	r2,0(r3)
        return;
     874:	00003a06 	br	960 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
     878:	e0bffe17 	ldw	r2,-8(fp)
     87c:	1004c03a 	cmpne	r2,r2,zero
     880:	1000041e 	bne	r2,zero,894 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
     884:	e0ffff17 	ldw	r3,-4(fp)
     888:	00800304 	movi	r2,12
     88c:	18800005 	stb	r2,0(r3)
        return;
     890:	00003306 	br	960 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     894:	d0a04103 	ldbu	r2,-32508(gp)
     898:	10803fcc 	andi	r2,r2,255
     89c:	1005003a 	cmpeq	r2,r2,zero
     8a0:	1000041e 	bne	r2,zero,8b4 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
     8a4:	e0ffff17 	ldw	r3,-4(fp)
     8a8:	00800484 	movi	r2,18
     8ac:	18800005 	stb	r2,0(r3)
        return;
     8b0:	00002b06 	br	960 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
     8b4:	e0bffd17 	ldw	r2,-12(fp)
     8b8:	10800003 	ldbu	r2,0(r2)
     8bc:	10803fcc 	andi	r2,r2,255
     8c0:	10bfffc4 	addi	r2,r2,-1
     8c4:	10800128 	cmpgeui	r2,r2,4
     8c8:	10000f1e 	bne	r2,zero,908 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     8cc:	0005303a 	rdctl	r2,status
     8d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     8d4:	e0fffa17 	ldw	r3,-24(fp)
     8d8:	00bfff84 	movi	r2,-2
     8dc:	1884703a 	and	r2,r3,r2
     8e0:	1001703a 	wrctl	status,r2
  
  return context;
     8e4:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
     8e8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
     8ec:	e13ffe17 	ldw	r4,-8(fp)
     8f0:	00023040 	call	2304 <OS_StrLen>
     8f4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
     8f8:	e0bffc03 	ldbu	r2,-16(fp)
     8fc:	10800828 	cmpgeui	r2,r2,32
     900:	1000051e 	bne	r2,zero,918 <OSEventNameSet+0xe8>
     904:	00000c06 	br	938 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     908:	e0ffff17 	ldw	r3,-4(fp)
     90c:	00800044 	movi	r2,1
     910:	18800005 	stb	r2,0(r3)
             return;
     914:	00001206 	br	960 <OSEventNameSet+0x130>
     918:	e0bffb17 	ldw	r2,-20(fp)
     91c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     920:	e0bff917 	ldw	r2,-28(fp)
     924:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
     928:	e0ffff17 	ldw	r3,-4(fp)
     92c:	008002c4 	movi	r2,11
     930:	18800005 	stb	r2,0(r3)
        return;
     934:	00000a06 	br	960 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
     938:	e0bffd17 	ldw	r2,-12(fp)
     93c:	11000384 	addi	r4,r2,14
     940:	e17ffe17 	ldw	r5,-8(fp)
     944:	00022840 	call	2284 <OS_StrCopy>
     948:	e0bffb17 	ldw	r2,-20(fp)
     94c:	e0bff815 	stw	r2,-32(fp)
     950:	e0bff817 	ldw	r2,-32(fp)
     954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
     958:	e0bfff17 	ldw	r2,-4(fp)
     95c:	10000005 	stb	zero,0(r2)
}
     960:	e037883a 	mov	sp,fp
     964:	dfc00117 	ldw	ra,4(sp)
     968:	df000017 	ldw	fp,0(sp)
     96c:	dec00204 	addi	sp,sp,8
     970:	f800283a 	ret

00000974 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
     974:	deffe704 	addi	sp,sp,-100
     978:	dfc01815 	stw	ra,96(sp)
     97c:	df001715 	stw	fp,92(sp)
     980:	df001704 	addi	fp,sp,92
     984:	e13ff615 	stw	r4,-40(fp)
     988:	e17ff715 	stw	r5,-36(fp)
     98c:	e1bff815 	stw	r6,-32(fp)
     990:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
     994:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
     998:	e0800217 	ldw	r2,8(fp)
     99c:	1004c03a 	cmpne	r2,r2,zero
     9a0:	1000021e 	bne	r2,zero,9ac <OSEventPendMulti+0x38>
        return (0);
     9a4:	e03fff15 	stw	zero,-4(fp)
     9a8:	00019906 	br	1010 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
     9ac:	e0bff617 	ldw	r2,-40(fp)
     9b0:	1004c03a 	cmpne	r2,r2,zero
     9b4:	1000051e 	bne	r2,zero,9cc <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
     9b8:	e0c00217 	ldw	r3,8(fp)
     9bc:	00800104 	movi	r2,4
     9c0:	18800005 	stb	r2,0(r3)
        return (0);
     9c4:	e03fff15 	stw	zero,-4(fp)
     9c8:	00019106 	br	1010 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
     9cc:	e0bff717 	ldw	r2,-36(fp)
     9d0:	1004c03a 	cmpne	r2,r2,zero
     9d4:	1000051e 	bne	r2,zero,9ec <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
     9d8:	e0c00217 	ldw	r3,8(fp)
     9dc:	00800104 	movi	r2,4
     9e0:	18800005 	stb	r2,0(r3)
        return (0);
     9e4:	e03fff15 	stw	zero,-4(fp)
     9e8:	00018906 	br	1010 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
     9ec:	e0bff817 	ldw	r2,-32(fp)
     9f0:	1004c03a 	cmpne	r2,r2,zero
     9f4:	1000051e 	bne	r2,zero,a0c <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
     9f8:	e0c00217 	ldw	r3,8(fp)
     9fc:	00800104 	movi	r2,4
     a00:	18800005 	stb	r2,0(r3)
        return (0);
     a04:	e03fff15 	stw	zero,-4(fp)
     a08:	00018106 	br	1010 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
     a0c:	e0bff717 	ldw	r2,-36(fp)
     a10:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
     a14:	e0bff617 	ldw	r2,-40(fp)
     a18:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
     a1c:	e0bff517 	ldw	r2,-44(fp)
     a20:	10800017 	ldw	r2,0(r2)
     a24:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
     a28:	00001806 	br	a8c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
     a2c:	e0bff417 	ldw	r2,-48(fp)
     a30:	10800003 	ldbu	r2,0(r2)
     a34:	10803fcc 	andi	r2,r2,255
     a38:	e0bffe15 	stw	r2,-8(fp)
     a3c:	e0fffe17 	ldw	r3,-8(fp)
     a40:	188000a0 	cmpeqi	r2,r3,2
     a44:	10000b1e 	bne	r2,zero,a74 <OSEventPendMulti+0x100>
     a48:	e0fffe17 	ldw	r3,-8(fp)
     a4c:	188000e0 	cmpeqi	r2,r3,3
     a50:	1000081e 	bne	r2,zero,a74 <OSEventPendMulti+0x100>
     a54:	e0fffe17 	ldw	r3,-8(fp)
     a58:	18800060 	cmpeqi	r2,r3,1
     a5c:	1000051e 	bne	r2,zero,a74 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
     a60:	e0c00217 	ldw	r3,8(fp)
     a64:	00800044 	movi	r2,1
     a68:	18800005 	stb	r2,0(r3)
                 return (0);
     a6c:	e03fff15 	stw	zero,-4(fp)
     a70:	00016706 	br	1010 <OSEventPendMulti+0x69c>
        }
        pevents++;
     a74:	e0bff517 	ldw	r2,-44(fp)
     a78:	10800104 	addi	r2,r2,4
     a7c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
     a80:	e0bff517 	ldw	r2,-44(fp)
     a84:	10800017 	ldw	r2,0(r2)
     a88:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
     a8c:	e0bff417 	ldw	r2,-48(fp)
     a90:	1004c03a 	cmpne	r2,r2,zero
     a94:	103fe51e 	bne	r2,zero,a2c <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
     a98:	d0a04103 	ldbu	r2,-32508(gp)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	1005003a 	cmpeq	r2,r2,zero
     aa4:	1000051e 	bne	r2,zero,abc <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
     aa8:	e0c00217 	ldw	r3,8(fp)
     aac:	00800084 	movi	r2,2
     ab0:	18800005 	stb	r2,0(r3)
        return (0);
     ab4:	e03fff15 	stw	zero,-4(fp)
     ab8:	00015506 	br	1010 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
     abc:	d0a03303 	ldbu	r2,-32564(gp)
     ac0:	10803fcc 	andi	r2,r2,255
     ac4:	1005003a 	cmpeq	r2,r2,zero
     ac8:	1000051e 	bne	r2,zero,ae0 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
     acc:	e0c00217 	ldw	r3,8(fp)
     ad0:	00800344 	movi	r2,13
     ad4:	18800005 	stb	r2,0(r3)
        return (0);
     ad8:	e03fff15 	stw	zero,-4(fp)
     adc:	00014c06 	br	1010 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ae0:	0005303a 	rdctl	r2,status
     ae4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     ae8:	e0ffef17 	ldw	r3,-68(fp)
     aec:	00bfff84 	movi	r2,-2
     af0:	1884703a 	and	r2,r3,r2
     af4:	1001703a 	wrctl	status,r2
  
  return context;
     af8:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
     afc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
     b00:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
     b04:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
     b08:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
     b0c:	e0bff617 	ldw	r2,-40(fp)
     b10:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
     b14:	e0bff517 	ldw	r2,-44(fp)
     b18:	10800017 	ldw	r2,0(r2)
     b1c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
     b20:	00008f06 	br	d60 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
     b24:	e0bff417 	ldw	r2,-48(fp)
     b28:	10800003 	ldbu	r2,0(r2)
     b2c:	10803fcc 	andi	r2,r2,255
     b30:	e0bffd15 	stw	r2,-12(fp)
     b34:	e0fffd17 	ldw	r3,-12(fp)
     b38:	188000a0 	cmpeqi	r2,r3,2
     b3c:	1000441e 	bne	r2,zero,c50 <OSEventPendMulti+0x2dc>
     b40:	e0fffd17 	ldw	r3,-12(fp)
     b44:	188000e0 	cmpeqi	r2,r3,3
     b48:	1000041e 	bne	r2,zero,b5c <OSEventPendMulti+0x1e8>
     b4c:	e0fffd17 	ldw	r3,-12(fp)
     b50:	18800060 	cmpeqi	r2,r3,1
     b54:	1000211e 	bne	r2,zero,bdc <OSEventPendMulti+0x268>
     b58:	00006f06 	br	d18 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
     b5c:	e0bff417 	ldw	r2,-48(fp)
     b60:	1080020b 	ldhu	r2,8(r2)
     b64:	10bfffcc 	andi	r2,r2,65535
     b68:	1005003a 	cmpeq	r2,r2,zero
     b6c:	1000171e 	bne	r2,zero,bcc <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
     b70:	e0bff417 	ldw	r2,-48(fp)
     b74:	1080020b 	ldhu	r2,8(r2)
     b78:	10bfffc4 	addi	r2,r2,-1
     b7c:	1007883a 	mov	r3,r2
     b80:	e0bff417 	ldw	r2,-48(fp)
     b84:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
     b88:	e0fff717 	ldw	r3,-36(fp)
     b8c:	e0bff417 	ldw	r2,-48(fp)
     b90:	18800015 	stw	r2,0(r3)
     b94:	e0bff717 	ldw	r2,-36(fp)
     b98:	10800104 	addi	r2,r2,4
     b9c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
     ba0:	00800044 	movi	r2,1
     ba4:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
     ba8:	e0bff817 	ldw	r2,-32(fp)
     bac:	10000015 	stw	zero,0(r2)
     bb0:	e0bff817 	ldw	r2,-32(fp)
     bb4:	10800104 	addi	r2,r2,4
     bb8:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
     bbc:	e0bff18b 	ldhu	r2,-58(fp)
     bc0:	10800044 	addi	r2,r2,1
     bc4:	e0bff18d 	sth	r2,-58(fp)
     bc8:	00005f06 	br	d48 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
     bcc:	e0bff103 	ldbu	r2,-60(fp)
     bd0:	10800054 	ori	r2,r2,1
     bd4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
     bd8:	00005b06 	br	d48 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
     bdc:	e0bff417 	ldw	r2,-48(fp)
     be0:	10800117 	ldw	r2,4(r2)
     be4:	1005003a 	cmpeq	r2,r2,zero
     be8:	1000151e 	bne	r2,zero,c40 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
     bec:	e0bff417 	ldw	r2,-48(fp)
     bf0:	10c00117 	ldw	r3,4(r2)
     bf4:	e0bff817 	ldw	r2,-32(fp)
     bf8:	10c00015 	stw	r3,0(r2)
     bfc:	e0bff817 	ldw	r2,-32(fp)
     c00:	10800104 	addi	r2,r2,4
     c04:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
     c08:	e0bff417 	ldw	r2,-48(fp)
     c0c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
     c10:	e0fff717 	ldw	r3,-36(fp)
     c14:	e0bff417 	ldw	r2,-48(fp)
     c18:	18800015 	stw	r2,0(r3)
     c1c:	e0bff717 	ldw	r2,-36(fp)
     c20:	10800104 	addi	r2,r2,4
     c24:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
     c28:	00800044 	movi	r2,1
     c2c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
     c30:	e0bff18b 	ldhu	r2,-58(fp)
     c34:	10800044 	addi	r2,r2,1
     c38:	e0bff18d 	sth	r2,-58(fp)
     c3c:	00004206 	br	d48 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
     c40:	e0bff103 	ldbu	r2,-60(fp)
     c44:	10800094 	ori	r2,r2,2
     c48:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
     c4c:	00003e06 	br	d48 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
     c50:	e0bff417 	ldw	r2,-48(fp)
     c54:	10800117 	ldw	r2,4(r2)
     c58:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
     c5c:	e0bff317 	ldw	r2,-52(fp)
     c60:	1080058b 	ldhu	r2,22(r2)
     c64:	10bfffcc 	andi	r2,r2,65535
     c68:	1005003a 	cmpeq	r2,r2,zero
     c6c:	1000261e 	bne	r2,zero,d08 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
     c70:	e0bff317 	ldw	r2,-52(fp)
     c74:	11000417 	ldw	r4,16(r2)
     c78:	20c00017 	ldw	r3,0(r4)
     c7c:	e0bff817 	ldw	r2,-32(fp)
     c80:	10c00015 	stw	r3,0(r2)
     c84:	e0bff817 	ldw	r2,-32(fp)
     c88:	10800104 	addi	r2,r2,4
     c8c:	e0bff815 	stw	r2,-32(fp)
     c90:	20c00104 	addi	r3,r4,4
     c94:	e0bff317 	ldw	r2,-52(fp)
     c98:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
     c9c:	e0bff317 	ldw	r2,-52(fp)
     ca0:	10c00417 	ldw	r3,16(r2)
     ca4:	e0bff317 	ldw	r2,-52(fp)
     ca8:	10800217 	ldw	r2,8(r2)
     cac:	1880041e 	bne	r3,r2,cc0 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
     cb0:	e0bff317 	ldw	r2,-52(fp)
     cb4:	10c00117 	ldw	r3,4(r2)
     cb8:	e0bff317 	ldw	r2,-52(fp)
     cbc:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
     cc0:	e0bff317 	ldw	r2,-52(fp)
     cc4:	1080058b 	ldhu	r2,22(r2)
     cc8:	10bfffc4 	addi	r2,r2,-1
     ccc:	1007883a 	mov	r3,r2
     cd0:	e0bff317 	ldw	r2,-52(fp)
     cd4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
     cd8:	e0fff717 	ldw	r3,-36(fp)
     cdc:	e0bff417 	ldw	r2,-48(fp)
     ce0:	18800015 	stw	r2,0(r3)
     ce4:	e0bff717 	ldw	r2,-36(fp)
     ce8:	10800104 	addi	r2,r2,4
     cec:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
     cf0:	00800044 	movi	r2,1
     cf4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
     cf8:	e0bff18b 	ldhu	r2,-58(fp)
     cfc:	10800044 	addi	r2,r2,1
     d00:	e0bff18d 	sth	r2,-58(fp)
     d04:	00001006 	br	d48 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
     d08:	e0bff103 	ldbu	r2,-60(fp)
     d0c:	10800114 	ori	r2,r2,4
     d10:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
     d14:	00000c06 	br	d48 <OSEventPendMulti+0x3d4>
     d18:	e0bff017 	ldw	r2,-64(fp)
     d1c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d20:	e0bfee17 	ldw	r2,-72(fp)
     d24:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
     d28:	e0bff717 	ldw	r2,-36(fp)
     d2c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
     d30:	e0c00217 	ldw	r3,8(fp)
     d34:	00800044 	movi	r2,1
     d38:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
     d3c:	e0bff18b 	ldhu	r2,-58(fp)
     d40:	e0bfff15 	stw	r2,-4(fp)
     d44:	0000b206 	br	1010 <OSEventPendMulti+0x69c>
        }
        pevents++;
     d48:	e0bff517 	ldw	r2,-44(fp)
     d4c:	10800104 	addi	r2,r2,4
     d50:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
     d54:	e0bff517 	ldw	r2,-44(fp)
     d58:	10800017 	ldw	r2,0(r2)
     d5c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
     d60:	e0bff417 	ldw	r2,-48(fp)
     d64:	1004c03a 	cmpne	r2,r2,zero
     d68:	103f6e1e 	bne	r2,zero,b24 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
     d6c:	e0bff203 	ldbu	r2,-56(fp)
     d70:	10800058 	cmpnei	r2,r2,1
     d74:	10000b1e 	bne	r2,zero,da4 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
     d78:	e0bff717 	ldw	r2,-36(fp)
     d7c:	10000015 	stw	zero,0(r2)
     d80:	e0bff017 	ldw	r2,-64(fp)
     d84:	e0bfed15 	stw	r2,-76(fp)
     d88:	e0bfed17 	ldw	r2,-76(fp)
     d8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
     d90:	e0800217 	ldw	r2,8(fp)
     d94:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
     d98:	e0fff18b 	ldhu	r3,-58(fp)
     d9c:	e0ffff15 	stw	r3,-4(fp)
     da0:	00009b06 	br	1010 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
     da4:	d1204217 	ldw	r4,-32504(gp)
     da8:	d0a04217 	ldw	r2,-32504(gp)
     dac:	10c00c03 	ldbu	r3,48(r2)
     db0:	e0bff103 	ldbu	r2,-60(fp)
     db4:	1884b03a 	or	r2,r3,r2
     db8:	1007883a 	mov	r3,r2
     dbc:	00bfe004 	movi	r2,-128
     dc0:	1884b03a 	or	r2,r3,r2
     dc4:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
     dc8:	d0a04217 	ldw	r2,-32504(gp)
     dcc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
     dd0:	d0e04217 	ldw	r3,-32504(gp)
     dd4:	e0bff90b 	ldhu	r2,-28(fp)
     dd8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
     ddc:	e13ff617 	ldw	r4,-40(fp)
     de0:	00019a40 	call	19a4 <OS_EventTaskWaitMulti>
     de4:	e0bff017 	ldw	r2,-64(fp)
     de8:	e0bfec15 	stw	r2,-80(fp)
     dec:	e0bfec17 	ldw	r2,-80(fp)
     df0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
     df4:	00021400 	call	2140 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     df8:	0005303a 	rdctl	r2,status
     dfc:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e00:	e0ffeb17 	ldw	r3,-84(fp)
     e04:	00bfff84 	movi	r2,-2
     e08:	1884703a 	and	r2,r3,r2
     e0c:	1001703a 	wrctl	status,r2
  
  return context;
     e10:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
     e14:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
     e18:	d0a04217 	ldw	r2,-32504(gp)
     e1c:	10800c43 	ldbu	r2,49(r2)
     e20:	10803fcc 	andi	r2,r2,255
     e24:	e0bffc15 	stw	r2,-16(fp)
     e28:	e0fffc17 	ldw	r3,-16(fp)
     e2c:	1805003a 	cmpeq	r2,r3,zero
     e30:	1000041e 	bne	r2,zero,e44 <OSEventPendMulti+0x4d0>
     e34:	e0fffc17 	ldw	r3,-16(fp)
     e38:	188000a0 	cmpeqi	r2,r3,2
     e3c:	1000011e 	bne	r2,zero,e44 <OSEventPendMulti+0x4d0>
     e40:	00001906 	br	ea8 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
     e44:	d0a04217 	ldw	r2,-32504(gp)
     e48:	10800717 	ldw	r2,28(r2)
     e4c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
     e50:	e0bff417 	ldw	r2,-48(fp)
     e54:	1005003a 	cmpeq	r2,r2,zero
     e58:	10000c1e 	bne	r2,zero,e8c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
     e5c:	e0fff717 	ldw	r3,-36(fp)
     e60:	e0bff417 	ldw	r2,-48(fp)
     e64:	18800015 	stw	r2,0(r3)
     e68:	e0bff717 	ldw	r2,-36(fp)
     e6c:	10800104 	addi	r2,r2,4
     e70:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
     e74:	e0bff717 	ldw	r2,-36(fp)
     e78:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
     e7c:	e0bff18b 	ldhu	r2,-58(fp)
     e80:	10800044 	addi	r2,r2,1
     e84:	e0bff18d 	sth	r2,-58(fp)
     e88:	00000a06 	br	eb4 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
     e8c:	d0a04217 	ldw	r2,-32504(gp)
     e90:	00c00044 	movi	r3,1
     e94:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
     e98:	d1204217 	ldw	r4,-32504(gp)
     e9c:	e17ff617 	ldw	r5,-40(fp)
     ea0:	0001bb00 	call	1bb0 <OS_EventTaskRemoveMulti>
             }
			 break;
     ea4:	00000306 	br	eb4 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
     ea8:	d1204217 	ldw	r4,-32504(gp)
     eac:	e17ff617 	ldw	r5,-40(fp)
     eb0:	0001bb00 	call	1bb0 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
     eb4:	d0a04217 	ldw	r2,-32504(gp)
     eb8:	10800c43 	ldbu	r2,49(r2)
     ebc:	10803fcc 	andi	r2,r2,255
     ec0:	e0bffb15 	stw	r2,-20(fp)
     ec4:	e0fffb17 	ldw	r3,-20(fp)
     ec8:	1805003a 	cmpeq	r2,r3,zero
     ecc:	1000041e 	bne	r2,zero,ee0 <OSEventPendMulti+0x56c>
     ed0:	e0fffb17 	ldw	r3,-20(fp)
     ed4:	188000a0 	cmpeqi	r2,r3,2
     ed8:	10002c1e 	bne	r2,zero,f8c <OSEventPendMulti+0x618>
     edc:	00003406 	br	fb0 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
     ee0:	e0bff417 	ldw	r2,-48(fp)
     ee4:	10800003 	ldbu	r2,0(r2)
     ee8:	10803fcc 	andi	r2,r2,255
     eec:	e0bffa15 	stw	r2,-24(fp)
     ef0:	e0fffa17 	ldw	r3,-24(fp)
     ef4:	18800050 	cmplti	r2,r3,1
     ef8:	1000151e 	bne	r2,zero,f50 <OSEventPendMulti+0x5dc>
     efc:	e0fffa17 	ldw	r3,-24(fp)
     f00:	188000d0 	cmplti	r2,r3,3
     f04:	10000a1e 	bne	r2,zero,f30 <OSEventPendMulti+0x5bc>
     f08:	e0fffa17 	ldw	r3,-24(fp)
     f0c:	188000e0 	cmpeqi	r2,r3,3
     f10:	1000011e 	bne	r2,zero,f18 <OSEventPendMulti+0x5a4>
     f14:	00000e06 	br	f50 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
     f18:	e0bff817 	ldw	r2,-32(fp)
     f1c:	10000015 	stw	zero,0(r2)
     f20:	e0bff817 	ldw	r2,-32(fp)
     f24:	10800104 	addi	r2,r2,4
     f28:	e0bff815 	stw	r2,-32(fp)
                      break;
     f2c:	00001406 	br	f80 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
     f30:	d0a04217 	ldw	r2,-32504(gp)
     f34:	10c00917 	ldw	r3,36(r2)
     f38:	e0bff817 	ldw	r2,-32(fp)
     f3c:	10c00015 	stw	r3,0(r2)
     f40:	e0bff817 	ldw	r2,-32(fp)
     f44:	10800104 	addi	r2,r2,4
     f48:	e0bff815 	stw	r2,-32(fp)
                      break;
     f4c:	00000c06 	br	f80 <OSEventPendMulti+0x60c>
     f50:	e0bff017 	ldw	r2,-64(fp)
     f54:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     f58:	e0bfea17 	ldw	r2,-88(fp)
     f5c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
     f60:	e0bff717 	ldw	r2,-36(fp)
     f64:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
     f68:	e0c00217 	ldw	r3,8(fp)
     f6c:	00800044 	movi	r2,1
     f70:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
     f74:	e0bff18b 	ldhu	r2,-58(fp)
     f78:	e0bfff15 	stw	r2,-4(fp)
     f7c:	00002406 	br	1010 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
     f80:	e0800217 	ldw	r2,8(fp)
     f84:	10000005 	stb	zero,0(r2)
             break;
     f88:	00001106 	br	fd0 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
     f8c:	e0bff817 	ldw	r2,-32(fp)
     f90:	10000015 	stw	zero,0(r2)
     f94:	e0bff817 	ldw	r2,-32(fp)
     f98:	10800104 	addi	r2,r2,4
     f9c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
     fa0:	e0c00217 	ldw	r3,8(fp)
     fa4:	00800384 	movi	r2,14
     fa8:	18800005 	stb	r2,0(r3)
             break;
     fac:	00000806 	br	fd0 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
     fb0:	e0bff817 	ldw	r2,-32(fp)
     fb4:	10000015 	stw	zero,0(r2)
     fb8:	e0bff817 	ldw	r2,-32(fp)
     fbc:	10800104 	addi	r2,r2,4
     fc0:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
     fc4:	e0c00217 	ldw	r3,8(fp)
     fc8:	00800284 	movi	r2,10
     fcc:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
     fd0:	d0a04217 	ldw	r2,-32504(gp)
     fd4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
     fd8:	d0a04217 	ldw	r2,-32504(gp)
     fdc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
     fe0:	d0a04217 	ldw	r2,-32504(gp)
     fe4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
     fe8:	d0a04217 	ldw	r2,-32504(gp)
     fec:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
     ff0:	d0a04217 	ldw	r2,-32504(gp)
     ff4:	10000915 	stw	zero,36(r2)
     ff8:	e0bff017 	ldw	r2,-64(fp)
     ffc:	e0bfe915 	stw	r2,-92(fp)
    1000:	e0bfe917 	ldw	r2,-92(fp)
    1004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    1008:	e0fff18b 	ldhu	r3,-58(fp)
    100c:	e0ffff15 	stw	r3,-4(fp)
    1010:	e0bfff17 	ldw	r2,-4(fp)
}
    1014:	e037883a 	mov	sp,fp
    1018:	dfc00117 	ldw	ra,4(sp)
    101c:	df000017 	ldw	fp,0(sp)
    1020:	dec00204 	addi	sp,sp,8
    1024:	f800283a 	ret

00001028 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    1028:	defffe04 	addi	sp,sp,-8
    102c:	dfc00115 	stw	ra,4(sp)
    1030:	df000015 	stw	fp,0(sp)
    1034:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    1038:	000cab80 	call	cab8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    103c:	0001df80 	call	1df8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    1040:	0001e3c0 	call	1e3c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    1044:	0001fa00 	call	1fa0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    1048:	0001d1c0 	call	1d1c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    104c:	00040500 	call	4050 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    1050:	0004a280 	call	4a28 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    1054:	0005d840 	call	5d84 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    1058:	0001ea80 	call	1ea8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    105c:	0001f240 	call	1f24 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    1060:	000cad40 	call	cad4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    1064:	00028280 	call	2828 <OSDebugInit>
#endif
}
    1068:	e037883a 	mov	sp,fp
    106c:	dfc00117 	ldw	ra,4(sp)
    1070:	df000017 	ldw	fp,0(sp)
    1074:	dec00204 	addi	sp,sp,8
    1078:	f800283a 	ret

0000107c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    107c:	defffc04 	addi	sp,sp,-16
    1080:	df000315 	stw	fp,12(sp)
    1084:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1088:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
    108c:	d0a03343 	ldbu	r2,-32563(gp)
    1090:	10803fcc 	andi	r2,r2,255
    1094:	10800058 	cmpnei	r2,r2,1
    1098:	1000131e 	bne	r2,zero,10e8 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    109c:	0005303a 	rdctl	r2,status
    10a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    10a4:	e0fffe17 	ldw	r3,-8(fp)
    10a8:	00bfff84 	movi	r2,-2
    10ac:	1884703a 	and	r2,r3,r2
    10b0:	1001703a 	wrctl	status,r2
  
  return context;
    10b4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    10b8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
    10bc:	d0a04103 	ldbu	r2,-32508(gp)
    10c0:	10803fcc 	andi	r2,r2,255
    10c4:	10803fe0 	cmpeqi	r2,r2,255
    10c8:	1000031e 	bne	r2,zero,10d8 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    10cc:	d0a04103 	ldbu	r2,-32508(gp)
    10d0:	10800044 	addi	r2,r2,1
    10d4:	d0a04105 	stb	r2,-32508(gp)
    10d8:	e0bfff17 	ldw	r2,-4(fp)
    10dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10e0:	e0bffd17 	ldw	r2,-12(fp)
    10e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    10e8:	e037883a 	mov	sp,fp
    10ec:	df000017 	ldw	fp,0(sp)
    10f0:	dec00104 	addi	sp,sp,4
    10f4:	f800283a 	ret

000010f8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    10f8:	defffb04 	addi	sp,sp,-20
    10fc:	dfc00415 	stw	ra,16(sp)
    1100:	df000315 	stw	fp,12(sp)
    1104:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1108:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
    110c:	d0a03343 	ldbu	r2,-32563(gp)
    1110:	10803fcc 	andi	r2,r2,255
    1114:	10800058 	cmpnei	r2,r2,1
    1118:	1000321e 	bne	r2,zero,11e4 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    111c:	0005303a 	rdctl	r2,status
    1120:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1124:	e0fffe17 	ldw	r3,-8(fp)
    1128:	00bfff84 	movi	r2,-2
    112c:	1884703a 	and	r2,r3,r2
    1130:	1001703a 	wrctl	status,r2
  
  return context;
    1134:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    1138:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    113c:	d0a04103 	ldbu	r2,-32508(gp)
    1140:	10803fcc 	andi	r2,r2,255
    1144:	1005003a 	cmpeq	r2,r2,zero
    1148:	1000031e 	bne	r2,zero,1158 <OSIntExit+0x60>
            OSIntNesting--;
    114c:	d0a04103 	ldbu	r2,-32508(gp)
    1150:	10bfffc4 	addi	r2,r2,-1
    1154:	d0a04105 	stb	r2,-32508(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    1158:	d0a04103 	ldbu	r2,-32508(gp)
    115c:	10803fcc 	andi	r2,r2,255
    1160:	1004c03a 	cmpne	r2,r2,zero
    1164:	10001b1e 	bne	r2,zero,11d4 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    1168:	d0a03303 	ldbu	r2,-32564(gp)
    116c:	10803fcc 	andi	r2,r2,255
    1170:	1004c03a 	cmpne	r2,r2,zero
    1174:	1000171e 	bne	r2,zero,11d4 <OSIntExit+0xdc>
                OS_SchedNew();
    1178:	00022140 	call	2214 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    117c:	d0a03503 	ldbu	r2,-32556(gp)
    1180:	d0e03543 	ldbu	r3,-32555(gp)
    1184:	11003fcc 	andi	r4,r2,255
    1188:	18803fcc 	andi	r2,r3,255
    118c:	20801126 	beq	r4,r2,11d4 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    1190:	d0a03503 	ldbu	r2,-32556(gp)
    1194:	10803fcc 	andi	r2,r2,255
    1198:	00c000b4 	movhi	r3,2
    119c:	18ef6f04 	addi	r3,r3,-16964
    11a0:	1085883a 	add	r2,r2,r2
    11a4:	1085883a 	add	r2,r2,r2
    11a8:	10c5883a 	add	r2,r2,r3
    11ac:	10800017 	ldw	r2,0(r2)
    11b0:	d0a03d15 	stw	r2,-32524(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    11b4:	d0e03d17 	ldw	r3,-32524(gp)
    11b8:	18800e17 	ldw	r2,56(r3)
    11bc:	10800044 	addi	r2,r2,1
    11c0:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    11c4:	d0a03817 	ldw	r2,-32544(gp)
    11c8:	10800044 	addi	r2,r2,1
    11cc:	d0a03815 	stw	r2,-32544(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    11d0:	000c6440 	call	c644 <OSCtxSw>
    11d4:	e0bfff17 	ldw	r2,-4(fp)
    11d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11dc:	e0bffd17 	ldw	r2,-12(fp)
    11e0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    11e4:	e037883a 	mov	sp,fp
    11e8:	dfc00117 	ldw	ra,4(sp)
    11ec:	df000017 	ldw	fp,0(sp)
    11f0:	dec00204 	addi	sp,sp,8
    11f4:	f800283a 	ret

000011f8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    11f8:	defffc04 	addi	sp,sp,-16
    11fc:	df000315 	stw	fp,12(sp)
    1200:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1204:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    1208:	d0a03343 	ldbu	r2,-32563(gp)
    120c:	10803fcc 	andi	r2,r2,255
    1210:	10800058 	cmpnei	r2,r2,1
    1214:	1000171e 	bne	r2,zero,1274 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1218:	0005303a 	rdctl	r2,status
    121c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1220:	e0fffe17 	ldw	r3,-8(fp)
    1224:	00bfff84 	movi	r2,-2
    1228:	1884703a 	and	r2,r3,r2
    122c:	1001703a 	wrctl	status,r2
  
  return context;
    1230:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    1234:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    1238:	d0a04103 	ldbu	r2,-32508(gp)
    123c:	10803fcc 	andi	r2,r2,255
    1240:	1004c03a 	cmpne	r2,r2,zero
    1244:	1000071e 	bne	r2,zero,1264 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    1248:	d0a03303 	ldbu	r2,-32564(gp)
    124c:	10803fcc 	andi	r2,r2,255
    1250:	10803fe0 	cmpeqi	r2,r2,255
    1254:	1000031e 	bne	r2,zero,1264 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    1258:	d0a03303 	ldbu	r2,-32564(gp)
    125c:	10800044 	addi	r2,r2,1
    1260:	d0a03305 	stb	r2,-32564(gp)
    1264:	e0bfff17 	ldw	r2,-4(fp)
    1268:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    126c:	e0bffd17 	ldw	r2,-12(fp)
    1270:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    1274:	e037883a 	mov	sp,fp
    1278:	df000017 	ldw	fp,0(sp)
    127c:	dec00104 	addi	sp,sp,4
    1280:	f800283a 	ret

00001284 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    1284:	defff804 	addi	sp,sp,-32
    1288:	dfc00715 	stw	ra,28(sp)
    128c:	df000615 	stw	fp,24(sp)
    1290:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1294:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    1298:	d0a03343 	ldbu	r2,-32563(gp)
    129c:	10803fcc 	andi	r2,r2,255
    12a0:	10800058 	cmpnei	r2,r2,1
    12a4:	10002b1e 	bne	r2,zero,1354 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12a8:	0005303a 	rdctl	r2,status
    12ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    12b0:	e0fffe17 	ldw	r3,-8(fp)
    12b4:	00bfff84 	movi	r2,-2
    12b8:	1884703a 	and	r2,r3,r2
    12bc:	1001703a 	wrctl	status,r2
  
  return context;
    12c0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    12c4:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    12c8:	d0a03303 	ldbu	r2,-32564(gp)
    12cc:	10803fcc 	andi	r2,r2,255
    12d0:	1005003a 	cmpeq	r2,r2,zero
    12d4:	10001b1e 	bne	r2,zero,1344 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    12d8:	d0a03303 	ldbu	r2,-32564(gp)
    12dc:	10bfffc4 	addi	r2,r2,-1
    12e0:	d0a03305 	stb	r2,-32564(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    12e4:	d0a03303 	ldbu	r2,-32564(gp)
    12e8:	10803fcc 	andi	r2,r2,255
    12ec:	1004c03a 	cmpne	r2,r2,zero
    12f0:	10000f1e 	bne	r2,zero,1330 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    12f4:	d0a04103 	ldbu	r2,-32508(gp)
    12f8:	10803fcc 	andi	r2,r2,255
    12fc:	1004c03a 	cmpne	r2,r2,zero
    1300:	1000061e 	bne	r2,zero,131c <OSSchedUnlock+0x98>
    1304:	e0bfff17 	ldw	r2,-4(fp)
    1308:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    130c:	e0bffd17 	ldw	r2,-12(fp)
    1310:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    1314:	00021400 	call	2140 <OS_Sched>
    1318:	00000e06 	br	1354 <OSSchedUnlock+0xd0>
    131c:	e0bfff17 	ldw	r2,-4(fp)
    1320:	e0bffc15 	stw	r2,-16(fp)
    1324:	e0bffc17 	ldw	r2,-16(fp)
    1328:	1001703a 	wrctl	status,r2
    132c:	00000906 	br	1354 <OSSchedUnlock+0xd0>
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	e0bffb15 	stw	r2,-20(fp)
    1338:	e0bffb17 	ldw	r2,-20(fp)
    133c:	1001703a 	wrctl	status,r2
    1340:	00000406 	br	1354 <OSSchedUnlock+0xd0>
    1344:	e0bfff17 	ldw	r2,-4(fp)
    1348:	e0bffa15 	stw	r2,-24(fp)
    134c:	e0bffa17 	ldw	r2,-24(fp)
    1350:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    1354:	e037883a 	mov	sp,fp
    1358:	dfc00117 	ldw	ra,4(sp)
    135c:	df000017 	ldw	fp,0(sp)
    1360:	dec00204 	addi	sp,sp,8
    1364:	f800283a 	ret

00001368 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    1368:	defffe04 	addi	sp,sp,-8
    136c:	dfc00115 	stw	ra,4(sp)
    1370:	df000015 	stw	fp,0(sp)
    1374:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    1378:	d0a03343 	ldbu	r2,-32563(gp)
    137c:	10803fcc 	andi	r2,r2,255
    1380:	1004c03a 	cmpne	r2,r2,zero
    1384:	10000f1e 	bne	r2,zero,13c4 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    1388:	00022140 	call	2214 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    138c:	d0a03503 	ldbu	r2,-32556(gp)
    1390:	d0a03545 	stb	r2,-32555(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    1394:	d0a03503 	ldbu	r2,-32556(gp)
    1398:	10803fcc 	andi	r2,r2,255
    139c:	00c000b4 	movhi	r3,2
    13a0:	18ef6f04 	addi	r3,r3,-16964
    13a4:	1085883a 	add	r2,r2,r2
    13a8:	1085883a 	add	r2,r2,r2
    13ac:	10c5883a 	add	r2,r2,r3
    13b0:	10800017 	ldw	r2,0(r2)
    13b4:	d0a03d15 	stw	r2,-32524(gp)
        OSTCBCur      = OSTCBHighRdy;
    13b8:	d0a03d17 	ldw	r2,-32524(gp)
    13bc:	d0a04215 	stw	r2,-32504(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    13c0:	000c6d00 	call	c6d0 <OSStartHighRdy>
    }
}
    13c4:	e037883a 	mov	sp,fp
    13c8:	dfc00117 	ldw	ra,4(sp)
    13cc:	df000017 	ldw	fp,0(sp)
    13d0:	dec00204 	addi	sp,sp,8
    13d4:	f800283a 	ret

000013d8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    13d8:	defff904 	addi	sp,sp,-28
    13dc:	dfc00615 	stw	ra,24(sp)
    13e0:	df000515 	stw	fp,20(sp)
    13e4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    13e8:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    13ec:	01000084 	movi	r4,2
    13f0:	00084380 	call	8438 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    13f4:	0005303a 	rdctl	r2,status
    13f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13fc:	e0fffe17 	ldw	r3,-8(fp)
    1400:	00bfff84 	movi	r2,-2
    1404:	1884703a 	and	r2,r3,r2
    1408:	1001703a 	wrctl	status,r2
  
  return context;
    140c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    1410:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    1414:	d0203415 	stw	zero,-32560(gp)
    1418:	e0bfff17 	ldw	r2,-4(fp)
    141c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1420:	e0bffd17 	ldw	r2,-12(fp)
    1424:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    1428:	01001904 	movi	r4,100
    142c:	00084380 	call	8438 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1430:	0005303a 	rdctl	r2,status
    1434:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1438:	e0fffc17 	ldw	r3,-16(fp)
    143c:	00bfff84 	movi	r2,-2
    1440:	1884703a 	and	r2,r3,r2
    1444:	1001703a 	wrctl	status,r2
  
  return context;
    1448:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    144c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    1450:	d0a03417 	ldw	r2,-32560(gp)
    1454:	d0a03915 	stw	r2,-32540(gp)
    OSStatRdy    = OS_TRUE;
    1458:	00800044 	movi	r2,1
    145c:	d0a04505 	stb	r2,-32492(gp)
    1460:	e0bfff17 	ldw	r2,-4(fp)
    1464:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1468:	e0bffb17 	ldw	r2,-20(fp)
    146c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    1470:	e037883a 	mov	sp,fp
    1474:	dfc00117 	ldw	ra,4(sp)
    1478:	df000017 	ldw	fp,0(sp)
    147c:	dec00204 	addi	sp,sp,8
    1480:	f800283a 	ret

00001484 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    1484:	defff604 	addi	sp,sp,-40
    1488:	dfc00915 	stw	ra,36(sp)
    148c:	df000815 	stw	fp,32(sp)
    1490:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    1494:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    1498:	000ca9c0 	call	ca9c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    149c:	0005303a 	rdctl	r2,status
    14a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14a4:	e0fffb17 	ldw	r3,-20(fp)
    14a8:	00bfff84 	movi	r2,-2
    14ac:	1884703a 	and	r2,r3,r2
    14b0:	1001703a 	wrctl	status,r2
  
  return context;
    14b4:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    14b8:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
    14bc:	d0a04317 	ldw	r2,-32500(gp)
    14c0:	10800044 	addi	r2,r2,1
    14c4:	d0a04315 	stw	r2,-32500(gp)
    14c8:	e0bffc17 	ldw	r2,-16(fp)
    14cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14d0:	e0bffa17 	ldw	r2,-24(fp)
    14d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    14d8:	d0a03343 	ldbu	r2,-32563(gp)
    14dc:	10803fcc 	andi	r2,r2,255
    14e0:	10800058 	cmpnei	r2,r2,1
    14e4:	1000721e 	bne	r2,zero,16b0 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    14e8:	d0a03703 	ldbu	r2,-32548(gp)
    14ec:	10803fcc 	andi	r2,r2,255
    14f0:	e0bfff15 	stw	r2,-4(fp)
    14f4:	e0ffff17 	ldw	r3,-4(fp)
    14f8:	18800060 	cmpeqi	r2,r3,1
    14fc:	10000a1e 	bne	r2,zero,1528 <OSTimeTick+0xa4>
    1500:	e0ffff17 	ldw	r3,-4(fp)
    1504:	188000a0 	cmpeqi	r2,r3,2
    1508:	1000091e 	bne	r2,zero,1530 <OSTimeTick+0xac>
    150c:	e0ffff17 	ldw	r3,-4(fp)
    1510:	1805003a 	cmpeq	r2,r3,zero
    1514:	1000011e 	bne	r2,zero,151c <OSTimeTick+0x98>
    1518:	00000a06 	br	1544 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    151c:	00800044 	movi	r2,1
    1520:	e0bffd05 	stb	r2,-12(fp)
                 break;
    1524:	00000a06 	br	1550 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    1528:	e03ffd05 	stb	zero,-12(fp)
                 break;
    152c:	00000806 	br	1550 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    1530:	00800044 	movi	r2,1
    1534:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    1538:	00800044 	movi	r2,1
    153c:	d0a03705 	stb	r2,-32548(gp)
                 break;
    1540:	00000306 	br	1550 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    1544:	00800044 	movi	r2,1
    1548:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    154c:	d0203705 	stb	zero,-32548(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    1550:	e0bffd03 	ldbu	r2,-12(fp)
    1554:	1005003a 	cmpeq	r2,r2,zero
    1558:	1000551e 	bne	r2,zero,16b0 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    155c:	d0a03617 	ldw	r2,-32552(gp)
    1560:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    1564:	00004d06 	br	169c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1568:	0005303a 	rdctl	r2,status
    156c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1570:	e0fff917 	ldw	r3,-28(fp)
    1574:	00bfff84 	movi	r2,-2
    1578:	1884703a 	and	r2,r3,r2
    157c:	1001703a 	wrctl	status,r2
  
  return context;
    1580:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
    1584:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    1588:	e0bffe17 	ldw	r2,-8(fp)
    158c:	10800b8b 	ldhu	r2,46(r2)
    1590:	10bfffcc 	andi	r2,r2,65535
    1594:	1005003a 	cmpeq	r2,r2,zero
    1598:	1000391e 	bne	r2,zero,1680 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    159c:	e0bffe17 	ldw	r2,-8(fp)
    15a0:	10800b8b 	ldhu	r2,46(r2)
    15a4:	10bfffc4 	addi	r2,r2,-1
    15a8:	1007883a 	mov	r3,r2
    15ac:	e0bffe17 	ldw	r2,-8(fp)
    15b0:	10c00b8d 	sth	r3,46(r2)
    15b4:	e0bffe17 	ldw	r2,-8(fp)
    15b8:	10800b8b 	ldhu	r2,46(r2)
    15bc:	10bfffcc 	andi	r2,r2,65535
    15c0:	1004c03a 	cmpne	r2,r2,zero
    15c4:	10002e1e 	bne	r2,zero,1680 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    15c8:	e0bffe17 	ldw	r2,-8(fp)
    15cc:	10800c03 	ldbu	r2,48(r2)
    15d0:	10803fcc 	andi	r2,r2,255
    15d4:	10800dcc 	andi	r2,r2,55
    15d8:	1005003a 	cmpeq	r2,r2,zero
    15dc:	10000b1e 	bne	r2,zero,160c <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    15e0:	e0bffe17 	ldw	r2,-8(fp)
    15e4:	10c00c03 	ldbu	r3,48(r2)
    15e8:	00bff204 	movi	r2,-56
    15ec:	1884703a 	and	r2,r3,r2
    15f0:	1007883a 	mov	r3,r2
    15f4:	e0bffe17 	ldw	r2,-8(fp)
    15f8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    15fc:	e0fffe17 	ldw	r3,-8(fp)
    1600:	00800044 	movi	r2,1
    1604:	18800c45 	stb	r2,49(r3)
    1608:	00000206 	br	1614 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    160c:	e0bffe17 	ldw	r2,-8(fp)
    1610:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    1614:	e0bffe17 	ldw	r2,-8(fp)
    1618:	10800c03 	ldbu	r2,48(r2)
    161c:	10803fcc 	andi	r2,r2,255
    1620:	1080020c 	andi	r2,r2,8
    1624:	1004c03a 	cmpne	r2,r2,zero
    1628:	1000151e 	bne	r2,zero,1680 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    162c:	e0bffe17 	ldw	r2,-8(fp)
    1630:	10c00d83 	ldbu	r3,54(r2)
    1634:	d0a03f03 	ldbu	r2,-32516(gp)
    1638:	1884b03a 	or	r2,r3,r2
    163c:	d0a03f05 	stb	r2,-32516(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    1640:	e0bffe17 	ldw	r2,-8(fp)
    1644:	10800d03 	ldbu	r2,52(r2)
    1648:	11003fcc 	andi	r4,r2,255
    164c:	e0bffe17 	ldw	r2,-8(fp)
    1650:	10800d03 	ldbu	r2,52(r2)
    1654:	10c03fcc 	andi	r3,r2,255
    1658:	d0a03f44 	addi	r2,gp,-32515
    165c:	1885883a 	add	r2,r3,r2
    1660:	10c00003 	ldbu	r3,0(r2)
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	10800d43 	ldbu	r2,53(r2)
    166c:	1884b03a 	or	r2,r3,r2
    1670:	1007883a 	mov	r3,r2
    1674:	d0a03f44 	addi	r2,gp,-32515
    1678:	2085883a 	add	r2,r4,r2
    167c:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    1680:	e0bffe17 	ldw	r2,-8(fp)
    1684:	10800517 	ldw	r2,20(r2)
    1688:	e0bffe15 	stw	r2,-8(fp)
    168c:	e0bffc17 	ldw	r2,-16(fp)
    1690:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1694:	e0bff817 	ldw	r2,-32(fp)
    1698:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    169c:	e0bffe17 	ldw	r2,-8(fp)
    16a0:	10800c83 	ldbu	r2,50(r2)
    16a4:	10803fcc 	andi	r2,r2,255
    16a8:	10800518 	cmpnei	r2,r2,20
    16ac:	103fae1e 	bne	r2,zero,1568 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    16b0:	e037883a 	mov	sp,fp
    16b4:	dfc00117 	ldw	ra,4(sp)
    16b8:	df000017 	ldw	fp,0(sp)
    16bc:	dec00204 	addi	sp,sp,8
    16c0:	f800283a 	ret

000016c4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    16c4:	deffff04 	addi	sp,sp,-4
    16c8:	df000015 	stw	fp,0(sp)
    16cc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    16d0:	00804784 	movi	r2,286
}
    16d4:	e037883a 	mov	sp,fp
    16d8:	df000017 	ldw	fp,0(sp)
    16dc:	dec00104 	addi	sp,sp,4
    16e0:	f800283a 	ret

000016e4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    16e4:	deffff04 	addi	sp,sp,-4
    16e8:	df000015 	stw	fp,0(sp)
    16ec:	d839883a 	mov	fp,sp
}
    16f0:	e037883a 	mov	sp,fp
    16f4:	df000017 	ldw	fp,0(sp)
    16f8:	dec00104 	addi	sp,sp,4
    16fc:	f800283a 	ret

00001700 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    1700:	defff804 	addi	sp,sp,-32
    1704:	dfc00715 	stw	ra,28(sp)
    1708:	df000615 	stw	fp,24(sp)
    170c:	df000604 	addi	fp,sp,24
    1710:	e13ffc15 	stw	r4,-16(fp)
    1714:	e17ffd15 	stw	r5,-12(fp)
    1718:	e1bffe05 	stb	r6,-8(fp)
    171c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    1720:	e0bffc17 	ldw	r2,-16(fp)
    1724:	10800283 	ldbu	r2,10(r2)
    1728:	10c03fcc 	andi	r3,r2,255
    172c:	00800074 	movhi	r2,1
    1730:	10bb3a04 	addi	r2,r2,-4888
    1734:	10c5883a 	add	r2,r2,r3
    1738:	10800003 	ldbu	r2,0(r2)
    173c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    1740:	e0fffa83 	ldbu	r3,-22(fp)
    1744:	e0bffc17 	ldw	r2,-16(fp)
    1748:	1885883a 	add	r2,r3,r2
    174c:	10800204 	addi	r2,r2,8
    1750:	108000c3 	ldbu	r2,3(r2)
    1754:	10c03fcc 	andi	r3,r2,255
    1758:	00800074 	movhi	r2,1
    175c:	10bb3a04 	addi	r2,r2,-4888
    1760:	10c5883a 	add	r2,r2,r3
    1764:	10800003 	ldbu	r2,0(r2)
    1768:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    176c:	e0bffa83 	ldbu	r2,-22(fp)
    1770:	100490fa 	slli	r2,r2,3
    1774:	1007883a 	mov	r3,r2
    1778:	e0bffa43 	ldbu	r2,-23(fp)
    177c:	1885883a 	add	r2,r3,r2
    1780:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    1784:	e0bffa03 	ldbu	r2,-24(fp)
    1788:	00c000b4 	movhi	r3,2
    178c:	18ef6f04 	addi	r3,r3,-16964
    1790:	1085883a 	add	r2,r2,r2
    1794:	1085883a 	add	r2,r2,r2
    1798:	10c5883a 	add	r2,r2,r3
    179c:	10800017 	ldw	r2,0(r2)
    17a0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    17a4:	e0bffb17 	ldw	r2,-20(fp)
    17a8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    17ac:	e0fffb17 	ldw	r3,-20(fp)
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    17b8:	e0bffb17 	ldw	r2,-20(fp)
    17bc:	10800c03 	ldbu	r2,48(r2)
    17c0:	1007883a 	mov	r3,r2
    17c4:	e0bffe03 	ldbu	r2,-8(fp)
    17c8:	0084303a 	nor	r2,zero,r2
    17cc:	1884703a 	and	r2,r3,r2
    17d0:	1007883a 	mov	r3,r2
    17d4:	e0bffb17 	ldw	r2,-20(fp)
    17d8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    17dc:	e0fffb17 	ldw	r3,-20(fp)
    17e0:	e0bfff03 	ldbu	r2,-4(fp)
    17e4:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    17e8:	e0bffb17 	ldw	r2,-20(fp)
    17ec:	10800c03 	ldbu	r2,48(r2)
    17f0:	10803fcc 	andi	r2,r2,255
    17f4:	1080020c 	andi	r2,r2,8
    17f8:	1004c03a 	cmpne	r2,r2,zero
    17fc:	1000111e 	bne	r2,zero,1844 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    1800:	e0bffb17 	ldw	r2,-20(fp)
    1804:	10c00d83 	ldbu	r3,54(r2)
    1808:	d0a03f03 	ldbu	r2,-32516(gp)
    180c:	1884b03a 	or	r2,r3,r2
    1810:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    1814:	e13ffa83 	ldbu	r4,-22(fp)
    1818:	e0fffa83 	ldbu	r3,-22(fp)
    181c:	d0a03f44 	addi	r2,gp,-32515
    1820:	1885883a 	add	r2,r3,r2
    1824:	10c00003 	ldbu	r3,0(r2)
    1828:	e0bffb17 	ldw	r2,-20(fp)
    182c:	10800d43 	ldbu	r2,53(r2)
    1830:	1884b03a 	or	r2,r3,r2
    1834:	1007883a 	mov	r3,r2
    1838:	d0a03f44 	addi	r2,gp,-32515
    183c:	2085883a 	add	r2,r4,r2
    1840:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    1844:	e13ffb17 	ldw	r4,-20(fp)
    1848:	e17ffc17 	ldw	r5,-16(fp)
    184c:	0001af80 	call	1af8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    1850:	e0bffb17 	ldw	r2,-20(fp)
    1854:	10800817 	ldw	r2,32(r2)
    1858:	1005003a 	cmpeq	r2,r2,zero
    185c:	1000071e 	bne	r2,zero,187c <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    1860:	e0bffb17 	ldw	r2,-20(fp)
    1864:	11400817 	ldw	r5,32(r2)
    1868:	e13ffb17 	ldw	r4,-20(fp)
    186c:	0001bb00 	call	1bb0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    1870:	e0fffb17 	ldw	r3,-20(fp)
    1874:	e0bffc17 	ldw	r2,-16(fp)
    1878:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
    187c:	e0bffa03 	ldbu	r2,-24(fp)
}
    1880:	e037883a 	mov	sp,fp
    1884:	dfc00117 	ldw	ra,4(sp)
    1888:	df000017 	ldw	fp,0(sp)
    188c:	dec00204 	addi	sp,sp,8
    1890:	f800283a 	ret

00001894 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    1894:	defffd04 	addi	sp,sp,-12
    1898:	df000215 	stw	fp,8(sp)
    189c:	df000204 	addi	fp,sp,8
    18a0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    18a4:	d0e04217 	ldw	r3,-32504(gp)
    18a8:	e0bfff17 	ldw	r2,-4(fp)
    18ac:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    18b0:	d0a04217 	ldw	r2,-32504(gp)
    18b4:	10800d03 	ldbu	r2,52(r2)
    18b8:	11003fcc 	andi	r4,r2,255
    18bc:	d0a04217 	ldw	r2,-32504(gp)
    18c0:	10800d03 	ldbu	r2,52(r2)
    18c4:	10c03fcc 	andi	r3,r2,255
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	1885883a 	add	r2,r3,r2
    18d0:	10800204 	addi	r2,r2,8
    18d4:	10c000c3 	ldbu	r3,3(r2)
    18d8:	d0a04217 	ldw	r2,-32504(gp)
    18dc:	10800d43 	ldbu	r2,53(r2)
    18e0:	1884b03a 	or	r2,r3,r2
    18e4:	1007883a 	mov	r3,r2
    18e8:	e0bfff17 	ldw	r2,-4(fp)
    18ec:	2085883a 	add	r2,r4,r2
    18f0:	10800204 	addi	r2,r2,8
    18f4:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    18f8:	e0bfff17 	ldw	r2,-4(fp)
    18fc:	10c00283 	ldbu	r3,10(r2)
    1900:	d0a04217 	ldw	r2,-32504(gp)
    1904:	10800d83 	ldbu	r2,54(r2)
    1908:	1884b03a 	or	r2,r3,r2
    190c:	1007883a 	mov	r3,r2
    1910:	e0bfff17 	ldw	r2,-4(fp)
    1914:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    1918:	d0a04217 	ldw	r2,-32504(gp)
    191c:	10800d03 	ldbu	r2,52(r2)
    1920:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    1924:	e13ffe03 	ldbu	r4,-8(fp)
    1928:	e0fffe03 	ldbu	r3,-8(fp)
    192c:	d0a03f44 	addi	r2,gp,-32515
    1930:	1885883a 	add	r2,r3,r2
    1934:	10800003 	ldbu	r2,0(r2)
    1938:	1007883a 	mov	r3,r2
    193c:	d0a04217 	ldw	r2,-32504(gp)
    1940:	10800d43 	ldbu	r2,53(r2)
    1944:	0084303a 	nor	r2,zero,r2
    1948:	1884703a 	and	r2,r3,r2
    194c:	1007883a 	mov	r3,r2
    1950:	d0a03f44 	addi	r2,gp,-32515
    1954:	2085883a 	add	r2,r4,r2
    1958:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    195c:	e0fffe03 	ldbu	r3,-8(fp)
    1960:	d0a03f44 	addi	r2,gp,-32515
    1964:	1885883a 	add	r2,r3,r2
    1968:	10800003 	ldbu	r2,0(r2)
    196c:	10803fcc 	andi	r2,r2,255
    1970:	1004c03a 	cmpne	r2,r2,zero
    1974:	1000071e 	bne	r2,zero,1994 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    1978:	d0a04217 	ldw	r2,-32504(gp)
    197c:	10800d83 	ldbu	r2,54(r2)
    1980:	0084303a 	nor	r2,zero,r2
    1984:	1007883a 	mov	r3,r2
    1988:	d0a03f03 	ldbu	r2,-32516(gp)
    198c:	1884703a 	and	r2,r3,r2
    1990:	d0a03f05 	stb	r2,-32516(gp)
    }
}
    1994:	e037883a 	mov	sp,fp
    1998:	df000017 	ldw	fp,0(sp)
    199c:	dec00104 	addi	sp,sp,4
    19a0:	f800283a 	ret

000019a4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    19a4:	defffb04 	addi	sp,sp,-20
    19a8:	df000415 	stw	fp,16(sp)
    19ac:	df000404 	addi	fp,sp,16
    19b0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    19b4:	d0a04217 	ldw	r2,-32504(gp)
    19b8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    19bc:	d0e04217 	ldw	r3,-32504(gp)
    19c0:	e0bfff17 	ldw	r2,-4(fp)
    19c4:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
    19c8:	e0bfff17 	ldw	r2,-4(fp)
    19cc:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
    19d0:	e0bffe17 	ldw	r2,-8(fp)
    19d4:	10800017 	ldw	r2,0(r2)
    19d8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    19dc:	00002006 	br	1a60 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    19e0:	d0a04217 	ldw	r2,-32504(gp)
    19e4:	10800d03 	ldbu	r2,52(r2)
    19e8:	11003fcc 	andi	r4,r2,255
    19ec:	d0a04217 	ldw	r2,-32504(gp)
    19f0:	10800d03 	ldbu	r2,52(r2)
    19f4:	10c03fcc 	andi	r3,r2,255
    19f8:	e0bffd17 	ldw	r2,-12(fp)
    19fc:	1885883a 	add	r2,r3,r2
    1a00:	10800204 	addi	r2,r2,8
    1a04:	10c000c3 	ldbu	r3,3(r2)
    1a08:	d0a04217 	ldw	r2,-32504(gp)
    1a0c:	10800d43 	ldbu	r2,53(r2)
    1a10:	1884b03a 	or	r2,r3,r2
    1a14:	1007883a 	mov	r3,r2
    1a18:	e0bffd17 	ldw	r2,-12(fp)
    1a1c:	2085883a 	add	r2,r4,r2
    1a20:	10800204 	addi	r2,r2,8
    1a24:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    1a28:	e0bffd17 	ldw	r2,-12(fp)
    1a2c:	10c00283 	ldbu	r3,10(r2)
    1a30:	d0a04217 	ldw	r2,-32504(gp)
    1a34:	10800d83 	ldbu	r2,54(r2)
    1a38:	1884b03a 	or	r2,r3,r2
    1a3c:	1007883a 	mov	r3,r2
    1a40:	e0bffd17 	ldw	r2,-12(fp)
    1a44:	10c00285 	stb	r3,10(r2)
        pevents++;
    1a48:	e0bffe17 	ldw	r2,-8(fp)
    1a4c:	10800104 	addi	r2,r2,4
    1a50:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
    1a54:	e0bffe17 	ldw	r2,-8(fp)
    1a58:	10800017 	ldw	r2,0(r2)
    1a5c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    1a60:	e0bffd17 	ldw	r2,-12(fp)
    1a64:	1004c03a 	cmpne	r2,r2,zero
    1a68:	103fdd1e 	bne	r2,zero,19e0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    1a6c:	d0a04217 	ldw	r2,-32504(gp)
    1a70:	10800d03 	ldbu	r2,52(r2)
    1a74:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    1a78:	e13ffc03 	ldbu	r4,-16(fp)
    1a7c:	e0fffc03 	ldbu	r3,-16(fp)
    1a80:	d0a03f44 	addi	r2,gp,-32515
    1a84:	1885883a 	add	r2,r3,r2
    1a88:	10800003 	ldbu	r2,0(r2)
    1a8c:	1007883a 	mov	r3,r2
    1a90:	d0a04217 	ldw	r2,-32504(gp)
    1a94:	10800d43 	ldbu	r2,53(r2)
    1a98:	0084303a 	nor	r2,zero,r2
    1a9c:	1884703a 	and	r2,r3,r2
    1aa0:	1007883a 	mov	r3,r2
    1aa4:	d0a03f44 	addi	r2,gp,-32515
    1aa8:	2085883a 	add	r2,r4,r2
    1aac:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    1ab0:	e0fffc03 	ldbu	r3,-16(fp)
    1ab4:	d0a03f44 	addi	r2,gp,-32515
    1ab8:	1885883a 	add	r2,r3,r2
    1abc:	10800003 	ldbu	r2,0(r2)
    1ac0:	10803fcc 	andi	r2,r2,255
    1ac4:	1004c03a 	cmpne	r2,r2,zero
    1ac8:	1000071e 	bne	r2,zero,1ae8 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    1acc:	d0a04217 	ldw	r2,-32504(gp)
    1ad0:	10800d83 	ldbu	r2,54(r2)
    1ad4:	0084303a 	nor	r2,zero,r2
    1ad8:	1007883a 	mov	r3,r2
    1adc:	d0a03f03 	ldbu	r2,-32516(gp)
    1ae0:	1884703a 	and	r2,r3,r2
    1ae4:	d0a03f05 	stb	r2,-32516(gp)
    }
}
    1ae8:	e037883a 	mov	sp,fp
    1aec:	df000017 	ldw	fp,0(sp)
    1af0:	dec00104 	addi	sp,sp,4
    1af4:	f800283a 	ret

00001af8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    1af8:	defffc04 	addi	sp,sp,-16
    1afc:	df000315 	stw	fp,12(sp)
    1b00:	df000304 	addi	fp,sp,12
    1b04:	e13ffe15 	stw	r4,-8(fp)
    1b08:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    1b0c:	e0bffe17 	ldw	r2,-8(fp)
    1b10:	10800d03 	ldbu	r2,52(r2)
    1b14:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    1b18:	e13ffd03 	ldbu	r4,-12(fp)
    1b1c:	e0fffd03 	ldbu	r3,-12(fp)
    1b20:	e0bfff17 	ldw	r2,-4(fp)
    1b24:	1885883a 	add	r2,r3,r2
    1b28:	10800204 	addi	r2,r2,8
    1b2c:	108000c3 	ldbu	r2,3(r2)
    1b30:	1007883a 	mov	r3,r2
    1b34:	e0bffe17 	ldw	r2,-8(fp)
    1b38:	10800d43 	ldbu	r2,53(r2)
    1b3c:	0084303a 	nor	r2,zero,r2
    1b40:	1884703a 	and	r2,r3,r2
    1b44:	1007883a 	mov	r3,r2
    1b48:	e0bfff17 	ldw	r2,-4(fp)
    1b4c:	2085883a 	add	r2,r4,r2
    1b50:	10800204 	addi	r2,r2,8
    1b54:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    1b58:	e0fffd03 	ldbu	r3,-12(fp)
    1b5c:	e0bfff17 	ldw	r2,-4(fp)
    1b60:	1885883a 	add	r2,r3,r2
    1b64:	10800204 	addi	r2,r2,8
    1b68:	108000c3 	ldbu	r2,3(r2)
    1b6c:	10803fcc 	andi	r2,r2,255
    1b70:	1004c03a 	cmpne	r2,r2,zero
    1b74:	10000a1e 	bne	r2,zero,1ba0 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    1b78:	e0bfff17 	ldw	r2,-4(fp)
    1b7c:	10800283 	ldbu	r2,10(r2)
    1b80:	1007883a 	mov	r3,r2
    1b84:	e0bffe17 	ldw	r2,-8(fp)
    1b88:	10800d83 	ldbu	r2,54(r2)
    1b8c:	0084303a 	nor	r2,zero,r2
    1b90:	1884703a 	and	r2,r3,r2
    1b94:	1007883a 	mov	r3,r2
    1b98:	e0bfff17 	ldw	r2,-4(fp)
    1b9c:	10c00285 	stb	r3,10(r2)
    }
}
    1ba0:	e037883a 	mov	sp,fp
    1ba4:	df000017 	ldw	fp,0(sp)
    1ba8:	dec00104 	addi	sp,sp,4
    1bac:	f800283a 	ret

00001bb0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    1bb0:	defffa04 	addi	sp,sp,-24
    1bb4:	df000515 	stw	fp,20(sp)
    1bb8:	df000504 	addi	fp,sp,20
    1bbc:	e13ffe15 	stw	r4,-8(fp)
    1bc0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    1bc4:	e0bffe17 	ldw	r2,-8(fp)
    1bc8:	10800d03 	ldbu	r2,52(r2)
    1bcc:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
    1bd0:	e0bffe17 	ldw	r2,-8(fp)
    1bd4:	10800d83 	ldbu	r2,54(r2)
    1bd8:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
    1bdc:	e0bffe17 	ldw	r2,-8(fp)
    1be0:	10800d43 	ldbu	r2,53(r2)
    1be4:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
    1be8:	e0bfff17 	ldw	r2,-4(fp)
    1bec:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
    1bf0:	e0bffd17 	ldw	r2,-12(fp)
    1bf4:	10800017 	ldw	r2,0(r2)
    1bf8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    1bfc:	00002606 	br	1c98 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
    1c00:	e13ffb83 	ldbu	r4,-18(fp)
    1c04:	e0fffb83 	ldbu	r3,-18(fp)
    1c08:	e0bffc17 	ldw	r2,-16(fp)
    1c0c:	1885883a 	add	r2,r3,r2
    1c10:	10800204 	addi	r2,r2,8
    1c14:	108000c3 	ldbu	r2,3(r2)
    1c18:	1007883a 	mov	r3,r2
    1c1c:	e0bffb03 	ldbu	r2,-20(fp)
    1c20:	0084303a 	nor	r2,zero,r2
    1c24:	1884703a 	and	r2,r3,r2
    1c28:	1007883a 	mov	r3,r2
    1c2c:	e0bffc17 	ldw	r2,-16(fp)
    1c30:	2085883a 	add	r2,r4,r2
    1c34:	10800204 	addi	r2,r2,8
    1c38:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    1c3c:	e0fffb83 	ldbu	r3,-18(fp)
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	1885883a 	add	r2,r3,r2
    1c48:	10800204 	addi	r2,r2,8
    1c4c:	108000c3 	ldbu	r2,3(r2)
    1c50:	10803fcc 	andi	r2,r2,255
    1c54:	1004c03a 	cmpne	r2,r2,zero
    1c58:	1000091e 	bne	r2,zero,1c80 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
    1c5c:	e0bffc17 	ldw	r2,-16(fp)
    1c60:	10800283 	ldbu	r2,10(r2)
    1c64:	1007883a 	mov	r3,r2
    1c68:	e0bffb43 	ldbu	r2,-19(fp)
    1c6c:	0084303a 	nor	r2,zero,r2
    1c70:	1884703a 	and	r2,r3,r2
    1c74:	1007883a 	mov	r3,r2
    1c78:	e0bffc17 	ldw	r2,-16(fp)
    1c7c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    1c80:	e0bffd17 	ldw	r2,-12(fp)
    1c84:	10800104 	addi	r2,r2,4
    1c88:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
    1c8c:	e0bffd17 	ldw	r2,-12(fp)
    1c90:	10800017 	ldw	r2,0(r2)
    1c94:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    1c98:	e0bffc17 	ldw	r2,-16(fp)
    1c9c:	1004c03a 	cmpne	r2,r2,zero
    1ca0:	103fd71e 	bne	r2,zero,1c00 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    1ca4:	e037883a 	mov	sp,fp
    1ca8:	df000017 	ldw	fp,0(sp)
    1cac:	dec00104 	addi	sp,sp,4
    1cb0:	f800283a 	ret

00001cb4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    1cb4:	defffc04 	addi	sp,sp,-16
    1cb8:	df000315 	stw	fp,12(sp)
    1cbc:	df000304 	addi	fp,sp,12
    1cc0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    1cc4:	e0bfff17 	ldw	r2,-4(fp)
    1cc8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    1ccc:	e0bfff17 	ldw	r2,-4(fp)
    1cd0:	108002c4 	addi	r2,r2,11
    1cd4:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1cd8:	e03ffd05 	stb	zero,-12(fp)
    1cdc:	00000806 	br	1d00 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10000005 	stb	zero,0(r2)
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	10800044 	addi	r2,r2,1
    1cf0:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1cf4:	e0bffd03 	ldbu	r2,-12(fp)
    1cf8:	10800044 	addi	r2,r2,1
    1cfc:	e0bffd05 	stb	r2,-12(fp)
    1d00:	e0bffd03 	ldbu	r2,-12(fp)
    1d04:	108000f0 	cmpltui	r2,r2,3
    1d08:	103ff51e 	bne	r2,zero,1ce0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    1d0c:	e037883a 	mov	sp,fp
    1d10:	df000017 	ldw	fp,0(sp)
    1d14:	dec00104 	addi	sp,sp,4
    1d18:	f800283a 	ret

00001d1c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    1d1c:	defffb04 	addi	sp,sp,-20
    1d20:	dfc00415 	stw	ra,16(sp)
    1d24:	df000315 	stw	fp,12(sp)
    1d28:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    1d2c:	010000b4 	movhi	r4,2
    1d30:	212b5b04 	addi	r4,r4,-21140
    1d34:	0142d004 	movi	r5,2880
    1d38:	00020800 	call	2080 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    1d3c:	008000b4 	movhi	r2,2
    1d40:	10ab5b04 	addi	r2,r2,-21140
    1d44:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    1d48:	008000b4 	movhi	r2,2
    1d4c:	10ab6704 	addi	r2,r2,-21092
    1d50:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    1d54:	e03fff0d 	sth	zero,-4(fp)
    1d58:	00001306 	br	1da8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1d5c:	e0bffe17 	ldw	r2,-8(fp)
    1d60:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    1d64:	e0fffe17 	ldw	r3,-8(fp)
    1d68:	e0bffd17 	ldw	r2,-12(fp)
    1d6c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    1d70:	e0fffe17 	ldw	r3,-8(fp)
    1d74:	00800fc4 	movi	r2,63
    1d78:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    1d7c:	e0bffe17 	ldw	r2,-8(fp)
    1d80:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    1d84:	e0bffe17 	ldw	r2,-8(fp)
    1d88:	10800c04 	addi	r2,r2,48
    1d8c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	10800c04 	addi	r2,r2,48
    1d98:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    1d9c:	e0bfff0b 	ldhu	r2,-4(fp)
    1da0:	10800044 	addi	r2,r2,1
    1da4:	e0bfff0d 	sth	r2,-4(fp)
    1da8:	e0bfff0b 	ldhu	r2,-4(fp)
    1dac:	10800ef0 	cmpltui	r2,r2,59
    1db0:	103fea1e 	bne	r2,zero,1d5c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    1db4:	e0bffe17 	ldw	r2,-8(fp)
    1db8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    1dbc:	e0bffe17 	ldw	r2,-8(fp)
    1dc0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    1dc4:	e0fffe17 	ldw	r3,-8(fp)
    1dc8:	00800fc4 	movi	r2,63
    1dcc:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    1dd0:	e0bffe17 	ldw	r2,-8(fp)
    1dd4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    1dd8:	008000b4 	movhi	r2,2
    1ddc:	10ab5b04 	addi	r2,r2,-21140
    1de0:	d0a04015 	stw	r2,-32512(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    1de4:	e037883a 	mov	sp,fp
    1de8:	dfc00117 	ldw	ra,4(sp)
    1dec:	df000017 	ldw	fp,0(sp)
    1df0:	dec00204 	addi	sp,sp,8
    1df4:	f800283a 	ret

00001df8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    1df8:	deffff04 	addi	sp,sp,-4
    1dfc:	df000015 	stw	fp,0(sp)
    1e00:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    1e04:	d0204315 	stw	zero,-32500(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    1e08:	d0204105 	stb	zero,-32508(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    1e0c:	d0203305 	stb	zero,-32564(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    1e10:	d0203b45 	stb	zero,-32531(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    1e14:	d0203345 	stb	zero,-32563(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    1e18:	d0203815 	stw	zero,-32544(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    1e1c:	d0203415 	stw	zero,-32560(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    1e20:	d0204615 	stw	zero,-32488(gp)
    OSIdleCtrMax  = 0L;
    1e24:	d0203915 	stw	zero,-32540(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    1e28:	d0204505 	stb	zero,-32492(gp)
#endif
}
    1e2c:	e037883a 	mov	sp,fp
    1e30:	df000017 	ldw	fp,0(sp)
    1e34:	dec00104 	addi	sp,sp,4
    1e38:	f800283a 	ret

00001e3c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    1e3c:	defffd04 	addi	sp,sp,-12
    1e40:	df000215 	stw	fp,8(sp)
    1e44:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    1e48:	d0203f05 	stb	zero,-32516(gp)
    prdytbl       = &OSRdyTbl[0];
    1e4c:	d0a03f44 	addi	r2,gp,-32515
    1e50:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1e54:	e03fff05 	stb	zero,-4(fp)
    1e58:	00000806 	br	1e7c <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
    1e5c:	e0bffe17 	ldw	r2,-8(fp)
    1e60:	10000005 	stb	zero,0(r2)
    1e64:	e0bffe17 	ldw	r2,-8(fp)
    1e68:	10800044 	addi	r2,r2,1
    1e6c:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1e70:	e0bfff03 	ldbu	r2,-4(fp)
    1e74:	10800044 	addi	r2,r2,1
    1e78:	e0bfff05 	stb	r2,-4(fp)
    1e7c:	e0bfff03 	ldbu	r2,-4(fp)
    1e80:	108000f0 	cmpltui	r2,r2,3
    1e84:	103ff51e 	bne	r2,zero,1e5c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    1e88:	d0203545 	stb	zero,-32555(gp)
    OSPrioHighRdy = 0;
    1e8c:	d0203505 	stb	zero,-32556(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    1e90:	d0203d15 	stw	zero,-32524(gp)
    OSTCBCur      = (OS_TCB *)0;
    1e94:	d0204215 	stw	zero,-32504(gp)
}
    1e98:	e037883a 	mov	sp,fp
    1e9c:	df000017 	ldw	fp,0(sp)
    1ea0:	dec00104 	addi	sp,sp,4
    1ea4:	f800283a 	ret

00001ea8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    1ea8:	defff804 	addi	sp,sp,-32
    1eac:	dfc00715 	stw	ra,28(sp)
    1eb0:	df000615 	stw	fp,24(sp)
    1eb4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    1eb8:	018000b4 	movhi	r6,2
    1ebc:	31ab5a04 	addi	r6,r6,-21144
    1ec0:	00bfffd4 	movui	r2,65535
    1ec4:	d8800015 	stw	r2,0(sp)
    1ec8:	008000b4 	movhi	r2,2
    1ecc:	10a95b04 	addi	r2,r2,-23188
    1ed0:	d8800115 	stw	r2,4(sp)
    1ed4:	00808004 	movi	r2,512
    1ed8:	d8800215 	stw	r2,8(sp)
    1edc:	d8000315 	stw	zero,12(sp)
    1ee0:	008000c4 	movi	r2,3
    1ee4:	d8800415 	stw	r2,16(sp)
    1ee8:	01000034 	movhi	r4,0
    1eec:	2108d704 	addi	r4,r4,9052
    1ef0:	000b883a 	mov	r5,zero
    1ef4:	01c00504 	movi	r7,20
    1ef8:	00071400 	call	7140 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    1efc:	01400074 	movhi	r5,1
    1f00:	297b7a04 	addi	r5,r5,-4632
    1f04:	01000504 	movi	r4,20
    1f08:	e1bfff04 	addi	r6,fp,-4
    1f0c:	0007a740 	call	7a74 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    1f10:	e037883a 	mov	sp,fp
    1f14:	dfc00117 	ldw	ra,4(sp)
    1f18:	df000017 	ldw	fp,0(sp)
    1f1c:	dec00204 	addi	sp,sp,8
    1f20:	f800283a 	ret

00001f24 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    1f24:	defff804 	addi	sp,sp,-32
    1f28:	dfc00715 	stw	ra,28(sp)
    1f2c:	df000615 	stw	fp,24(sp)
    1f30:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    1f34:	018000b4 	movhi	r6,2
    1f38:	31a8e204 	addi	r6,r6,-23672
    1f3c:	00bfff94 	movui	r2,65534
    1f40:	d8800015 	stw	r2,0(sp)
    1f44:	008000b4 	movhi	r2,2
    1f48:	10a6e304 	addi	r2,r2,-25716
    1f4c:	d8800115 	stw	r2,4(sp)
    1f50:	00808004 	movi	r2,512
    1f54:	d8800215 	stw	r2,8(sp)
    1f58:	d8000315 	stw	zero,12(sp)
    1f5c:	008000c4 	movi	r2,3
    1f60:	d8800415 	stw	r2,16(sp)
    1f64:	01000034 	movhi	r4,0
    1f68:	2108ee04 	addi	r4,r4,9144
    1f6c:	000b883a 	mov	r5,zero
    1f70:	01c004c4 	movi	r7,19
    1f74:	00071400 	call	7140 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    1f78:	01400074 	movhi	r5,1
    1f7c:	297b7e04 	addi	r5,r5,-4616
    1f80:	010004c4 	movi	r4,19
    1f84:	e1bfff04 	addi	r6,fp,-4
    1f88:	0007a740 	call	7a74 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    1f8c:	e037883a 	mov	sp,fp
    1f90:	dfc00117 	ldw	ra,4(sp)
    1f94:	df000017 	ldw	fp,0(sp)
    1f98:	dec00204 	addi	sp,sp,8
    1f9c:	f800283a 	ret

00001fa0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    1fa0:	defffb04 	addi	sp,sp,-20
    1fa4:	dfc00415 	stw	ra,16(sp)
    1fa8:	df000315 	stw	fp,12(sp)
    1fac:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    1fb0:	010000b4 	movhi	r4,2
    1fb4:	212e2b04 	addi	r4,r4,-18260
    1fb8:	01414404 	movi	r5,1296
    1fbc:	00020800 	call	2080 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    1fc0:	010000b4 	movhi	r4,2
    1fc4:	212f6f04 	addi	r4,r4,-16964
    1fc8:	01401504 	movi	r5,84
    1fcc:	00020800 	call	2080 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    1fd0:	008000b4 	movhi	r2,2
    1fd4:	10ae2b04 	addi	r2,r2,-18260
    1fd8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    1fdc:	008000b4 	movhi	r2,2
    1fe0:	10ae4604 	addi	r2,r2,-18152
    1fe4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    1fe8:	e03fff05 	stb	zero,-4(fp)
    1fec:	00001106 	br	2034 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    1ff0:	e0fffe17 	ldw	r3,-8(fp)
    1ff4:	e0bffd17 	ldw	r2,-12(fp)
    1ff8:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    1ffc:	e0fffe17 	ldw	r3,-8(fp)
    2000:	00800fc4 	movi	r2,63
    2004:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    2008:	e0bffe17 	ldw	r2,-8(fp)
    200c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    2010:	e0bffe17 	ldw	r2,-8(fp)
    2014:	10801b04 	addi	r2,r2,108
    2018:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    201c:	e0bffd17 	ldw	r2,-12(fp)
    2020:	10801b04 	addi	r2,r2,108
    2024:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    2028:	e0bfff03 	ldbu	r2,-4(fp)
    202c:	10800044 	addi	r2,r2,1
    2030:	e0bfff05 	stb	r2,-4(fp)
    2034:	e0bfff03 	ldbu	r2,-4(fp)
    2038:	108002f0 	cmpltui	r2,r2,11
    203c:	103fec1e 	bne	r2,zero,1ff0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    2040:	e0bffe17 	ldw	r2,-8(fp)
    2044:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    2048:	e0fffe17 	ldw	r3,-8(fp)
    204c:	00800fc4 	movi	r2,63
    2050:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    2054:	e0bffe17 	ldw	r2,-8(fp)
    2058:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    205c:	d0203615 	stw	zero,-32552(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    2060:	008000b4 	movhi	r2,2
    2064:	10ae2b04 	addi	r2,r2,-18260
    2068:	d0a03a15 	stw	r2,-32536(gp)
}
    206c:	e037883a 	mov	sp,fp
    2070:	dfc00117 	ldw	ra,4(sp)
    2074:	df000017 	ldw	fp,0(sp)
    2078:	dec00204 	addi	sp,sp,8
    207c:	f800283a 	ret

00002080 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    2080:	defffd04 	addi	sp,sp,-12
    2084:	df000215 	stw	fp,8(sp)
    2088:	df000204 	addi	fp,sp,8
    208c:	e13ffe15 	stw	r4,-8(fp)
    2090:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
    2094:	00000806 	br	20b8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    2098:	e0bffe17 	ldw	r2,-8(fp)
    209c:	10000005 	stb	zero,0(r2)
    20a0:	e0bffe17 	ldw	r2,-8(fp)
    20a4:	10800044 	addi	r2,r2,1
    20a8:	e0bffe15 	stw	r2,-8(fp)
        size--;
    20ac:	e0bfff0b 	ldhu	r2,-4(fp)
    20b0:	10bfffc4 	addi	r2,r2,-1
    20b4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    20b8:	e0bfff0b 	ldhu	r2,-4(fp)
    20bc:	1004c03a 	cmpne	r2,r2,zero
    20c0:	103ff51e 	bne	r2,zero,2098 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    20c4:	e037883a 	mov	sp,fp
    20c8:	df000017 	ldw	fp,0(sp)
    20cc:	dec00104 	addi	sp,sp,4
    20d0:	f800283a 	ret

000020d4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    20d4:	defffc04 	addi	sp,sp,-16
    20d8:	df000315 	stw	fp,12(sp)
    20dc:	df000304 	addi	fp,sp,12
    20e0:	e13ffd15 	stw	r4,-12(fp)
    20e4:	e17ffe15 	stw	r5,-8(fp)
    20e8:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
    20ec:	00000d06 	br	2124 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
    20f0:	e0bffe17 	ldw	r2,-8(fp)
    20f4:	10c00003 	ldbu	r3,0(r2)
    20f8:	e0bffd17 	ldw	r2,-12(fp)
    20fc:	10c00005 	stb	r3,0(r2)
    2100:	e0bffd17 	ldw	r2,-12(fp)
    2104:	10800044 	addi	r2,r2,1
    2108:	e0bffd15 	stw	r2,-12(fp)
    210c:	e0bffe17 	ldw	r2,-8(fp)
    2110:	10800044 	addi	r2,r2,1
    2114:	e0bffe15 	stw	r2,-8(fp)
        size--;
    2118:	e0bfff0b 	ldhu	r2,-4(fp)
    211c:	10bfffc4 	addi	r2,r2,-1
    2120:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    2124:	e0bfff0b 	ldhu	r2,-4(fp)
    2128:	1004c03a 	cmpne	r2,r2,zero
    212c:	103ff01e 	bne	r2,zero,20f0 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
    2130:	e037883a 	mov	sp,fp
    2134:	df000017 	ldw	fp,0(sp)
    2138:	dec00104 	addi	sp,sp,4
    213c:	f800283a 	ret

00002140 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    2140:	defffb04 	addi	sp,sp,-20
    2144:	dfc00415 	stw	ra,16(sp)
    2148:	df000315 	stw	fp,12(sp)
    214c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    2150:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2154:	0005303a 	rdctl	r2,status
    2158:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    215c:	e0fffe17 	ldw	r3,-8(fp)
    2160:	00bfff84 	movi	r2,-2
    2164:	1884703a 	and	r2,r3,r2
    2168:	1001703a 	wrctl	status,r2
  
  return context;
    216c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    2170:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    2174:	d0a04103 	ldbu	r2,-32508(gp)
    2178:	10803fcc 	andi	r2,r2,255
    217c:	1004c03a 	cmpne	r2,r2,zero
    2180:	10001b1e 	bne	r2,zero,21f0 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    2184:	d0a03303 	ldbu	r2,-32564(gp)
    2188:	10803fcc 	andi	r2,r2,255
    218c:	1004c03a 	cmpne	r2,r2,zero
    2190:	1000171e 	bne	r2,zero,21f0 <OS_Sched+0xb0>
            OS_SchedNew();
    2194:	00022140 	call	2214 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    2198:	d0a03503 	ldbu	r2,-32556(gp)
    219c:	d0e03543 	ldbu	r3,-32555(gp)
    21a0:	11003fcc 	andi	r4,r2,255
    21a4:	18803fcc 	andi	r2,r3,255
    21a8:	20801126 	beq	r4,r2,21f0 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    21ac:	d0a03503 	ldbu	r2,-32556(gp)
    21b0:	10803fcc 	andi	r2,r2,255
    21b4:	00c000b4 	movhi	r3,2
    21b8:	18ef6f04 	addi	r3,r3,-16964
    21bc:	1085883a 	add	r2,r2,r2
    21c0:	1085883a 	add	r2,r2,r2
    21c4:	10c5883a 	add	r2,r2,r3
    21c8:	10800017 	ldw	r2,0(r2)
    21cc:	d0a03d15 	stw	r2,-32524(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    21d0:	d0e03d17 	ldw	r3,-32524(gp)
    21d4:	18800e17 	ldw	r2,56(r3)
    21d8:	10800044 	addi	r2,r2,1
    21dc:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    21e0:	d0a03817 	ldw	r2,-32544(gp)
    21e4:	10800044 	addi	r2,r2,1
    21e8:	d0a03815 	stw	r2,-32544(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    21ec:	000c6440 	call	c644 <OSCtxSw>
    21f0:	e0bfff17 	ldw	r2,-4(fp)
    21f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    21f8:	e0bffd17 	ldw	r2,-12(fp)
    21fc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    2200:	e037883a 	mov	sp,fp
    2204:	dfc00117 	ldw	ra,4(sp)
    2208:	df000017 	ldw	fp,0(sp)
    220c:	dec00204 	addi	sp,sp,8
    2210:	f800283a 	ret

00002214 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    2214:	defffe04 	addi	sp,sp,-8
    2218:	df000115 	stw	fp,4(sp)
    221c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    2220:	d0a03f03 	ldbu	r2,-32516(gp)
    2224:	10c03fcc 	andi	r3,r2,255
    2228:	00800074 	movhi	r2,1
    222c:	10bb3a04 	addi	r2,r2,-4888
    2230:	10c5883a 	add	r2,r2,r3
    2234:	10800003 	ldbu	r2,0(r2)
    2238:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    223c:	e0bfff03 	ldbu	r2,-4(fp)
    2240:	100490fa 	slli	r2,r2,3
    2244:	1009883a 	mov	r4,r2
    2248:	e0ffff03 	ldbu	r3,-4(fp)
    224c:	d0a03f44 	addi	r2,gp,-32515
    2250:	1885883a 	add	r2,r3,r2
    2254:	10800003 	ldbu	r2,0(r2)
    2258:	10c03fcc 	andi	r3,r2,255
    225c:	00800074 	movhi	r2,1
    2260:	10bb3a04 	addi	r2,r2,-4888
    2264:	10c5883a 	add	r2,r2,r3
    2268:	10800003 	ldbu	r2,0(r2)
    226c:	2085883a 	add	r2,r4,r2
    2270:	d0a03505 	stb	r2,-32556(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    2274:	e037883a 	mov	sp,fp
    2278:	df000017 	ldw	fp,0(sp)
    227c:	dec00104 	addi	sp,sp,4
    2280:	f800283a 	ret

00002284 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    2284:	defffc04 	addi	sp,sp,-16
    2288:	df000315 	stw	fp,12(sp)
    228c:	df000304 	addi	fp,sp,12
    2290:	e13ffe15 	stw	r4,-8(fp)
    2294:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    2298:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    229c:	00000d06 	br	22d4 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
    22a0:	e0bfff17 	ldw	r2,-4(fp)
    22a4:	10c00003 	ldbu	r3,0(r2)
    22a8:	e0bffe17 	ldw	r2,-8(fp)
    22ac:	10c00005 	stb	r3,0(r2)
    22b0:	e0bffe17 	ldw	r2,-8(fp)
    22b4:	10800044 	addi	r2,r2,1
    22b8:	e0bffe15 	stw	r2,-8(fp)
    22bc:	e0bfff17 	ldw	r2,-4(fp)
    22c0:	10800044 	addi	r2,r2,1
    22c4:	e0bfff15 	stw	r2,-4(fp)
        len++;
    22c8:	e0bffd03 	ldbu	r2,-12(fp)
    22cc:	10800044 	addi	r2,r2,1
    22d0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    22d4:	e0bfff17 	ldw	r2,-4(fp)
    22d8:	10800003 	ldbu	r2,0(r2)
    22dc:	10803fcc 	andi	r2,r2,255
    22e0:	1004c03a 	cmpne	r2,r2,zero
    22e4:	103fee1e 	bne	r2,zero,22a0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    22e8:	e0bffe17 	ldw	r2,-8(fp)
    22ec:	10000005 	stb	zero,0(r2)
    return (len);
    22f0:	e0bffd03 	ldbu	r2,-12(fp)
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	df000017 	ldw	fp,0(sp)
    22fc:	dec00104 	addi	sp,sp,4
    2300:	f800283a 	ret

00002304 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    2304:	defffd04 	addi	sp,sp,-12
    2308:	df000215 	stw	fp,8(sp)
    230c:	df000204 	addi	fp,sp,8
    2310:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    2314:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    2318:	00000606 	br	2334 <OS_StrLen+0x30>
        psrc++;
    231c:	e0bfff17 	ldw	r2,-4(fp)
    2320:	10800044 	addi	r2,r2,1
    2324:	e0bfff15 	stw	r2,-4(fp)
        len++;
    2328:	e0bffe03 	ldbu	r2,-8(fp)
    232c:	10800044 	addi	r2,r2,1
    2330:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    2334:	e0bfff17 	ldw	r2,-4(fp)
    2338:	10800003 	ldbu	r2,0(r2)
    233c:	10803fcc 	andi	r2,r2,255
    2340:	1004c03a 	cmpne	r2,r2,zero
    2344:	103ff51e 	bne	r2,zero,231c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    2348:	e0bffe03 	ldbu	r2,-8(fp)
}
    234c:	e037883a 	mov	sp,fp
    2350:	df000017 	ldw	fp,0(sp)
    2354:	dec00104 	addi	sp,sp,4
    2358:	f800283a 	ret

0000235c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    235c:	defffa04 	addi	sp,sp,-24
    2360:	dfc00515 	stw	ra,20(sp)
    2364:	df000415 	stw	fp,16(sp)
    2368:	df000404 	addi	fp,sp,16
    236c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2370:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2374:	0005303a 	rdctl	r2,status
    2378:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    237c:	e0fffd17 	ldw	r3,-12(fp)
    2380:	00bfff84 	movi	r2,-2
    2384:	1884703a 	and	r2,r3,r2
    2388:	1001703a 	wrctl	status,r2
  
  return context;
    238c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    2390:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
    2394:	d0a03417 	ldw	r2,-32560(gp)
    2398:	10800044 	addi	r2,r2,1
    239c:	d0a03415 	stw	r2,-32560(gp)
    23a0:	e0bffe17 	ldw	r2,-8(fp)
    23a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    23a8:	e0bffc17 	ldw	r2,-16(fp)
    23ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    23b0:	000caf00 	call	caf0 <OSTaskIdleHook>
    }
    23b4:	003fef06 	br	2374 <OS_TaskIdle+0x18>

000023b8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    23b8:	defffa04 	addi	sp,sp,-24
    23bc:	dfc00515 	stw	ra,20(sp)
    23c0:	df000415 	stw	fp,16(sp)
    23c4:	df000404 	addi	fp,sp,16
    23c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    23cc:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    23d0:	00000206 	br	23dc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    23d4:	01003204 	movi	r4,200
    23d8:	00084380 	call	8438 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    23dc:	d0a04503 	ldbu	r2,-32492(gp)
    23e0:	10803fcc 	andi	r2,r2,255
    23e4:	1005003a 	cmpeq	r2,r2,zero
    23e8:	103ffa1e 	bne	r2,zero,23d4 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    23ec:	d1203917 	ldw	r4,-32540(gp)
    23f0:	01401904 	movi	r5,100
    23f4:	000e5640 	call	e564 <__udivsi3>
    23f8:	d0a03915 	stw	r2,-32540(gp)
    if (OSIdleCtrMax == 0L) {
    23fc:	d0a03917 	ldw	r2,-32540(gp)
    2400:	1004c03a 	cmpne	r2,r2,zero
    2404:	1000031e 	bne	r2,zero,2414 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
    2408:	d0203b05 	stb	zero,-32532(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    240c:	01003fc4 	movi	r4,255
    2410:	000804c0 	call	804c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2414:	0005303a 	rdctl	r2,status
    2418:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    241c:	e0fffd17 	ldw	r3,-12(fp)
    2420:	00bfff84 	movi	r2,-2
    2424:	1884703a 	and	r2,r3,r2
    2428:	1001703a 	wrctl	status,r2
  
  return context;
    242c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    2430:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    2434:	d0a03417 	ldw	r2,-32560(gp)
    2438:	d0a04615 	stw	r2,-32488(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    243c:	d0203415 	stw	zero,-32560(gp)
    2440:	e0bffe17 	ldw	r2,-8(fp)
    2444:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2448:	e0bffc17 	ldw	r2,-16(fp)
    244c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    2450:	d1204617 	ldw	r4,-32488(gp)
    2454:	d1603917 	ldw	r5,-32540(gp)
    2458:	000e5640 	call	e564 <__udivsi3>
    245c:	1007883a 	mov	r3,r2
    2460:	00801904 	movi	r2,100
    2464:	10c5c83a 	sub	r2,r2,r3
    2468:	d0a03b05 	stb	r2,-32532(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    246c:	000ca800 	call	ca80 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    2470:	00024800 	call	2480 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    2474:	01001904 	movi	r4,100
    2478:	00084380 	call	8438 <OSTimeDly>
    }
    247c:	003fe506 	br	2414 <OS_TaskStat+0x5c>

00002480 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    2480:	defffa04 	addi	sp,sp,-24
    2484:	dfc00515 	stw	ra,20(sp)
    2488:	df000415 	stw	fp,16(sp)
    248c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    2490:	e03ffc05 	stb	zero,-16(fp)
    2494:	00002406 	br	2528 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    2498:	e13ffc03 	ldbu	r4,-16(fp)
    249c:	e17ffe04 	addi	r5,fp,-8
    24a0:	0007e500 	call	7e50 <OSTaskStkChk>
    24a4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    24a8:	e0bffc43 	ldbu	r2,-15(fp)
    24ac:	1004c03a 	cmpne	r2,r2,zero
    24b0:	10001a1e 	bne	r2,zero,251c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    24b4:	e0bffc03 	ldbu	r2,-16(fp)
    24b8:	00c000b4 	movhi	r3,2
    24bc:	18ef6f04 	addi	r3,r3,-16964
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	1085883a 	add	r2,r2,r2
    24c8:	10c5883a 	add	r2,r2,r3
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    24d4:	e0bffd17 	ldw	r2,-12(fp)
    24d8:	1005003a 	cmpeq	r2,r2,zero
    24dc:	10000f1e 	bne	r2,zero,251c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    24e0:	e0bffd17 	ldw	r2,-12(fp)
    24e4:	10800060 	cmpeqi	r2,r2,1
    24e8:	10000c1e 	bne	r2,zero,251c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    24ec:	e0bffd17 	ldw	r2,-12(fp)
    24f0:	10c00217 	ldw	r3,8(r2)
    24f4:	e0bffd17 	ldw	r2,-12(fp)
    24f8:	10800317 	ldw	r2,12(r2)
    24fc:	1085883a 	add	r2,r2,r2
    2500:	1085883a 	add	r2,r2,r2
    2504:	1887883a 	add	r3,r3,r2
    2508:	e0bffd17 	ldw	r2,-12(fp)
    250c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    2510:	e0ffff17 	ldw	r3,-4(fp)
    2514:	e0bffd17 	ldw	r2,-12(fp)
    2518:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    251c:	e0bffc03 	ldbu	r2,-16(fp)
    2520:	10800044 	addi	r2,r2,1
    2524:	e0bffc05 	stb	r2,-16(fp)
    2528:	e0bffc03 	ldbu	r2,-16(fp)
    252c:	10800570 	cmpltui	r2,r2,21
    2530:	103fd91e 	bne	r2,zero,2498 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    2534:	e037883a 	mov	sp,fp
    2538:	dfc00117 	ldw	ra,4(sp)
    253c:	df000017 	ldw	fp,0(sp)
    2540:	dec00204 	addi	sp,sp,8
    2544:	f800283a 	ret

00002548 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    2548:	defff104 	addi	sp,sp,-60
    254c:	dfc00e15 	stw	ra,56(sp)
    2550:	df000d15 	stw	fp,52(sp)
    2554:	df000d04 	addi	fp,sp,52
    2558:	e17ffb15 	stw	r5,-20(fp)
    255c:	e1bffc15 	stw	r6,-16(fp)
    2560:	e0800417 	ldw	r2,16(fp)
    2564:	e13ffa05 	stb	r4,-24(fp)
    2568:	e1fffd0d 	sth	r7,-12(fp)
    256c:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    2570:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2574:	0005303a 	rdctl	r2,status
    2578:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    257c:	e0fff717 	ldw	r3,-36(fp)
    2580:	00bfff84 	movi	r2,-2
    2584:	1884703a 	and	r2,r3,r2
    2588:	1001703a 	wrctl	status,r2
  
  return context;
    258c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
    2590:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    2594:	d0a03a17 	ldw	r2,-32536(gp)
    2598:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
    259c:	e0bff917 	ldw	r2,-28(fp)
    25a0:	1005003a 	cmpeq	r2,r2,zero
    25a4:	1000941e 	bne	r2,zero,27f8 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    25a8:	e0bff917 	ldw	r2,-28(fp)
    25ac:	10800517 	ldw	r2,20(r2)
    25b0:	d0a03a15 	stw	r2,-32536(gp)
    25b4:	e0bff817 	ldw	r2,-32(fp)
    25b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    25bc:	e0bff617 	ldw	r2,-40(fp)
    25c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    25c4:	e0fff917 	ldw	r3,-28(fp)
    25c8:	e0bffb17 	ldw	r2,-20(fp)
    25cc:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    25d0:	e0fff917 	ldw	r3,-28(fp)
    25d4:	e0bffa03 	ldbu	r2,-24(fp)
    25d8:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    25dc:	e0bff917 	ldw	r2,-28(fp)
    25e0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    25e4:	e0bff917 	ldw	r2,-28(fp)
    25e8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    25ec:	e0bff917 	ldw	r2,-28(fp)
    25f0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    25f4:	e0fff917 	ldw	r3,-28(fp)
    25f8:	e0800317 	ldw	r2,12(fp)
    25fc:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    2600:	e0fff917 	ldw	r3,-28(fp)
    2604:	e0800217 	ldw	r2,8(fp)
    2608:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    260c:	e0fff917 	ldw	r3,-28(fp)
    2610:	e0bffc17 	ldw	r2,-16(fp)
    2614:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    2618:	e0fff917 	ldw	r3,-28(fp)
    261c:	e0bffe0b 	ldhu	r2,-8(fp)
    2620:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    2624:	e0fff917 	ldw	r3,-28(fp)
    2628:	e0bffd0b 	ldhu	r2,-12(fp)
    262c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    2630:	e0bff917 	ldw	r2,-28(fp)
    2634:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    2638:	e0bffa03 	ldbu	r2,-24(fp)
    263c:	1004d0fa 	srli	r2,r2,3
    2640:	1007883a 	mov	r3,r2
    2644:	e0bff917 	ldw	r2,-28(fp)
    2648:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    264c:	e0bffa03 	ldbu	r2,-24(fp)
    2650:	108001cc 	andi	r2,r2,7
    2654:	1007883a 	mov	r3,r2
    2658:	e0bff917 	ldw	r2,-28(fp)
    265c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    2660:	e0bff917 	ldw	r2,-28(fp)
    2664:	10800d03 	ldbu	r2,52(r2)
    2668:	10c03fcc 	andi	r3,r2,255
    266c:	00800044 	movi	r2,1
    2670:	10c4983a 	sll	r2,r2,r3
    2674:	1007883a 	mov	r3,r2
    2678:	e0bff917 	ldw	r2,-28(fp)
    267c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    2680:	e0bff917 	ldw	r2,-28(fp)
    2684:	10800cc3 	ldbu	r2,51(r2)
    2688:	10c03fcc 	andi	r3,r2,255
    268c:	00800044 	movi	r2,1
    2690:	10c4983a 	sll	r2,r2,r3
    2694:	1007883a 	mov	r3,r2
    2698:	e0bff917 	ldw	r2,-28(fp)
    269c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    26a0:	e0bff917 	ldw	r2,-28(fp)
    26a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    26a8:	e0bff917 	ldw	r2,-28(fp)
    26ac:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    26b0:	e0bff917 	ldw	r2,-28(fp)
    26b4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    26b8:	e0bff917 	ldw	r2,-28(fp)
    26bc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    26c0:	e0bff917 	ldw	r2,-28(fp)
    26c4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    26c8:	e0bff917 	ldw	r2,-28(fp)
    26cc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    26d0:	e0bff917 	ldw	r2,-28(fp)
    26d4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    26d8:	e0bff917 	ldw	r2,-28(fp)
    26dc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    26e0:	e0bff917 	ldw	r2,-28(fp)
    26e4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    26e8:	e0fff917 	ldw	r3,-28(fp)
    26ec:	00800fc4 	movi	r2,63
    26f0:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    26f4:	e0bff917 	ldw	r2,-28(fp)
    26f8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    26fc:	e13ff917 	ldw	r4,-28(fp)
    2700:	000cb0c0 	call	cb0c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    2704:	e13ff917 	ldw	r4,-28(fp)
    2708:	000ca240 	call	ca24 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    270c:	0005303a 	rdctl	r2,status
    2710:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2714:	e0fff517 	ldw	r3,-44(fp)
    2718:	00bfff84 	movi	r2,-2
    271c:	1884703a 	and	r2,r3,r2
    2720:	1001703a 	wrctl	status,r2
  
  return context;
    2724:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    2728:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
    272c:	e0bffa03 	ldbu	r2,-24(fp)
    2730:	00c000b4 	movhi	r3,2
    2734:	18ef6f04 	addi	r3,r3,-16964
    2738:	1085883a 	add	r2,r2,r2
    273c:	1085883a 	add	r2,r2,r2
    2740:	10c7883a 	add	r3,r2,r3
    2744:	e0bff917 	ldw	r2,-28(fp)
    2748:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    274c:	d0e03617 	ldw	r3,-32552(gp)
    2750:	e0bff917 	ldw	r2,-28(fp)
    2754:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    2758:	e0bff917 	ldw	r2,-28(fp)
    275c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    2760:	d0a03617 	ldw	r2,-32552(gp)
    2764:	1005003a 	cmpeq	r2,r2,zero
    2768:	1000031e 	bne	r2,zero,2778 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
    276c:	d0e03617 	ldw	r3,-32552(gp)
    2770:	e0bff917 	ldw	r2,-28(fp)
    2774:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
    2778:	e0bff917 	ldw	r2,-28(fp)
    277c:	d0a03615 	stw	r2,-32552(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    2780:	e0bff917 	ldw	r2,-28(fp)
    2784:	10c00d83 	ldbu	r3,54(r2)
    2788:	d0a03f03 	ldbu	r2,-32516(gp)
    278c:	1884b03a 	or	r2,r3,r2
    2790:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2794:	e0bff917 	ldw	r2,-28(fp)
    2798:	10800d03 	ldbu	r2,52(r2)
    279c:	11003fcc 	andi	r4,r2,255
    27a0:	e0bff917 	ldw	r2,-28(fp)
    27a4:	10800d03 	ldbu	r2,52(r2)
    27a8:	10c03fcc 	andi	r3,r2,255
    27ac:	d0a03f44 	addi	r2,gp,-32515
    27b0:	1885883a 	add	r2,r3,r2
    27b4:	10c00003 	ldbu	r3,0(r2)
    27b8:	e0bff917 	ldw	r2,-28(fp)
    27bc:	10800d43 	ldbu	r2,53(r2)
    27c0:	1884b03a 	or	r2,r3,r2
    27c4:	1007883a 	mov	r3,r2
    27c8:	d0a03f44 	addi	r2,gp,-32515
    27cc:	2085883a 	add	r2,r4,r2
    27d0:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    27d4:	d0a03b43 	ldbu	r2,-32531(gp)
    27d8:	10800044 	addi	r2,r2,1
    27dc:	d0a03b45 	stb	r2,-32531(gp)
    27e0:	e0bff817 	ldw	r2,-32(fp)
    27e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    27e8:	e0bff417 	ldw	r2,-48(fp)
    27ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    27f0:	e03fff15 	stw	zero,-4(fp)
    27f4:	00000606 	br	2810 <OS_TCBInit+0x2c8>
    27f8:	e0bff817 	ldw	r2,-32(fp)
    27fc:	e0bff315 	stw	r2,-52(fp)
    2800:	e0bff317 	ldw	r2,-52(fp)
    2804:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    2808:	00801084 	movi	r2,66
    280c:	e0bfff15 	stw	r2,-4(fp)
    2810:	e0bfff17 	ldw	r2,-4(fp)
}
    2814:	e037883a 	mov	sp,fp
    2818:	dfc00117 	ldw	ra,4(sp)
    281c:	df000017 	ldw	fp,0(sp)
    2820:	dec00204 	addi	sp,sp,8
    2824:	f800283a 	ret

00002828 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    2828:	defffe04 	addi	sp,sp,-8
    282c:	df000115 	stw	fp,4(sp)
    2830:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    2834:	d0a00204 	addi	r2,gp,-32760
    2838:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    283c:	d0a00304 	addi	r2,gp,-32756
    2840:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    2844:	d0a00484 	addi	r2,gp,-32750
    2848:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    284c:	d0a00504 	addi	r2,gp,-32748
    2850:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    2854:	d0a00404 	addi	r2,gp,-32752
    2858:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    285c:	d0a00584 	addi	r2,gp,-32746
    2860:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    2864:	d0a00604 	addi	r2,gp,-32744
    2868:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    286c:	d0a00684 	addi	r2,gp,-32742
    2870:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    2874:	d0a00704 	addi	r2,gp,-32740
    2878:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    287c:	d0a00784 	addi	r2,gp,-32738
    2880:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    2884:	d0a00804 	addi	r2,gp,-32736
    2888:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    288c:	d0a00884 	addi	r2,gp,-32734
    2890:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    2894:	d0a00904 	addi	r2,gp,-32732
    2898:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    289c:	d0a00984 	addi	r2,gp,-32730
    28a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    28a4:	d0a00a04 	addi	r2,gp,-32728
    28a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    28ac:	d0a00a84 	addi	r2,gp,-32726
    28b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    28b4:	d0a00b04 	addi	r2,gp,-32724
    28b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    28bc:	d0a00b84 	addi	r2,gp,-32722
    28c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    28c4:	d0a00c04 	addi	r2,gp,-32720
    28c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    28cc:	d0a00c84 	addi	r2,gp,-32718
    28d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    28d4:	d0a00d04 	addi	r2,gp,-32716
    28d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    28dc:	d0a00d84 	addi	r2,gp,-32714
    28e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    28e4:	d0a00e04 	addi	r2,gp,-32712
    28e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    28ec:	d0a00e84 	addi	r2,gp,-32710
    28f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    28f4:	d0a00f04 	addi	r2,gp,-32708
    28f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    28fc:	d0a00f84 	addi	r2,gp,-32706
    2900:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    2904:	d0a01004 	addi	r2,gp,-32704
    2908:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    290c:	d0a01084 	addi	r2,gp,-32702
    2910:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    2914:	d0a01104 	addi	r2,gp,-32700
    2918:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    291c:	d0a01184 	addi	r2,gp,-32698
    2920:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    2924:	d0a01204 	addi	r2,gp,-32696
    2928:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    292c:	d0a01284 	addi	r2,gp,-32694
    2930:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    2934:	d0a01304 	addi	r2,gp,-32692
    2938:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    293c:	d0a01384 	addi	r2,gp,-32690
    2940:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    2944:	d0a01404 	addi	r2,gp,-32688
    2948:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    294c:	d0a01484 	addi	r2,gp,-32686
    2950:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    2954:	d0a01504 	addi	r2,gp,-32684
    2958:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    295c:	d0a01584 	addi	r2,gp,-32682
    2960:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    2964:	d0a01604 	addi	r2,gp,-32680
    2968:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    296c:	d0a01684 	addi	r2,gp,-32678
    2970:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    2974:	d0a01704 	addi	r2,gp,-32676
    2978:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    297c:	d0a01784 	addi	r2,gp,-32674
    2980:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    2984:	d0a01804 	addi	r2,gp,-32672
    2988:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    298c:	d0a01884 	addi	r2,gp,-32670
    2990:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    2994:	d0a01904 	addi	r2,gp,-32668
    2998:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    299c:	d0a01e04 	addi	r2,gp,-32648
    29a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    29a4:	e037883a 	mov	sp,fp
    29a8:	df000017 	ldw	fp,0(sp)
    29ac:	dec00104 	addi	sp,sp,4
    29b0:	f800283a 	ret

000029b4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    29b4:	defff104 	addi	sp,sp,-60
    29b8:	df000e15 	stw	fp,56(sp)
    29bc:	df000e04 	addi	fp,sp,56
    29c0:	e13ffa15 	stw	r4,-24(fp)
    29c4:	e1fffd15 	stw	r7,-12(fp)
    29c8:	e17ffb0d 	sth	r5,-20(fp)
    29cc:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    29d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    29d4:	e0bffd17 	ldw	r2,-12(fp)
    29d8:	1004c03a 	cmpne	r2,r2,zero
    29dc:	1000021e 	bne	r2,zero,29e8 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
    29e0:	e03fff15 	stw	zero,-4(fp)
    29e4:	0000bb06 	br	2cd4 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    29e8:	e0bffa17 	ldw	r2,-24(fp)
    29ec:	1004c03a 	cmpne	r2,r2,zero
    29f0:	1000051e 	bne	r2,zero,2a08 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    29f4:	e0fffd17 	ldw	r3,-12(fp)
    29f8:	00801b84 	movi	r2,110
    29fc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    2a00:	e03fff15 	stw	zero,-4(fp)
    2a04:	0000b306 	br	2cd4 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    2a08:	e0bffa17 	ldw	r2,-24(fp)
    2a0c:	10800003 	ldbu	r2,0(r2)
    2a10:	10803fcc 	andi	r2,r2,255
    2a14:	10800160 	cmpeqi	r2,r2,5
    2a18:	1000051e 	bne	r2,zero,2a30 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    2a1c:	e0fffd17 	ldw	r3,-12(fp)
    2a20:	00800044 	movi	r2,1
    2a24:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    2a28:	e03fff15 	stw	zero,-4(fp)
    2a2c:	0000a906 	br	2cd4 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    2a30:	e0fffc03 	ldbu	r3,-16(fp)
    2a34:	00bfe004 	movi	r2,-128
    2a38:	1884703a 	and	r2,r3,r2
    2a3c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    2a40:	e0bff943 	ldbu	r2,-27(fp)
    2a44:	1005003a 	cmpeq	r2,r2,zero
    2a48:	1000061e 	bne	r2,zero,2a64 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
    2a4c:	e0bffc03 	ldbu	r2,-16(fp)
    2a50:	10801fcc 	andi	r2,r2,127
    2a54:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
    2a58:	00800044 	movi	r2,1
    2a5c:	e0bff905 	stb	r2,-28(fp)
    2a60:	00000106 	br	2a68 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
    2a64:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    2a68:	e0bffd17 	ldw	r2,-12(fp)
    2a6c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a70:	0005303a 	rdctl	r2,status
    2a74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a78:	e0fff717 	ldw	r3,-36(fp)
    2a7c:	00bfff84 	movi	r2,-2
    2a80:	1884703a 	and	r2,r3,r2
    2a84:	1001703a 	wrctl	status,r2
  
  return context;
    2a88:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    2a8c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
    2a90:	e0bffc03 	ldbu	r2,-16(fp)
    2a94:	e0bffe15 	stw	r2,-8(fp)
    2a98:	e0fffe17 	ldw	r3,-8(fp)
    2a9c:	18800060 	cmpeqi	r2,r3,1
    2aa0:	1000651e 	bne	r2,zero,2c38 <OSFlagAccept+0x284>
    2aa4:	e0fffe17 	ldw	r3,-8(fp)
    2aa8:	18800088 	cmpgei	r2,r3,2
    2aac:	1000041e 	bne	r2,zero,2ac0 <OSFlagAccept+0x10c>
    2ab0:	e0fffe17 	ldw	r3,-8(fp)
    2ab4:	1805003a 	cmpeq	r2,r3,zero
    2ab8:	1000421e 	bne	r2,zero,2bc4 <OSFlagAccept+0x210>
    2abc:	00007b06 	br	2cac <OSFlagAccept+0x2f8>
    2ac0:	e0fffe17 	ldw	r3,-8(fp)
    2ac4:	188000a0 	cmpeqi	r2,r3,2
    2ac8:	1000041e 	bne	r2,zero,2adc <OSFlagAccept+0x128>
    2acc:	e0fffe17 	ldw	r3,-8(fp)
    2ad0:	188000e0 	cmpeqi	r2,r3,3
    2ad4:	10001e1e 	bne	r2,zero,2b50 <OSFlagAccept+0x19c>
    2ad8:	00007406 	br	2cac <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    2adc:	e0bffa17 	ldw	r2,-24(fp)
    2ae0:	10c0020b 	ldhu	r3,8(r2)
    2ae4:	e0bffb0b 	ldhu	r2,-20(fp)
    2ae8:	1884703a 	and	r2,r3,r2
    2aec:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2af0:	e0fff98b 	ldhu	r3,-26(fp)
    2af4:	e0bffb0b 	ldhu	r2,-20(fp)
    2af8:	18800d1e 	bne	r3,r2,2b30 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2afc:	e0bff903 	ldbu	r2,-28(fp)
    2b00:	10800058 	cmpnei	r2,r2,1
    2b04:	10000d1e 	bne	r2,zero,2b3c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    2b08:	e0bffa17 	ldw	r2,-24(fp)
    2b0c:	1080020b 	ldhu	r2,8(r2)
    2b10:	1007883a 	mov	r3,r2
    2b14:	e0bff98b 	ldhu	r2,-26(fp)
    2b18:	0084303a 	nor	r2,zero,r2
    2b1c:	1884703a 	and	r2,r3,r2
    2b20:	1007883a 	mov	r3,r2
    2b24:	e0bffa17 	ldw	r2,-24(fp)
    2b28:	10c0020d 	sth	r3,8(r2)
    2b2c:	00000306 	br	2b3c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2b30:	e0fffd17 	ldw	r3,-12(fp)
    2b34:	00801c04 	movi	r2,112
    2b38:	18800005 	stb	r2,0(r3)
    2b3c:	e0bff817 	ldw	r2,-32(fp)
    2b40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2b44:	e0bff617 	ldw	r2,-40(fp)
    2b48:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2b4c:	00005f06 	br	2ccc <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    2b50:	e0bffa17 	ldw	r2,-24(fp)
    2b54:	10c0020b 	ldhu	r3,8(r2)
    2b58:	e0bffb0b 	ldhu	r2,-20(fp)
    2b5c:	1884703a 	and	r2,r3,r2
    2b60:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    2b64:	e0bff98b 	ldhu	r2,-26(fp)
    2b68:	1005003a 	cmpeq	r2,r2,zero
    2b6c:	10000d1e 	bne	r2,zero,2ba4 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2b70:	e0bff903 	ldbu	r2,-28(fp)
    2b74:	10800058 	cmpnei	r2,r2,1
    2b78:	10000d1e 	bne	r2,zero,2bb0 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    2b7c:	e0bffa17 	ldw	r2,-24(fp)
    2b80:	1080020b 	ldhu	r2,8(r2)
    2b84:	1007883a 	mov	r3,r2
    2b88:	e0bff98b 	ldhu	r2,-26(fp)
    2b8c:	0084303a 	nor	r2,zero,r2
    2b90:	1884703a 	and	r2,r3,r2
    2b94:	1007883a 	mov	r3,r2
    2b98:	e0bffa17 	ldw	r2,-24(fp)
    2b9c:	10c0020d 	sth	r3,8(r2)
    2ba0:	00000306 	br	2bb0 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2ba4:	e0fffd17 	ldw	r3,-12(fp)
    2ba8:	00801c04 	movi	r2,112
    2bac:	18800005 	stb	r2,0(r3)
    2bb0:	e0bff817 	ldw	r2,-32(fp)
    2bb4:	e0bff515 	stw	r2,-44(fp)
    2bb8:	e0bff517 	ldw	r2,-44(fp)
    2bbc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2bc0:	00004206 	br	2ccc <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    2bc4:	e0bffa17 	ldw	r2,-24(fp)
    2bc8:	1080020b 	ldhu	r2,8(r2)
    2bcc:	0084303a 	nor	r2,zero,r2
    2bd0:	1007883a 	mov	r3,r2
    2bd4:	e0bffb0b 	ldhu	r2,-20(fp)
    2bd8:	1884703a 	and	r2,r3,r2
    2bdc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2be0:	e0fff98b 	ldhu	r3,-26(fp)
    2be4:	e0bffb0b 	ldhu	r2,-20(fp)
    2be8:	18800b1e 	bne	r3,r2,2c18 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2bec:	e0bff903 	ldbu	r2,-28(fp)
    2bf0:	10800058 	cmpnei	r2,r2,1
    2bf4:	10000b1e 	bne	r2,zero,2c24 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    2bf8:	e0bffa17 	ldw	r2,-24(fp)
    2bfc:	10c0020b 	ldhu	r3,8(r2)
    2c00:	e0bff98b 	ldhu	r2,-26(fp)
    2c04:	1884b03a 	or	r2,r3,r2
    2c08:	1007883a 	mov	r3,r2
    2c0c:	e0bffa17 	ldw	r2,-24(fp)
    2c10:	10c0020d 	sth	r3,8(r2)
    2c14:	00000306 	br	2c24 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2c18:	e0fffd17 	ldw	r3,-12(fp)
    2c1c:	00801c04 	movi	r2,112
    2c20:	18800005 	stb	r2,0(r3)
    2c24:	e0bff817 	ldw	r2,-32(fp)
    2c28:	e0bff415 	stw	r2,-48(fp)
    2c2c:	e0bff417 	ldw	r2,-48(fp)
    2c30:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2c34:	00002506 	br	2ccc <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    2c38:	e0bffa17 	ldw	r2,-24(fp)
    2c3c:	1080020b 	ldhu	r2,8(r2)
    2c40:	0084303a 	nor	r2,zero,r2
    2c44:	1007883a 	mov	r3,r2
    2c48:	e0bffb0b 	ldhu	r2,-20(fp)
    2c4c:	1884703a 	and	r2,r3,r2
    2c50:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    2c54:	e0bff98b 	ldhu	r2,-26(fp)
    2c58:	1005003a 	cmpeq	r2,r2,zero
    2c5c:	10000b1e 	bne	r2,zero,2c8c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2c60:	e0bff903 	ldbu	r2,-28(fp)
    2c64:	10800058 	cmpnei	r2,r2,1
    2c68:	10000b1e 	bne	r2,zero,2c98 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    2c6c:	e0bffa17 	ldw	r2,-24(fp)
    2c70:	10c0020b 	ldhu	r3,8(r2)
    2c74:	e0bff98b 	ldhu	r2,-26(fp)
    2c78:	1884b03a 	or	r2,r3,r2
    2c7c:	1007883a 	mov	r3,r2
    2c80:	e0bffa17 	ldw	r2,-24(fp)
    2c84:	10c0020d 	sth	r3,8(r2)
    2c88:	00000306 	br	2c98 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2c8c:	e0fffd17 	ldw	r3,-12(fp)
    2c90:	00801c04 	movi	r2,112
    2c94:	18800005 	stb	r2,0(r3)
    2c98:	e0bff817 	ldw	r2,-32(fp)
    2c9c:	e0bff315 	stw	r2,-52(fp)
    2ca0:	e0bff317 	ldw	r2,-52(fp)
    2ca4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2ca8:	00000806 	br	2ccc <OSFlagAccept+0x318>
    2cac:	e0bff817 	ldw	r2,-32(fp)
    2cb0:	e0bff215 	stw	r2,-56(fp)
    2cb4:	e0bff217 	ldw	r2,-56(fp)
    2cb8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    2cbc:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    2cc0:	e0fffd17 	ldw	r3,-12(fp)
    2cc4:	00801bc4 	movi	r2,111
    2cc8:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
    2ccc:	e0bff98b 	ldhu	r2,-26(fp)
    2cd0:	e0bfff15 	stw	r2,-4(fp)
    2cd4:	e0bfff17 	ldw	r2,-4(fp)
}
    2cd8:	e037883a 	mov	sp,fp
    2cdc:	df000017 	ldw	fp,0(sp)
    2ce0:	dec00104 	addi	sp,sp,4
    2ce4:	f800283a 	ret

00002ce8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    2ce8:	defff704 	addi	sp,sp,-36
    2cec:	df000815 	stw	fp,32(sp)
    2cf0:	df000804 	addi	fp,sp,32
    2cf4:	e17ffe15 	stw	r5,-8(fp)
    2cf8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    2cfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    2d00:	e0bffe17 	ldw	r2,-8(fp)
    2d04:	1004c03a 	cmpne	r2,r2,zero
    2d08:	1000021e 	bne	r2,zero,2d14 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    2d0c:	e03fff15 	stw	zero,-4(fp)
    2d10:	00003f06 	br	2e10 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    2d14:	00800074 	movhi	r2,1
    2d18:	1082f004 	addi	r2,r2,3008
    2d1c:	10800003 	ldbu	r2,0(r2)
    2d20:	10803fcc 	andi	r2,r2,255
    2d24:	1005003a 	cmpeq	r2,r2,zero
    2d28:	1000051e 	bne	r2,zero,2d40 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    2d2c:	e0fffe17 	ldw	r3,-8(fp)
    2d30:	00800404 	movi	r2,16
    2d34:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
    2d38:	e03fff15 	stw	zero,-4(fp)
    2d3c:	00003406 	br	2e10 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d40:	0005303a 	rdctl	r2,status
    2d44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d48:	e0fffa17 	ldw	r3,-24(fp)
    2d4c:	00bfff84 	movi	r2,-2
    2d50:	1884703a 	and	r2,r3,r2
    2d54:	1001703a 	wrctl	status,r2
  
  return context;
    2d58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    2d5c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    2d60:	00800074 	movhi	r2,1
    2d64:	1082f304 	addi	r2,r2,3020
    2d68:	10800017 	ldw	r2,0(r2)
    2d6c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    2d70:	e0bffc17 	ldw	r2,-16(fp)
    2d74:	1005003a 	cmpeq	r2,r2,zero
    2d78:	10001c1e 	bne	r2,zero,2dec <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    2d7c:	00800074 	movhi	r2,1
    2d80:	1082f304 	addi	r2,r2,3020
    2d84:	10800017 	ldw	r2,0(r2)
    2d88:	10800117 	ldw	r2,4(r2)
    2d8c:	1007883a 	mov	r3,r2
    2d90:	00800074 	movhi	r2,1
    2d94:	1082f304 	addi	r2,r2,3020
    2d98:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    2d9c:	e0fffc17 	ldw	r3,-16(fp)
    2da0:	00800144 	movi	r2,5
    2da4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    2da8:	e0fffc17 	ldw	r3,-16(fp)
    2dac:	e0bffd0b 	ldhu	r2,-12(fp)
    2db0:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    2db4:	e0bffc17 	ldw	r2,-16(fp)
    2db8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    2dbc:	e0fffc17 	ldw	r3,-16(fp)
    2dc0:	00800fc4 	movi	r2,63
    2dc4:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    2dc8:	e0bffc17 	ldw	r2,-16(fp)
    2dcc:	100002c5 	stb	zero,11(r2)
    2dd0:	e0bffb17 	ldw	r2,-20(fp)
    2dd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2dd8:	e0bff917 	ldw	r2,-28(fp)
    2ddc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    2de0:	e0bffe17 	ldw	r2,-8(fp)
    2de4:	10000005 	stb	zero,0(r2)
    2de8:	00000706 	br	2e08 <OSFlagCreate+0x120>
    2dec:	e0bffb17 	ldw	r2,-20(fp)
    2df0:	e0bff815 	stw	r2,-32(fp)
    2df4:	e0bff817 	ldw	r2,-32(fp)
    2df8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    2dfc:	e0fffe17 	ldw	r3,-8(fp)
    2e00:	00801c84 	movi	r2,114
    2e04:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    2e08:	e0bffc17 	ldw	r2,-16(fp)
    2e0c:	e0bfff15 	stw	r2,-4(fp)
    2e10:	e0bfff17 	ldw	r2,-4(fp)
}
    2e14:	e037883a 	mov	sp,fp
    2e18:	df000017 	ldw	fp,0(sp)
    2e1c:	dec00104 	addi	sp,sp,4
    2e20:	f800283a 	ret

00002e24 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    2e24:	defff004 	addi	sp,sp,-64
    2e28:	dfc00f15 	stw	ra,60(sp)
    2e2c:	df000e15 	stw	fp,56(sp)
    2e30:	df000e04 	addi	fp,sp,56
    2e34:	e13ffb15 	stw	r4,-20(fp)
    2e38:	e1bffd15 	stw	r6,-12(fp)
    2e3c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    2e40:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    2e44:	e0bffd17 	ldw	r2,-12(fp)
    2e48:	1004c03a 	cmpne	r2,r2,zero
    2e4c:	1000031e 	bne	r2,zero,2e5c <OSFlagDel+0x38>
        return (pgrp);
    2e50:	e0bffb17 	ldw	r2,-20(fp)
    2e54:	e0bfff15 	stw	r2,-4(fp)
    2e58:	00009606 	br	30b4 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    2e5c:	e0bffb17 	ldw	r2,-20(fp)
    2e60:	1004c03a 	cmpne	r2,r2,zero
    2e64:	1000061e 	bne	r2,zero,2e80 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    2e68:	e0fffd17 	ldw	r3,-12(fp)
    2e6c:	00801b84 	movi	r2,110
    2e70:	18800005 	stb	r2,0(r3)
        return (pgrp);
    2e74:	e0fffb17 	ldw	r3,-20(fp)
    2e78:	e0ffff15 	stw	r3,-4(fp)
    2e7c:	00008d06 	br	30b4 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    2e80:	00800074 	movhi	r2,1
    2e84:	1082f004 	addi	r2,r2,3008
    2e88:	10800003 	ldbu	r2,0(r2)
    2e8c:	10803fcc 	andi	r2,r2,255
    2e90:	1005003a 	cmpeq	r2,r2,zero
    2e94:	1000061e 	bne	r2,zero,2eb0 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    2e98:	e0fffd17 	ldw	r3,-12(fp)
    2e9c:	008003c4 	movi	r2,15
    2ea0:	18800005 	stb	r2,0(r3)
        return (pgrp);
    2ea4:	e0bffb17 	ldw	r2,-20(fp)
    2ea8:	e0bfff15 	stw	r2,-4(fp)
    2eac:	00008106 	br	30b4 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    2eb0:	e0bffb17 	ldw	r2,-20(fp)
    2eb4:	10800003 	ldbu	r2,0(r2)
    2eb8:	10803fcc 	andi	r2,r2,255
    2ebc:	10800160 	cmpeqi	r2,r2,5
    2ec0:	1000061e 	bne	r2,zero,2edc <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
    2ec4:	e0fffd17 	ldw	r3,-12(fp)
    2ec8:	00800044 	movi	r2,1
    2ecc:	18800005 	stb	r2,0(r3)
        return (pgrp);
    2ed0:	e0fffb17 	ldw	r3,-20(fp)
    2ed4:	e0ffff15 	stw	r3,-4(fp)
    2ed8:	00007606 	br	30b4 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2edc:	0005303a 	rdctl	r2,status
    2ee0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ee4:	e0fff617 	ldw	r3,-40(fp)
    2ee8:	00bfff84 	movi	r2,-2
    2eec:	1884703a 	and	r2,r3,r2
    2ef0:	1001703a 	wrctl	status,r2
  
  return context;
    2ef4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
    2ef8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    2efc:	e0bffb17 	ldw	r2,-20(fp)
    2f00:	10800117 	ldw	r2,4(r2)
    2f04:	1005003a 	cmpeq	r2,r2,zero
    2f08:	1000031e 	bne	r2,zero,2f18 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    2f0c:	00800044 	movi	r2,1
    2f10:	e0bffa05 	stb	r2,-24(fp)
    2f14:	00000106 	br	2f1c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    2f18:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
    2f1c:	e0bffc03 	ldbu	r2,-16(fp)
    2f20:	e0bffe15 	stw	r2,-8(fp)
    2f24:	e0fffe17 	ldw	r3,-8(fp)
    2f28:	1805003a 	cmpeq	r2,r3,zero
    2f2c:	1000041e 	bne	r2,zero,2f40 <OSFlagDel+0x11c>
    2f30:	e0fffe17 	ldw	r3,-8(fp)
    2f34:	18800060 	cmpeqi	r2,r3,1
    2f38:	1000281e 	bne	r2,zero,2fdc <OSFlagDel+0x1b8>
    2f3c:	00005206 	br	3088 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    2f40:	e0bffa03 	ldbu	r2,-24(fp)
    2f44:	1004c03a 	cmpne	r2,r2,zero
    2f48:	10001a1e 	bne	r2,zero,2fb4 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    2f4c:	e0fffb17 	ldw	r3,-20(fp)
    2f50:	00800fc4 	movi	r2,63
    2f54:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    2f58:	e0bffb17 	ldw	r2,-20(fp)
    2f5c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    2f60:	e0bffb17 	ldw	r2,-20(fp)
    2f64:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    2f68:	00800074 	movhi	r2,1
    2f6c:	1082f304 	addi	r2,r2,3020
    2f70:	10c00017 	ldw	r3,0(r2)
    2f74:	e0bffb17 	ldw	r2,-20(fp)
    2f78:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    2f7c:	e0bffb17 	ldw	r2,-20(fp)
    2f80:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    2f84:	00c00074 	movhi	r3,1
    2f88:	18c2f304 	addi	r3,r3,3020
    2f8c:	e0bffb17 	ldw	r2,-20(fp)
    2f90:	18800015 	stw	r2,0(r3)
    2f94:	e0bff717 	ldw	r2,-36(fp)
    2f98:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2f9c:	e0bff517 	ldw	r2,-44(fp)
    2fa0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    2fa4:	e0bffd17 	ldw	r2,-12(fp)
    2fa8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    2fac:	e03ff815 	stw	zero,-32(fp)
    2fb0:	00003e06 	br	30ac <OSFlagDel+0x288>
    2fb4:	e0bff717 	ldw	r2,-36(fp)
    2fb8:	e0bff415 	stw	r2,-48(fp)
    2fbc:	e0bff417 	ldw	r2,-48(fp)
    2fc0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    2fc4:	e0fffd17 	ldw	r3,-12(fp)
    2fc8:	00801244 	movi	r2,73
    2fcc:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
    2fd0:	e0bffb17 	ldw	r2,-20(fp)
    2fd4:	e0bff815 	stw	r2,-32(fp)
             }
             break;
    2fd8:	00003406 	br	30ac <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    2fdc:	e0bffb17 	ldw	r2,-20(fp)
    2fe0:	10800117 	ldw	r2,4(r2)
    2fe4:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    2fe8:	00000606 	br	3004 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    2fec:	e13ff917 	ldw	r4,-28(fp)
    2ff0:	000b883a 	mov	r5,zero
    2ff4:	00041340 	call	4134 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    2ff8:	e0bff917 	ldw	r2,-28(fp)
    2ffc:	10800017 	ldw	r2,0(r2)
    3000:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    3004:	e0bff917 	ldw	r2,-28(fp)
    3008:	1004c03a 	cmpne	r2,r2,zero
    300c:	103ff71e 	bne	r2,zero,2fec <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    3010:	e0fffb17 	ldw	r3,-20(fp)
    3014:	00800fc4 	movi	r2,63
    3018:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    301c:	e0bffb17 	ldw	r2,-20(fp)
    3020:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    3024:	e0bffb17 	ldw	r2,-20(fp)
    3028:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    302c:	00800074 	movhi	r2,1
    3030:	1082f304 	addi	r2,r2,3020
    3034:	10c00017 	ldw	r3,0(r2)
    3038:	e0bffb17 	ldw	r2,-20(fp)
    303c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    3040:	e0bffb17 	ldw	r2,-20(fp)
    3044:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    3048:	00c00074 	movhi	r3,1
    304c:	18c2f304 	addi	r3,r3,3020
    3050:	e0bffb17 	ldw	r2,-20(fp)
    3054:	18800015 	stw	r2,0(r3)
    3058:	e0bff717 	ldw	r2,-36(fp)
    305c:	e0bff315 	stw	r2,-52(fp)
    3060:	e0bff317 	ldw	r2,-52(fp)
    3064:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    3068:	e0bffa03 	ldbu	r2,-24(fp)
    306c:	10800058 	cmpnei	r2,r2,1
    3070:	1000011e 	bne	r2,zero,3078 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    3074:	00021400 	call	2140 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    3078:	e0bffd17 	ldw	r2,-12(fp)
    307c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    3080:	e03ff815 	stw	zero,-32(fp)
             break;
    3084:	00000906 	br	30ac <OSFlagDel+0x288>
    3088:	e0bff717 	ldw	r2,-36(fp)
    308c:	e0bff215 	stw	r2,-56(fp)
    3090:	e0bff217 	ldw	r2,-56(fp)
    3094:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    3098:	e0fffd17 	ldw	r3,-12(fp)
    309c:	008001c4 	movi	r2,7
    30a0:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
    30a4:	e0bffb17 	ldw	r2,-20(fp)
    30a8:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
    30ac:	e0bff817 	ldw	r2,-32(fp)
    30b0:	e0bfff15 	stw	r2,-4(fp)
    30b4:	e0bfff17 	ldw	r2,-4(fp)
}
    30b8:	e037883a 	mov	sp,fp
    30bc:	dfc00117 	ldw	ra,4(sp)
    30c0:	df000017 	ldw	fp,0(sp)
    30c4:	dec00204 	addi	sp,sp,8
    30c8:	f800283a 	ret

000030cc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    30cc:	defff504 	addi	sp,sp,-44
    30d0:	dfc00a15 	stw	ra,40(sp)
    30d4:	df000915 	stw	fp,36(sp)
    30d8:	df000904 	addi	fp,sp,36
    30dc:	e13ffc15 	stw	r4,-16(fp)
    30e0:	e17ffd15 	stw	r5,-12(fp)
    30e4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    30e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    30ec:	e0bffe17 	ldw	r2,-8(fp)
    30f0:	1004c03a 	cmpne	r2,r2,zero
    30f4:	1000021e 	bne	r2,zero,3100 <OSFlagNameGet+0x34>
        return (0);
    30f8:	e03fff15 	stw	zero,-4(fp)
    30fc:	00003e06 	br	31f8 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    3100:	e0bffc17 	ldw	r2,-16(fp)
    3104:	1004c03a 	cmpne	r2,r2,zero
    3108:	1000051e 	bne	r2,zero,3120 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    310c:	e0fffe17 	ldw	r3,-8(fp)
    3110:	00801b84 	movi	r2,110
    3114:	18800005 	stb	r2,0(r3)
        return (0);
    3118:	e03fff15 	stw	zero,-4(fp)
    311c:	00003606 	br	31f8 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3120:	e0bffd17 	ldw	r2,-12(fp)
    3124:	1004c03a 	cmpne	r2,r2,zero
    3128:	1000051e 	bne	r2,zero,3140 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
    312c:	e0fffe17 	ldw	r3,-8(fp)
    3130:	00800304 	movi	r2,12
    3134:	18800005 	stb	r2,0(r3)
        return (0);
    3138:	e03fff15 	stw	zero,-4(fp)
    313c:	00002e06 	br	31f8 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3140:	00800074 	movhi	r2,1
    3144:	1082f004 	addi	r2,r2,3008
    3148:	10800003 	ldbu	r2,0(r2)
    314c:	10803fcc 	andi	r2,r2,255
    3150:	1005003a 	cmpeq	r2,r2,zero
    3154:	1000051e 	bne	r2,zero,316c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
    3158:	e0fffe17 	ldw	r3,-8(fp)
    315c:	00800444 	movi	r2,17
    3160:	18800005 	stb	r2,0(r3)
        return (0);
    3164:	e03fff15 	stw	zero,-4(fp)
    3168:	00002306 	br	31f8 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    316c:	0005303a 	rdctl	r2,status
    3170:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3174:	e0fff917 	ldw	r3,-28(fp)
    3178:	00bfff84 	movi	r2,-2
    317c:	1884703a 	and	r2,r3,r2
    3180:	1001703a 	wrctl	status,r2
  
  return context;
    3184:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    3188:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    318c:	e0bffc17 	ldw	r2,-16(fp)
    3190:	10800003 	ldbu	r2,0(r2)
    3194:	10803fcc 	andi	r2,r2,255
    3198:	10800160 	cmpeqi	r2,r2,5
    319c:	1000091e 	bne	r2,zero,31c4 <OSFlagNameGet+0xf8>
    31a0:	e0bffa17 	ldw	r2,-24(fp)
    31a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    31a8:	e0bff817 	ldw	r2,-32(fp)
    31ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    31b0:	e0fffe17 	ldw	r3,-8(fp)
    31b4:	00800044 	movi	r2,1
    31b8:	18800005 	stb	r2,0(r3)
        return (0);
    31bc:	e03fff15 	stw	zero,-4(fp)
    31c0:	00000d06 	br	31f8 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    31c4:	e0bffc17 	ldw	r2,-16(fp)
    31c8:	11400284 	addi	r5,r2,10
    31cc:	e13ffd17 	ldw	r4,-12(fp)
    31d0:	00022840 	call	2284 <OS_StrCopy>
    31d4:	e0bffb05 	stb	r2,-20(fp)
    31d8:	e0bffa17 	ldw	r2,-24(fp)
    31dc:	e0bff715 	stw	r2,-36(fp)
    31e0:	e0bff717 	ldw	r2,-36(fp)
    31e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    31e8:	e0bffe17 	ldw	r2,-8(fp)
    31ec:	10000005 	stb	zero,0(r2)
    return (len);
    31f0:	e0bffb03 	ldbu	r2,-20(fp)
    31f4:	e0bfff15 	stw	r2,-4(fp)
    31f8:	e0bfff17 	ldw	r2,-4(fp)
}
    31fc:	e037883a 	mov	sp,fp
    3200:	dfc00117 	ldw	ra,4(sp)
    3204:	df000017 	ldw	fp,0(sp)
    3208:	dec00204 	addi	sp,sp,8
    320c:	f800283a 	ret

00003210 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    3210:	defff504 	addi	sp,sp,-44
    3214:	dfc00a15 	stw	ra,40(sp)
    3218:	df000915 	stw	fp,36(sp)
    321c:	df000904 	addi	fp,sp,36
    3220:	e13ffd15 	stw	r4,-12(fp)
    3224:	e17ffe15 	stw	r5,-8(fp)
    3228:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    322c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3230:	e0bfff17 	ldw	r2,-4(fp)
    3234:	1005003a 	cmpeq	r2,r2,zero
    3238:	1000451e 	bne	r2,zero,3350 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    323c:	e0bffd17 	ldw	r2,-12(fp)
    3240:	1004c03a 	cmpne	r2,r2,zero
    3244:	1000041e 	bne	r2,zero,3258 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3248:	e0ffff17 	ldw	r3,-4(fp)
    324c:	00801b84 	movi	r2,110
    3250:	18800005 	stb	r2,0(r3)
        return;
    3254:	00003e06 	br	3350 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3258:	e0bffe17 	ldw	r2,-8(fp)
    325c:	1004c03a 	cmpne	r2,r2,zero
    3260:	1000041e 	bne	r2,zero,3274 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
    3264:	e0ffff17 	ldw	r3,-4(fp)
    3268:	00800304 	movi	r2,12
    326c:	18800005 	stb	r2,0(r3)
        return;
    3270:	00003706 	br	3350 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3274:	00800074 	movhi	r2,1
    3278:	1082f004 	addi	r2,r2,3008
    327c:	10800003 	ldbu	r2,0(r2)
    3280:	10803fcc 	andi	r2,r2,255
    3284:	1005003a 	cmpeq	r2,r2,zero
    3288:	1000041e 	bne	r2,zero,329c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
    328c:	e0ffff17 	ldw	r3,-4(fp)
    3290:	00800484 	movi	r2,18
    3294:	18800005 	stb	r2,0(r3)
        return;
    3298:	00002d06 	br	3350 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    329c:	0005303a 	rdctl	r2,status
    32a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    32a4:	e0fffa17 	ldw	r3,-24(fp)
    32a8:	00bfff84 	movi	r2,-2
    32ac:	1884703a 	and	r2,r3,r2
    32b0:	1001703a 	wrctl	status,r2
  
  return context;
    32b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    32b8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    32bc:	e0bffd17 	ldw	r2,-12(fp)
    32c0:	10800003 	ldbu	r2,0(r2)
    32c4:	10803fcc 	andi	r2,r2,255
    32c8:	10800160 	cmpeqi	r2,r2,5
    32cc:	1000081e 	bne	r2,zero,32f0 <OSFlagNameSet+0xe0>
    32d0:	e0bffb17 	ldw	r2,-20(fp)
    32d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    32d8:	e0bff917 	ldw	r2,-28(fp)
    32dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    32e0:	e0ffff17 	ldw	r3,-4(fp)
    32e4:	00800044 	movi	r2,1
    32e8:	18800005 	stb	r2,0(r3)
        return;
    32ec:	00001806 	br	3350 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    32f0:	e13ffe17 	ldw	r4,-8(fp)
    32f4:	00023040 	call	2304 <OS_StrLen>
    32f8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    32fc:	e0bffc03 	ldbu	r2,-16(fp)
    3300:	10800830 	cmpltui	r2,r2,32
    3304:	1000081e 	bne	r2,zero,3328 <OSFlagNameSet+0x118>
    3308:	e0bffb17 	ldw	r2,-20(fp)
    330c:	e0bff815 	stw	r2,-32(fp)
    3310:	e0bff817 	ldw	r2,-32(fp)
    3314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    3318:	e0ffff17 	ldw	r3,-4(fp)
    331c:	00801cc4 	movi	r2,115
    3320:	18800005 	stb	r2,0(r3)
        return;
    3324:	00000a06 	br	3350 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    3328:	e0bffd17 	ldw	r2,-12(fp)
    332c:	11000284 	addi	r4,r2,10
    3330:	e17ffe17 	ldw	r5,-8(fp)
    3334:	00022840 	call	2284 <OS_StrCopy>
    3338:	e0bffb17 	ldw	r2,-20(fp)
    333c:	e0bff715 	stw	r2,-36(fp)
    3340:	e0bff717 	ldw	r2,-36(fp)
    3344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3348:	e0bfff17 	ldw	r2,-4(fp)
    334c:	10000005 	stb	zero,0(r2)
    return;
}
    3350:	e037883a 	mov	sp,fp
    3354:	dfc00117 	ldw	ra,4(sp)
    3358:	df000017 	ldw	fp,0(sp)
    335c:	dec00204 	addi	sp,sp,8
    3360:	f800283a 	ret

00003364 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    3364:	deffe004 	addi	sp,sp,-128
    3368:	dfc01f15 	stw	ra,124(sp)
    336c:	df001e15 	stw	fp,120(sp)
    3370:	df001e04 	addi	fp,sp,120
    3374:	e13ff915 	stw	r4,-28(fp)
    3378:	e17ffa0d 	sth	r5,-24(fp)
    337c:	e1bffb05 	stb	r6,-20(fp)
    3380:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    3384:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    3388:	e0800217 	ldw	r2,8(fp)
    338c:	1004c03a 	cmpne	r2,r2,zero
    3390:	1000021e 	bne	r2,zero,339c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
    3394:	e03fff15 	stw	zero,-4(fp)
    3398:	00017d06 	br	3990 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    339c:	e0bff917 	ldw	r2,-28(fp)
    33a0:	1004c03a 	cmpne	r2,r2,zero
    33a4:	1000051e 	bne	r2,zero,33bc <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    33a8:	e0c00217 	ldw	r3,8(fp)
    33ac:	00801b84 	movi	r2,110
    33b0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    33b4:	e03fff15 	stw	zero,-4(fp)
    33b8:	00017506 	br	3990 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    33bc:	00800074 	movhi	r2,1
    33c0:	1082f004 	addi	r2,r2,3008
    33c4:	10800003 	ldbu	r2,0(r2)
    33c8:	10803fcc 	andi	r2,r2,255
    33cc:	1005003a 	cmpeq	r2,r2,zero
    33d0:	1000051e 	bne	r2,zero,33e8 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    33d4:	e0c00217 	ldw	r3,8(fp)
    33d8:	00800084 	movi	r2,2
    33dc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    33e0:	e03fff15 	stw	zero,-4(fp)
    33e4:	00016a06 	br	3990 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    33e8:	00800074 	movhi	r2,1
    33ec:	1082e204 	addi	r2,r2,2952
    33f0:	10800003 	ldbu	r2,0(r2)
    33f4:	10803fcc 	andi	r2,r2,255
    33f8:	1005003a 	cmpeq	r2,r2,zero
    33fc:	1000051e 	bne	r2,zero,3414 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    3400:	e0c00217 	ldw	r3,8(fp)
    3404:	00800344 	movi	r2,13
    3408:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    340c:	e03fff15 	stw	zero,-4(fp)
    3410:	00015f06 	br	3990 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3414:	e0bff917 	ldw	r2,-28(fp)
    3418:	10800003 	ldbu	r2,0(r2)
    341c:	10803fcc 	andi	r2,r2,255
    3420:	10800160 	cmpeqi	r2,r2,5
    3424:	1000051e 	bne	r2,zero,343c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
    3428:	e0c00217 	ldw	r3,8(fp)
    342c:	00800044 	movi	r2,1
    3430:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    3434:	e03fff15 	stw	zero,-4(fp)
    3438:	00015506 	br	3990 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    343c:	e0fffb03 	ldbu	r3,-20(fp)
    3440:	00bfe004 	movi	r2,-128
    3444:	1884703a 	and	r2,r3,r2
    3448:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    344c:	e0bff283 	ldbu	r2,-54(fp)
    3450:	1005003a 	cmpeq	r2,r2,zero
    3454:	1000071e 	bne	r2,zero,3474 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    3458:	00c01fc4 	movi	r3,127
    345c:	e0bffb03 	ldbu	r2,-20(fp)
    3460:	10c4703a 	and	r2,r2,r3
    3464:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
    3468:	00800044 	movi	r2,1
    346c:	e0bff205 	stb	r2,-56(fp)
    3470:	00000106 	br	3478 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
    3474:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3478:	0005303a 	rdctl	r2,status
    347c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3480:	e0fff017 	ldw	r3,-64(fp)
    3484:	00bfff84 	movi	r2,-2
    3488:	1884703a 	and	r2,r3,r2
    348c:	1001703a 	wrctl	status,r2
  
  return context;
    3490:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    3494:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
    3498:	e0bffb03 	ldbu	r2,-20(fp)
    349c:	e0bffe15 	stw	r2,-8(fp)
    34a0:	e0fffe17 	ldw	r3,-8(fp)
    34a4:	18800060 	cmpeqi	r2,r3,1
    34a8:	1000981e 	bne	r2,zero,370c <OSFlagPend+0x3a8>
    34ac:	e0fffe17 	ldw	r3,-8(fp)
    34b0:	18800088 	cmpgei	r2,r3,2
    34b4:	1000041e 	bne	r2,zero,34c8 <OSFlagPend+0x164>
    34b8:	e0fffe17 	ldw	r3,-8(fp)
    34bc:	1805003a 	cmpeq	r2,r3,zero
    34c0:	1000641e 	bne	r2,zero,3654 <OSFlagPend+0x2f0>
    34c4:	0000bf06 	br	37c4 <OSFlagPend+0x460>
    34c8:	e0fffe17 	ldw	r3,-8(fp)
    34cc:	188000a0 	cmpeqi	r2,r3,2
    34d0:	1000041e 	bne	r2,zero,34e4 <OSFlagPend+0x180>
    34d4:	e0fffe17 	ldw	r3,-8(fp)
    34d8:	188000e0 	cmpeqi	r2,r3,3
    34dc:	10002f1e 	bne	r2,zero,359c <OSFlagPend+0x238>
    34e0:	0000b806 	br	37c4 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    34e4:	e0bff917 	ldw	r2,-28(fp)
    34e8:	10c0020b 	ldhu	r3,8(r2)
    34ec:	e0bffa0b 	ldhu	r2,-24(fp)
    34f0:	1884703a 	and	r2,r3,r2
    34f4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    34f8:	e0fff30b 	ldhu	r3,-52(fp)
    34fc:	e0bffa0b 	ldhu	r2,-24(fp)
    3500:	18801a1e 	bne	r3,r2,356c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3504:	e0bff203 	ldbu	r2,-56(fp)
    3508:	10800058 	cmpnei	r2,r2,1
    350c:	1000091e 	bne	r2,zero,3534 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    3510:	e0bff917 	ldw	r2,-28(fp)
    3514:	1080020b 	ldhu	r2,8(r2)
    3518:	1007883a 	mov	r3,r2
    351c:	e0bff30b 	ldhu	r2,-52(fp)
    3520:	0084303a 	nor	r2,zero,r2
    3524:	1884703a 	and	r2,r3,r2
    3528:	1007883a 	mov	r3,r2
    352c:	e0bff917 	ldw	r2,-28(fp)
    3530:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3534:	00800074 	movhi	r2,1
    3538:	1082f104 	addi	r2,r2,3012
    353c:	10c00017 	ldw	r3,0(r2)
    3540:	e0bff30b 	ldhu	r2,-52(fp)
    3544:	18800b0d 	sth	r2,44(r3)
    3548:	e0bff117 	ldw	r2,-60(fp)
    354c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3550:	e0bfef17 	ldw	r2,-68(fp)
    3554:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3558:	e0800217 	ldw	r2,8(fp)
    355c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    3560:	e0bff30b 	ldhu	r2,-52(fp)
    3564:	e0bfff15 	stw	r2,-4(fp)
    3568:	00010906 	br	3990 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    356c:	e1bffa0b 	ldhu	r6,-24(fp)
    3570:	e1fffb03 	ldbu	r7,-20(fp)
    3574:	e0bffc0b 	ldhu	r2,-16(fp)
    3578:	e17ff404 	addi	r5,fp,-48
    357c:	d8800015 	stw	r2,0(sp)
    3580:	e13ff917 	ldw	r4,-28(fp)
    3584:	0003e8c0 	call	3e8c <OS_FlagBlock>
    3588:	e0bff117 	ldw	r2,-60(fp)
    358c:	e0bfee15 	stw	r2,-72(fp)
    3590:	e0bfee17 	ldw	r2,-72(fp)
    3594:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    3598:	00009506 	br	37f0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    359c:	e0bff917 	ldw	r2,-28(fp)
    35a0:	10c0020b 	ldhu	r3,8(r2)
    35a4:	e0bffa0b 	ldhu	r2,-24(fp)
    35a8:	1884703a 	and	r2,r3,r2
    35ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    35b0:	e0bff30b 	ldhu	r2,-52(fp)
    35b4:	1005003a 	cmpeq	r2,r2,zero
    35b8:	10001a1e 	bne	r2,zero,3624 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    35bc:	e0bff203 	ldbu	r2,-56(fp)
    35c0:	10800058 	cmpnei	r2,r2,1
    35c4:	1000091e 	bne	r2,zero,35ec <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    35c8:	e0bff917 	ldw	r2,-28(fp)
    35cc:	1080020b 	ldhu	r2,8(r2)
    35d0:	1007883a 	mov	r3,r2
    35d4:	e0bff30b 	ldhu	r2,-52(fp)
    35d8:	0084303a 	nor	r2,zero,r2
    35dc:	1884703a 	and	r2,r3,r2
    35e0:	1007883a 	mov	r3,r2
    35e4:	e0bff917 	ldw	r2,-28(fp)
    35e8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    35ec:	00800074 	movhi	r2,1
    35f0:	1082f104 	addi	r2,r2,3012
    35f4:	10c00017 	ldw	r3,0(r2)
    35f8:	e0bff30b 	ldhu	r2,-52(fp)
    35fc:	18800b0d 	sth	r2,44(r3)
    3600:	e0bff117 	ldw	r2,-60(fp)
    3604:	e0bfed15 	stw	r2,-76(fp)
    3608:	e0bfed17 	ldw	r2,-76(fp)
    360c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3610:	e0800217 	ldw	r2,8(fp)
    3614:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    3618:	e0fff30b 	ldhu	r3,-52(fp)
    361c:	e0ffff15 	stw	r3,-4(fp)
    3620:	0000db06 	br	3990 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3624:	e1bffa0b 	ldhu	r6,-24(fp)
    3628:	e1fffb03 	ldbu	r7,-20(fp)
    362c:	e0bffc0b 	ldhu	r2,-16(fp)
    3630:	e17ff404 	addi	r5,fp,-48
    3634:	d8800015 	stw	r2,0(sp)
    3638:	e13ff917 	ldw	r4,-28(fp)
    363c:	0003e8c0 	call	3e8c <OS_FlagBlock>
    3640:	e0bff117 	ldw	r2,-60(fp)
    3644:	e0bfec15 	stw	r2,-80(fp)
    3648:	e0bfec17 	ldw	r2,-80(fp)
    364c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    3650:	00006706 	br	37f0 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    3654:	e0bff917 	ldw	r2,-28(fp)
    3658:	1080020b 	ldhu	r2,8(r2)
    365c:	0084303a 	nor	r2,zero,r2
    3660:	1007883a 	mov	r3,r2
    3664:	e0bffa0b 	ldhu	r2,-24(fp)
    3668:	1884703a 	and	r2,r3,r2
    366c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3670:	e0fff30b 	ldhu	r3,-52(fp)
    3674:	e0bffa0b 	ldhu	r2,-24(fp)
    3678:	1880181e 	bne	r3,r2,36dc <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    367c:	e0bff203 	ldbu	r2,-56(fp)
    3680:	10800058 	cmpnei	r2,r2,1
    3684:	1000071e 	bne	r2,zero,36a4 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    3688:	e0bff917 	ldw	r2,-28(fp)
    368c:	10c0020b 	ldhu	r3,8(r2)
    3690:	e0bff30b 	ldhu	r2,-52(fp)
    3694:	1884b03a 	or	r2,r3,r2
    3698:	1007883a 	mov	r3,r2
    369c:	e0bff917 	ldw	r2,-28(fp)
    36a0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    36a4:	00800074 	movhi	r2,1
    36a8:	1082f104 	addi	r2,r2,3012
    36ac:	10c00017 	ldw	r3,0(r2)
    36b0:	e0bff30b 	ldhu	r2,-52(fp)
    36b4:	18800b0d 	sth	r2,44(r3)
    36b8:	e0bff117 	ldw	r2,-60(fp)
    36bc:	e0bfeb15 	stw	r2,-84(fp)
    36c0:	e0bfeb17 	ldw	r2,-84(fp)
    36c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    36c8:	e0800217 	ldw	r2,8(fp)
    36cc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    36d0:	e0bff30b 	ldhu	r2,-52(fp)
    36d4:	e0bfff15 	stw	r2,-4(fp)
    36d8:	0000ad06 	br	3990 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    36dc:	e1bffa0b 	ldhu	r6,-24(fp)
    36e0:	e1fffb03 	ldbu	r7,-20(fp)
    36e4:	e0bffc0b 	ldhu	r2,-16(fp)
    36e8:	e17ff404 	addi	r5,fp,-48
    36ec:	d8800015 	stw	r2,0(sp)
    36f0:	e13ff917 	ldw	r4,-28(fp)
    36f4:	0003e8c0 	call	3e8c <OS_FlagBlock>
    36f8:	e0bff117 	ldw	r2,-60(fp)
    36fc:	e0bfea15 	stw	r2,-88(fp)
    3700:	e0bfea17 	ldw	r2,-88(fp)
    3704:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    3708:	00003906 	br	37f0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    370c:	e0bff917 	ldw	r2,-28(fp)
    3710:	1080020b 	ldhu	r2,8(r2)
    3714:	0084303a 	nor	r2,zero,r2
    3718:	1007883a 	mov	r3,r2
    371c:	e0bffa0b 	ldhu	r2,-24(fp)
    3720:	1884703a 	and	r2,r3,r2
    3724:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    3728:	e0bff30b 	ldhu	r2,-52(fp)
    372c:	1005003a 	cmpeq	r2,r2,zero
    3730:	1000181e 	bne	r2,zero,3794 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3734:	e0bff203 	ldbu	r2,-56(fp)
    3738:	10800058 	cmpnei	r2,r2,1
    373c:	1000071e 	bne	r2,zero,375c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    3740:	e0bff917 	ldw	r2,-28(fp)
    3744:	10c0020b 	ldhu	r3,8(r2)
    3748:	e0bff30b 	ldhu	r2,-52(fp)
    374c:	1884b03a 	or	r2,r3,r2
    3750:	1007883a 	mov	r3,r2
    3754:	e0bff917 	ldw	r2,-28(fp)
    3758:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    375c:	00800074 	movhi	r2,1
    3760:	1082f104 	addi	r2,r2,3012
    3764:	10c00017 	ldw	r3,0(r2)
    3768:	e0bff30b 	ldhu	r2,-52(fp)
    376c:	18800b0d 	sth	r2,44(r3)
    3770:	e0bff117 	ldw	r2,-60(fp)
    3774:	e0bfe915 	stw	r2,-92(fp)
    3778:	e0bfe917 	ldw	r2,-92(fp)
    377c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3780:	e0800217 	ldw	r2,8(fp)
    3784:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    3788:	e0fff30b 	ldhu	r3,-52(fp)
    378c:	e0ffff15 	stw	r3,-4(fp)
    3790:	00007f06 	br	3990 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3794:	e1bffa0b 	ldhu	r6,-24(fp)
    3798:	e1fffb03 	ldbu	r7,-20(fp)
    379c:	e0bffc0b 	ldhu	r2,-16(fp)
    37a0:	e17ff404 	addi	r5,fp,-48
    37a4:	d8800015 	stw	r2,0(sp)
    37a8:	e13ff917 	ldw	r4,-28(fp)
    37ac:	0003e8c0 	call	3e8c <OS_FlagBlock>
    37b0:	e0bff117 	ldw	r2,-60(fp)
    37b4:	e0bfe815 	stw	r2,-96(fp)
    37b8:	e0bfe817 	ldw	r2,-96(fp)
    37bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    37c0:	00000b06 	br	37f0 <OSFlagPend+0x48c>
    37c4:	e0bff117 	ldw	r2,-60(fp)
    37c8:	e0bfe715 	stw	r2,-100(fp)
    37cc:	e0bfe717 	ldw	r2,-100(fp)
    37d0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    37d4:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    37d8:	e0c00217 	ldw	r3,8(fp)
    37dc:	00801bc4 	movi	r2,111
    37e0:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
    37e4:	e0bff30b 	ldhu	r2,-52(fp)
    37e8:	e0bfff15 	stw	r2,-4(fp)
    37ec:	00006806 	br	3990 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    37f0:	00021400 	call	2140 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    37f4:	0005303a 	rdctl	r2,status
    37f8:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    37fc:	e0ffe617 	ldw	r3,-104(fp)
    3800:	00bfff84 	movi	r2,-2
    3804:	1884703a 	and	r2,r3,r2
    3808:	1001703a 	wrctl	status,r2
  
  return context;
    380c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
    3810:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    3814:	00800074 	movhi	r2,1
    3818:	1082f104 	addi	r2,r2,3012
    381c:	10800017 	ldw	r2,0(r2)
    3820:	10800c43 	ldbu	r2,49(r2)
    3824:	10803fcc 	andi	r2,r2,255
    3828:	1005003a 	cmpeq	r2,r2,zero
    382c:	1000221e 	bne	r2,zero,38b8 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    3830:	00800074 	movhi	r2,1
    3834:	1082f104 	addi	r2,r2,3012
    3838:	10800017 	ldw	r2,0(r2)
    383c:	10800c43 	ldbu	r2,49(r2)
    3840:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    3844:	00800074 	movhi	r2,1
    3848:	1082f104 	addi	r2,r2,3012
    384c:	10800017 	ldw	r2,0(r2)
    3850:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    3854:	e13ff404 	addi	r4,fp,-48
    3858:	00042440 	call	4244 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    385c:	00800074 	movhi	r2,1
    3860:	1082f104 	addi	r2,r2,3012
    3864:	10800017 	ldw	r2,0(r2)
    3868:	10000c05 	stb	zero,48(r2)
    386c:	e0bff117 	ldw	r2,-60(fp)
    3870:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3874:	e0bfe517 	ldw	r2,-108(fp)
    3878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    387c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
    3880:	e0bff243 	ldbu	r2,-55(fp)
    3884:	108000a0 	cmpeqi	r2,r2,2
    3888:	1000011e 	bne	r2,zero,3890 <OSFlagPend+0x52c>
    388c:	00000406 	br	38a0 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    3890:	e0c00217 	ldw	r3,8(fp)
    3894:	00800384 	movi	r2,14
    3898:	18800005 	stb	r2,0(r3)
                 break;
    389c:	00000306 	br	38ac <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    38a0:	e0c00217 	ldw	r3,8(fp)
    38a4:	00800284 	movi	r2,10
    38a8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
    38ac:	e0fff30b 	ldhu	r3,-52(fp)
    38b0:	e0ffff15 	stw	r3,-4(fp)
    38b4:	00003606 	br	3990 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    38b8:	00800074 	movhi	r2,1
    38bc:	1082f104 	addi	r2,r2,3012
    38c0:	10800017 	ldw	r2,0(r2)
    38c4:	10800b0b 	ldhu	r2,44(r2)
    38c8:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    38cc:	e0bff203 	ldbu	r2,-56(fp)
    38d0:	10800058 	cmpnei	r2,r2,1
    38d4:	1000261e 	bne	r2,zero,3970 <OSFlagPend+0x60c>
        switch (wait_type) {
    38d8:	e0bffb03 	ldbu	r2,-20(fp)
    38dc:	e0bffd15 	stw	r2,-12(fp)
    38e0:	e0fffd17 	ldw	r3,-12(fp)
    38e4:	1804803a 	cmplt	r2,r3,zero
    38e8:	1000181e 	bne	r2,zero,394c <OSFlagPend+0x5e8>
    38ec:	e0fffd17 	ldw	r3,-12(fp)
    38f0:	18800090 	cmplti	r2,r3,2
    38f4:	10000d1e 	bne	r2,zero,392c <OSFlagPend+0x5c8>
    38f8:	e0fffd17 	ldw	r3,-12(fp)
    38fc:	18800108 	cmpgei	r2,r3,4
    3900:	1000121e 	bne	r2,zero,394c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    3904:	e0bff917 	ldw	r2,-28(fp)
    3908:	1080020b 	ldhu	r2,8(r2)
    390c:	1007883a 	mov	r3,r2
    3910:	e0bff30b 	ldhu	r2,-52(fp)
    3914:	0084303a 	nor	r2,zero,r2
    3918:	1884703a 	and	r2,r3,r2
    391c:	1007883a 	mov	r3,r2
    3920:	e0bff917 	ldw	r2,-28(fp)
    3924:	10c0020d 	sth	r3,8(r2)
                 break;
    3928:	00001106 	br	3970 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    392c:	e0bff917 	ldw	r2,-28(fp)
    3930:	10c0020b 	ldhu	r3,8(r2)
    3934:	e0bff30b 	ldhu	r2,-52(fp)
    3938:	1884b03a 	or	r2,r3,r2
    393c:	1007883a 	mov	r3,r2
    3940:	e0bff917 	ldw	r2,-28(fp)
    3944:	10c0020d 	sth	r3,8(r2)
                 break;
    3948:	00000906 	br	3970 <OSFlagPend+0x60c>
    394c:	e0bff117 	ldw	r2,-60(fp)
    3950:	e0bfe415 	stw	r2,-112(fp)
    3954:	e0bfe417 	ldw	r2,-112(fp)
    3958:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    395c:	e0c00217 	ldw	r3,8(fp)
    3960:	00801bc4 	movi	r2,111
    3964:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
    3968:	e03fff15 	stw	zero,-4(fp)
    396c:	00000806 	br	3990 <OSFlagPend+0x62c>
    3970:	e0bff117 	ldw	r2,-60(fp)
    3974:	e0bfe315 	stw	r2,-116(fp)
    3978:	e0bfe317 	ldw	r2,-116(fp)
    397c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    3980:	e0800217 	ldw	r2,8(fp)
    3984:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    3988:	e0bff30b 	ldhu	r2,-52(fp)
    398c:	e0bfff15 	stw	r2,-4(fp)
    3990:	e0bfff17 	ldw	r2,-4(fp)
}
    3994:	e037883a 	mov	sp,fp
    3998:	dfc00117 	ldw	ra,4(sp)
    399c:	df000017 	ldw	fp,0(sp)
    39a0:	dec00204 	addi	sp,sp,8
    39a4:	f800283a 	ret

000039a8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    39a8:	defffb04 	addi	sp,sp,-20
    39ac:	df000415 	stw	fp,16(sp)
    39b0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    39b4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    39b8:	0005303a 	rdctl	r2,status
    39bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    39c0:	e0fffd17 	ldw	r3,-12(fp)
    39c4:	00bfff84 	movi	r2,-2
    39c8:	1884703a 	and	r2,r3,r2
    39cc:	1001703a 	wrctl	status,r2
  
  return context;
    39d0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    39d4:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    39d8:	00800074 	movhi	r2,1
    39dc:	1082f104 	addi	r2,r2,3012
    39e0:	10800017 	ldw	r2,0(r2)
    39e4:	10800b0b 	ldhu	r2,44(r2)
    39e8:	e0bfff0d 	sth	r2,-4(fp)
    39ec:	e0bffe17 	ldw	r2,-8(fp)
    39f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    39f4:	e0bffc17 	ldw	r2,-16(fp)
    39f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    39fc:	e0bfff0b 	ldhu	r2,-4(fp)
}
    3a00:	e037883a 	mov	sp,fp
    3a04:	df000017 	ldw	fp,0(sp)
    3a08:	dec00104 	addi	sp,sp,4
    3a0c:	f800283a 	ret

00003a10 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    3a10:	deffed04 	addi	sp,sp,-76
    3a14:	dfc01215 	stw	ra,72(sp)
    3a18:	df001115 	stw	fp,68(sp)
    3a1c:	df001104 	addi	fp,sp,68
    3a20:	e13ff915 	stw	r4,-28(fp)
    3a24:	e1fffc15 	stw	r7,-16(fp)
    3a28:	e17ffa0d 	sth	r5,-24(fp)
    3a2c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    3a30:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    3a34:	e0bffc17 	ldw	r2,-16(fp)
    3a38:	1004c03a 	cmpne	r2,r2,zero
    3a3c:	1000021e 	bne	r2,zero,3a48 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
    3a40:	e03fff15 	stw	zero,-4(fp)
    3a44:	0000d606 	br	3da0 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    3a48:	e0bff917 	ldw	r2,-28(fp)
    3a4c:	1004c03a 	cmpne	r2,r2,zero
    3a50:	1000051e 	bne	r2,zero,3a68 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3a54:	e0fffc17 	ldw	r3,-16(fp)
    3a58:	00801b84 	movi	r2,110
    3a5c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    3a60:	e03fff15 	stw	zero,-4(fp)
    3a64:	0000ce06 	br	3da0 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    3a68:	e0bff917 	ldw	r2,-28(fp)
    3a6c:	10800003 	ldbu	r2,0(r2)
    3a70:	10803fcc 	andi	r2,r2,255
    3a74:	10800160 	cmpeqi	r2,r2,5
    3a78:	1000051e 	bne	r2,zero,3a90 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    3a7c:	e0fffc17 	ldw	r3,-16(fp)
    3a80:	00800044 	movi	r2,1
    3a84:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    3a88:	e03fff15 	stw	zero,-4(fp)
    3a8c:	0000c406 	br	3da0 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a90:	0005303a 	rdctl	r2,status
    3a94:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a98:	e0fff417 	ldw	r3,-48(fp)
    3a9c:	00bfff84 	movi	r2,-2
    3aa0:	1884703a 	and	r2,r3,r2
    3aa4:	1001703a 	wrctl	status,r2
  
  return context;
    3aa8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    3aac:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
    3ab0:	e0bffb03 	ldbu	r2,-20(fp)
    3ab4:	e0bffe15 	stw	r2,-8(fp)
    3ab8:	e0fffe17 	ldw	r3,-8(fp)
    3abc:	1805003a 	cmpeq	r2,r3,zero
    3ac0:	1000041e 	bne	r2,zero,3ad4 <OSFlagPost+0xc4>
    3ac4:	e0fffe17 	ldw	r3,-8(fp)
    3ac8:	18800060 	cmpeqi	r2,r3,1
    3acc:	10000b1e 	bne	r2,zero,3afc <OSFlagPost+0xec>
    3ad0:	00001206 	br	3b1c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    3ad4:	e0bff917 	ldw	r2,-28(fp)
    3ad8:	1080020b 	ldhu	r2,8(r2)
    3adc:	1007883a 	mov	r3,r2
    3ae0:	e0bffa0b 	ldhu	r2,-24(fp)
    3ae4:	0084303a 	nor	r2,zero,r2
    3ae8:	1884703a 	and	r2,r3,r2
    3aec:	1007883a 	mov	r3,r2
    3af0:	e0bff917 	ldw	r2,-28(fp)
    3af4:	10c0020d 	sth	r3,8(r2)
             break;
    3af8:	00001106 	br	3b40 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    3afc:	e0bff917 	ldw	r2,-28(fp)
    3b00:	10c0020b 	ldhu	r3,8(r2)
    3b04:	e0bffa0b 	ldhu	r2,-24(fp)
    3b08:	1884b03a 	or	r2,r3,r2
    3b0c:	1007883a 	mov	r3,r2
    3b10:	e0bff917 	ldw	r2,-28(fp)
    3b14:	10c0020d 	sth	r3,8(r2)
             break;
    3b18:	00000906 	br	3b40 <OSFlagPost+0x130>
    3b1c:	e0bff517 	ldw	r2,-44(fp)
    3b20:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3b24:	e0bff317 	ldw	r2,-52(fp)
    3b28:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    3b2c:	e0fffc17 	ldw	r3,-16(fp)
    3b30:	00801c44 	movi	r2,113
    3b34:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
    3b38:	e03fff15 	stw	zero,-4(fp)
    3b3c:	00009806 	br	3da0 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    3b40:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    3b44:	e0bff917 	ldw	r2,-28(fp)
    3b48:	10800117 	ldw	r2,4(r2)
    3b4c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    3b50:	00007506 	br	3d28 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
    3b54:	e0bff817 	ldw	r2,-32(fp)
    3b58:	10800483 	ldbu	r2,18(r2)
    3b5c:	10803fcc 	andi	r2,r2,255
    3b60:	e0bffd15 	stw	r2,-12(fp)
    3b64:	e0fffd17 	ldw	r3,-12(fp)
    3b68:	18800060 	cmpeqi	r2,r3,1
    3b6c:	10004d1e 	bne	r2,zero,3ca4 <OSFlagPost+0x294>
    3b70:	e0fffd17 	ldw	r3,-12(fp)
    3b74:	18800088 	cmpgei	r2,r3,2
    3b78:	1000041e 	bne	r2,zero,3b8c <OSFlagPost+0x17c>
    3b7c:	e0fffd17 	ldw	r3,-12(fp)
    3b80:	1805003a 	cmpeq	r2,r3,zero
    3b84:	1000301e 	bne	r2,zero,3c48 <OSFlagPost+0x238>
    3b88:	00005b06 	br	3cf8 <OSFlagPost+0x2e8>
    3b8c:	e0fffd17 	ldw	r3,-12(fp)
    3b90:	188000a0 	cmpeqi	r2,r3,2
    3b94:	1000041e 	bne	r2,zero,3ba8 <OSFlagPost+0x198>
    3b98:	e0fffd17 	ldw	r3,-12(fp)
    3b9c:	188000e0 	cmpeqi	r2,r3,3
    3ba0:	1000161e 	bne	r2,zero,3bfc <OSFlagPost+0x1ec>
    3ba4:	00005406 	br	3cf8 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3ba8:	e0bff917 	ldw	r2,-28(fp)
    3bac:	10c0020b 	ldhu	r3,8(r2)
    3bb0:	e0bff817 	ldw	r2,-32(fp)
    3bb4:	1080040b 	ldhu	r2,16(r2)
    3bb8:	1884703a 	and	r2,r3,r2
    3bbc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    3bc0:	e0bff817 	ldw	r2,-32(fp)
    3bc4:	1080040b 	ldhu	r2,16(r2)
    3bc8:	10ffffcc 	andi	r3,r2,65535
    3bcc:	e0bff68b 	ldhu	r2,-38(fp)
    3bd0:	1880521e 	bne	r3,r2,3d1c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3bd4:	e17ff68b 	ldhu	r5,-38(fp)
    3bd8:	e13ff817 	ldw	r4,-32(fp)
    3bdc:	00041340 	call	4134 <OS_FlagTaskRdy>
    3be0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    3be4:	e0bff603 	ldbu	r2,-40(fp)
    3be8:	10800058 	cmpnei	r2,r2,1
    3bec:	10004b1e 	bne	r2,zero,3d1c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3bf0:	00800044 	movi	r2,1
    3bf4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    3bf8:	00004806 	br	3d1c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3bfc:	e0bff917 	ldw	r2,-28(fp)
    3c00:	10c0020b 	ldhu	r3,8(r2)
    3c04:	e0bff817 	ldw	r2,-32(fp)
    3c08:	1080040b 	ldhu	r2,16(r2)
    3c0c:	1884703a 	and	r2,r3,r2
    3c10:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    3c14:	e0bff68b 	ldhu	r2,-38(fp)
    3c18:	1005003a 	cmpeq	r2,r2,zero
    3c1c:	10003f1e 	bne	r2,zero,3d1c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3c20:	e17ff68b 	ldhu	r5,-38(fp)
    3c24:	e13ff817 	ldw	r4,-32(fp)
    3c28:	00041340 	call	4134 <OS_FlagTaskRdy>
    3c2c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    3c30:	e0bff603 	ldbu	r2,-40(fp)
    3c34:	10800058 	cmpnei	r2,r2,1
    3c38:	1000381e 	bne	r2,zero,3d1c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3c3c:	00800044 	movi	r2,1
    3c40:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    3c44:	00003506 	br	3d1c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3c48:	e0bff917 	ldw	r2,-28(fp)
    3c4c:	1080020b 	ldhu	r2,8(r2)
    3c50:	0084303a 	nor	r2,zero,r2
    3c54:	1007883a 	mov	r3,r2
    3c58:	e0bff817 	ldw	r2,-32(fp)
    3c5c:	1080040b 	ldhu	r2,16(r2)
    3c60:	1884703a 	and	r2,r3,r2
    3c64:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    3c68:	e0bff817 	ldw	r2,-32(fp)
    3c6c:	1080040b 	ldhu	r2,16(r2)
    3c70:	10ffffcc 	andi	r3,r2,65535
    3c74:	e0bff68b 	ldhu	r2,-38(fp)
    3c78:	1880281e 	bne	r3,r2,3d1c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3c7c:	e17ff68b 	ldhu	r5,-38(fp)
    3c80:	e13ff817 	ldw	r4,-32(fp)
    3c84:	00041340 	call	4134 <OS_FlagTaskRdy>
    3c88:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    3c8c:	e0bff603 	ldbu	r2,-40(fp)
    3c90:	10800058 	cmpnei	r2,r2,1
    3c94:	1000211e 	bne	r2,zero,3d1c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3c98:	00800044 	movi	r2,1
    3c9c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    3ca0:	00001e06 	br	3d1c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3ca4:	e0bff917 	ldw	r2,-28(fp)
    3ca8:	1080020b 	ldhu	r2,8(r2)
    3cac:	0084303a 	nor	r2,zero,r2
    3cb0:	1007883a 	mov	r3,r2
    3cb4:	e0bff817 	ldw	r2,-32(fp)
    3cb8:	1080040b 	ldhu	r2,16(r2)
    3cbc:	1884703a 	and	r2,r3,r2
    3cc0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    3cc4:	e0bff68b 	ldhu	r2,-38(fp)
    3cc8:	1005003a 	cmpeq	r2,r2,zero
    3ccc:	1000131e 	bne	r2,zero,3d1c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3cd0:	e17ff68b 	ldhu	r5,-38(fp)
    3cd4:	e13ff817 	ldw	r4,-32(fp)
    3cd8:	00041340 	call	4134 <OS_FlagTaskRdy>
    3cdc:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    3ce0:	e0bff603 	ldbu	r2,-40(fp)
    3ce4:	10800058 	cmpnei	r2,r2,1
    3ce8:	10000c1e 	bne	r2,zero,3d1c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3cec:	00800044 	movi	r2,1
    3cf0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    3cf4:	00000906 	br	3d1c <OSFlagPost+0x30c>
    3cf8:	e0bff517 	ldw	r2,-44(fp)
    3cfc:	e0bff215 	stw	r2,-56(fp)
    3d00:	e0bff217 	ldw	r2,-56(fp)
    3d04:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    3d08:	e0fffc17 	ldw	r3,-16(fp)
    3d0c:	00801bc4 	movi	r2,111
    3d10:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
    3d14:	e03fff15 	stw	zero,-4(fp)
    3d18:	00002106 	br	3da0 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    3d1c:	e0bff817 	ldw	r2,-32(fp)
    3d20:	10800017 	ldw	r2,0(r2)
    3d24:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    3d28:	e0bff817 	ldw	r2,-32(fp)
    3d2c:	1004c03a 	cmpne	r2,r2,zero
    3d30:	103f881e 	bne	r2,zero,3b54 <OSFlagPost+0x144>
    3d34:	e0bff517 	ldw	r2,-44(fp)
    3d38:	e0bff115 	stw	r2,-60(fp)
    3d3c:	e0bff117 	ldw	r2,-60(fp)
    3d40:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    3d44:	e0bff783 	ldbu	r2,-34(fp)
    3d48:	10800058 	cmpnei	r2,r2,1
    3d4c:	1000011e 	bne	r2,zero,3d54 <OSFlagPost+0x344>
        OS_Sched();
    3d50:	00021400 	call	2140 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d54:	0005303a 	rdctl	r2,status
    3d58:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d5c:	e0fff017 	ldw	r3,-64(fp)
    3d60:	00bfff84 	movi	r2,-2
    3d64:	1884703a 	and	r2,r3,r2
    3d68:	1001703a 	wrctl	status,r2
  
  return context;
    3d6c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
    3d70:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
    3d74:	e0bff917 	ldw	r2,-28(fp)
    3d78:	1080020b 	ldhu	r2,8(r2)
    3d7c:	e0bff70d 	sth	r2,-36(fp)
    3d80:	e0bff517 	ldw	r2,-44(fp)
    3d84:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d88:	e0bfef17 	ldw	r2,-68(fp)
    3d8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    3d90:	e0bffc17 	ldw	r2,-16(fp)
    3d94:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    3d98:	e0bff70b 	ldhu	r2,-36(fp)
    3d9c:	e0bfff15 	stw	r2,-4(fp)
    3da0:	e0bfff17 	ldw	r2,-4(fp)
}
    3da4:	e037883a 	mov	sp,fp
    3da8:	dfc00117 	ldw	ra,4(sp)
    3dac:	df000017 	ldw	fp,0(sp)
    3db0:	dec00204 	addi	sp,sp,8
    3db4:	f800283a 	ret

00003db8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    3db8:	defff804 	addi	sp,sp,-32
    3dbc:	df000715 	stw	fp,28(sp)
    3dc0:	df000704 	addi	fp,sp,28
    3dc4:	e13ffd15 	stw	r4,-12(fp)
    3dc8:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    3dcc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    3dd0:	e0bffe17 	ldw	r2,-8(fp)
    3dd4:	1004c03a 	cmpne	r2,r2,zero
    3dd8:	1000021e 	bne	r2,zero,3de4 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
    3ddc:	e03fff15 	stw	zero,-4(fp)
    3de0:	00002506 	br	3e78 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    3de4:	e0bffd17 	ldw	r2,-12(fp)
    3de8:	1004c03a 	cmpne	r2,r2,zero
    3dec:	1000051e 	bne	r2,zero,3e04 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3df0:	e0fffe17 	ldw	r3,-8(fp)
    3df4:	00801b84 	movi	r2,110
    3df8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    3dfc:	e03fff15 	stw	zero,-4(fp)
    3e00:	00001d06 	br	3e78 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    3e04:	e0bffd17 	ldw	r2,-12(fp)
    3e08:	10800003 	ldbu	r2,0(r2)
    3e0c:	10803fcc 	andi	r2,r2,255
    3e10:	10800160 	cmpeqi	r2,r2,5
    3e14:	1000051e 	bne	r2,zero,3e2c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
    3e18:	e0fffe17 	ldw	r3,-8(fp)
    3e1c:	00800044 	movi	r2,1
    3e20:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    3e24:	e03fff15 	stw	zero,-4(fp)
    3e28:	00001306 	br	3e78 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3e2c:	0005303a 	rdctl	r2,status
    3e30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e34:	e0fffa17 	ldw	r3,-24(fp)
    3e38:	00bfff84 	movi	r2,-2
    3e3c:	1884703a 	and	r2,r3,r2
    3e40:	1001703a 	wrctl	status,r2
  
  return context;
    3e44:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    3e48:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
    3e4c:	e0bffd17 	ldw	r2,-12(fp)
    3e50:	1080020b 	ldhu	r2,8(r2)
    3e54:	e0bffc0d 	sth	r2,-16(fp)
    3e58:	e0bffb17 	ldw	r2,-20(fp)
    3e5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3e60:	e0bff917 	ldw	r2,-28(fp)
    3e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3e68:	e0bffe17 	ldw	r2,-8(fp)
    3e6c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    3e70:	e0bffc0b 	ldhu	r2,-16(fp)
    3e74:	e0bfff15 	stw	r2,-4(fp)
    3e78:	e0bfff17 	ldw	r2,-4(fp)
}
    3e7c:	e037883a 	mov	sp,fp
    3e80:	df000017 	ldw	fp,0(sp)
    3e84:	dec00104 	addi	sp,sp,4
    3e88:	f800283a 	ret

00003e8c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    3e8c:	defff804 	addi	sp,sp,-32
    3e90:	df000715 	stw	fp,28(sp)
    3e94:	df000704 	addi	fp,sp,28
    3e98:	e13ffb15 	stw	r4,-20(fp)
    3e9c:	e17ffc15 	stw	r5,-16(fp)
    3ea0:	e0800117 	ldw	r2,4(fp)
    3ea4:	e1bffd0d 	sth	r6,-12(fp)
    3ea8:	e1fffe05 	stb	r7,-8(fp)
    3eac:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    3eb0:	00800074 	movhi	r2,1
    3eb4:	1082f104 	addi	r2,r2,3012
    3eb8:	10c00017 	ldw	r3,0(r2)
    3ebc:	00800074 	movhi	r2,1
    3ec0:	1082f104 	addi	r2,r2,3012
    3ec4:	10800017 	ldw	r2,0(r2)
    3ec8:	10800c03 	ldbu	r2,48(r2)
    3ecc:	10800814 	ori	r2,r2,32
    3ed0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    3ed4:	00800074 	movhi	r2,1
    3ed8:	1082f104 	addi	r2,r2,3012
    3edc:	10800017 	ldw	r2,0(r2)
    3ee0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    3ee4:	00800074 	movhi	r2,1
    3ee8:	1082f104 	addi	r2,r2,3012
    3eec:	10c00017 	ldw	r3,0(r2)
    3ef0:	e0bfff0b 	ldhu	r2,-4(fp)
    3ef4:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    3ef8:	00800074 	movhi	r2,1
    3efc:	1082f104 	addi	r2,r2,3012
    3f00:	10c00017 	ldw	r3,0(r2)
    3f04:	e0bffc17 	ldw	r2,-16(fp)
    3f08:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    3f0c:	e0fffc17 	ldw	r3,-16(fp)
    3f10:	e0bffd0b 	ldhu	r2,-12(fp)
    3f14:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    3f18:	e0fffc17 	ldw	r3,-16(fp)
    3f1c:	e0bffe03 	ldbu	r2,-8(fp)
    3f20:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    3f24:	00800074 	movhi	r2,1
    3f28:	1082f104 	addi	r2,r2,3012
    3f2c:	10c00017 	ldw	r3,0(r2)
    3f30:	e0bffc17 	ldw	r2,-16(fp)
    3f34:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    3f38:	e0bffb17 	ldw	r2,-20(fp)
    3f3c:	10c00117 	ldw	r3,4(r2)
    3f40:	e0bffc17 	ldw	r2,-16(fp)
    3f44:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    3f48:	e0bffc17 	ldw	r2,-16(fp)
    3f4c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    3f50:	e0fffc17 	ldw	r3,-16(fp)
    3f54:	e0bffb17 	ldw	r2,-20(fp)
    3f58:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    3f5c:	e0bffb17 	ldw	r2,-20(fp)
    3f60:	10800117 	ldw	r2,4(r2)
    3f64:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    3f68:	e0bffa17 	ldw	r2,-24(fp)
    3f6c:	1005003a 	cmpeq	r2,r2,zero
    3f70:	1000031e 	bne	r2,zero,3f80 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    3f74:	e0fffa17 	ldw	r3,-24(fp)
    3f78:	e0bffc17 	ldw	r2,-16(fp)
    3f7c:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    3f80:	e0fffb17 	ldw	r3,-20(fp)
    3f84:	e0bffc17 	ldw	r2,-16(fp)
    3f88:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    3f8c:	00800074 	movhi	r2,1
    3f90:	1082f104 	addi	r2,r2,3012
    3f94:	10800017 	ldw	r2,0(r2)
    3f98:	10800d03 	ldbu	r2,52(r2)
    3f9c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3fa0:	e13ff903 	ldbu	r4,-28(fp)
    3fa4:	e0fff903 	ldbu	r3,-28(fp)
    3fa8:	00800074 	movhi	r2,1
    3fac:	1082ee44 	addi	r2,r2,3001
    3fb0:	10c5883a 	add	r2,r2,r3
    3fb4:	10800003 	ldbu	r2,0(r2)
    3fb8:	1007883a 	mov	r3,r2
    3fbc:	00800074 	movhi	r2,1
    3fc0:	1082f104 	addi	r2,r2,3012
    3fc4:	10800017 	ldw	r2,0(r2)
    3fc8:	10800d43 	ldbu	r2,53(r2)
    3fcc:	0084303a 	nor	r2,zero,r2
    3fd0:	1884703a 	and	r2,r3,r2
    3fd4:	1007883a 	mov	r3,r2
    3fd8:	00800074 	movhi	r2,1
    3fdc:	1082ee44 	addi	r2,r2,3001
    3fe0:	1105883a 	add	r2,r2,r4
    3fe4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    3fe8:	e0fff903 	ldbu	r3,-28(fp)
    3fec:	00800074 	movhi	r2,1
    3ff0:	1082ee44 	addi	r2,r2,3001
    3ff4:	10c5883a 	add	r2,r2,r3
    3ff8:	10800003 	ldbu	r2,0(r2)
    3ffc:	10803fcc 	andi	r2,r2,255
    4000:	1004c03a 	cmpne	r2,r2,zero
    4004:	10000e1e 	bne	r2,zero,4040 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    4008:	00800074 	movhi	r2,1
    400c:	1082f104 	addi	r2,r2,3012
    4010:	10800017 	ldw	r2,0(r2)
    4014:	10800d83 	ldbu	r2,54(r2)
    4018:	0084303a 	nor	r2,zero,r2
    401c:	1007883a 	mov	r3,r2
    4020:	00800074 	movhi	r2,1
    4024:	1082ee04 	addi	r2,r2,3000
    4028:	10800003 	ldbu	r2,0(r2)
    402c:	1884703a 	and	r2,r3,r2
    4030:	1007883a 	mov	r3,r2
    4034:	00800074 	movhi	r2,1
    4038:	1082ee04 	addi	r2,r2,3000
    403c:	10c00005 	stb	r3,0(r2)
    }
}
    4040:	e037883a 	mov	sp,fp
    4044:	df000017 	ldw	fp,0(sp)
    4048:	dec00104 	addi	sp,sp,4
    404c:	f800283a 	ret

00004050 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    4050:	defffb04 	addi	sp,sp,-20
    4054:	dfc00415 	stw	ra,16(sp)
    4058:	df000315 	stw	fp,12(sp)
    405c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    4060:	010000b4 	movhi	r4,2
    4064:	2122fb04 	addi	r4,r4,-29716
    4068:	0140dc04 	movi	r5,880
    406c:	00020800 	call	2080 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    4070:	008000b4 	movhi	r2,2
    4074:	10a2fb04 	addi	r2,r2,-29716
    4078:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    407c:	008000b4 	movhi	r2,2
    4080:	10a30604 	addi	r2,r2,-29672
    4084:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    4088:	e03fff0d 	sth	zero,-4(fp)
    408c:	00001306 	br	40dc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    4098:	e0fffe17 	ldw	r3,-8(fp)
    409c:	e0bffd17 	ldw	r2,-12(fp)
    40a0:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    40a4:	e0fffe17 	ldw	r3,-8(fp)
    40a8:	00800fc4 	movi	r2,63
    40ac:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    40b8:	e0bffe17 	ldw	r2,-8(fp)
    40bc:	10800b04 	addi	r2,r2,44
    40c0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    40c4:	e0bffd17 	ldw	r2,-12(fp)
    40c8:	10800b04 	addi	r2,r2,44
    40cc:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    40d0:	e0bfff0b 	ldhu	r2,-4(fp)
    40d4:	10800044 	addi	r2,r2,1
    40d8:	e0bfff0d 	sth	r2,-4(fp)
    40dc:	e0bfff0b 	ldhu	r2,-4(fp)
    40e0:	108004f0 	cmpltui	r2,r2,19
    40e4:	103fea1e 	bne	r2,zero,4090 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    40e8:	e0bffe17 	ldw	r2,-8(fp)
    40ec:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    40f0:	e0bffe17 	ldw	r2,-8(fp)
    40f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    40f8:	e0fffe17 	ldw	r3,-8(fp)
    40fc:	00800fc4 	movi	r2,63
    4100:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    4104:	e0bffe17 	ldw	r2,-8(fp)
    4108:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    410c:	00c00074 	movhi	r3,1
    4110:	18c2f304 	addi	r3,r3,3020
    4114:	008000b4 	movhi	r2,2
    4118:	10a2fb04 	addi	r2,r2,-29716
    411c:	18800015 	stw	r2,0(r3)
#endif
}
    4120:	e037883a 	mov	sp,fp
    4124:	dfc00117 	ldw	ra,4(sp)
    4128:	df000017 	ldw	fp,0(sp)
    412c:	dec00204 	addi	sp,sp,8
    4130:	f800283a 	ret

00004134 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    4134:	defffa04 	addi	sp,sp,-24
    4138:	dfc00515 	stw	ra,20(sp)
    413c:	df000415 	stw	fp,16(sp)
    4140:	df000404 	addi	fp,sp,16
    4144:	e13ffe15 	stw	r4,-8(fp)
    4148:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    414c:	e0bffe17 	ldw	r2,-8(fp)
    4150:	10800217 	ldw	r2,8(r2)
    4154:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    4158:	e0bffd17 	ldw	r2,-12(fp)
    415c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    4160:	e0fffd17 	ldw	r3,-12(fp)
    4164:	e0bfff0b 	ldhu	r2,-4(fp)
    4168:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    416c:	e0bffd17 	ldw	r2,-12(fp)
    4170:	10c00c03 	ldbu	r3,48(r2)
    4174:	00bff7c4 	movi	r2,-33
    4178:	1884703a 	and	r2,r3,r2
    417c:	1007883a 	mov	r3,r2
    4180:	e0bffd17 	ldw	r2,-12(fp)
    4184:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    4188:	e0bffd17 	ldw	r2,-12(fp)
    418c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    4190:	e0bffd17 	ldw	r2,-12(fp)
    4194:	10800c03 	ldbu	r2,48(r2)
    4198:	10803fcc 	andi	r2,r2,255
    419c:	1004c03a 	cmpne	r2,r2,zero
    41a0:	10001f1e 	bne	r2,zero,4220 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    41a4:	e0bffd17 	ldw	r2,-12(fp)
    41a8:	10c00d83 	ldbu	r3,54(r2)
    41ac:	00800074 	movhi	r2,1
    41b0:	1082ee04 	addi	r2,r2,3000
    41b4:	10800003 	ldbu	r2,0(r2)
    41b8:	1884b03a 	or	r2,r3,r2
    41bc:	1007883a 	mov	r3,r2
    41c0:	00800074 	movhi	r2,1
    41c4:	1082ee04 	addi	r2,r2,3000
    41c8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    41cc:	e0bffd17 	ldw	r2,-12(fp)
    41d0:	10800d03 	ldbu	r2,52(r2)
    41d4:	11003fcc 	andi	r4,r2,255
    41d8:	e0bffd17 	ldw	r2,-12(fp)
    41dc:	10800d03 	ldbu	r2,52(r2)
    41e0:	10c03fcc 	andi	r3,r2,255
    41e4:	00800074 	movhi	r2,1
    41e8:	1082ee44 	addi	r2,r2,3001
    41ec:	10c5883a 	add	r2,r2,r3
    41f0:	10c00003 	ldbu	r3,0(r2)
    41f4:	e0bffd17 	ldw	r2,-12(fp)
    41f8:	10800d43 	ldbu	r2,53(r2)
    41fc:	1884b03a 	or	r2,r3,r2
    4200:	1007883a 	mov	r3,r2
    4204:	00800074 	movhi	r2,1
    4208:	1082ee44 	addi	r2,r2,3001
    420c:	1105883a 	add	r2,r2,r4
    4210:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
    4214:	00800044 	movi	r2,1
    4218:	e0bffc05 	stb	r2,-16(fp)
    421c:	00000106 	br	4224 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    4220:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    4224:	e13ffe17 	ldw	r4,-8(fp)
    4228:	00042440 	call	4244 <OS_FlagUnlink>
    return (sched);
    422c:	e0bffc03 	ldbu	r2,-16(fp)
}
    4230:	e037883a 	mov	sp,fp
    4234:	dfc00117 	ldw	ra,4(sp)
    4238:	df000017 	ldw	fp,0(sp)
    423c:	dec00204 	addi	sp,sp,8
    4240:	f800283a 	ret

00004244 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    4244:	defffa04 	addi	sp,sp,-24
    4248:	df000515 	stw	fp,20(sp)
    424c:	df000504 	addi	fp,sp,20
    4250:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    4254:	e0bfff17 	ldw	r2,-4(fp)
    4258:	10800117 	ldw	r2,4(r2)
    425c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    4260:	e0bfff17 	ldw	r2,-4(fp)
    4264:	10800017 	ldw	r2,0(r2)
    4268:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    426c:	e0bffc17 	ldw	r2,-16(fp)
    4270:	1004c03a 	cmpne	r2,r2,zero
    4274:	10000c1e 	bne	r2,zero,42a8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	10800317 	ldw	r2,12(r2)
    4280:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    4284:	e0fffd17 	ldw	r3,-12(fp)
    4288:	e0bffb17 	ldw	r2,-20(fp)
    428c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    4290:	e0bffb17 	ldw	r2,-20(fp)
    4294:	1005003a 	cmpeq	r2,r2,zero
    4298:	10000c1e 	bne	r2,zero,42cc <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    429c:	e0bffb17 	ldw	r2,-20(fp)
    42a0:	10000115 	stw	zero,4(r2)
    42a4:	00000906 	br	42cc <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    42a8:	e0fffc17 	ldw	r3,-16(fp)
    42ac:	e0bffb17 	ldw	r2,-20(fp)
    42b0:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    42b4:	e0bffb17 	ldw	r2,-20(fp)
    42b8:	1005003a 	cmpeq	r2,r2,zero
    42bc:	1000031e 	bne	r2,zero,42cc <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    42c0:	e0fffb17 	ldw	r3,-20(fp)
    42c4:	e0bffc17 	ldw	r2,-16(fp)
    42c8:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    42cc:	e0bfff17 	ldw	r2,-4(fp)
    42d0:	10800217 	ldw	r2,8(r2)
    42d4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    42d8:	e0bffe17 	ldw	r2,-8(fp)
    42dc:	10000a15 	stw	zero,40(r2)
#endif
}
    42e0:	e037883a 	mov	sp,fp
    42e4:	df000017 	ldw	fp,0(sp)
    42e8:	dec00104 	addi	sp,sp,4
    42ec:	f800283a 	ret

000042f0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    42f0:	defff304 	addi	sp,sp,-52
    42f4:	df000c15 	stw	fp,48(sp)
    42f8:	df000c04 	addi	fp,sp,48
    42fc:	e13ffb15 	stw	r4,-20(fp)
    4300:	e17ffc15 	stw	r5,-16(fp)
    4304:	e1bffd15 	stw	r6,-12(fp)
    4308:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    430c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    4310:	e0bffe17 	ldw	r2,-8(fp)
    4314:	1004c03a 	cmpne	r2,r2,zero
    4318:	1000021e 	bne	r2,zero,4324 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
    431c:	e03fff15 	stw	zero,-4(fp)
    4320:	00007506 	br	44f8 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    4324:	e0bffb17 	ldw	r2,-20(fp)
    4328:	1004c03a 	cmpne	r2,r2,zero
    432c:	1000051e 	bne	r2,zero,4344 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    4330:	e0fffe17 	ldw	r3,-8(fp)
    4334:	00801884 	movi	r2,98
    4338:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    433c:	e03fff15 	stw	zero,-4(fp)
    4340:	00006d06 	br	44f8 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    4344:	e0bffb17 	ldw	r2,-20(fp)
    4348:	108000cc 	andi	r2,r2,3
    434c:	1005003a 	cmpeq	r2,r2,zero
    4350:	1000051e 	bne	r2,zero,4368 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    4354:	e0fffe17 	ldw	r3,-8(fp)
    4358:	00801884 	movi	r2,98
    435c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    4360:	e03fff15 	stw	zero,-4(fp)
    4364:	00006406 	br	44f8 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    4368:	e0bffc17 	ldw	r2,-16(fp)
    436c:	108000a8 	cmpgeui	r2,r2,2
    4370:	1000051e 	bne	r2,zero,4388 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    4374:	e0fffe17 	ldw	r3,-8(fp)
    4378:	008016c4 	movi	r2,91
    437c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    4380:	e03fff15 	stw	zero,-4(fp)
    4384:	00005c06 	br	44f8 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    4388:	e0bffd17 	ldw	r2,-12(fp)
    438c:	10800128 	cmpgeui	r2,r2,4
    4390:	1000051e 	bne	r2,zero,43a8 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    4394:	e0fffe17 	ldw	r3,-8(fp)
    4398:	00801704 	movi	r2,92
    439c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    43a0:	e03fff15 	stw	zero,-4(fp)
    43a4:	00005406 	br	44f8 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    43a8:	0005303a 	rdctl	r2,status
    43ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    43b0:	e0fff517 	ldw	r3,-44(fp)
    43b4:	00bfff84 	movi	r2,-2
    43b8:	1884703a 	and	r2,r3,r2
    43bc:	1001703a 	wrctl	status,r2
  
  return context;
    43c0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    43c4:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    43c8:	00800074 	movhi	r2,1
    43cc:	1082eb04 	addi	r2,r2,2988
    43d0:	10800017 	ldw	r2,0(r2)
    43d4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    43d8:	00800074 	movhi	r2,1
    43dc:	1082eb04 	addi	r2,r2,2988
    43e0:	10800017 	ldw	r2,0(r2)
    43e4:	1005003a 	cmpeq	r2,r2,zero
    43e8:	1000081e 	bne	r2,zero,440c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    43ec:	00800074 	movhi	r2,1
    43f0:	1082eb04 	addi	r2,r2,2988
    43f4:	10800017 	ldw	r2,0(r2)
    43f8:	10800117 	ldw	r2,4(r2)
    43fc:	1007883a 	mov	r3,r2
    4400:	00800074 	movhi	r2,1
    4404:	1082eb04 	addi	r2,r2,2988
    4408:	10c00015 	stw	r3,0(r2)
    440c:	e0bff617 	ldw	r2,-40(fp)
    4410:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4414:	e0bff417 	ldw	r2,-48(fp)
    4418:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    441c:	e0bffa17 	ldw	r2,-24(fp)
    4420:	1004c03a 	cmpne	r2,r2,zero
    4424:	1000051e 	bne	r2,zero,443c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
    4428:	e0fffe17 	ldw	r3,-8(fp)
    442c:	00801684 	movi	r2,90
    4430:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    4434:	e03fff15 	stw	zero,-4(fp)
    4438:	00002f06 	br	44f8 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    443c:	e0bffb17 	ldw	r2,-20(fp)
    4440:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    4444:	e0bffb17 	ldw	r2,-20(fp)
    4448:	1007883a 	mov	r3,r2
    444c:	e0bffd17 	ldw	r2,-12(fp)
    4450:	1885883a 	add	r2,r3,r2
    4454:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
    4458:	e03ff715 	stw	zero,-36(fp)
    445c:	00000d06 	br	4494 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    4460:	e0fff817 	ldw	r3,-32(fp)
    4464:	e0bff917 	ldw	r2,-28(fp)
    4468:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    446c:	e0bff917 	ldw	r2,-28(fp)
    4470:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    4474:	e0bff917 	ldw	r2,-28(fp)
    4478:	1007883a 	mov	r3,r2
    447c:	e0bffd17 	ldw	r2,-12(fp)
    4480:	1885883a 	add	r2,r3,r2
    4484:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    4488:	e0bff717 	ldw	r2,-36(fp)
    448c:	10800044 	addi	r2,r2,1
    4490:	e0bff715 	stw	r2,-36(fp)
    4494:	e0bffc17 	ldw	r2,-16(fp)
    4498:	10ffffc4 	addi	r3,r2,-1
    449c:	e0bff717 	ldw	r2,-36(fp)
    44a0:	10ffef36 	bltu	r2,r3,4460 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    44a4:	e0bff817 	ldw	r2,-32(fp)
    44a8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    44ac:	e0fffa17 	ldw	r3,-24(fp)
    44b0:	e0bffb17 	ldw	r2,-20(fp)
    44b4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    44b8:	e0fffa17 	ldw	r3,-24(fp)
    44bc:	e0bffb17 	ldw	r2,-20(fp)
    44c0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    44c4:	e0fffa17 	ldw	r3,-24(fp)
    44c8:	e0bffc17 	ldw	r2,-16(fp)
    44cc:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
    44d0:	e0fffa17 	ldw	r3,-24(fp)
    44d4:	e0bffc17 	ldw	r2,-16(fp)
    44d8:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    44dc:	e0fffa17 	ldw	r3,-24(fp)
    44e0:	e0bffd17 	ldw	r2,-12(fp)
    44e4:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	10000005 	stb	zero,0(r2)
    return (pmem);
    44f0:	e0bffa17 	ldw	r2,-24(fp)
    44f4:	e0bfff15 	stw	r2,-4(fp)
    44f8:	e0bfff17 	ldw	r2,-4(fp)
}
    44fc:	e037883a 	mov	sp,fp
    4500:	df000017 	ldw	fp,0(sp)
    4504:	dec00104 	addi	sp,sp,4
    4508:	f800283a 	ret

0000450c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    450c:	defff704 	addi	sp,sp,-36
    4510:	df000815 	stw	fp,32(sp)
    4514:	df000804 	addi	fp,sp,32
    4518:	e13ffd15 	stw	r4,-12(fp)
    451c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4520:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    4524:	e0bffe17 	ldw	r2,-8(fp)
    4528:	1004c03a 	cmpne	r2,r2,zero
    452c:	1000021e 	bne	r2,zero,4538 <OSMemGet+0x2c>
        return ((void *)0);
    4530:	e03fff15 	stw	zero,-4(fp)
    4534:	00003106 	br	45fc <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    4538:	e0bffd17 	ldw	r2,-12(fp)
    453c:	1004c03a 	cmpne	r2,r2,zero
    4540:	1000051e 	bne	r2,zero,4558 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    4544:	e0fffe17 	ldw	r3,-8(fp)
    4548:	00801804 	movi	r2,96
    454c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    4550:	e03fff15 	stw	zero,-4(fp)
    4554:	00002906 	br	45fc <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4558:	0005303a 	rdctl	r2,status
    455c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4560:	e0fffa17 	ldw	r3,-24(fp)
    4564:	00bfff84 	movi	r2,-2
    4568:	1884703a 	and	r2,r3,r2
    456c:	1001703a 	wrctl	status,r2
  
  return context;
    4570:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4574:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    4578:	e0bffd17 	ldw	r2,-12(fp)
    457c:	10800417 	ldw	r2,16(r2)
    4580:	1005003a 	cmpeq	r2,r2,zero
    4584:	1000151e 	bne	r2,zero,45dc <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    4588:	e0bffd17 	ldw	r2,-12(fp)
    458c:	10800117 	ldw	r2,4(r2)
    4590:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    4594:	e0bffc17 	ldw	r2,-16(fp)
    4598:	10c00017 	ldw	r3,0(r2)
    459c:	e0bffd17 	ldw	r2,-12(fp)
    45a0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    45a4:	e0bffd17 	ldw	r2,-12(fp)
    45a8:	10800417 	ldw	r2,16(r2)
    45ac:	10ffffc4 	addi	r3,r2,-1
    45b0:	e0bffd17 	ldw	r2,-12(fp)
    45b4:	10c00415 	stw	r3,16(r2)
    45b8:	e0bffb17 	ldw	r2,-20(fp)
    45bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    45c0:	e0bff917 	ldw	r2,-28(fp)
    45c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    45c8:	e0bffe17 	ldw	r2,-8(fp)
    45cc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    45d0:	e0bffc17 	ldw	r2,-16(fp)
    45d4:	e0bfff15 	stw	r2,-4(fp)
    45d8:	00000806 	br	45fc <OSMemGet+0xf0>
    45dc:	e0bffb17 	ldw	r2,-20(fp)
    45e0:	e0bff815 	stw	r2,-32(fp)
    45e4:	e0bff817 	ldw	r2,-32(fp)
    45e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    45ec:	e0fffe17 	ldw	r3,-8(fp)
    45f0:	00801744 	movi	r2,93
    45f4:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    45f8:	e03fff15 	stw	zero,-4(fp)
    45fc:	e0bfff17 	ldw	r2,-4(fp)
}
    4600:	e037883a 	mov	sp,fp
    4604:	df000017 	ldw	fp,0(sp)
    4608:	dec00104 	addi	sp,sp,4
    460c:	f800283a 	ret

00004610 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    4610:	defff604 	addi	sp,sp,-40
    4614:	dfc00915 	stw	ra,36(sp)
    4618:	df000815 	stw	fp,32(sp)
    461c:	df000804 	addi	fp,sp,32
    4620:	e13ffc15 	stw	r4,-16(fp)
    4624:	e17ffd15 	stw	r5,-12(fp)
    4628:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    462c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4630:	e0bffe17 	ldw	r2,-8(fp)
    4634:	1004c03a 	cmpne	r2,r2,zero
    4638:	1000021e 	bne	r2,zero,4644 <OSMemNameGet+0x34>
        return (0);
    463c:	e03fff15 	stw	zero,-4(fp)
    4640:	00003006 	br	4704 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    4644:	e0bffc17 	ldw	r2,-16(fp)
    4648:	1004c03a 	cmpne	r2,r2,zero
    464c:	1000051e 	bne	r2,zero,4664 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    4650:	e0fffe17 	ldw	r3,-8(fp)
    4654:	00801804 	movi	r2,96
    4658:	18800005 	stb	r2,0(r3)
        return (0);
    465c:	e03fff15 	stw	zero,-4(fp)
    4660:	00002806 	br	4704 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4664:	e0bffd17 	ldw	r2,-12(fp)
    4668:	1004c03a 	cmpne	r2,r2,zero
    466c:	1000051e 	bne	r2,zero,4684 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
    4670:	e0fffe17 	ldw	r3,-8(fp)
    4674:	00800304 	movi	r2,12
    4678:	18800005 	stb	r2,0(r3)
        return (0);
    467c:	e03fff15 	stw	zero,-4(fp)
    4680:	00002006 	br	4704 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4684:	00800074 	movhi	r2,1
    4688:	1082f004 	addi	r2,r2,3008
    468c:	10800003 	ldbu	r2,0(r2)
    4690:	10803fcc 	andi	r2,r2,255
    4694:	1005003a 	cmpeq	r2,r2,zero
    4698:	1000051e 	bne	r2,zero,46b0 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
    469c:	e0fffe17 	ldw	r3,-8(fp)
    46a0:	00800444 	movi	r2,17
    46a4:	18800005 	stb	r2,0(r3)
        return (0);
    46a8:	e03fff15 	stw	zero,-4(fp)
    46ac:	00001506 	br	4704 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46b0:	0005303a 	rdctl	r2,status
    46b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46b8:	e0fff917 	ldw	r3,-28(fp)
    46bc:	00bfff84 	movi	r2,-2
    46c0:	1884703a 	and	r2,r3,r2
    46c4:	1001703a 	wrctl	status,r2
  
  return context;
    46c8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    46cc:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    46d0:	e0bffc17 	ldw	r2,-16(fp)
    46d4:	11400504 	addi	r5,r2,20
    46d8:	e13ffd17 	ldw	r4,-12(fp)
    46dc:	00022840 	call	2284 <OS_StrCopy>
    46e0:	e0bffb05 	stb	r2,-20(fp)
    46e4:	e0bffa17 	ldw	r2,-24(fp)
    46e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46ec:	e0bff817 	ldw	r2,-32(fp)
    46f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    46f4:	e0bffe17 	ldw	r2,-8(fp)
    46f8:	10000005 	stb	zero,0(r2)
    return (len);
    46fc:	e0bffb03 	ldbu	r2,-20(fp)
    4700:	e0bfff15 	stw	r2,-4(fp)
    4704:	e0bfff17 	ldw	r2,-4(fp)
}
    4708:	e037883a 	mov	sp,fp
    470c:	dfc00117 	ldw	ra,4(sp)
    4710:	df000017 	ldw	fp,0(sp)
    4714:	dec00204 	addi	sp,sp,8
    4718:	f800283a 	ret

0000471c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    471c:	defff604 	addi	sp,sp,-40
    4720:	dfc00915 	stw	ra,36(sp)
    4724:	df000815 	stw	fp,32(sp)
    4728:	df000804 	addi	fp,sp,32
    472c:	e13ffd15 	stw	r4,-12(fp)
    4730:	e17ffe15 	stw	r5,-8(fp)
    4734:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4738:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    473c:	e0bfff17 	ldw	r2,-4(fp)
    4740:	1005003a 	cmpeq	r2,r2,zero
    4744:	1000381e 	bne	r2,zero,4828 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    4748:	e0bffd17 	ldw	r2,-12(fp)
    474c:	1004c03a 	cmpne	r2,r2,zero
    4750:	1000041e 	bne	r2,zero,4764 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    4754:	e0ffff17 	ldw	r3,-4(fp)
    4758:	00801804 	movi	r2,96
    475c:	18800005 	stb	r2,0(r3)
        return;
    4760:	00003106 	br	4828 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4764:	e0bffe17 	ldw	r2,-8(fp)
    4768:	1004c03a 	cmpne	r2,r2,zero
    476c:	1000041e 	bne	r2,zero,4780 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
    4770:	e0ffff17 	ldw	r3,-4(fp)
    4774:	00800304 	movi	r2,12
    4778:	18800005 	stb	r2,0(r3)
        return;
    477c:	00002a06 	br	4828 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4780:	00800074 	movhi	r2,1
    4784:	1082f004 	addi	r2,r2,3008
    4788:	10800003 	ldbu	r2,0(r2)
    478c:	10803fcc 	andi	r2,r2,255
    4790:	1005003a 	cmpeq	r2,r2,zero
    4794:	1000041e 	bne	r2,zero,47a8 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
    4798:	e0ffff17 	ldw	r3,-4(fp)
    479c:	00800484 	movi	r2,18
    47a0:	18800005 	stb	r2,0(r3)
        return;
    47a4:	00002006 	br	4828 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    47a8:	0005303a 	rdctl	r2,status
    47ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47b0:	e0fffa17 	ldw	r3,-24(fp)
    47b4:	00bfff84 	movi	r2,-2
    47b8:	1884703a 	and	r2,r3,r2
    47bc:	1001703a 	wrctl	status,r2
  
  return context;
    47c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    47c4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    47c8:	e13ffe17 	ldw	r4,-8(fp)
    47cc:	00023040 	call	2304 <OS_StrLen>
    47d0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    47d4:	e0bffc03 	ldbu	r2,-16(fp)
    47d8:	10800830 	cmpltui	r2,r2,32
    47dc:	1000081e 	bne	r2,zero,4800 <OSMemNameSet+0xe4>
    47e0:	e0bffb17 	ldw	r2,-20(fp)
    47e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47e8:	e0bff917 	ldw	r2,-28(fp)
    47ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    47f0:	e0ffff17 	ldw	r3,-4(fp)
    47f4:	008018c4 	movi	r2,99
    47f8:	18800005 	stb	r2,0(r3)
        return;
    47fc:	00000a06 	br	4828 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    4800:	e0bffd17 	ldw	r2,-12(fp)
    4804:	11000504 	addi	r4,r2,20
    4808:	e17ffe17 	ldw	r5,-8(fp)
    480c:	00022840 	call	2284 <OS_StrCopy>
    4810:	e0bffb17 	ldw	r2,-20(fp)
    4814:	e0bff815 	stw	r2,-32(fp)
    4818:	e0bff817 	ldw	r2,-32(fp)
    481c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4820:	e0bfff17 	ldw	r2,-4(fp)
    4824:	10000005 	stb	zero,0(r2)
}
    4828:	e037883a 	mov	sp,fp
    482c:	dfc00117 	ldw	ra,4(sp)
    4830:	df000017 	ldw	fp,0(sp)
    4834:	dec00204 	addi	sp,sp,8
    4838:	f800283a 	ret

0000483c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    483c:	defff804 	addi	sp,sp,-32
    4840:	df000715 	stw	fp,28(sp)
    4844:	df000704 	addi	fp,sp,28
    4848:	e13ffd15 	stw	r4,-12(fp)
    484c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4850:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    4854:	e0bffd17 	ldw	r2,-12(fp)
    4858:	1004c03a 	cmpne	r2,r2,zero
    485c:	1000031e 	bne	r2,zero,486c <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
    4860:	00801804 	movi	r2,96
    4864:	e0bfff15 	stw	r2,-4(fp)
    4868:	00002b06 	br	4918 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    486c:	e0bffe17 	ldw	r2,-8(fp)
    4870:	1004c03a 	cmpne	r2,r2,zero
    4874:	1000031e 	bne	r2,zero,4884 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
    4878:	008017c4 	movi	r2,95
    487c:	e0bfff15 	stw	r2,-4(fp)
    4880:	00002506 	br	4918 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4884:	0005303a 	rdctl	r2,status
    4888:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    488c:	e0fffb17 	ldw	r3,-20(fp)
    4890:	00bfff84 	movi	r2,-2
    4894:	1884703a 	and	r2,r3,r2
    4898:	1001703a 	wrctl	status,r2
  
  return context;
    489c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    48a0:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    48a4:	e0bffd17 	ldw	r2,-12(fp)
    48a8:	10c00417 	ldw	r3,16(r2)
    48ac:	e0bffd17 	ldw	r2,-12(fp)
    48b0:	10800317 	ldw	r2,12(r2)
    48b4:	18800736 	bltu	r3,r2,48d4 <OSMemPut+0x98>
    48b8:	e0bffc17 	ldw	r2,-16(fp)
    48bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48c0:	e0bffa17 	ldw	r2,-24(fp)
    48c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    48c8:	00801784 	movi	r2,94
    48cc:	e0bfff15 	stw	r2,-4(fp)
    48d0:	00001106 	br	4918 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    48d4:	e0fffe17 	ldw	r3,-8(fp)
    48d8:	e0bffd17 	ldw	r2,-12(fp)
    48dc:	10800117 	ldw	r2,4(r2)
    48e0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
    48e4:	e0fffd17 	ldw	r3,-12(fp)
    48e8:	e0bffe17 	ldw	r2,-8(fp)
    48ec:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    48f0:	e0bffd17 	ldw	r2,-12(fp)
    48f4:	10800417 	ldw	r2,16(r2)
    48f8:	10c00044 	addi	r3,r2,1
    48fc:	e0bffd17 	ldw	r2,-12(fp)
    4900:	10c00415 	stw	r3,16(r2)
    4904:	e0bffc17 	ldw	r2,-16(fp)
    4908:	e0bff915 	stw	r2,-28(fp)
    490c:	e0bff917 	ldw	r2,-28(fp)
    4910:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    4914:	e03fff15 	stw	zero,-4(fp)
    4918:	e0bfff17 	ldw	r2,-4(fp)
}
    491c:	e037883a 	mov	sp,fp
    4920:	df000017 	ldw	fp,0(sp)
    4924:	dec00104 	addi	sp,sp,4
    4928:	f800283a 	ret

0000492c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    492c:	defff904 	addi	sp,sp,-28
    4930:	df000615 	stw	fp,24(sp)
    4934:	df000604 	addi	fp,sp,24
    4938:	e13ffd15 	stw	r4,-12(fp)
    493c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4940:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    4944:	e0bffd17 	ldw	r2,-12(fp)
    4948:	1004c03a 	cmpne	r2,r2,zero
    494c:	1000031e 	bne	r2,zero,495c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
    4950:	00801804 	movi	r2,96
    4954:	e0bfff15 	stw	r2,-4(fp)
    4958:	00002e06 	br	4a14 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    495c:	e0bffe17 	ldw	r2,-8(fp)
    4960:	1004c03a 	cmpne	r2,r2,zero
    4964:	1000031e 	bne	r2,zero,4974 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
    4968:	00801844 	movi	r2,97
    496c:	e0bfff15 	stw	r2,-4(fp)
    4970:	00002806 	br	4a14 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4974:	0005303a 	rdctl	r2,status
    4978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    497c:	e0fffb17 	ldw	r3,-20(fp)
    4980:	00bfff84 	movi	r2,-2
    4984:	1884703a 	and	r2,r3,r2
    4988:	1001703a 	wrctl	status,r2
  
  return context;
    498c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4990:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    4994:	e0bffd17 	ldw	r2,-12(fp)
    4998:	10c00017 	ldw	r3,0(r2)
    499c:	e0bffe17 	ldw	r2,-8(fp)
    49a0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    49a4:	e0bffd17 	ldw	r2,-12(fp)
    49a8:	10c00117 	ldw	r3,4(r2)
    49ac:	e0bffe17 	ldw	r2,-8(fp)
    49b0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    49b4:	e0bffd17 	ldw	r2,-12(fp)
    49b8:	10c00217 	ldw	r3,8(r2)
    49bc:	e0bffe17 	ldw	r2,-8(fp)
    49c0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    49c4:	e0bffd17 	ldw	r2,-12(fp)
    49c8:	10c00317 	ldw	r3,12(r2)
    49cc:	e0bffe17 	ldw	r2,-8(fp)
    49d0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    49d4:	e0bffd17 	ldw	r2,-12(fp)
    49d8:	10c00417 	ldw	r3,16(r2)
    49dc:	e0bffe17 	ldw	r2,-8(fp)
    49e0:	10c00415 	stw	r3,16(r2)
    49e4:	e0bffc17 	ldw	r2,-16(fp)
    49e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49ec:	e0bffa17 	ldw	r2,-24(fp)
    49f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    49f4:	e0bffe17 	ldw	r2,-8(fp)
    49f8:	10c00317 	ldw	r3,12(r2)
    49fc:	e0bffe17 	ldw	r2,-8(fp)
    4a00:	10800417 	ldw	r2,16(r2)
    4a04:	1887c83a 	sub	r3,r3,r2
    4a08:	e0bffe17 	ldw	r2,-8(fp)
    4a0c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    4a10:	e03fff15 	stw	zero,-4(fp)
    4a14:	e0bfff17 	ldw	r2,-4(fp)
}
    4a18:	e037883a 	mov	sp,fp
    4a1c:	df000017 	ldw	fp,0(sp)
    4a20:	dec00104 	addi	sp,sp,4
    4a24:	f800283a 	ret

00004a28 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    4a28:	defffc04 	addi	sp,sp,-16
    4a2c:	dfc00315 	stw	ra,12(sp)
    4a30:	df000215 	stw	fp,8(sp)
    4a34:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    4a38:	010000b4 	movhi	r4,2
    4a3c:	2123d704 	addi	r4,r4,-28836
    4a40:	01430c04 	movi	r5,3120
    4a44:	00020800 	call	2080 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    4a48:	008000b4 	movhi	r2,2
    4a4c:	10a3d704 	addi	r2,r2,-28836
    4a50:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    4a54:	e03ffe0d 	sth	zero,-8(fp)
    4a58:	00001406 	br	4aac <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    4a5c:	e13ffe0b 	ldhu	r4,-8(fp)
    4a60:	01400d04 	movi	r5,52
    4a64:	000e5740 	call	e574 <__mulsi3>
    4a68:	1007883a 	mov	r3,r2
    4a6c:	008000b4 	movhi	r2,2
    4a70:	10a3e404 	addi	r2,r2,-28784
    4a74:	1887883a 	add	r3,r3,r2
    4a78:	e0bfff17 	ldw	r2,-4(fp)
    4a7c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    4a80:	e0ffff17 	ldw	r3,-4(fp)
    4a84:	00800fc4 	movi	r2,63
    4a88:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    4a8c:	e0bfff17 	ldw	r2,-4(fp)
    4a90:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    4a94:	e0bfff17 	ldw	r2,-4(fp)
    4a98:	10800d04 	addi	r2,r2,52
    4a9c:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    4aa0:	e0bffe0b 	ldhu	r2,-8(fp)
    4aa4:	10800044 	addi	r2,r2,1
    4aa8:	e0bffe0d 	sth	r2,-8(fp)
    4aac:	e0bffe0b 	ldhu	r2,-8(fp)
    4ab0:	10800ef0 	cmpltui	r2,r2,59
    4ab4:	103fe91e 	bne	r2,zero,4a5c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    4ab8:	e0bfff17 	ldw	r2,-4(fp)
    4abc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    4ac0:	e0ffff17 	ldw	r3,-4(fp)
    4ac4:	00800fc4 	movi	r2,63
    4ac8:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    4acc:	e0bfff17 	ldw	r2,-4(fp)
    4ad0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    4ad4:	00c00074 	movhi	r3,1
    4ad8:	18c2eb04 	addi	r3,r3,2988
    4adc:	008000b4 	movhi	r2,2
    4ae0:	10a3d704 	addi	r2,r2,-28836
    4ae4:	18800015 	stw	r2,0(r3)
#endif
}
    4ae8:	e037883a 	mov	sp,fp
    4aec:	dfc00117 	ldw	ra,4(sp)
    4af0:	df000017 	ldw	fp,0(sp)
    4af4:	dec00204 	addi	sp,sp,8
    4af8:	f800283a 	ret

00004afc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    4afc:	defff704 	addi	sp,sp,-36
    4b00:	df000815 	stw	fp,32(sp)
    4b04:	df000804 	addi	fp,sp,32
    4b08:	e13ffd15 	stw	r4,-12(fp)
    4b0c:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4b10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4b14:	e0bffe17 	ldw	r2,-8(fp)
    4b18:	1004c03a 	cmpne	r2,r2,zero
    4b1c:	1000021e 	bne	r2,zero,4b28 <OSQAccept+0x2c>
        return ((void *)0);
    4b20:	e03fff15 	stw	zero,-4(fp)
    4b24:	00004506 	br	4c3c <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    4b28:	e0bffd17 	ldw	r2,-12(fp)
    4b2c:	1004c03a 	cmpne	r2,r2,zero
    4b30:	1000051e 	bne	r2,zero,4b48 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    4b34:	e0fffe17 	ldw	r3,-8(fp)
    4b38:	00800104 	movi	r2,4
    4b3c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    4b40:	e03fff15 	stw	zero,-4(fp)
    4b44:	00003d06 	br	4c3c <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    4b48:	e0bffd17 	ldw	r2,-12(fp)
    4b4c:	10800003 	ldbu	r2,0(r2)
    4b50:	10803fcc 	andi	r2,r2,255
    4b54:	108000a0 	cmpeqi	r2,r2,2
    4b58:	1000051e 	bne	r2,zero,4b70 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
    4b5c:	e0fffe17 	ldw	r3,-8(fp)
    4b60:	00800044 	movi	r2,1
    4b64:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    4b68:	e03fff15 	stw	zero,-4(fp)
    4b6c:	00003306 	br	4c3c <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b70:	0005303a 	rdctl	r2,status
    4b74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b78:	e0fff917 	ldw	r3,-28(fp)
    4b7c:	00bfff84 	movi	r2,-2
    4b80:	1884703a 	and	r2,r3,r2
    4b84:	1001703a 	wrctl	status,r2
  
  return context;
    4b88:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    4b8c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    4b90:	e0bffd17 	ldw	r2,-12(fp)
    4b94:	10800117 	ldw	r2,4(r2)
    4b98:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    4b9c:	e0bffb17 	ldw	r2,-20(fp)
    4ba0:	1080058b 	ldhu	r2,22(r2)
    4ba4:	10bfffcc 	andi	r2,r2,65535
    4ba8:	1005003a 	cmpeq	r2,r2,zero
    4bac:	1000191e 	bne	r2,zero,4c14 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    4bb0:	e0bffb17 	ldw	r2,-20(fp)
    4bb4:	10c00417 	ldw	r3,16(r2)
    4bb8:	18800017 	ldw	r2,0(r3)
    4bbc:	e0bffc15 	stw	r2,-16(fp)
    4bc0:	18c00104 	addi	r3,r3,4
    4bc4:	e0bffb17 	ldw	r2,-20(fp)
    4bc8:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    4bcc:	e0bffb17 	ldw	r2,-20(fp)
    4bd0:	1080058b 	ldhu	r2,22(r2)
    4bd4:	10bfffc4 	addi	r2,r2,-1
    4bd8:	1007883a 	mov	r3,r2
    4bdc:	e0bffb17 	ldw	r2,-20(fp)
    4be0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    4be4:	e0bffb17 	ldw	r2,-20(fp)
    4be8:	10c00417 	ldw	r3,16(r2)
    4bec:	e0bffb17 	ldw	r2,-20(fp)
    4bf0:	10800217 	ldw	r2,8(r2)
    4bf4:	1880041e 	bne	r3,r2,4c08 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
    4bf8:	e0bffb17 	ldw	r2,-20(fp)
    4bfc:	10c00117 	ldw	r3,4(r2)
    4c00:	e0bffb17 	ldw	r2,-20(fp)
    4c04:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    4c08:	e0bffe17 	ldw	r2,-8(fp)
    4c0c:	10000005 	stb	zero,0(r2)
    4c10:	00000406 	br	4c24 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    4c14:	e0fffe17 	ldw	r3,-8(fp)
    4c18:	008007c4 	movi	r2,31
    4c1c:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    4c20:	e03ffc15 	stw	zero,-16(fp)
    4c24:	e0bffa17 	ldw	r2,-24(fp)
    4c28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c2c:	e0bff817 	ldw	r2,-32(fp)
    4c30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    4c34:	e0bffc17 	ldw	r2,-16(fp)
    4c38:	e0bfff15 	stw	r2,-4(fp)
    4c3c:	e0bfff17 	ldw	r2,-4(fp)
}
    4c40:	e037883a 	mov	sp,fp
    4c44:	df000017 	ldw	fp,0(sp)
    4c48:	dec00104 	addi	sp,sp,4
    4c4c:	f800283a 	ret

00004c50 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    4c50:	defff304 	addi	sp,sp,-52
    4c54:	dfc00c15 	stw	ra,48(sp)
    4c58:	df000b15 	stw	fp,44(sp)
    4c5c:	df000b04 	addi	fp,sp,44
    4c60:	e13ffd15 	stw	r4,-12(fp)
    4c64:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4c68:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    4c6c:	00800074 	movhi	r2,1
    4c70:	1082f004 	addi	r2,r2,3008
    4c74:	10800003 	ldbu	r2,0(r2)
    4c78:	10803fcc 	andi	r2,r2,255
    4c7c:	1005003a 	cmpeq	r2,r2,zero
    4c80:	1000021e 	bne	r2,zero,4c8c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    4c84:	e03fff15 	stw	zero,-4(fp)
    4c88:	00007006 	br	4e4c <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c8c:	0005303a 	rdctl	r2,status
    4c90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c94:	e0fff917 	ldw	r3,-28(fp)
    4c98:	00bfff84 	movi	r2,-2
    4c9c:	1884703a 	and	r2,r3,r2
    4ca0:	1001703a 	wrctl	status,r2
  
  return context;
    4ca4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    4ca8:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    4cac:	00800074 	movhi	r2,1
    4cb0:	1082ef04 	addi	r2,r2,3004
    4cb4:	10800017 	ldw	r2,0(r2)
    4cb8:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    4cbc:	00800074 	movhi	r2,1
    4cc0:	1082ef04 	addi	r2,r2,3004
    4cc4:	10800017 	ldw	r2,0(r2)
    4cc8:	1005003a 	cmpeq	r2,r2,zero
    4ccc:	1000081e 	bne	r2,zero,4cf0 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    4cd0:	00800074 	movhi	r2,1
    4cd4:	1082ef04 	addi	r2,r2,3004
    4cd8:	10800017 	ldw	r2,0(r2)
    4cdc:	10800117 	ldw	r2,4(r2)
    4ce0:	1007883a 	mov	r3,r2
    4ce4:	00800074 	movhi	r2,1
    4ce8:	1082ef04 	addi	r2,r2,3004
    4cec:	10c00015 	stw	r3,0(r2)
    4cf0:	e0bffa17 	ldw	r2,-24(fp)
    4cf4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4cf8:	e0bff817 	ldw	r2,-32(fp)
    4cfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    4d00:	e0bffc17 	ldw	r2,-16(fp)
    4d04:	1005003a 	cmpeq	r2,r2,zero
    4d08:	10004e1e 	bne	r2,zero,4e44 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d0c:	0005303a 	rdctl	r2,status
    4d10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d14:	e0fff717 	ldw	r3,-36(fp)
    4d18:	00bfff84 	movi	r2,-2
    4d1c:	1884703a 	and	r2,r3,r2
    4d20:	1001703a 	wrctl	status,r2
  
  return context;
    4d24:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
    4d28:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    4d2c:	00800074 	movhi	r2,1
    4d30:	1082ed04 	addi	r2,r2,2996
    4d34:	10800017 	ldw	r2,0(r2)
    4d38:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    4d3c:	e0bffb17 	ldw	r2,-20(fp)
    4d40:	1005003a 	cmpeq	r2,r2,zero
    4d44:	1000311e 	bne	r2,zero,4e0c <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    4d48:	00800074 	movhi	r2,1
    4d4c:	1082ed04 	addi	r2,r2,2996
    4d50:	10800017 	ldw	r2,0(r2)
    4d54:	10c00017 	ldw	r3,0(r2)
    4d58:	00800074 	movhi	r2,1
    4d5c:	1082ed04 	addi	r2,r2,2996
    4d60:	10c00015 	stw	r3,0(r2)
    4d64:	e0bffa17 	ldw	r2,-24(fp)
    4d68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d6c:	e0bff617 	ldw	r2,-40(fp)
    4d70:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    4d74:	e0fffb17 	ldw	r3,-20(fp)
    4d78:	e0bffd17 	ldw	r2,-12(fp)
    4d7c:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
    4d80:	e0bffe0b 	ldhu	r2,-8(fp)
    4d84:	1085883a 	add	r2,r2,r2
    4d88:	1085883a 	add	r2,r2,r2
    4d8c:	1007883a 	mov	r3,r2
    4d90:	e0bffd17 	ldw	r2,-12(fp)
    4d94:	1887883a 	add	r3,r3,r2
    4d98:	e0bffb17 	ldw	r2,-20(fp)
    4d9c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    4da0:	e0fffb17 	ldw	r3,-20(fp)
    4da4:	e0bffd17 	ldw	r2,-12(fp)
    4da8:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
    4dac:	e0fffb17 	ldw	r3,-20(fp)
    4db0:	e0bffd17 	ldw	r2,-12(fp)
    4db4:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
    4db8:	e0fffb17 	ldw	r3,-20(fp)
    4dbc:	e0bffe0b 	ldhu	r2,-8(fp)
    4dc0:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
    4dc4:	e0bffb17 	ldw	r2,-20(fp)
    4dc8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    4dcc:	e0fffc17 	ldw	r3,-16(fp)
    4dd0:	00800084 	movi	r2,2
    4dd4:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
    4dd8:	e0bffc17 	ldw	r2,-16(fp)
    4ddc:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    4de0:	e0fffc17 	ldw	r3,-16(fp)
    4de4:	e0bffb17 	ldw	r2,-20(fp)
    4de8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    4dec:	e0fffc17 	ldw	r3,-16(fp)
    4df0:	00800fc4 	movi	r2,63
    4df4:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    4df8:	e0bffc17 	ldw	r2,-16(fp)
    4dfc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    4e00:	e13ffc17 	ldw	r4,-16(fp)
    4e04:	0001cb40 	call	1cb4 <OS_EventWaitListInit>
    4e08:	00000e06 	br	4e44 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    4e0c:	00800074 	movhi	r2,1
    4e10:	1082ef04 	addi	r2,r2,3004
    4e14:	10c00017 	ldw	r3,0(r2)
    4e18:	e0bffc17 	ldw	r2,-16(fp)
    4e1c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    4e20:	00c00074 	movhi	r3,1
    4e24:	18c2ef04 	addi	r3,r3,3004
    4e28:	e0bffc17 	ldw	r2,-16(fp)
    4e2c:	18800015 	stw	r2,0(r3)
    4e30:	e0bffa17 	ldw	r2,-24(fp)
    4e34:	e0bff515 	stw	r2,-44(fp)
    4e38:	e0bff517 	ldw	r2,-44(fp)
    4e3c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    4e40:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
    4e44:	e0bffc17 	ldw	r2,-16(fp)
    4e48:	e0bfff15 	stw	r2,-4(fp)
    4e4c:	e0bfff17 	ldw	r2,-4(fp)
}
    4e50:	e037883a 	mov	sp,fp
    4e54:	dfc00117 	ldw	ra,4(sp)
    4e58:	df000017 	ldw	fp,0(sp)
    4e5c:	dec00204 	addi	sp,sp,8
    4e60:	f800283a 	ret

00004e64 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    4e64:	defff004 	addi	sp,sp,-64
    4e68:	dfc00f15 	stw	ra,60(sp)
    4e6c:	df000e15 	stw	fp,56(sp)
    4e70:	df000e04 	addi	fp,sp,56
    4e74:	e13ffb15 	stw	r4,-20(fp)
    4e78:	e1bffd15 	stw	r6,-12(fp)
    4e7c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4e80:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    4e84:	e0bffd17 	ldw	r2,-12(fp)
    4e88:	1004c03a 	cmpne	r2,r2,zero
    4e8c:	1000031e 	bne	r2,zero,4e9c <OSQDel+0x38>
        return (pevent);
    4e90:	e0bffb17 	ldw	r2,-20(fp)
    4e94:	e0bfff15 	stw	r2,-4(fp)
    4e98:	0000ac06 	br	514c <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    4e9c:	e0bffb17 	ldw	r2,-20(fp)
    4ea0:	1004c03a 	cmpne	r2,r2,zero
    4ea4:	1000061e 	bne	r2,zero,4ec0 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
    4ea8:	e0fffd17 	ldw	r3,-12(fp)
    4eac:	00800104 	movi	r2,4
    4eb0:	18800005 	stb	r2,0(r3)
        return (pevent);
    4eb4:	e0fffb17 	ldw	r3,-20(fp)
    4eb8:	e0ffff15 	stw	r3,-4(fp)
    4ebc:	0000a306 	br	514c <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    4ec0:	e0bffb17 	ldw	r2,-20(fp)
    4ec4:	10800003 	ldbu	r2,0(r2)
    4ec8:	10803fcc 	andi	r2,r2,255
    4ecc:	108000a0 	cmpeqi	r2,r2,2
    4ed0:	1000061e 	bne	r2,zero,4eec <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
    4ed4:	e0fffd17 	ldw	r3,-12(fp)
    4ed8:	00800044 	movi	r2,1
    4edc:	18800005 	stb	r2,0(r3)
        return (pevent);
    4ee0:	e0bffb17 	ldw	r2,-20(fp)
    4ee4:	e0bfff15 	stw	r2,-4(fp)
    4ee8:	00009806 	br	514c <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4eec:	00800074 	movhi	r2,1
    4ef0:	1082f004 	addi	r2,r2,3008
    4ef4:	10800003 	ldbu	r2,0(r2)
    4ef8:	10803fcc 	andi	r2,r2,255
    4efc:	1005003a 	cmpeq	r2,r2,zero
    4f00:	1000061e 	bne	r2,zero,4f1c <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    4f04:	e0fffd17 	ldw	r3,-12(fp)
    4f08:	008003c4 	movi	r2,15
    4f0c:	18800005 	stb	r2,0(r3)
        return (pevent);
    4f10:	e0fffb17 	ldw	r3,-20(fp)
    4f14:	e0ffff15 	stw	r3,-4(fp)
    4f18:	00008c06 	br	514c <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f1c:	0005303a 	rdctl	r2,status
    4f20:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f24:	e0fff617 	ldw	r3,-40(fp)
    4f28:	00bfff84 	movi	r2,-2
    4f2c:	1884703a 	and	r2,r3,r2
    4f30:	1001703a 	wrctl	status,r2
  
  return context;
    4f34:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
    4f38:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    4f3c:	e0bffb17 	ldw	r2,-20(fp)
    4f40:	10800283 	ldbu	r2,10(r2)
    4f44:	10803fcc 	andi	r2,r2,255
    4f48:	1005003a 	cmpeq	r2,r2,zero
    4f4c:	1000031e 	bne	r2,zero,4f5c <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    4f50:	00800044 	movi	r2,1
    4f54:	e0bffa05 	stb	r2,-24(fp)
    4f58:	00000106 	br	4f60 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    4f5c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
    4f60:	e0bffc03 	ldbu	r2,-16(fp)
    4f64:	e0bffe15 	stw	r2,-8(fp)
    4f68:	e0fffe17 	ldw	r3,-8(fp)
    4f6c:	1805003a 	cmpeq	r2,r3,zero
    4f70:	1000041e 	bne	r2,zero,4f84 <OSQDel+0x120>
    4f74:	e0fffe17 	ldw	r3,-8(fp)
    4f78:	18800060 	cmpeqi	r2,r3,1
    4f7c:	1000391e 	bne	r2,zero,5064 <OSQDel+0x200>
    4f80:	00006706 	br	5120 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    4f84:	e0bffa03 	ldbu	r2,-24(fp)
    4f88:	1004c03a 	cmpne	r2,r2,zero
    4f8c:	1000261e 	bne	r2,zero,5028 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    4f90:	e0fffb17 	ldw	r3,-20(fp)
    4f94:	00800fc4 	movi	r2,63
    4f98:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    4f9c:	e0bffb17 	ldw	r2,-20(fp)
    4fa0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    4fa4:	e0bffb17 	ldw	r2,-20(fp)
    4fa8:	10800117 	ldw	r2,4(r2)
    4fac:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    4fb0:	00800074 	movhi	r2,1
    4fb4:	1082ed04 	addi	r2,r2,2996
    4fb8:	10c00017 	ldw	r3,0(r2)
    4fbc:	e0bff817 	ldw	r2,-32(fp)
    4fc0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    4fc4:	00c00074 	movhi	r3,1
    4fc8:	18c2ed04 	addi	r3,r3,2996
    4fcc:	e0bff817 	ldw	r2,-32(fp)
    4fd0:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4fd4:	e0bffb17 	ldw	r2,-20(fp)
    4fd8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    4fdc:	00800074 	movhi	r2,1
    4fe0:	1082ef04 	addi	r2,r2,3004
    4fe4:	10c00017 	ldw	r3,0(r2)
    4fe8:	e0bffb17 	ldw	r2,-20(fp)
    4fec:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    4ff0:	e0bffb17 	ldw	r2,-20(fp)
    4ff4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    4ff8:	00c00074 	movhi	r3,1
    4ffc:	18c2ef04 	addi	r3,r3,3004
    5000:	e0bffb17 	ldw	r2,-20(fp)
    5004:	18800015 	stw	r2,0(r3)
    5008:	e0bff717 	ldw	r2,-36(fp)
    500c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5010:	e0bff517 	ldw	r2,-44(fp)
    5014:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    5018:	e0bffd17 	ldw	r2,-12(fp)
    501c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    5020:	e03ff915 	stw	zero,-28(fp)
    5024:	00004706 	br	5144 <OSQDel+0x2e0>
    5028:	e0bff717 	ldw	r2,-36(fp)
    502c:	e0bff415 	stw	r2,-48(fp)
    5030:	e0bff417 	ldw	r2,-48(fp)
    5034:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    5038:	e0fffd17 	ldw	r3,-12(fp)
    503c:	00801244 	movi	r2,73
    5040:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
    5044:	e0bffb17 	ldw	r2,-20(fp)
    5048:	e0bff915 	stw	r2,-28(fp)
             }
             break;
    504c:	00003d06 	br	5144 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    5050:	e13ffb17 	ldw	r4,-20(fp)
    5054:	000b883a 	mov	r5,zero
    5058:	01800104 	movi	r6,4
    505c:	000f883a 	mov	r7,zero
    5060:	00017000 	call	1700 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    5064:	e0bffb17 	ldw	r2,-20(fp)
    5068:	10800283 	ldbu	r2,10(r2)
    506c:	10803fcc 	andi	r2,r2,255
    5070:	1004c03a 	cmpne	r2,r2,zero
    5074:	103ff61e 	bne	r2,zero,5050 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    5078:	e0fffb17 	ldw	r3,-20(fp)
    507c:	00800fc4 	movi	r2,63
    5080:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    5084:	e0bffb17 	ldw	r2,-20(fp)
    5088:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    508c:	e0bffb17 	ldw	r2,-20(fp)
    5090:	10800117 	ldw	r2,4(r2)
    5094:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    5098:	00800074 	movhi	r2,1
    509c:	1082ed04 	addi	r2,r2,2996
    50a0:	10c00017 	ldw	r3,0(r2)
    50a4:	e0bff817 	ldw	r2,-32(fp)
    50a8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    50ac:	00c00074 	movhi	r3,1
    50b0:	18c2ed04 	addi	r3,r3,2996
    50b4:	e0bff817 	ldw	r2,-32(fp)
    50b8:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    50bc:	e0bffb17 	ldw	r2,-20(fp)
    50c0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    50c4:	00800074 	movhi	r2,1
    50c8:	1082ef04 	addi	r2,r2,3004
    50cc:	10c00017 	ldw	r3,0(r2)
    50d0:	e0bffb17 	ldw	r2,-20(fp)
    50d4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    50d8:	e0bffb17 	ldw	r2,-20(fp)
    50dc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    50e0:	00c00074 	movhi	r3,1
    50e4:	18c2ef04 	addi	r3,r3,3004
    50e8:	e0bffb17 	ldw	r2,-20(fp)
    50ec:	18800015 	stw	r2,0(r3)
    50f0:	e0bff717 	ldw	r2,-36(fp)
    50f4:	e0bff315 	stw	r2,-52(fp)
    50f8:	e0bff317 	ldw	r2,-52(fp)
    50fc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    5100:	e0bffa03 	ldbu	r2,-24(fp)
    5104:	10800058 	cmpnei	r2,r2,1
    5108:	1000011e 	bne	r2,zero,5110 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    510c:	00021400 	call	2140 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    5110:	e0bffd17 	ldw	r2,-12(fp)
    5114:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    5118:	e03ff915 	stw	zero,-28(fp)
             break;
    511c:	00000906 	br	5144 <OSQDel+0x2e0>
    5120:	e0bff717 	ldw	r2,-36(fp)
    5124:	e0bff215 	stw	r2,-56(fp)
    5128:	e0bff217 	ldw	r2,-56(fp)
    512c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    5130:	e0fffd17 	ldw	r3,-12(fp)
    5134:	008001c4 	movi	r2,7
    5138:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
    513c:	e0bffb17 	ldw	r2,-20(fp)
    5140:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
    5144:	e0bff917 	ldw	r2,-28(fp)
    5148:	e0bfff15 	stw	r2,-4(fp)
    514c:	e0bfff17 	ldw	r2,-4(fp)
}
    5150:	e037883a 	mov	sp,fp
    5154:	dfc00117 	ldw	ra,4(sp)
    5158:	df000017 	ldw	fp,0(sp)
    515c:	dec00204 	addi	sp,sp,8
    5160:	f800283a 	ret

00005164 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    5164:	defff904 	addi	sp,sp,-28
    5168:	df000615 	stw	fp,24(sp)
    516c:	df000604 	addi	fp,sp,24
    5170:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5174:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5178:	e0bffe17 	ldw	r2,-8(fp)
    517c:	1004c03a 	cmpne	r2,r2,zero
    5180:	1000031e 	bne	r2,zero,5190 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
    5184:	00800104 	movi	r2,4
    5188:	e0bfff15 	stw	r2,-4(fp)
    518c:	00002206 	br	5218 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    5190:	e0bffe17 	ldw	r2,-8(fp)
    5194:	10800003 	ldbu	r2,0(r2)
    5198:	10803fcc 	andi	r2,r2,255
    519c:	108000a0 	cmpeqi	r2,r2,2
    51a0:	1000031e 	bne	r2,zero,51b0 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
    51a4:	00800044 	movi	r2,1
    51a8:	e0bfff15 	stw	r2,-4(fp)
    51ac:	00001a06 	br	5218 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51b0:	0005303a 	rdctl	r2,status
    51b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51b8:	e0fffb17 	ldw	r3,-20(fp)
    51bc:	00bfff84 	movi	r2,-2
    51c0:	1884703a 	and	r2,r3,r2
    51c4:	1001703a 	wrctl	status,r2
  
  return context;
    51c8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    51cc:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    51d0:	e0bffe17 	ldw	r2,-8(fp)
    51d4:	10800117 	ldw	r2,4(r2)
    51d8:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
    51dc:	e0bffd17 	ldw	r2,-12(fp)
    51e0:	10c00117 	ldw	r3,4(r2)
    51e4:	e0bffd17 	ldw	r2,-12(fp)
    51e8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    51ec:	e0bffd17 	ldw	r2,-12(fp)
    51f0:	10c00117 	ldw	r3,4(r2)
    51f4:	e0bffd17 	ldw	r2,-12(fp)
    51f8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    51fc:	e0bffd17 	ldw	r2,-12(fp)
    5200:	1000058d 	sth	zero,22(r2)
    5204:	e0bffc17 	ldw	r2,-16(fp)
    5208:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    520c:	e0bffa17 	ldw	r2,-24(fp)
    5210:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5214:	e03fff15 	stw	zero,-4(fp)
    5218:	e0bfff17 	ldw	r2,-4(fp)
}
    521c:	e037883a 	mov	sp,fp
    5220:	df000017 	ldw	fp,0(sp)
    5224:	dec00104 	addi	sp,sp,4
    5228:	f800283a 	ret

0000522c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    522c:	defff104 	addi	sp,sp,-60
    5230:	dfc00e15 	stw	ra,56(sp)
    5234:	df000d15 	stw	fp,52(sp)
    5238:	df000d04 	addi	fp,sp,52
    523c:	e13ffb15 	stw	r4,-20(fp)
    5240:	e1bffd15 	stw	r6,-12(fp)
    5244:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5248:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    524c:	e0bffd17 	ldw	r2,-12(fp)
    5250:	1004c03a 	cmpne	r2,r2,zero
    5254:	1000021e 	bne	r2,zero,5260 <OSQPend+0x34>
        return ((void *)0);
    5258:	e03fff15 	stw	zero,-4(fp)
    525c:	0000b506 	br	5534 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    5260:	e0bffb17 	ldw	r2,-20(fp)
    5264:	1004c03a 	cmpne	r2,r2,zero
    5268:	1000051e 	bne	r2,zero,5280 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
    526c:	e0fffd17 	ldw	r3,-12(fp)
    5270:	00800104 	movi	r2,4
    5274:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    5278:	e03fff15 	stw	zero,-4(fp)
    527c:	0000ad06 	br	5534 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    5280:	e0bffb17 	ldw	r2,-20(fp)
    5284:	10800003 	ldbu	r2,0(r2)
    5288:	10803fcc 	andi	r2,r2,255
    528c:	108000a0 	cmpeqi	r2,r2,2
    5290:	1000051e 	bne	r2,zero,52a8 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    5294:	e0fffd17 	ldw	r3,-12(fp)
    5298:	00800044 	movi	r2,1
    529c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    52a0:	e03fff15 	stw	zero,-4(fp)
    52a4:	0000a306 	br	5534 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    52a8:	00800074 	movhi	r2,1
    52ac:	1082f004 	addi	r2,r2,3008
    52b0:	10800003 	ldbu	r2,0(r2)
    52b4:	10803fcc 	andi	r2,r2,255
    52b8:	1005003a 	cmpeq	r2,r2,zero
    52bc:	1000051e 	bne	r2,zero,52d4 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    52c0:	e0fffd17 	ldw	r3,-12(fp)
    52c4:	00800084 	movi	r2,2
    52c8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    52cc:	e03fff15 	stw	zero,-4(fp)
    52d0:	00009806 	br	5534 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    52d4:	00800074 	movhi	r2,1
    52d8:	1082e204 	addi	r2,r2,2952
    52dc:	10800003 	ldbu	r2,0(r2)
    52e0:	10803fcc 	andi	r2,r2,255
    52e4:	1005003a 	cmpeq	r2,r2,zero
    52e8:	1000051e 	bne	r2,zero,5300 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    52ec:	e0fffd17 	ldw	r3,-12(fp)
    52f0:	00800344 	movi	r2,13
    52f4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    52f8:	e03fff15 	stw	zero,-4(fp)
    52fc:	00008d06 	br	5534 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5300:	0005303a 	rdctl	r2,status
    5304:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5308:	e0fff717 	ldw	r3,-36(fp)
    530c:	00bfff84 	movi	r2,-2
    5310:	1884703a 	and	r2,r3,r2
    5314:	1001703a 	wrctl	status,r2
  
  return context;
    5318:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    531c:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    5320:	e0bffb17 	ldw	r2,-20(fp)
    5324:	10800117 	ldw	r2,4(r2)
    5328:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    532c:	e0bff917 	ldw	r2,-28(fp)
    5330:	1080058b 	ldhu	r2,22(r2)
    5334:	10bfffcc 	andi	r2,r2,65535
    5338:	1005003a 	cmpeq	r2,r2,zero
    533c:	10001f1e 	bne	r2,zero,53bc <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    5340:	e0bff917 	ldw	r2,-28(fp)
    5344:	10c00417 	ldw	r3,16(r2)
    5348:	18800017 	ldw	r2,0(r3)
    534c:	e0bffa15 	stw	r2,-24(fp)
    5350:	18c00104 	addi	r3,r3,4
    5354:	e0bff917 	ldw	r2,-28(fp)
    5358:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    535c:	e0bff917 	ldw	r2,-28(fp)
    5360:	1080058b 	ldhu	r2,22(r2)
    5364:	10bfffc4 	addi	r2,r2,-1
    5368:	1007883a 	mov	r3,r2
    536c:	e0bff917 	ldw	r2,-28(fp)
    5370:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    5374:	e0bff917 	ldw	r2,-28(fp)
    5378:	10c00417 	ldw	r3,16(r2)
    537c:	e0bff917 	ldw	r2,-28(fp)
    5380:	10800217 	ldw	r2,8(r2)
    5384:	1880041e 	bne	r3,r2,5398 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
    5388:	e0bff917 	ldw	r2,-28(fp)
    538c:	10c00117 	ldw	r3,4(r2)
    5390:	e0bff917 	ldw	r2,-28(fp)
    5394:	10c00415 	stw	r3,16(r2)
    5398:	e0bff817 	ldw	r2,-32(fp)
    539c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    53a0:	e0bff617 	ldw	r2,-40(fp)
    53a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    53a8:	e0bffd17 	ldw	r2,-12(fp)
    53ac:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    53b0:	e0bffa17 	ldw	r2,-24(fp)
    53b4:	e0bfff15 	stw	r2,-4(fp)
    53b8:	00005e06 	br	5534 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    53bc:	00800074 	movhi	r2,1
    53c0:	1082f104 	addi	r2,r2,3012
    53c4:	10c00017 	ldw	r3,0(r2)
    53c8:	00800074 	movhi	r2,1
    53cc:	1082f104 	addi	r2,r2,3012
    53d0:	10800017 	ldw	r2,0(r2)
    53d4:	10800c03 	ldbu	r2,48(r2)
    53d8:	10800114 	ori	r2,r2,4
    53dc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    53e0:	00800074 	movhi	r2,1
    53e4:	1082f104 	addi	r2,r2,3012
    53e8:	10800017 	ldw	r2,0(r2)
    53ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    53f0:	00800074 	movhi	r2,1
    53f4:	1082f104 	addi	r2,r2,3012
    53f8:	10c00017 	ldw	r3,0(r2)
    53fc:	e0bffc0b 	ldhu	r2,-16(fp)
    5400:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    5404:	e13ffb17 	ldw	r4,-20(fp)
    5408:	00018940 	call	1894 <OS_EventTaskWait>
    540c:	e0bff817 	ldw	r2,-32(fp)
    5410:	e0bff515 	stw	r2,-44(fp)
    5414:	e0bff517 	ldw	r2,-44(fp)
    5418:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    541c:	00021400 	call	2140 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5420:	0005303a 	rdctl	r2,status
    5424:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5428:	e0fff417 	ldw	r3,-48(fp)
    542c:	00bfff84 	movi	r2,-2
    5430:	1884703a 	and	r2,r3,r2
    5434:	1001703a 	wrctl	status,r2
  
  return context;
    5438:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
    543c:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    5440:	00800074 	movhi	r2,1
    5444:	1082f104 	addi	r2,r2,3012
    5448:	10800017 	ldw	r2,0(r2)
    544c:	10800c43 	ldbu	r2,49(r2)
    5450:	10803fcc 	andi	r2,r2,255
    5454:	e0bffe15 	stw	r2,-8(fp)
    5458:	e0fffe17 	ldw	r3,-8(fp)
    545c:	1805003a 	cmpeq	r2,r3,zero
    5460:	1000041e 	bne	r2,zero,5474 <OSQPend+0x248>
    5464:	e0fffe17 	ldw	r3,-8(fp)
    5468:	188000a0 	cmpeqi	r2,r3,2
    546c:	1000091e 	bne	r2,zero,5494 <OSQPend+0x268>
    5470:	00000d06 	br	54a8 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    5474:	00800074 	movhi	r2,1
    5478:	1082f104 	addi	r2,r2,3012
    547c:	10800017 	ldw	r2,0(r2)
    5480:	10800917 	ldw	r2,36(r2)
    5484:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
    5488:	e0bffd17 	ldw	r2,-12(fp)
    548c:	10000005 	stb	zero,0(r2)
             break;
    5490:	00000e06 	br	54cc <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    5494:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    5498:	e0fffd17 	ldw	r3,-12(fp)
    549c:	00800384 	movi	r2,14
    54a0:	18800005 	stb	r2,0(r3)
             break;
    54a4:	00000906 	br	54cc <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    54a8:	00800074 	movhi	r2,1
    54ac:	1082f104 	addi	r2,r2,3012
    54b0:	11000017 	ldw	r4,0(r2)
    54b4:	e17ffb17 	ldw	r5,-20(fp)
    54b8:	0001af80 	call	1af8 <OS_EventTaskRemove>
             pmsg = (void *)0;
    54bc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    54c0:	e0fffd17 	ldw	r3,-12(fp)
    54c4:	00800284 	movi	r2,10
    54c8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    54cc:	00800074 	movhi	r2,1
    54d0:	1082f104 	addi	r2,r2,3012
    54d4:	10800017 	ldw	r2,0(r2)
    54d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    54dc:	00800074 	movhi	r2,1
    54e0:	1082f104 	addi	r2,r2,3012
    54e4:	10800017 	ldw	r2,0(r2)
    54e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    54ec:	00800074 	movhi	r2,1
    54f0:	1082f104 	addi	r2,r2,3012
    54f4:	10800017 	ldw	r2,0(r2)
    54f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    54fc:	00800074 	movhi	r2,1
    5500:	1082f104 	addi	r2,r2,3012
    5504:	10800017 	ldw	r2,0(r2)
    5508:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    550c:	00800074 	movhi	r2,1
    5510:	1082f104 	addi	r2,r2,3012
    5514:	10800017 	ldw	r2,0(r2)
    5518:	10000915 	stw	zero,36(r2)
    551c:	e0bff817 	ldw	r2,-32(fp)
    5520:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5524:	e0bff317 	ldw	r2,-52(fp)
    5528:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    552c:	e0bffa17 	ldw	r2,-24(fp)
    5530:	e0bfff15 	stw	r2,-4(fp)
    5534:	e0bfff17 	ldw	r2,-4(fp)
}
    5538:	e037883a 	mov	sp,fp
    553c:	dfc00117 	ldw	ra,4(sp)
    5540:	df000017 	ldw	fp,0(sp)
    5544:	dec00204 	addi	sp,sp,8
    5548:	f800283a 	ret

0000554c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    554c:	defff504 	addi	sp,sp,-44
    5550:	dfc00a15 	stw	ra,40(sp)
    5554:	df000915 	stw	fp,36(sp)
    5558:	df000904 	addi	fp,sp,36
    555c:	e13ffc15 	stw	r4,-16(fp)
    5560:	e1bffe15 	stw	r6,-8(fp)
    5564:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5568:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    556c:	e0bffe17 	ldw	r2,-8(fp)
    5570:	1004c03a 	cmpne	r2,r2,zero
    5574:	1000021e 	bne	r2,zero,5580 <OSQPendAbort+0x34>
        return (0);
    5578:	e03fff15 	stw	zero,-4(fp)
    557c:	00004c06 	br	56b0 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    5580:	e0bffc17 	ldw	r2,-16(fp)
    5584:	1004c03a 	cmpne	r2,r2,zero
    5588:	1000051e 	bne	r2,zero,55a0 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
    558c:	e0fffe17 	ldw	r3,-8(fp)
    5590:	00800104 	movi	r2,4
    5594:	18800005 	stb	r2,0(r3)
        return (0);
    5598:	e03fff15 	stw	zero,-4(fp)
    559c:	00004406 	br	56b0 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    55a0:	e0bffc17 	ldw	r2,-16(fp)
    55a4:	10800003 	ldbu	r2,0(r2)
    55a8:	10803fcc 	andi	r2,r2,255
    55ac:	108000a0 	cmpeqi	r2,r2,2
    55b0:	1000051e 	bne	r2,zero,55c8 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    55b4:	e0fffe17 	ldw	r3,-8(fp)
    55b8:	00800044 	movi	r2,1
    55bc:	18800005 	stb	r2,0(r3)
        return (0);
    55c0:	e03fff15 	stw	zero,-4(fp)
    55c4:	00003a06 	br	56b0 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55c8:	0005303a 	rdctl	r2,status
    55cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55d0:	e0fff917 	ldw	r3,-28(fp)
    55d4:	00bfff84 	movi	r2,-2
    55d8:	1884703a 	and	r2,r3,r2
    55dc:	1001703a 	wrctl	status,r2
  
  return context;
    55e0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    55e4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    55e8:	e0bffc17 	ldw	r2,-16(fp)
    55ec:	10800283 	ldbu	r2,10(r2)
    55f0:	10803fcc 	andi	r2,r2,255
    55f4:	1005003a 	cmpeq	r2,r2,zero
    55f8:	1000261e 	bne	r2,zero,5694 <OSQPendAbort+0x148>
        nbr_tasks = 0;
    55fc:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
    5600:	e0bffd03 	ldbu	r2,-12(fp)
    5604:	10800060 	cmpeqi	r2,r2,1
    5608:	1000091e 	bne	r2,zero,5630 <OSQPendAbort+0xe4>
    560c:	00000e06 	br	5648 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    5610:	e13ffc17 	ldw	r4,-16(fp)
    5614:	000b883a 	mov	r5,zero
    5618:	01800104 	movi	r6,4
    561c:	01c00084 	movi	r7,2
    5620:	00017000 	call	1700 <OS_EventTaskRdy>
                     nbr_tasks++;
    5624:	e0bffb03 	ldbu	r2,-20(fp)
    5628:	10800044 	addi	r2,r2,1
    562c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    5630:	e0bffc17 	ldw	r2,-16(fp)
    5634:	10800283 	ldbu	r2,10(r2)
    5638:	10803fcc 	andi	r2,r2,255
    563c:	1004c03a 	cmpne	r2,r2,zero
    5640:	103ff31e 	bne	r2,zero,5610 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    5644:	00000806 	br	5668 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    5648:	e13ffc17 	ldw	r4,-16(fp)
    564c:	000b883a 	mov	r5,zero
    5650:	01800104 	movi	r6,4
    5654:	01c00084 	movi	r7,2
    5658:	00017000 	call	1700 <OS_EventTaskRdy>
                 nbr_tasks++;
    565c:	e0bffb03 	ldbu	r2,-20(fp)
    5660:	10800044 	addi	r2,r2,1
    5664:	e0bffb05 	stb	r2,-20(fp)
    5668:	e0bffa17 	ldw	r2,-24(fp)
    566c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5670:	e0bff817 	ldw	r2,-32(fp)
    5674:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    5678:	00021400 	call	2140 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    567c:	e0fffe17 	ldw	r3,-8(fp)
    5680:	00800384 	movi	r2,14
    5684:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
    5688:	e0bffb03 	ldbu	r2,-20(fp)
    568c:	e0bfff15 	stw	r2,-4(fp)
    5690:	00000706 	br	56b0 <OSQPendAbort+0x164>
    5694:	e0bffa17 	ldw	r2,-24(fp)
    5698:	e0bff715 	stw	r2,-36(fp)
    569c:	e0bff717 	ldw	r2,-36(fp)
    56a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    56a4:	e0bffe17 	ldw	r2,-8(fp)
    56a8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    56ac:	e03fff15 	stw	zero,-4(fp)
    56b0:	e0bfff17 	ldw	r2,-4(fp)
}
    56b4:	e037883a 	mov	sp,fp
    56b8:	dfc00117 	ldw	ra,4(sp)
    56bc:	df000017 	ldw	fp,0(sp)
    56c0:	dec00204 	addi	sp,sp,8
    56c4:	f800283a 	ret

000056c8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    56c8:	defff504 	addi	sp,sp,-44
    56cc:	dfc00a15 	stw	ra,40(sp)
    56d0:	df000915 	stw	fp,36(sp)
    56d4:	df000904 	addi	fp,sp,36
    56d8:	e13ffd15 	stw	r4,-12(fp)
    56dc:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    56e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    56e4:	e0bffd17 	ldw	r2,-12(fp)
    56e8:	1004c03a 	cmpne	r2,r2,zero
    56ec:	1000031e 	bne	r2,zero,56fc <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
    56f0:	00800104 	movi	r2,4
    56f4:	e0bfff15 	stw	r2,-4(fp)
    56f8:	00004d06 	br	5830 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    56fc:	e0bffd17 	ldw	r2,-12(fp)
    5700:	10800003 	ldbu	r2,0(r2)
    5704:	10803fcc 	andi	r2,r2,255
    5708:	108000a0 	cmpeqi	r2,r2,2
    570c:	1000031e 	bne	r2,zero,571c <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
    5710:	00800044 	movi	r2,1
    5714:	e0bfff15 	stw	r2,-4(fp)
    5718:	00004506 	br	5830 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    571c:	0005303a 	rdctl	r2,status
    5720:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5724:	e0fffa17 	ldw	r3,-24(fp)
    5728:	00bfff84 	movi	r2,-2
    572c:	1884703a 	and	r2,r3,r2
    5730:	1001703a 	wrctl	status,r2
  
  return context;
    5734:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    5738:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    573c:	e0bffd17 	ldw	r2,-12(fp)
    5740:	10800283 	ldbu	r2,10(r2)
    5744:	10803fcc 	andi	r2,r2,255
    5748:	1005003a 	cmpeq	r2,r2,zero
    574c:	10000c1e 	bne	r2,zero,5780 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    5750:	e13ffd17 	ldw	r4,-12(fp)
    5754:	e17ffe17 	ldw	r5,-8(fp)
    5758:	01800104 	movi	r6,4
    575c:	000f883a 	mov	r7,zero
    5760:	00017000 	call	1700 <OS_EventTaskRdy>
    5764:	e0bffb17 	ldw	r2,-20(fp)
    5768:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    576c:	e0bff917 	ldw	r2,-28(fp)
    5770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    5774:	00021400 	call	2140 <OS_Sched>
        return (OS_ERR_NONE);
    5778:	e03fff15 	stw	zero,-4(fp)
    577c:	00002c06 	br	5830 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    5780:	e0bffd17 	ldw	r2,-12(fp)
    5784:	10800117 	ldw	r2,4(r2)
    5788:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    578c:	e0bffc17 	ldw	r2,-16(fp)
    5790:	10c0058b 	ldhu	r3,22(r2)
    5794:	e0bffc17 	ldw	r2,-16(fp)
    5798:	1080050b 	ldhu	r2,20(r2)
    579c:	18ffffcc 	andi	r3,r3,65535
    57a0:	10bfffcc 	andi	r2,r2,65535
    57a4:	18800736 	bltu	r3,r2,57c4 <OSQPost+0xfc>
    57a8:	e0bffb17 	ldw	r2,-20(fp)
    57ac:	e0bff815 	stw	r2,-32(fp)
    57b0:	e0bff817 	ldw	r2,-32(fp)
    57b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    57b8:	00800784 	movi	r2,30
    57bc:	e0bfff15 	stw	r2,-4(fp)
    57c0:	00001b06 	br	5830 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    57c4:	e0bffc17 	ldw	r2,-16(fp)
    57c8:	10c00317 	ldw	r3,12(r2)
    57cc:	e0bffe17 	ldw	r2,-8(fp)
    57d0:	18800015 	stw	r2,0(r3)
    57d4:	18c00104 	addi	r3,r3,4
    57d8:	e0bffc17 	ldw	r2,-16(fp)
    57dc:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    57e0:	e0bffc17 	ldw	r2,-16(fp)
    57e4:	1080058b 	ldhu	r2,22(r2)
    57e8:	10800044 	addi	r2,r2,1
    57ec:	1007883a 	mov	r3,r2
    57f0:	e0bffc17 	ldw	r2,-16(fp)
    57f4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    57f8:	e0bffc17 	ldw	r2,-16(fp)
    57fc:	10c00317 	ldw	r3,12(r2)
    5800:	e0bffc17 	ldw	r2,-16(fp)
    5804:	10800217 	ldw	r2,8(r2)
    5808:	1880041e 	bne	r3,r2,581c <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
    580c:	e0bffc17 	ldw	r2,-16(fp)
    5810:	10c00117 	ldw	r3,4(r2)
    5814:	e0bffc17 	ldw	r2,-16(fp)
    5818:	10c00315 	stw	r3,12(r2)
    581c:	e0bffb17 	ldw	r2,-20(fp)
    5820:	e0bff715 	stw	r2,-36(fp)
    5824:	e0bff717 	ldw	r2,-36(fp)
    5828:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    582c:	e03fff15 	stw	zero,-4(fp)
    5830:	e0bfff17 	ldw	r2,-4(fp)
}
    5834:	e037883a 	mov	sp,fp
    5838:	dfc00117 	ldw	ra,4(sp)
    583c:	df000017 	ldw	fp,0(sp)
    5840:	dec00204 	addi	sp,sp,8
    5844:	f800283a 	ret

00005848 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    5848:	defff504 	addi	sp,sp,-44
    584c:	dfc00a15 	stw	ra,40(sp)
    5850:	df000915 	stw	fp,36(sp)
    5854:	df000904 	addi	fp,sp,36
    5858:	e13ffd15 	stw	r4,-12(fp)
    585c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5860:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5864:	e0bffd17 	ldw	r2,-12(fp)
    5868:	1004c03a 	cmpne	r2,r2,zero
    586c:	1000031e 	bne	r2,zero,587c <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
    5870:	00800104 	movi	r2,4
    5874:	e0bfff15 	stw	r2,-4(fp)
    5878:	00004f06 	br	59b8 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    587c:	e0bffd17 	ldw	r2,-12(fp)
    5880:	10800003 	ldbu	r2,0(r2)
    5884:	10803fcc 	andi	r2,r2,255
    5888:	108000a0 	cmpeqi	r2,r2,2
    588c:	1000031e 	bne	r2,zero,589c <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
    5890:	00800044 	movi	r2,1
    5894:	e0bfff15 	stw	r2,-4(fp)
    5898:	00004706 	br	59b8 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    589c:	0005303a 	rdctl	r2,status
    58a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    58a4:	e0fffa17 	ldw	r3,-24(fp)
    58a8:	00bfff84 	movi	r2,-2
    58ac:	1884703a 	and	r2,r3,r2
    58b0:	1001703a 	wrctl	status,r2
  
  return context;
    58b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    58b8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    58bc:	e0bffd17 	ldw	r2,-12(fp)
    58c0:	10800283 	ldbu	r2,10(r2)
    58c4:	10803fcc 	andi	r2,r2,255
    58c8:	1005003a 	cmpeq	r2,r2,zero
    58cc:	10000c1e 	bne	r2,zero,5900 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    58d0:	e13ffd17 	ldw	r4,-12(fp)
    58d4:	e17ffe17 	ldw	r5,-8(fp)
    58d8:	01800104 	movi	r6,4
    58dc:	000f883a 	mov	r7,zero
    58e0:	00017000 	call	1700 <OS_EventTaskRdy>
    58e4:	e0bffb17 	ldw	r2,-20(fp)
    58e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    58ec:	e0bff917 	ldw	r2,-28(fp)
    58f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    58f4:	00021400 	call	2140 <OS_Sched>
        return (OS_ERR_NONE);
    58f8:	e03fff15 	stw	zero,-4(fp)
    58fc:	00002e06 	br	59b8 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    5900:	e0bffd17 	ldw	r2,-12(fp)
    5904:	10800117 	ldw	r2,4(r2)
    5908:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    590c:	e0bffc17 	ldw	r2,-16(fp)
    5910:	10c0058b 	ldhu	r3,22(r2)
    5914:	e0bffc17 	ldw	r2,-16(fp)
    5918:	1080050b 	ldhu	r2,20(r2)
    591c:	18ffffcc 	andi	r3,r3,65535
    5920:	10bfffcc 	andi	r2,r2,65535
    5924:	18800736 	bltu	r3,r2,5944 <OSQPostFront+0xfc>
    5928:	e0bffb17 	ldw	r2,-20(fp)
    592c:	e0bff815 	stw	r2,-32(fp)
    5930:	e0bff817 	ldw	r2,-32(fp)
    5934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    5938:	00800784 	movi	r2,30
    593c:	e0bfff15 	stw	r2,-4(fp)
    5940:	00001d06 	br	59b8 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    5944:	e0bffc17 	ldw	r2,-16(fp)
    5948:	10c00417 	ldw	r3,16(r2)
    594c:	e0bffc17 	ldw	r2,-16(fp)
    5950:	10800117 	ldw	r2,4(r2)
    5954:	1880041e 	bne	r3,r2,5968 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
    5958:	e0bffc17 	ldw	r2,-16(fp)
    595c:	10c00217 	ldw	r3,8(r2)
    5960:	e0bffc17 	ldw	r2,-16(fp)
    5964:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    5968:	e0bffc17 	ldw	r2,-16(fp)
    596c:	10800417 	ldw	r2,16(r2)
    5970:	10ffff04 	addi	r3,r2,-4
    5974:	e0bffc17 	ldw	r2,-16(fp)
    5978:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    597c:	e0bffc17 	ldw	r2,-16(fp)
    5980:	10c00417 	ldw	r3,16(r2)
    5984:	e0bffe17 	ldw	r2,-8(fp)
    5988:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    598c:	e0bffc17 	ldw	r2,-16(fp)
    5990:	1080058b 	ldhu	r2,22(r2)
    5994:	10800044 	addi	r2,r2,1
    5998:	1007883a 	mov	r3,r2
    599c:	e0bffc17 	ldw	r2,-16(fp)
    59a0:	10c0058d 	sth	r3,22(r2)
    59a4:	e0bffb17 	ldw	r2,-20(fp)
    59a8:	e0bff715 	stw	r2,-36(fp)
    59ac:	e0bff717 	ldw	r2,-36(fp)
    59b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    59b4:	e03fff15 	stw	zero,-4(fp)
    59b8:	e0bfff17 	ldw	r2,-4(fp)
}
    59bc:	e037883a 	mov	sp,fp
    59c0:	dfc00117 	ldw	ra,4(sp)
    59c4:	df000017 	ldw	fp,0(sp)
    59c8:	dec00204 	addi	sp,sp,8
    59cc:	f800283a 	ret

000059d0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    59d0:	defff404 	addi	sp,sp,-48
    59d4:	dfc00b15 	stw	ra,44(sp)
    59d8:	df000a15 	stw	fp,40(sp)
    59dc:	df000a04 	addi	fp,sp,40
    59e0:	e13ffc15 	stw	r4,-16(fp)
    59e4:	e17ffd15 	stw	r5,-12(fp)
    59e8:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    59ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    59f0:	e0bffc17 	ldw	r2,-16(fp)
    59f4:	1004c03a 	cmpne	r2,r2,zero
    59f8:	1000031e 	bne	r2,zero,5a08 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
    59fc:	00800104 	movi	r2,4
    5a00:	e0bfff15 	stw	r2,-4(fp)
    5a04:	00007906 	br	5bec <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    5a08:	e0bffc17 	ldw	r2,-16(fp)
    5a0c:	10800003 	ldbu	r2,0(r2)
    5a10:	10803fcc 	andi	r2,r2,255
    5a14:	108000a0 	cmpeqi	r2,r2,2
    5a18:	1000031e 	bne	r2,zero,5a28 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
    5a1c:	00800044 	movi	r2,1
    5a20:	e0bfff15 	stw	r2,-4(fp)
    5a24:	00007106 	br	5bec <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a28:	0005303a 	rdctl	r2,status
    5a2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a30:	e0fff917 	ldw	r3,-28(fp)
    5a34:	00bfff84 	movi	r2,-2
    5a38:	1884703a 	and	r2,r3,r2
    5a3c:	1001703a 	wrctl	status,r2
  
  return context;
    5a40:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    5a44:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    5a48:	e0bffc17 	ldw	r2,-16(fp)
    5a4c:	10800283 	ldbu	r2,10(r2)
    5a50:	10803fcc 	andi	r2,r2,255
    5a54:	1005003a 	cmpeq	r2,r2,zero
    5a58:	1000211e 	bne	r2,zero,5ae0 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    5a5c:	e0bffe03 	ldbu	r2,-8(fp)
    5a60:	1080004c 	andi	r2,r2,1
    5a64:	10803fcc 	andi	r2,r2,255
    5a68:	1005003a 	cmpeq	r2,r2,zero
    5a6c:	10000c1e 	bne	r2,zero,5aa0 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    5a70:	00000506 	br	5a88 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    5a74:	e13ffc17 	ldw	r4,-16(fp)
    5a78:	e17ffd17 	ldw	r5,-12(fp)
    5a7c:	01800104 	movi	r6,4
    5a80:	000f883a 	mov	r7,zero
    5a84:	00017000 	call	1700 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    5a88:	e0bffc17 	ldw	r2,-16(fp)
    5a8c:	10800283 	ldbu	r2,10(r2)
    5a90:	10803fcc 	andi	r2,r2,255
    5a94:	1004c03a 	cmpne	r2,r2,zero
    5a98:	103ff61e 	bne	r2,zero,5a74 <OSQPostOpt+0xa4>
    5a9c:	00000506 	br	5ab4 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    5aa0:	e13ffc17 	ldw	r4,-16(fp)
    5aa4:	e17ffd17 	ldw	r5,-12(fp)
    5aa8:	01800104 	movi	r6,4
    5aac:	000f883a 	mov	r7,zero
    5ab0:	00017000 	call	1700 <OS_EventTaskRdy>
    5ab4:	e0bffa17 	ldw	r2,-24(fp)
    5ab8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5abc:	e0bff817 	ldw	r2,-32(fp)
    5ac0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    5ac4:	e0bffe03 	ldbu	r2,-8(fp)
    5ac8:	1080010c 	andi	r2,r2,4
    5acc:	1004c03a 	cmpne	r2,r2,zero
    5ad0:	1000011e 	bne	r2,zero,5ad8 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
    5ad4:	00021400 	call	2140 <OS_Sched>
        }
        return (OS_ERR_NONE);
    5ad8:	e03fff15 	stw	zero,-4(fp)
    5adc:	00004306 	br	5bec <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    5ae0:	e0bffc17 	ldw	r2,-16(fp)
    5ae4:	10800117 	ldw	r2,4(r2)
    5ae8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    5aec:	e0bffb17 	ldw	r2,-20(fp)
    5af0:	10c0058b 	ldhu	r3,22(r2)
    5af4:	e0bffb17 	ldw	r2,-20(fp)
    5af8:	1080050b 	ldhu	r2,20(r2)
    5afc:	18ffffcc 	andi	r3,r3,65535
    5b00:	10bfffcc 	andi	r2,r2,65535
    5b04:	18800736 	bltu	r3,r2,5b24 <OSQPostOpt+0x154>
    5b08:	e0bffa17 	ldw	r2,-24(fp)
    5b0c:	e0bff715 	stw	r2,-36(fp)
    5b10:	e0bff717 	ldw	r2,-36(fp)
    5b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    5b18:	00800784 	movi	r2,30
    5b1c:	e0bfff15 	stw	r2,-4(fp)
    5b20:	00003206 	br	5bec <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    5b24:	e0bffe03 	ldbu	r2,-8(fp)
    5b28:	1080008c 	andi	r2,r2,2
    5b2c:	1005003a 	cmpeq	r2,r2,zero
    5b30:	1000131e 	bne	r2,zero,5b80 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    5b34:	e0bffb17 	ldw	r2,-20(fp)
    5b38:	10c00417 	ldw	r3,16(r2)
    5b3c:	e0bffb17 	ldw	r2,-20(fp)
    5b40:	10800117 	ldw	r2,4(r2)
    5b44:	1880041e 	bne	r3,r2,5b58 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    5b48:	e0bffb17 	ldw	r2,-20(fp)
    5b4c:	10c00217 	ldw	r3,8(r2)
    5b50:	e0bffb17 	ldw	r2,-20(fp)
    5b54:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    5b58:	e0bffb17 	ldw	r2,-20(fp)
    5b5c:	10800417 	ldw	r2,16(r2)
    5b60:	10ffff04 	addi	r3,r2,-4
    5b64:	e0bffb17 	ldw	r2,-20(fp)
    5b68:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    5b6c:	e0bffb17 	ldw	r2,-20(fp)
    5b70:	10c00417 	ldw	r3,16(r2)
    5b74:	e0bffd17 	ldw	r2,-12(fp)
    5b78:	18800015 	stw	r2,0(r3)
    5b7c:	00001006 	br	5bc0 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    5b80:	e0bffb17 	ldw	r2,-20(fp)
    5b84:	10c00317 	ldw	r3,12(r2)
    5b88:	e0bffd17 	ldw	r2,-12(fp)
    5b8c:	18800015 	stw	r2,0(r3)
    5b90:	18c00104 	addi	r3,r3,4
    5b94:	e0bffb17 	ldw	r2,-20(fp)
    5b98:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    5b9c:	e0bffb17 	ldw	r2,-20(fp)
    5ba0:	10c00317 	ldw	r3,12(r2)
    5ba4:	e0bffb17 	ldw	r2,-20(fp)
    5ba8:	10800217 	ldw	r2,8(r2)
    5bac:	1880041e 	bne	r3,r2,5bc0 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
    5bb0:	e0bffb17 	ldw	r2,-20(fp)
    5bb4:	10c00117 	ldw	r3,4(r2)
    5bb8:	e0bffb17 	ldw	r2,-20(fp)
    5bbc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    5bc0:	e0bffb17 	ldw	r2,-20(fp)
    5bc4:	1080058b 	ldhu	r2,22(r2)
    5bc8:	10800044 	addi	r2,r2,1
    5bcc:	1007883a 	mov	r3,r2
    5bd0:	e0bffb17 	ldw	r2,-20(fp)
    5bd4:	10c0058d 	sth	r3,22(r2)
    5bd8:	e0bffa17 	ldw	r2,-24(fp)
    5bdc:	e0bff615 	stw	r2,-40(fp)
    5be0:	e0bff617 	ldw	r2,-40(fp)
    5be4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5be8:	e03fff15 	stw	zero,-4(fp)
    5bec:	e0bfff17 	ldw	r2,-4(fp)
}
    5bf0:	e037883a 	mov	sp,fp
    5bf4:	dfc00117 	ldw	ra,4(sp)
    5bf8:	df000017 	ldw	fp,0(sp)
    5bfc:	dec00204 	addi	sp,sp,8
    5c00:	f800283a 	ret

00005c04 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    5c04:	defff504 	addi	sp,sp,-44
    5c08:	df000a15 	stw	fp,40(sp)
    5c0c:	df000a04 	addi	fp,sp,40
    5c10:	e13ffd15 	stw	r4,-12(fp)
    5c14:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5c18:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    5c1c:	e0bffd17 	ldw	r2,-12(fp)
    5c20:	1004c03a 	cmpne	r2,r2,zero
    5c24:	1000031e 	bne	r2,zero,5c34 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
    5c28:	00800104 	movi	r2,4
    5c2c:	e0bfff15 	stw	r2,-4(fp)
    5c30:	00004f06 	br	5d70 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    5c34:	e0bffe17 	ldw	r2,-8(fp)
    5c38:	1004c03a 	cmpne	r2,r2,zero
    5c3c:	1000031e 	bne	r2,zero,5c4c <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
    5c40:	00800244 	movi	r2,9
    5c44:	e0bfff15 	stw	r2,-4(fp)
    5c48:	00004906 	br	5d70 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    5c4c:	e0bffd17 	ldw	r2,-12(fp)
    5c50:	10800003 	ldbu	r2,0(r2)
    5c54:	10803fcc 	andi	r2,r2,255
    5c58:	108000a0 	cmpeqi	r2,r2,2
    5c5c:	1000031e 	bne	r2,zero,5c6c <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
    5c60:	00800044 	movi	r2,1
    5c64:	e0bfff15 	stw	r2,-4(fp)
    5c68:	00004106 	br	5d70 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c6c:	0005303a 	rdctl	r2,status
    5c70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c74:	e0fff717 	ldw	r3,-36(fp)
    5c78:	00bfff84 	movi	r2,-2
    5c7c:	1884703a 	and	r2,r3,r2
    5c80:	1001703a 	wrctl	status,r2
  
  return context;
    5c84:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    5c88:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    5c8c:	e0bffd17 	ldw	r2,-12(fp)
    5c90:	10c00283 	ldbu	r3,10(r2)
    5c94:	e0bffe17 	ldw	r2,-8(fp)
    5c98:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    5c9c:	e0bffd17 	ldw	r2,-12(fp)
    5ca0:	108002c4 	addi	r2,r2,11
    5ca4:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    5ca8:	e0bffe17 	ldw	r2,-8(fp)
    5cac:	10800204 	addi	r2,r2,8
    5cb0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5cb4:	e03ffb05 	stb	zero,-20(fp)
    5cb8:	00000d06 	br	5cf0 <OSQQuery+0xec>
        *pdest++ = *psrc++;
    5cbc:	e0bffa17 	ldw	r2,-24(fp)
    5cc0:	10c00003 	ldbu	r3,0(r2)
    5cc4:	e0bff917 	ldw	r2,-28(fp)
    5cc8:	10c00005 	stb	r3,0(r2)
    5ccc:	e0bff917 	ldw	r2,-28(fp)
    5cd0:	10800044 	addi	r2,r2,1
    5cd4:	e0bff915 	stw	r2,-28(fp)
    5cd8:	e0bffa17 	ldw	r2,-24(fp)
    5cdc:	10800044 	addi	r2,r2,1
    5ce0:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5ce4:	e0bffb03 	ldbu	r2,-20(fp)
    5ce8:	10800044 	addi	r2,r2,1
    5cec:	e0bffb05 	stb	r2,-20(fp)
    5cf0:	e0bffb03 	ldbu	r2,-20(fp)
    5cf4:	108000f0 	cmpltui	r2,r2,3
    5cf8:	103ff01e 	bne	r2,zero,5cbc <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    5cfc:	e0bffd17 	ldw	r2,-12(fp)
    5d00:	10800117 	ldw	r2,4(r2)
    5d04:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    5d08:	e0bffc17 	ldw	r2,-16(fp)
    5d0c:	1080058b 	ldhu	r2,22(r2)
    5d10:	10bfffcc 	andi	r2,r2,65535
    5d14:	1005003a 	cmpeq	r2,r2,zero
    5d18:	1000061e 	bne	r2,zero,5d34 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    5d1c:	e0bffc17 	ldw	r2,-16(fp)
    5d20:	10800417 	ldw	r2,16(r2)
    5d24:	10c00017 	ldw	r3,0(r2)
    5d28:	e0bffe17 	ldw	r2,-8(fp)
    5d2c:	10c00015 	stw	r3,0(r2)
    5d30:	00000206 	br	5d3c <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
    5d34:	e0bffe17 	ldw	r2,-8(fp)
    5d38:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    5d3c:	e0bffc17 	ldw	r2,-16(fp)
    5d40:	10c0058b 	ldhu	r3,22(r2)
    5d44:	e0bffe17 	ldw	r2,-8(fp)
    5d48:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    5d4c:	e0bffc17 	ldw	r2,-16(fp)
    5d50:	10c0050b 	ldhu	r3,20(r2)
    5d54:	e0bffe17 	ldw	r2,-8(fp)
    5d58:	10c0018d 	sth	r3,6(r2)
    5d5c:	e0bff817 	ldw	r2,-32(fp)
    5d60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d64:	e0bff617 	ldw	r2,-40(fp)
    5d68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5d6c:	e03fff15 	stw	zero,-4(fp)
    5d70:	e0bfff17 	ldw	r2,-4(fp)
}
    5d74:	e037883a 	mov	sp,fp
    5d78:	df000017 	ldw	fp,0(sp)
    5d7c:	dec00104 	addi	sp,sp,4
    5d80:	f800283a 	ret

00005d84 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    5d84:	defffb04 	addi	sp,sp,-20
    5d88:	dfc00415 	stw	ra,16(sp)
    5d8c:	df000315 	stw	fp,12(sp)
    5d90:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    5d94:	010000b4 	movhi	r4,2
    5d98:	2128e304 	addi	r4,r4,-23668
    5d9c:	01407804 	movi	r5,480
    5da0:	00020800 	call	2080 <OS_MemClr>
    pq1 = &OSQTbl[0];
    5da4:	008000b4 	movhi	r2,2
    5da8:	10a8e304 	addi	r2,r2,-23668
    5dac:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    5db0:	008000b4 	movhi	r2,2
    5db4:	10a8e904 	addi	r2,r2,-23644
    5db8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    5dbc:	e03fff0d 	sth	zero,-4(fp)
    5dc0:	00000c06 	br	5df4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    5dc4:	e0fffe17 	ldw	r3,-8(fp)
    5dc8:	e0bffd17 	ldw	r2,-12(fp)
    5dcc:	18800015 	stw	r2,0(r3)
        pq1++;
    5dd0:	e0bffe17 	ldw	r2,-8(fp)
    5dd4:	10800604 	addi	r2,r2,24
    5dd8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    5ddc:	e0bffd17 	ldw	r2,-12(fp)
    5de0:	10800604 	addi	r2,r2,24
    5de4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    5de8:	e0bfff0b 	ldhu	r2,-4(fp)
    5dec:	10800044 	addi	r2,r2,1
    5df0:	e0bfff0d 	sth	r2,-4(fp)
    5df4:	e0bfff0b 	ldhu	r2,-4(fp)
    5df8:	108004f0 	cmpltui	r2,r2,19
    5dfc:	103ff11e 	bne	r2,zero,5dc4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    5e00:	e0bffe17 	ldw	r2,-8(fp)
    5e04:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    5e08:	00c00074 	movhi	r3,1
    5e0c:	18c2ed04 	addi	r3,r3,2996
    5e10:	008000b4 	movhi	r2,2
    5e14:	10a8e304 	addi	r2,r2,-23668
    5e18:	18800015 	stw	r2,0(r3)
#endif
}
    5e1c:	e037883a 	mov	sp,fp
    5e20:	dfc00117 	ldw	ra,4(sp)
    5e24:	df000017 	ldw	fp,0(sp)
    5e28:	dec00204 	addi	sp,sp,8
    5e2c:	f800283a 	ret

00005e30 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    5e30:	defff904 	addi	sp,sp,-28
    5e34:	df000615 	stw	fp,24(sp)
    5e38:	df000604 	addi	fp,sp,24
    5e3c:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5e40:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5e44:	e0bffe17 	ldw	r2,-8(fp)
    5e48:	1004c03a 	cmpne	r2,r2,zero
    5e4c:	1000021e 	bne	r2,zero,5e58 <OSSemAccept+0x28>
        return (0);
    5e50:	e03fff15 	stw	zero,-4(fp)
    5e54:	00002106 	br	5edc <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    5e58:	e0bffe17 	ldw	r2,-8(fp)
    5e5c:	10800003 	ldbu	r2,0(r2)
    5e60:	10803fcc 	andi	r2,r2,255
    5e64:	108000e0 	cmpeqi	r2,r2,3
    5e68:	1000021e 	bne	r2,zero,5e74 <OSSemAccept+0x44>
        return (0);
    5e6c:	e03fff15 	stw	zero,-4(fp)
    5e70:	00001a06 	br	5edc <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e74:	0005303a 	rdctl	r2,status
    5e78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e7c:	e0fffb17 	ldw	r3,-20(fp)
    5e80:	00bfff84 	movi	r2,-2
    5e84:	1884703a 	and	r2,r3,r2
    5e88:	1001703a 	wrctl	status,r2
  
  return context;
    5e8c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    5e90:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
    5e94:	e0bffe17 	ldw	r2,-8(fp)
    5e98:	1080020b 	ldhu	r2,8(r2)
    5e9c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    5ea0:	e0bffd0b 	ldhu	r2,-12(fp)
    5ea4:	1005003a 	cmpeq	r2,r2,zero
    5ea8:	1000061e 	bne	r2,zero,5ec4 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    5eac:	e0bffe17 	ldw	r2,-8(fp)
    5eb0:	1080020b 	ldhu	r2,8(r2)
    5eb4:	10bfffc4 	addi	r2,r2,-1
    5eb8:	1007883a 	mov	r3,r2
    5ebc:	e0bffe17 	ldw	r2,-8(fp)
    5ec0:	10c0020d 	sth	r3,8(r2)
    5ec4:	e0bffc17 	ldw	r2,-16(fp)
    5ec8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ecc:	e0bffa17 	ldw	r2,-24(fp)
    5ed0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    5ed4:	e0bffd0b 	ldhu	r2,-12(fp)
    5ed8:	e0bfff15 	stw	r2,-4(fp)
    5edc:	e0bfff17 	ldw	r2,-4(fp)
}
    5ee0:	e037883a 	mov	sp,fp
    5ee4:	df000017 	ldw	fp,0(sp)
    5ee8:	dec00104 	addi	sp,sp,4
    5eec:	f800283a 	ret

00005ef0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    5ef0:	defff804 	addi	sp,sp,-32
    5ef4:	dfc00715 	stw	ra,28(sp)
    5ef8:	df000615 	stw	fp,24(sp)
    5efc:	df000604 	addi	fp,sp,24
    5f00:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5f04:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5f08:	00800074 	movhi	r2,1
    5f0c:	1082f004 	addi	r2,r2,3008
    5f10:	10800003 	ldbu	r2,0(r2)
    5f14:	10803fcc 	andi	r2,r2,255
    5f18:	1005003a 	cmpeq	r2,r2,zero
    5f1c:	1000021e 	bne	r2,zero,5f28 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    5f20:	e03fff15 	stw	zero,-4(fp)
    5f24:	00003106 	br	5fec <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f28:	0005303a 	rdctl	r2,status
    5f2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f30:	e0fffb17 	ldw	r3,-20(fp)
    5f34:	00bfff84 	movi	r2,-2
    5f38:	1884703a 	and	r2,r3,r2
    5f3c:	1001703a 	wrctl	status,r2
  
  return context;
    5f40:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    5f44:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    5f48:	00800074 	movhi	r2,1
    5f4c:	1082ef04 	addi	r2,r2,3004
    5f50:	10800017 	ldw	r2,0(r2)
    5f54:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    5f58:	00800074 	movhi	r2,1
    5f5c:	1082ef04 	addi	r2,r2,3004
    5f60:	10800017 	ldw	r2,0(r2)
    5f64:	1005003a 	cmpeq	r2,r2,zero
    5f68:	1000081e 	bne	r2,zero,5f8c <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    5f6c:	00800074 	movhi	r2,1
    5f70:	1082ef04 	addi	r2,r2,3004
    5f74:	10800017 	ldw	r2,0(r2)
    5f78:	10800117 	ldw	r2,4(r2)
    5f7c:	1007883a 	mov	r3,r2
    5f80:	00800074 	movhi	r2,1
    5f84:	1082ef04 	addi	r2,r2,3004
    5f88:	10c00015 	stw	r3,0(r2)
    5f8c:	e0bffc17 	ldw	r2,-16(fp)
    5f90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f94:	e0bffa17 	ldw	r2,-24(fp)
    5f98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    5f9c:	e0bffd17 	ldw	r2,-12(fp)
    5fa0:	1005003a 	cmpeq	r2,r2,zero
    5fa4:	10000f1e 	bne	r2,zero,5fe4 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    5fa8:	e0fffd17 	ldw	r3,-12(fp)
    5fac:	008000c4 	movi	r2,3
    5fb0:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    5fb4:	e0fffd17 	ldw	r3,-12(fp)
    5fb8:	e0bffe0b 	ldhu	r2,-8(fp)
    5fbc:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    5fc0:	e0bffd17 	ldw	r2,-12(fp)
    5fc4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    5fc8:	e0fffd17 	ldw	r3,-12(fp)
    5fcc:	00800fc4 	movi	r2,63
    5fd0:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    5fd4:	e0bffd17 	ldw	r2,-12(fp)
    5fd8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    5fdc:	e13ffd17 	ldw	r4,-12(fp)
    5fe0:	0001cb40 	call	1cb4 <OS_EventWaitListInit>
    }
    return (pevent);
    5fe4:	e0bffd17 	ldw	r2,-12(fp)
    5fe8:	e0bfff15 	stw	r2,-4(fp)
    5fec:	e0bfff17 	ldw	r2,-4(fp)
}
    5ff0:	e037883a 	mov	sp,fp
    5ff4:	dfc00117 	ldw	ra,4(sp)
    5ff8:	df000017 	ldw	fp,0(sp)
    5ffc:	dec00204 	addi	sp,sp,8
    6000:	f800283a 	ret

00006004 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6004:	defff104 	addi	sp,sp,-60
    6008:	dfc00e15 	stw	ra,56(sp)
    600c:	df000d15 	stw	fp,52(sp)
    6010:	df000d04 	addi	fp,sp,52
    6014:	e13ffb15 	stw	r4,-20(fp)
    6018:	e1bffd15 	stw	r6,-12(fp)
    601c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6020:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6024:	e0bffd17 	ldw	r2,-12(fp)
    6028:	1004c03a 	cmpne	r2,r2,zero
    602c:	1000031e 	bne	r2,zero,603c <OSSemDel+0x38>
        return (pevent);
    6030:	e0bffb17 	ldw	r2,-20(fp)
    6034:	e0bfff15 	stw	r2,-4(fp)
    6038:	00009406 	br	628c <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    603c:	e0bffb17 	ldw	r2,-20(fp)
    6040:	1004c03a 	cmpne	r2,r2,zero
    6044:	1000061e 	bne	r2,zero,6060 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
    6048:	e0fffd17 	ldw	r3,-12(fp)
    604c:	00800104 	movi	r2,4
    6050:	18800005 	stb	r2,0(r3)
        return (pevent);
    6054:	e0fffb17 	ldw	r3,-20(fp)
    6058:	e0ffff15 	stw	r3,-4(fp)
    605c:	00008b06 	br	628c <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    6060:	e0bffb17 	ldw	r2,-20(fp)
    6064:	10800003 	ldbu	r2,0(r2)
    6068:	10803fcc 	andi	r2,r2,255
    606c:	108000e0 	cmpeqi	r2,r2,3
    6070:	1000061e 	bne	r2,zero,608c <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
    6074:	e0fffd17 	ldw	r3,-12(fp)
    6078:	00800044 	movi	r2,1
    607c:	18800005 	stb	r2,0(r3)
        return (pevent);
    6080:	e0bffb17 	ldw	r2,-20(fp)
    6084:	e0bfff15 	stw	r2,-4(fp)
    6088:	00008006 	br	628c <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    608c:	00800074 	movhi	r2,1
    6090:	1082f004 	addi	r2,r2,3008
    6094:	10800003 	ldbu	r2,0(r2)
    6098:	10803fcc 	andi	r2,r2,255
    609c:	1005003a 	cmpeq	r2,r2,zero
    60a0:	1000061e 	bne	r2,zero,60bc <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    60a4:	e0fffd17 	ldw	r3,-12(fp)
    60a8:	008003c4 	movi	r2,15
    60ac:	18800005 	stb	r2,0(r3)
        return (pevent);
    60b0:	e0fffb17 	ldw	r3,-20(fp)
    60b4:	e0ffff15 	stw	r3,-4(fp)
    60b8:	00007406 	br	628c <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    60bc:	0005303a 	rdctl	r2,status
    60c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    60c4:	e0fff717 	ldw	r3,-36(fp)
    60c8:	00bfff84 	movi	r2,-2
    60cc:	1884703a 	and	r2,r3,r2
    60d0:	1001703a 	wrctl	status,r2
  
  return context;
    60d4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    60d8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    60dc:	e0bffb17 	ldw	r2,-20(fp)
    60e0:	10800283 	ldbu	r2,10(r2)
    60e4:	10803fcc 	andi	r2,r2,255
    60e8:	1005003a 	cmpeq	r2,r2,zero
    60ec:	1000031e 	bne	r2,zero,60fc <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    60f0:	00800044 	movi	r2,1
    60f4:	e0bffa05 	stb	r2,-24(fp)
    60f8:	00000106 	br	6100 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    60fc:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
    6100:	e0bffc03 	ldbu	r2,-16(fp)
    6104:	e0bffe15 	stw	r2,-8(fp)
    6108:	e0fffe17 	ldw	r3,-8(fp)
    610c:	1805003a 	cmpeq	r2,r3,zero
    6110:	1000041e 	bne	r2,zero,6124 <OSSemDel+0x120>
    6114:	e0fffe17 	ldw	r3,-8(fp)
    6118:	18800060 	cmpeqi	r2,r3,1
    611c:	10002d1e 	bne	r2,zero,61d4 <OSSemDel+0x1d0>
    6120:	00004f06 	br	6260 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    6124:	e0bffa03 	ldbu	r2,-24(fp)
    6128:	1004c03a 	cmpne	r2,r2,zero
    612c:	10001a1e 	bne	r2,zero,6198 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    6130:	e0fffb17 	ldw	r3,-20(fp)
    6134:	00800fc4 	movi	r2,63
    6138:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    613c:	e0bffb17 	ldw	r2,-20(fp)
    6140:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6144:	e0bffb17 	ldw	r2,-20(fp)
    6148:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    614c:	00800074 	movhi	r2,1
    6150:	1082ef04 	addi	r2,r2,3004
    6154:	10c00017 	ldw	r3,0(r2)
    6158:	e0bffb17 	ldw	r2,-20(fp)
    615c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    6160:	e0bffb17 	ldw	r2,-20(fp)
    6164:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    6168:	00c00074 	movhi	r3,1
    616c:	18c2ef04 	addi	r3,r3,3004
    6170:	e0bffb17 	ldw	r2,-20(fp)
    6174:	18800015 	stw	r2,0(r3)
    6178:	e0bff817 	ldw	r2,-32(fp)
    617c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6180:	e0bff617 	ldw	r2,-40(fp)
    6184:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    6188:	e0bffd17 	ldw	r2,-12(fp)
    618c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    6190:	e03ff915 	stw	zero,-28(fp)
    6194:	00003b06 	br	6284 <OSSemDel+0x280>
    6198:	e0bff817 	ldw	r2,-32(fp)
    619c:	e0bff515 	stw	r2,-44(fp)
    61a0:	e0bff517 	ldw	r2,-44(fp)
    61a4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    61a8:	e0fffd17 	ldw	r3,-12(fp)
    61ac:	00801244 	movi	r2,73
    61b0:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
    61b4:	e0bffb17 	ldw	r2,-20(fp)
    61b8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
    61bc:	00003106 	br	6284 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    61c0:	e13ffb17 	ldw	r4,-20(fp)
    61c4:	000b883a 	mov	r5,zero
    61c8:	01800044 	movi	r6,1
    61cc:	000f883a 	mov	r7,zero
    61d0:	00017000 	call	1700 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    61d4:	e0bffb17 	ldw	r2,-20(fp)
    61d8:	10800283 	ldbu	r2,10(r2)
    61dc:	10803fcc 	andi	r2,r2,255
    61e0:	1004c03a 	cmpne	r2,r2,zero
    61e4:	103ff61e 	bne	r2,zero,61c0 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    61e8:	e0fffb17 	ldw	r3,-20(fp)
    61ec:	00800fc4 	movi	r2,63
    61f0:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    61f4:	e0bffb17 	ldw	r2,-20(fp)
    61f8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    61fc:	e0bffb17 	ldw	r2,-20(fp)
    6200:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    6204:	00800074 	movhi	r2,1
    6208:	1082ef04 	addi	r2,r2,3004
    620c:	10c00017 	ldw	r3,0(r2)
    6210:	e0bffb17 	ldw	r2,-20(fp)
    6214:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    6218:	e0bffb17 	ldw	r2,-20(fp)
    621c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    6220:	00c00074 	movhi	r3,1
    6224:	18c2ef04 	addi	r3,r3,3004
    6228:	e0bffb17 	ldw	r2,-20(fp)
    622c:	18800015 	stw	r2,0(r3)
    6230:	e0bff817 	ldw	r2,-32(fp)
    6234:	e0bff415 	stw	r2,-48(fp)
    6238:	e0bff417 	ldw	r2,-48(fp)
    623c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6240:	e0bffa03 	ldbu	r2,-24(fp)
    6244:	10800058 	cmpnei	r2,r2,1
    6248:	1000011e 	bne	r2,zero,6250 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    624c:	00021400 	call	2140 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    6250:	e0bffd17 	ldw	r2,-12(fp)
    6254:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    6258:	e03ff915 	stw	zero,-28(fp)
             break;
    625c:	00000906 	br	6284 <OSSemDel+0x280>
    6260:	e0bff817 	ldw	r2,-32(fp)
    6264:	e0bff315 	stw	r2,-52(fp)
    6268:	e0bff317 	ldw	r2,-52(fp)
    626c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    6270:	e0fffd17 	ldw	r3,-12(fp)
    6274:	008001c4 	movi	r2,7
    6278:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
    627c:	e0bffb17 	ldw	r2,-20(fp)
    6280:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
    6284:	e0bff917 	ldw	r2,-28(fp)
    6288:	e0bfff15 	stw	r2,-4(fp)
    628c:	e0bfff17 	ldw	r2,-4(fp)
}
    6290:	e037883a 	mov	sp,fp
    6294:	dfc00117 	ldw	ra,4(sp)
    6298:	df000017 	ldw	fp,0(sp)
    629c:	dec00204 	addi	sp,sp,8
    62a0:	f800283a 	ret

000062a4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    62a4:	defff404 	addi	sp,sp,-48
    62a8:	dfc00b15 	stw	ra,44(sp)
    62ac:	df000a15 	stw	fp,40(sp)
    62b0:	df000a04 	addi	fp,sp,40
    62b4:	e13ffc15 	stw	r4,-16(fp)
    62b8:	e1bffe15 	stw	r6,-8(fp)
    62bc:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    62c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    62c4:	e0bffe17 	ldw	r2,-8(fp)
    62c8:	1005003a 	cmpeq	r2,r2,zero
    62cc:	10008f1e 	bne	r2,zero,650c <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    62d0:	e0bffc17 	ldw	r2,-16(fp)
    62d4:	1004c03a 	cmpne	r2,r2,zero
    62d8:	1000041e 	bne	r2,zero,62ec <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    62dc:	e0fffe17 	ldw	r3,-8(fp)
    62e0:	00800104 	movi	r2,4
    62e4:	18800005 	stb	r2,0(r3)
        return;
    62e8:	00008806 	br	650c <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    62ec:	e0bffc17 	ldw	r2,-16(fp)
    62f0:	10800003 	ldbu	r2,0(r2)
    62f4:	10803fcc 	andi	r2,r2,255
    62f8:	108000e0 	cmpeqi	r2,r2,3
    62fc:	1000041e 	bne	r2,zero,6310 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    6300:	e0fffe17 	ldw	r3,-8(fp)
    6304:	00800044 	movi	r2,1
    6308:	18800005 	stb	r2,0(r3)
        return;
    630c:	00007f06 	br	650c <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    6310:	00800074 	movhi	r2,1
    6314:	1082f004 	addi	r2,r2,3008
    6318:	10800003 	ldbu	r2,0(r2)
    631c:	10803fcc 	andi	r2,r2,255
    6320:	1005003a 	cmpeq	r2,r2,zero
    6324:	1000041e 	bne	r2,zero,6338 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    6328:	e0fffe17 	ldw	r3,-8(fp)
    632c:	00800084 	movi	r2,2
    6330:	18800005 	stb	r2,0(r3)
        return;
    6334:	00007506 	br	650c <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    6338:	00800074 	movhi	r2,1
    633c:	1082e204 	addi	r2,r2,2952
    6340:	10800003 	ldbu	r2,0(r2)
    6344:	10803fcc 	andi	r2,r2,255
    6348:	1005003a 	cmpeq	r2,r2,zero
    634c:	1000041e 	bne	r2,zero,6360 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    6350:	e0fffe17 	ldw	r3,-8(fp)
    6354:	00800344 	movi	r2,13
    6358:	18800005 	stb	r2,0(r3)
        return;
    635c:	00006b06 	br	650c <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6360:	0005303a 	rdctl	r2,status
    6364:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6368:	e0fffa17 	ldw	r3,-24(fp)
    636c:	00bfff84 	movi	r2,-2
    6370:	1884703a 	and	r2,r3,r2
    6374:	1001703a 	wrctl	status,r2
  
  return context;
    6378:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    637c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    6380:	e0bffc17 	ldw	r2,-16(fp)
    6384:	1080020b 	ldhu	r2,8(r2)
    6388:	10bfffcc 	andi	r2,r2,65535
    638c:	1005003a 	cmpeq	r2,r2,zero
    6390:	10000d1e 	bne	r2,zero,63c8 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    6394:	e0bffc17 	ldw	r2,-16(fp)
    6398:	1080020b 	ldhu	r2,8(r2)
    639c:	10bfffc4 	addi	r2,r2,-1
    63a0:	1007883a 	mov	r3,r2
    63a4:	e0bffc17 	ldw	r2,-16(fp)
    63a8:	10c0020d 	sth	r3,8(r2)
    63ac:	e0bffb17 	ldw	r2,-20(fp)
    63b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    63b4:	e0bff917 	ldw	r2,-28(fp)
    63b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    63bc:	e0bffe17 	ldw	r2,-8(fp)
    63c0:	10000005 	stb	zero,0(r2)
        return;
    63c4:	00005106 	br	650c <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    63c8:	00800074 	movhi	r2,1
    63cc:	1082f104 	addi	r2,r2,3012
    63d0:	10c00017 	ldw	r3,0(r2)
    63d4:	00800074 	movhi	r2,1
    63d8:	1082f104 	addi	r2,r2,3012
    63dc:	10800017 	ldw	r2,0(r2)
    63e0:	10800c03 	ldbu	r2,48(r2)
    63e4:	10800054 	ori	r2,r2,1
    63e8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    63ec:	00800074 	movhi	r2,1
    63f0:	1082f104 	addi	r2,r2,3012
    63f4:	10800017 	ldw	r2,0(r2)
    63f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    63fc:	00800074 	movhi	r2,1
    6400:	1082f104 	addi	r2,r2,3012
    6404:	10c00017 	ldw	r3,0(r2)
    6408:	e0bffd0b 	ldhu	r2,-12(fp)
    640c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    6410:	e13ffc17 	ldw	r4,-16(fp)
    6414:	00018940 	call	1894 <OS_EventTaskWait>
    6418:	e0bffb17 	ldw	r2,-20(fp)
    641c:	e0bff815 	stw	r2,-32(fp)
    6420:	e0bff817 	ldw	r2,-32(fp)
    6424:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    6428:	00021400 	call	2140 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    642c:	0005303a 	rdctl	r2,status
    6430:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6434:	e0fff717 	ldw	r3,-36(fp)
    6438:	00bfff84 	movi	r2,-2
    643c:	1884703a 	and	r2,r3,r2
    6440:	1001703a 	wrctl	status,r2
  
  return context;
    6444:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    6448:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    644c:	00800074 	movhi	r2,1
    6450:	1082f104 	addi	r2,r2,3012
    6454:	10800017 	ldw	r2,0(r2)
    6458:	10800c43 	ldbu	r2,49(r2)
    645c:	10803fcc 	andi	r2,r2,255
    6460:	e0bfff15 	stw	r2,-4(fp)
    6464:	e0ffff17 	ldw	r3,-4(fp)
    6468:	1805003a 	cmpeq	r2,r3,zero
    646c:	1000041e 	bne	r2,zero,6480 <OSSemPend+0x1dc>
    6470:	e0ffff17 	ldw	r3,-4(fp)
    6474:	188000a0 	cmpeqi	r2,r3,2
    6478:	1000041e 	bne	r2,zero,648c <OSSemPend+0x1e8>
    647c:	00000706 	br	649c <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    6480:	e0bffe17 	ldw	r2,-8(fp)
    6484:	10000005 	stb	zero,0(r2)
             break;
    6488:	00000c06 	br	64bc <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    648c:	e0fffe17 	ldw	r3,-8(fp)
    6490:	00800384 	movi	r2,14
    6494:	18800005 	stb	r2,0(r3)
             break;
    6498:	00000806 	br	64bc <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    649c:	00800074 	movhi	r2,1
    64a0:	1082f104 	addi	r2,r2,3012
    64a4:	11000017 	ldw	r4,0(r2)
    64a8:	e17ffc17 	ldw	r5,-16(fp)
    64ac:	0001af80 	call	1af8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    64b0:	e0fffe17 	ldw	r3,-8(fp)
    64b4:	00800284 	movi	r2,10
    64b8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    64bc:	00800074 	movhi	r2,1
    64c0:	1082f104 	addi	r2,r2,3012
    64c4:	10800017 	ldw	r2,0(r2)
    64c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    64cc:	00800074 	movhi	r2,1
    64d0:	1082f104 	addi	r2,r2,3012
    64d4:	10800017 	ldw	r2,0(r2)
    64d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    64dc:	00800074 	movhi	r2,1
    64e0:	1082f104 	addi	r2,r2,3012
    64e4:	10800017 	ldw	r2,0(r2)
    64e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    64ec:	00800074 	movhi	r2,1
    64f0:	1082f104 	addi	r2,r2,3012
    64f4:	10800017 	ldw	r2,0(r2)
    64f8:	10000815 	stw	zero,32(r2)
    64fc:	e0bffb17 	ldw	r2,-20(fp)
    6500:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6504:	e0bff617 	ldw	r2,-40(fp)
    6508:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    650c:	e037883a 	mov	sp,fp
    6510:	dfc00117 	ldw	ra,4(sp)
    6514:	df000017 	ldw	fp,0(sp)
    6518:	dec00204 	addi	sp,sp,8
    651c:	f800283a 	ret

00006520 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6520:	defff504 	addi	sp,sp,-44
    6524:	dfc00a15 	stw	ra,40(sp)
    6528:	df000915 	stw	fp,36(sp)
    652c:	df000904 	addi	fp,sp,36
    6530:	e13ffc15 	stw	r4,-16(fp)
    6534:	e1bffe15 	stw	r6,-8(fp)
    6538:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    653c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6540:	e0bffe17 	ldw	r2,-8(fp)
    6544:	1004c03a 	cmpne	r2,r2,zero
    6548:	1000021e 	bne	r2,zero,6554 <OSSemPendAbort+0x34>
        return (0);
    654c:	e03fff15 	stw	zero,-4(fp)
    6550:	00004c06 	br	6684 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6554:	e0bffc17 	ldw	r2,-16(fp)
    6558:	1004c03a 	cmpne	r2,r2,zero
    655c:	1000051e 	bne	r2,zero,6574 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
    6560:	e0fffe17 	ldw	r3,-8(fp)
    6564:	00800104 	movi	r2,4
    6568:	18800005 	stb	r2,0(r3)
        return (0);
    656c:	e03fff15 	stw	zero,-4(fp)
    6570:	00004406 	br	6684 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6574:	e0bffc17 	ldw	r2,-16(fp)
    6578:	10800003 	ldbu	r2,0(r2)
    657c:	10803fcc 	andi	r2,r2,255
    6580:	108000e0 	cmpeqi	r2,r2,3
    6584:	1000051e 	bne	r2,zero,659c <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    6588:	e0fffe17 	ldw	r3,-8(fp)
    658c:	00800044 	movi	r2,1
    6590:	18800005 	stb	r2,0(r3)
        return (0);
    6594:	e03fff15 	stw	zero,-4(fp)
    6598:	00003a06 	br	6684 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    659c:	0005303a 	rdctl	r2,status
    65a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    65a4:	e0fff917 	ldw	r3,-28(fp)
    65a8:	00bfff84 	movi	r2,-2
    65ac:	1884703a 	and	r2,r3,r2
    65b0:	1001703a 	wrctl	status,r2
  
  return context;
    65b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    65b8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    65bc:	e0bffc17 	ldw	r2,-16(fp)
    65c0:	10800283 	ldbu	r2,10(r2)
    65c4:	10803fcc 	andi	r2,r2,255
    65c8:	1005003a 	cmpeq	r2,r2,zero
    65cc:	1000261e 	bne	r2,zero,6668 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
    65d0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
    65d4:	e0bffd03 	ldbu	r2,-12(fp)
    65d8:	10800060 	cmpeqi	r2,r2,1
    65dc:	1000091e 	bne	r2,zero,6604 <OSSemPendAbort+0xe4>
    65e0:	00000e06 	br	661c <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    65e4:	e13ffc17 	ldw	r4,-16(fp)
    65e8:	000b883a 	mov	r5,zero
    65ec:	01800044 	movi	r6,1
    65f0:	01c00084 	movi	r7,2
    65f4:	00017000 	call	1700 <OS_EventTaskRdy>
                     nbr_tasks++;
    65f8:	e0bffb03 	ldbu	r2,-20(fp)
    65fc:	10800044 	addi	r2,r2,1
    6600:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    6604:	e0bffc17 	ldw	r2,-16(fp)
    6608:	10800283 	ldbu	r2,10(r2)
    660c:	10803fcc 	andi	r2,r2,255
    6610:	1004c03a 	cmpne	r2,r2,zero
    6614:	103ff31e 	bne	r2,zero,65e4 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    6618:	00000806 	br	663c <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    661c:	e13ffc17 	ldw	r4,-16(fp)
    6620:	000b883a 	mov	r5,zero
    6624:	01800044 	movi	r6,1
    6628:	01c00084 	movi	r7,2
    662c:	00017000 	call	1700 <OS_EventTaskRdy>
                 nbr_tasks++;
    6630:	e0bffb03 	ldbu	r2,-20(fp)
    6634:	10800044 	addi	r2,r2,1
    6638:	e0bffb05 	stb	r2,-20(fp)
    663c:	e0bffa17 	ldw	r2,-24(fp)
    6640:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6644:	e0bff817 	ldw	r2,-32(fp)
    6648:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    664c:	00021400 	call	2140 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    6650:	e0fffe17 	ldw	r3,-8(fp)
    6654:	00800384 	movi	r2,14
    6658:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
    665c:	e0bffb03 	ldbu	r2,-20(fp)
    6660:	e0bfff15 	stw	r2,-4(fp)
    6664:	00000706 	br	6684 <OSSemPendAbort+0x164>
    6668:	e0bffa17 	ldw	r2,-24(fp)
    666c:	e0bff715 	stw	r2,-36(fp)
    6670:	e0bff717 	ldw	r2,-36(fp)
    6674:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6678:	e0bffe17 	ldw	r2,-8(fp)
    667c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    6680:	e03fff15 	stw	zero,-4(fp)
    6684:	e0bfff17 	ldw	r2,-4(fp)
}
    6688:	e037883a 	mov	sp,fp
    668c:	dfc00117 	ldw	ra,4(sp)
    6690:	df000017 	ldw	fp,0(sp)
    6694:	dec00204 	addi	sp,sp,8
    6698:	f800283a 	ret

0000669c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    669c:	defff704 	addi	sp,sp,-36
    66a0:	dfc00815 	stw	ra,32(sp)
    66a4:	df000715 	stw	fp,28(sp)
    66a8:	df000704 	addi	fp,sp,28
    66ac:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    66b0:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    66b4:	e0bffe17 	ldw	r2,-8(fp)
    66b8:	1004c03a 	cmpne	r2,r2,zero
    66bc:	1000031e 	bne	r2,zero,66cc <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
    66c0:	00800104 	movi	r2,4
    66c4:	e0bfff15 	stw	r2,-4(fp)
    66c8:	00003806 	br	67ac <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    66cc:	e0bffe17 	ldw	r2,-8(fp)
    66d0:	10800003 	ldbu	r2,0(r2)
    66d4:	10803fcc 	andi	r2,r2,255
    66d8:	108000e0 	cmpeqi	r2,r2,3
    66dc:	1000031e 	bne	r2,zero,66ec <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
    66e0:	00800044 	movi	r2,1
    66e4:	e0bfff15 	stw	r2,-4(fp)
    66e8:	00003006 	br	67ac <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    66ec:	0005303a 	rdctl	r2,status
    66f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    66f4:	e0fffc17 	ldw	r3,-16(fp)
    66f8:	00bfff84 	movi	r2,-2
    66fc:	1884703a 	and	r2,r3,r2
    6700:	1001703a 	wrctl	status,r2
  
  return context;
    6704:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6708:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    670c:	e0bffe17 	ldw	r2,-8(fp)
    6710:	10800283 	ldbu	r2,10(r2)
    6714:	10803fcc 	andi	r2,r2,255
    6718:	1005003a 	cmpeq	r2,r2,zero
    671c:	10000c1e 	bne	r2,zero,6750 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    6720:	e13ffe17 	ldw	r4,-8(fp)
    6724:	000b883a 	mov	r5,zero
    6728:	01800044 	movi	r6,1
    672c:	000f883a 	mov	r7,zero
    6730:	00017000 	call	1700 <OS_EventTaskRdy>
    6734:	e0bffd17 	ldw	r2,-12(fp)
    6738:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    673c:	e0bffb17 	ldw	r2,-20(fp)
    6740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    6744:	00021400 	call	2140 <OS_Sched>
        return (OS_ERR_NONE);
    6748:	e03fff15 	stw	zero,-4(fp)
    674c:	00001706 	br	67ac <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    6750:	e0bffe17 	ldw	r2,-8(fp)
    6754:	1080020b 	ldhu	r2,8(r2)
    6758:	10ffffcc 	andi	r3,r2,65535
    675c:	00bfffd4 	movui	r2,65535
    6760:	18800c26 	beq	r3,r2,6794 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    6764:	e0bffe17 	ldw	r2,-8(fp)
    6768:	1080020b 	ldhu	r2,8(r2)
    676c:	10800044 	addi	r2,r2,1
    6770:	1007883a 	mov	r3,r2
    6774:	e0bffe17 	ldw	r2,-8(fp)
    6778:	10c0020d 	sth	r3,8(r2)
    677c:	e0bffd17 	ldw	r2,-12(fp)
    6780:	e0bffa15 	stw	r2,-24(fp)
    6784:	e0bffa17 	ldw	r2,-24(fp)
    6788:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    678c:	e03fff15 	stw	zero,-4(fp)
    6790:	00000606 	br	67ac <OSSemPost+0x110>
    6794:	e0bffd17 	ldw	r2,-12(fp)
    6798:	e0bff915 	stw	r2,-28(fp)
    679c:	e0bff917 	ldw	r2,-28(fp)
    67a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    67a4:	00800c84 	movi	r2,50
    67a8:	e0bfff15 	stw	r2,-4(fp)
    67ac:	e0bfff17 	ldw	r2,-4(fp)
}
    67b0:	e037883a 	mov	sp,fp
    67b4:	dfc00117 	ldw	ra,4(sp)
    67b8:	df000017 	ldw	fp,0(sp)
    67bc:	dec00204 	addi	sp,sp,8
    67c0:	f800283a 	ret

000067c4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    67c4:	defff604 	addi	sp,sp,-40
    67c8:	df000915 	stw	fp,36(sp)
    67cc:	df000904 	addi	fp,sp,36
    67d0:	e13ffd15 	stw	r4,-12(fp)
    67d4:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    67d8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    67dc:	e0bffd17 	ldw	r2,-12(fp)
    67e0:	1004c03a 	cmpne	r2,r2,zero
    67e4:	1000031e 	bne	r2,zero,67f4 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
    67e8:	00800104 	movi	r2,4
    67ec:	e0bfff15 	stw	r2,-4(fp)
    67f0:	00003b06 	br	68e0 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    67f4:	e0bffe17 	ldw	r2,-8(fp)
    67f8:	1004c03a 	cmpne	r2,r2,zero
    67fc:	1000031e 	bne	r2,zero,680c <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
    6800:	00800244 	movi	r2,9
    6804:	e0bfff15 	stw	r2,-4(fp)
    6808:	00003506 	br	68e0 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    680c:	e0bffd17 	ldw	r2,-12(fp)
    6810:	10800003 	ldbu	r2,0(r2)
    6814:	10803fcc 	andi	r2,r2,255
    6818:	108000e0 	cmpeqi	r2,r2,3
    681c:	1000031e 	bne	r2,zero,682c <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
    6820:	00800044 	movi	r2,1
    6824:	e0bfff15 	stw	r2,-4(fp)
    6828:	00002d06 	br	68e0 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    682c:	0005303a 	rdctl	r2,status
    6830:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6834:	e0fff817 	ldw	r3,-32(fp)
    6838:	00bfff84 	movi	r2,-2
    683c:	1884703a 	and	r2,r3,r2
    6840:	1001703a 	wrctl	status,r2
  
  return context;
    6844:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    6848:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    684c:	e0bffd17 	ldw	r2,-12(fp)
    6850:	10c00283 	ldbu	r3,10(r2)
    6854:	e0bffe17 	ldw	r2,-8(fp)
    6858:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    685c:	e0bffd17 	ldw	r2,-12(fp)
    6860:	108002c4 	addi	r2,r2,11
    6864:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    6868:	e0bffe17 	ldw	r2,-8(fp)
    686c:	10800084 	addi	r2,r2,2
    6870:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6874:	e03ffa05 	stb	zero,-24(fp)
    6878:	00000d06 	br	68b0 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
    687c:	e0bffc17 	ldw	r2,-16(fp)
    6880:	10c00003 	ldbu	r3,0(r2)
    6884:	e0bffb17 	ldw	r2,-20(fp)
    6888:	10c00005 	stb	r3,0(r2)
    688c:	e0bffb17 	ldw	r2,-20(fp)
    6890:	10800044 	addi	r2,r2,1
    6894:	e0bffb15 	stw	r2,-20(fp)
    6898:	e0bffc17 	ldw	r2,-16(fp)
    689c:	10800044 	addi	r2,r2,1
    68a0:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    68a4:	e0bffa03 	ldbu	r2,-24(fp)
    68a8:	10800044 	addi	r2,r2,1
    68ac:	e0bffa05 	stb	r2,-24(fp)
    68b0:	e0bffa03 	ldbu	r2,-24(fp)
    68b4:	108000f0 	cmpltui	r2,r2,3
    68b8:	103ff01e 	bne	r2,zero,687c <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    68bc:	e0bffd17 	ldw	r2,-12(fp)
    68c0:	10c0020b 	ldhu	r3,8(r2)
    68c4:	e0bffe17 	ldw	r2,-8(fp)
    68c8:	10c0000d 	sth	r3,0(r2)
    68cc:	e0bff917 	ldw	r2,-28(fp)
    68d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    68d4:	e0bff717 	ldw	r2,-36(fp)
    68d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    68dc:	e03fff15 	stw	zero,-4(fp)
    68e0:	e0bfff17 	ldw	r2,-4(fp)
}
    68e4:	e037883a 	mov	sp,fp
    68e8:	df000017 	ldw	fp,0(sp)
    68ec:	dec00104 	addi	sp,sp,4
    68f0:	f800283a 	ret

000068f4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    68f4:	defff904 	addi	sp,sp,-28
    68f8:	df000615 	stw	fp,24(sp)
    68fc:	df000604 	addi	fp,sp,24
    6900:	e13ffd15 	stw	r4,-12(fp)
    6904:	e1bfff15 	stw	r6,-4(fp)
    6908:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    690c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6910:	e0bfff17 	ldw	r2,-4(fp)
    6914:	1005003a 	cmpeq	r2,r2,zero
    6918:	1000331e 	bne	r2,zero,69e8 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    691c:	e0bffd17 	ldw	r2,-12(fp)
    6920:	1004c03a 	cmpne	r2,r2,zero
    6924:	1000041e 	bne	r2,zero,6938 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    6928:	e0ffff17 	ldw	r3,-4(fp)
    692c:	00800104 	movi	r2,4
    6930:	18800005 	stb	r2,0(r3)
        return;
    6934:	00002c06 	br	69e8 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6938:	e0bffd17 	ldw	r2,-12(fp)
    693c:	10800003 	ldbu	r2,0(r2)
    6940:	10803fcc 	andi	r2,r2,255
    6944:	108000e0 	cmpeqi	r2,r2,3
    6948:	1000041e 	bne	r2,zero,695c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    694c:	e0ffff17 	ldw	r3,-4(fp)
    6950:	00800044 	movi	r2,1
    6954:	18800005 	stb	r2,0(r3)
        return;
    6958:	00002306 	br	69e8 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    695c:	0005303a 	rdctl	r2,status
    6960:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6964:	e0fffb17 	ldw	r3,-20(fp)
    6968:	00bfff84 	movi	r2,-2
    696c:	1884703a 	and	r2,r3,r2
    6970:	1001703a 	wrctl	status,r2
  
  return context;
    6974:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6978:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
    697c:	e0bfff17 	ldw	r2,-4(fp)
    6980:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    6984:	e0bffd17 	ldw	r2,-12(fp)
    6988:	1080020b 	ldhu	r2,8(r2)
    698c:	10bfffcc 	andi	r2,r2,65535
    6990:	1005003a 	cmpeq	r2,r2,zero
    6994:	1000041e 	bne	r2,zero,69a8 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    6998:	e0fffd17 	ldw	r3,-12(fp)
    699c:	e0bffe0b 	ldhu	r2,-8(fp)
    69a0:	1880020d 	sth	r2,8(r3)
    69a4:	00000c06 	br	69d8 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    69a8:	e0bffd17 	ldw	r2,-12(fp)
    69ac:	10800283 	ldbu	r2,10(r2)
    69b0:	10803fcc 	andi	r2,r2,255
    69b4:	1004c03a 	cmpne	r2,r2,zero
    69b8:	1000041e 	bne	r2,zero,69cc <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    69bc:	e0fffd17 	ldw	r3,-12(fp)
    69c0:	e0bffe0b 	ldhu	r2,-8(fp)
    69c4:	1880020d 	sth	r2,8(r3)
    69c8:	00000306 	br	69d8 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    69cc:	e0ffff17 	ldw	r3,-4(fp)
    69d0:	00801244 	movi	r2,73
    69d4:	18800005 	stb	r2,0(r3)
    69d8:	e0bffc17 	ldw	r2,-16(fp)
    69dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    69e0:	e0bffa17 	ldw	r2,-24(fp)
    69e4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    69e8:	e037883a 	mov	sp,fp
    69ec:	df000017 	ldw	fp,0(sp)
    69f0:	dec00104 	addi	sp,sp,4
    69f4:	f800283a 	ret

000069f8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    69f8:	defff004 	addi	sp,sp,-64
    69fc:	dfc00f15 	stw	ra,60(sp)
    6a00:	df000e15 	stw	fp,56(sp)
    6a04:	df000e04 	addi	fp,sp,56
    6a08:	e13ffd05 	stb	r4,-12(fp)
    6a0c:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    6a10:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    6a14:	e0bffd03 	ldbu	r2,-12(fp)
    6a18:	10800530 	cmpltui	r2,r2,20
    6a1c:	1000061e 	bne	r2,zero,6a38 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
    6a20:	e0bffd03 	ldbu	r2,-12(fp)
    6a24:	10803fe0 	cmpeqi	r2,r2,255
    6a28:	1000031e 	bne	r2,zero,6a38 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
    6a2c:	00800a84 	movi	r2,42
    6a30:	e0bfff15 	stw	r2,-4(fp)
    6a34:	00014706 	br	6f54 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    6a38:	e0bffe03 	ldbu	r2,-8(fp)
    6a3c:	10800530 	cmpltui	r2,r2,20
    6a40:	1000031e 	bne	r2,zero,6a50 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    6a44:	00800a84 	movi	r2,42
    6a48:	e0bfff15 	stw	r2,-4(fp)
    6a4c:	00014106 	br	6f54 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a50:	0005303a 	rdctl	r2,status
    6a54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a58:	e0fff617 	ldw	r3,-40(fp)
    6a5c:	00bfff84 	movi	r2,-2
    6a60:	1884703a 	and	r2,r3,r2
    6a64:	1001703a 	wrctl	status,r2
  
  return context;
    6a68:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6a6c:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    6a70:	e0bffe03 	ldbu	r2,-8(fp)
    6a74:	00c000b4 	movhi	r3,2
    6a78:	18ef6f04 	addi	r3,r3,-16964
    6a7c:	1085883a 	add	r2,r2,r2
    6a80:	1085883a 	add	r2,r2,r2
    6a84:	10c5883a 	add	r2,r2,r3
    6a88:	10800017 	ldw	r2,0(r2)
    6a8c:	1005003a 	cmpeq	r2,r2,zero
    6a90:	1000071e 	bne	r2,zero,6ab0 <OSTaskChangePrio+0xb8>
    6a94:	e0bff717 	ldw	r2,-36(fp)
    6a98:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6a9c:	e0bff517 	ldw	r2,-44(fp)
    6aa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    6aa4:	00800a04 	movi	r2,40
    6aa8:	e0bfff15 	stw	r2,-4(fp)
    6aac:	00012906 	br	6f54 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    6ab0:	e0bffd03 	ldbu	r2,-12(fp)
    6ab4:	10803fd8 	cmpnei	r2,r2,255
    6ab8:	1000051e 	bne	r2,zero,6ad0 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    6abc:	00800074 	movhi	r2,1
    6ac0:	1082f104 	addi	r2,r2,3012
    6ac4:	10800017 	ldw	r2,0(r2)
    6ac8:	10800c83 	ldbu	r2,50(r2)
    6acc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    6ad0:	e0bffd03 	ldbu	r2,-12(fp)
    6ad4:	00c000b4 	movhi	r3,2
    6ad8:	18ef6f04 	addi	r3,r3,-16964
    6adc:	1085883a 	add	r2,r2,r2
    6ae0:	1085883a 	add	r2,r2,r2
    6ae4:	10c5883a 	add	r2,r2,r3
    6ae8:	10800017 	ldw	r2,0(r2)
    6aec:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    6af0:	e0bffa17 	ldw	r2,-24(fp)
    6af4:	1004c03a 	cmpne	r2,r2,zero
    6af8:	1000071e 	bne	r2,zero,6b18 <OSTaskChangePrio+0x120>
    6afc:	e0bff717 	ldw	r2,-36(fp)
    6b00:	e0bff415 	stw	r2,-48(fp)
    6b04:	e0bff417 	ldw	r2,-48(fp)
    6b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    6b0c:	00800a44 	movi	r2,41
    6b10:	e0bfff15 	stw	r2,-4(fp)
    6b14:	00010f06 	br	6f54 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    6b18:	e0bffa17 	ldw	r2,-24(fp)
    6b1c:	10800058 	cmpnei	r2,r2,1
    6b20:	1000071e 	bne	r2,zero,6b40 <OSTaskChangePrio+0x148>
    6b24:	e0bff717 	ldw	r2,-36(fp)
    6b28:	e0bff315 	stw	r2,-52(fp)
    6b2c:	e0bff317 	ldw	r2,-52(fp)
    6b30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    6b34:	008010c4 	movi	r2,67
    6b38:	e0bfff15 	stw	r2,-4(fp)
    6b3c:	00010506 	br	6f54 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    6b40:	e0bffe03 	ldbu	r2,-8(fp)
    6b44:	1004d0fa 	srli	r2,r2,3
    6b48:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    6b4c:	e0bffe03 	ldbu	r2,-8(fp)
    6b50:	108001cc 	andi	r2,r2,7
    6b54:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
    6b58:	e0fff983 	ldbu	r3,-26(fp)
    6b5c:	00800044 	movi	r2,1
    6b60:	10c4983a 	sll	r2,r2,r3
    6b64:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
    6b68:	e0fff943 	ldbu	r3,-27(fp)
    6b6c:	00800044 	movi	r2,1
    6b70:	10c4983a 	sll	r2,r2,r3
    6b74:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    6b78:	e0bffd03 	ldbu	r2,-12(fp)
    6b7c:	00c000b4 	movhi	r3,2
    6b80:	18ef6f04 	addi	r3,r3,-16964
    6b84:	1085883a 	add	r2,r2,r2
    6b88:	1085883a 	add	r2,r2,r2
    6b8c:	10c5883a 	add	r2,r2,r3
    6b90:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    6b94:	e0bffe03 	ldbu	r2,-8(fp)
    6b98:	00c000b4 	movhi	r3,2
    6b9c:	18ef6f04 	addi	r3,r3,-16964
    6ba0:	1085883a 	add	r2,r2,r2
    6ba4:	1085883a 	add	r2,r2,r2
    6ba8:	10c7883a 	add	r3,r2,r3
    6bac:	e0bffa17 	ldw	r2,-24(fp)
    6bb0:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
    6bb4:	e0bffa17 	ldw	r2,-24(fp)
    6bb8:	10800d03 	ldbu	r2,52(r2)
    6bbc:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
    6bc0:	e0bffa17 	ldw	r2,-24(fp)
    6bc4:	10800d83 	ldbu	r2,54(r2)
    6bc8:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    6bcc:	e0bffa17 	ldw	r2,-24(fp)
    6bd0:	10800d43 	ldbu	r2,53(r2)
    6bd4:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    6bd8:	e0fff903 	ldbu	r3,-28(fp)
    6bdc:	00800074 	movhi	r2,1
    6be0:	1082ee44 	addi	r2,r2,3001
    6be4:	10c5883a 	add	r2,r2,r3
    6be8:	10c00003 	ldbu	r3,0(r2)
    6bec:	e0bff803 	ldbu	r2,-32(fp)
    6bf0:	1884703a 	and	r2,r3,r2
    6bf4:	10803fcc 	andi	r2,r2,255
    6bf8:	1005003a 	cmpeq	r2,r2,zero
    6bfc:	1000381e 	bne	r2,zero,6ce0 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
    6c00:	e13ff903 	ldbu	r4,-28(fp)
    6c04:	e0fff903 	ldbu	r3,-28(fp)
    6c08:	00800074 	movhi	r2,1
    6c0c:	1082ee44 	addi	r2,r2,3001
    6c10:	10c5883a 	add	r2,r2,r3
    6c14:	10800003 	ldbu	r2,0(r2)
    6c18:	1007883a 	mov	r3,r2
    6c1c:	e0bff803 	ldbu	r2,-32(fp)
    6c20:	0084303a 	nor	r2,zero,r2
    6c24:	1884703a 	and	r2,r3,r2
    6c28:	1007883a 	mov	r3,r2
    6c2c:	00800074 	movhi	r2,1
    6c30:	1082ee44 	addi	r2,r2,3001
    6c34:	1105883a 	add	r2,r2,r4
    6c38:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    6c3c:	e0fff903 	ldbu	r3,-28(fp)
    6c40:	00800074 	movhi	r2,1
    6c44:	1082ee44 	addi	r2,r2,3001
    6c48:	10c5883a 	add	r2,r2,r3
    6c4c:	10800003 	ldbu	r2,0(r2)
    6c50:	10803fcc 	andi	r2,r2,255
    6c54:	1004c03a 	cmpne	r2,r2,zero
    6c58:	10000b1e 	bne	r2,zero,6c88 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
    6c5c:	e0bff843 	ldbu	r2,-31(fp)
    6c60:	0084303a 	nor	r2,zero,r2
    6c64:	1007883a 	mov	r3,r2
    6c68:	00800074 	movhi	r2,1
    6c6c:	1082ee04 	addi	r2,r2,3000
    6c70:	10800003 	ldbu	r2,0(r2)
    6c74:	1884703a 	and	r2,r3,r2
    6c78:	1007883a 	mov	r3,r2
    6c7c:	00800074 	movhi	r2,1
    6c80:	1082ee04 	addi	r2,r2,3000
    6c84:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    6c88:	00800074 	movhi	r2,1
    6c8c:	1082ee04 	addi	r2,r2,3000
    6c90:	10c00003 	ldbu	r3,0(r2)
    6c94:	e0bff8c3 	ldbu	r2,-29(fp)
    6c98:	1884b03a 	or	r2,r3,r2
    6c9c:	1007883a 	mov	r3,r2
    6ca0:	00800074 	movhi	r2,1
    6ca4:	1082ee04 	addi	r2,r2,3000
    6ca8:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    6cac:	e13ff983 	ldbu	r4,-26(fp)
    6cb0:	e0fff983 	ldbu	r3,-26(fp)
    6cb4:	00800074 	movhi	r2,1
    6cb8:	1082ee44 	addi	r2,r2,3001
    6cbc:	10c5883a 	add	r2,r2,r3
    6cc0:	10c00003 	ldbu	r3,0(r2)
    6cc4:	e0bff883 	ldbu	r2,-30(fp)
    6cc8:	1884b03a 	or	r2,r3,r2
    6ccc:	1007883a 	mov	r3,r2
    6cd0:	00800074 	movhi	r2,1
    6cd4:	1082ee44 	addi	r2,r2,3001
    6cd8:	1105883a 	add	r2,r2,r4
    6cdc:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    6ce0:	e0bffa17 	ldw	r2,-24(fp)
    6ce4:	10800717 	ldw	r2,28(r2)
    6ce8:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
    6cec:	e0bffc17 	ldw	r2,-16(fp)
    6cf0:	1005003a 	cmpeq	r2,r2,zero
    6cf4:	1000341e 	bne	r2,zero,6dc8 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    6cf8:	e13ff903 	ldbu	r4,-28(fp)
    6cfc:	e0fff903 	ldbu	r3,-28(fp)
    6d00:	e0bffc17 	ldw	r2,-16(fp)
    6d04:	1885883a 	add	r2,r3,r2
    6d08:	10800204 	addi	r2,r2,8
    6d0c:	108000c3 	ldbu	r2,3(r2)
    6d10:	1007883a 	mov	r3,r2
    6d14:	e0bff803 	ldbu	r2,-32(fp)
    6d18:	0084303a 	nor	r2,zero,r2
    6d1c:	1884703a 	and	r2,r3,r2
    6d20:	1007883a 	mov	r3,r2
    6d24:	e0bffc17 	ldw	r2,-16(fp)
    6d28:	2085883a 	add	r2,r4,r2
    6d2c:	10800204 	addi	r2,r2,8
    6d30:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    6d34:	e0fff903 	ldbu	r3,-28(fp)
    6d38:	e0bffc17 	ldw	r2,-16(fp)
    6d3c:	1885883a 	add	r2,r3,r2
    6d40:	10800204 	addi	r2,r2,8
    6d44:	108000c3 	ldbu	r2,3(r2)
    6d48:	10803fcc 	andi	r2,r2,255
    6d4c:	1004c03a 	cmpne	r2,r2,zero
    6d50:	1000091e 	bne	r2,zero,6d78 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
    6d54:	e0bffc17 	ldw	r2,-16(fp)
    6d58:	10800283 	ldbu	r2,10(r2)
    6d5c:	1007883a 	mov	r3,r2
    6d60:	e0bff843 	ldbu	r2,-31(fp)
    6d64:	0084303a 	nor	r2,zero,r2
    6d68:	1884703a 	and	r2,r3,r2
    6d6c:	1007883a 	mov	r3,r2
    6d70:	e0bffc17 	ldw	r2,-16(fp)
    6d74:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    6d78:	e0bffc17 	ldw	r2,-16(fp)
    6d7c:	10c00283 	ldbu	r3,10(r2)
    6d80:	e0bff8c3 	ldbu	r2,-29(fp)
    6d84:	1884b03a 	or	r2,r3,r2
    6d88:	1007883a 	mov	r3,r2
    6d8c:	e0bffc17 	ldw	r2,-16(fp)
    6d90:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    6d94:	e13ff983 	ldbu	r4,-26(fp)
    6d98:	e0fff983 	ldbu	r3,-26(fp)
    6d9c:	e0bffc17 	ldw	r2,-16(fp)
    6da0:	1885883a 	add	r2,r3,r2
    6da4:	10800204 	addi	r2,r2,8
    6da8:	10c000c3 	ldbu	r3,3(r2)
    6dac:	e0bff883 	ldbu	r2,-30(fp)
    6db0:	1884b03a 	or	r2,r3,r2
    6db4:	1007883a 	mov	r3,r2
    6db8:	e0bffc17 	ldw	r2,-16(fp)
    6dbc:	2085883a 	add	r2,r4,r2
    6dc0:	10800204 	addi	r2,r2,8
    6dc4:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    6dc8:	e0bffa17 	ldw	r2,-24(fp)
    6dcc:	10800817 	ldw	r2,32(r2)
    6dd0:	1005003a 	cmpeq	r2,r2,zero
    6dd4:	1000441e 	bne	r2,zero,6ee8 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    6dd8:	e0bffa17 	ldw	r2,-24(fp)
    6ddc:	10800817 	ldw	r2,32(r2)
    6de0:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
    6de4:	e0bffb17 	ldw	r2,-20(fp)
    6de8:	10800017 	ldw	r2,0(r2)
    6dec:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
    6df0:	00003a06 	br	6edc <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    6df4:	e13ff903 	ldbu	r4,-28(fp)
    6df8:	e0fff903 	ldbu	r3,-28(fp)
    6dfc:	e0bffc17 	ldw	r2,-16(fp)
    6e00:	1885883a 	add	r2,r3,r2
    6e04:	10800204 	addi	r2,r2,8
    6e08:	108000c3 	ldbu	r2,3(r2)
    6e0c:	1007883a 	mov	r3,r2
    6e10:	e0bff803 	ldbu	r2,-32(fp)
    6e14:	0084303a 	nor	r2,zero,r2
    6e18:	1884703a 	and	r2,r3,r2
    6e1c:	1007883a 	mov	r3,r2
    6e20:	e0bffc17 	ldw	r2,-16(fp)
    6e24:	2085883a 	add	r2,r4,r2
    6e28:	10800204 	addi	r2,r2,8
    6e2c:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    6e30:	e0fff903 	ldbu	r3,-28(fp)
    6e34:	e0bffc17 	ldw	r2,-16(fp)
    6e38:	1885883a 	add	r2,r3,r2
    6e3c:	10800204 	addi	r2,r2,8
    6e40:	108000c3 	ldbu	r2,3(r2)
    6e44:	10803fcc 	andi	r2,r2,255
    6e48:	1004c03a 	cmpne	r2,r2,zero
    6e4c:	1000091e 	bne	r2,zero,6e74 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
    6e50:	e0bffc17 	ldw	r2,-16(fp)
    6e54:	10800283 	ldbu	r2,10(r2)
    6e58:	1007883a 	mov	r3,r2
    6e5c:	e0bff843 	ldbu	r2,-31(fp)
    6e60:	0084303a 	nor	r2,zero,r2
    6e64:	1884703a 	and	r2,r3,r2
    6e68:	1007883a 	mov	r3,r2
    6e6c:	e0bffc17 	ldw	r2,-16(fp)
    6e70:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    6e74:	e0bffc17 	ldw	r2,-16(fp)
    6e78:	10c00283 	ldbu	r3,10(r2)
    6e7c:	e0bff8c3 	ldbu	r2,-29(fp)
    6e80:	1884b03a 	or	r2,r3,r2
    6e84:	1007883a 	mov	r3,r2
    6e88:	e0bffc17 	ldw	r2,-16(fp)
    6e8c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    6e90:	e13ff983 	ldbu	r4,-26(fp)
    6e94:	e0fff983 	ldbu	r3,-26(fp)
    6e98:	e0bffc17 	ldw	r2,-16(fp)
    6e9c:	1885883a 	add	r2,r3,r2
    6ea0:	10800204 	addi	r2,r2,8
    6ea4:	10c000c3 	ldbu	r3,3(r2)
    6ea8:	e0bff883 	ldbu	r2,-30(fp)
    6eac:	1884b03a 	or	r2,r3,r2
    6eb0:	1007883a 	mov	r3,r2
    6eb4:	e0bffc17 	ldw	r2,-16(fp)
    6eb8:	2085883a 	add	r2,r4,r2
    6ebc:	10800204 	addi	r2,r2,8
    6ec0:	10c000c5 	stb	r3,3(r2)
            pevents++;
    6ec4:	e0bffb17 	ldw	r2,-20(fp)
    6ec8:	10800104 	addi	r2,r2,4
    6ecc:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
    6ed0:	e0bffb17 	ldw	r2,-20(fp)
    6ed4:	10800017 	ldw	r2,0(r2)
    6ed8:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    6edc:	e0bffc17 	ldw	r2,-16(fp)
    6ee0:	1004c03a 	cmpne	r2,r2,zero
    6ee4:	103fc31e 	bne	r2,zero,6df4 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    6ee8:	e0fffa17 	ldw	r3,-24(fp)
    6eec:	e0bffe03 	ldbu	r2,-8(fp)
    6ef0:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
    6ef4:	e0fffa17 	ldw	r3,-24(fp)
    6ef8:	e0bff983 	ldbu	r2,-26(fp)
    6efc:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
    6f00:	e0fffa17 	ldw	r3,-24(fp)
    6f04:	e0bff943 	ldbu	r2,-27(fp)
    6f08:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
    6f0c:	e0fffa17 	ldw	r3,-24(fp)
    6f10:	e0bff8c3 	ldbu	r2,-29(fp)
    6f14:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
    6f18:	e0fffa17 	ldw	r3,-24(fp)
    6f1c:	e0bff883 	ldbu	r2,-30(fp)
    6f20:	18800d45 	stb	r2,53(r3)
    6f24:	e0bff717 	ldw	r2,-36(fp)
    6f28:	e0bff215 	stw	r2,-56(fp)
    6f2c:	e0bff217 	ldw	r2,-56(fp)
    6f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    6f34:	00800074 	movhi	r2,1
    6f38:	1082e244 	addi	r2,r2,2953
    6f3c:	10800003 	ldbu	r2,0(r2)
    6f40:	10803fcc 	andi	r2,r2,255
    6f44:	10800058 	cmpnei	r2,r2,1
    6f48:	1000011e 	bne	r2,zero,6f50 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
    6f4c:	00021400 	call	2140 <OS_Sched>
    }
    return (OS_ERR_NONE);
    6f50:	e03fff15 	stw	zero,-4(fp)
    6f54:	e0bfff17 	ldw	r2,-4(fp)
}
    6f58:	e037883a 	mov	sp,fp
    6f5c:	dfc00117 	ldw	ra,4(sp)
    6f60:	df000017 	ldw	fp,0(sp)
    6f64:	dec00204 	addi	sp,sp,8
    6f68:	f800283a 	ret

00006f6c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    6f6c:	deffed04 	addi	sp,sp,-76
    6f70:	dfc01215 	stw	ra,72(sp)
    6f74:	df001115 	stw	fp,68(sp)
    6f78:	df001104 	addi	fp,sp,68
    6f7c:	e13ffb15 	stw	r4,-20(fp)
    6f80:	e17ffc15 	stw	r5,-16(fp)
    6f84:	e1bffd15 	stw	r6,-12(fp)
    6f88:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    6f8c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    6f90:	e0bffe03 	ldbu	r2,-8(fp)
    6f94:	10800570 	cmpltui	r2,r2,21
    6f98:	1000031e 	bne	r2,zero,6fa8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    6f9c:	00800a84 	movi	r2,42
    6fa0:	e0bfff15 	stw	r2,-4(fp)
    6fa4:	00006006 	br	7128 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6fa8:	0005303a 	rdctl	r2,status
    6fac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fb0:	e0fff717 	ldw	r3,-36(fp)
    6fb4:	00bfff84 	movi	r2,-2
    6fb8:	1884703a 	and	r2,r3,r2
    6fbc:	1001703a 	wrctl	status,r2
  
  return context;
    6fc0:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6fc4:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    6fc8:	00800074 	movhi	r2,1
    6fcc:	1082f004 	addi	r2,r2,3008
    6fd0:	10800003 	ldbu	r2,0(r2)
    6fd4:	10803fcc 	andi	r2,r2,255
    6fd8:	1005003a 	cmpeq	r2,r2,zero
    6fdc:	1000071e 	bne	r2,zero,6ffc <OSTaskCreate+0x90>
    6fe0:	e0bff817 	ldw	r2,-32(fp)
    6fe4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6fe8:	e0bff617 	ldw	r2,-40(fp)
    6fec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    6ff0:	00800f04 	movi	r2,60
    6ff4:	e0bfff15 	stw	r2,-4(fp)
    6ff8:	00004b06 	br	7128 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    6ffc:	e0bffe03 	ldbu	r2,-8(fp)
    7000:	00c000b4 	movhi	r3,2
    7004:	18ef6f04 	addi	r3,r3,-16964
    7008:	1085883a 	add	r2,r2,r2
    700c:	1085883a 	add	r2,r2,r2
    7010:	10c5883a 	add	r2,r2,r3
    7014:	10800017 	ldw	r2,0(r2)
    7018:	1004c03a 	cmpne	r2,r2,zero
    701c:	10003c1e 	bne	r2,zero,7110 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    7020:	e0bffe03 	ldbu	r2,-8(fp)
    7024:	00c000b4 	movhi	r3,2
    7028:	18ef6f04 	addi	r3,r3,-16964
    702c:	1085883a 	add	r2,r2,r2
    7030:	1085883a 	add	r2,r2,r2
    7034:	10c7883a 	add	r3,r2,r3
    7038:	00800044 	movi	r2,1
    703c:	18800015 	stw	r2,0(r3)
    7040:	e0bff817 	ldw	r2,-32(fp)
    7044:	e0bff515 	stw	r2,-44(fp)
    7048:	e0bff517 	ldw	r2,-44(fp)
    704c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    7050:	e13ffb17 	ldw	r4,-20(fp)
    7054:	e17ffc17 	ldw	r5,-16(fp)
    7058:	e1bffd17 	ldw	r6,-12(fp)
    705c:	000f883a 	mov	r7,zero
    7060:	000c7140 	call	c714 <OSTaskStkInit>
    7064:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    7068:	e13ffe03 	ldbu	r4,-8(fp)
    706c:	d8000015 	stw	zero,0(sp)
    7070:	d8000115 	stw	zero,4(sp)
    7074:	d8000215 	stw	zero,8(sp)
    7078:	e17ffa17 	ldw	r5,-24(fp)
    707c:	000d883a 	mov	r6,zero
    7080:	000f883a 	mov	r7,zero
    7084:	00025480 	call	2548 <OS_TCBInit>
    7088:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
    708c:	e0bff903 	ldbu	r2,-28(fp)
    7090:	1004c03a 	cmpne	r2,r2,zero
    7094:	1000081e 	bne	r2,zero,70b8 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    7098:	00800074 	movhi	r2,1
    709c:	1082e244 	addi	r2,r2,2953
    70a0:	10800003 	ldbu	r2,0(r2)
    70a4:	10803fcc 	andi	r2,r2,255
    70a8:	10800058 	cmpnei	r2,r2,1
    70ac:	1000151e 	bne	r2,zero,7104 <OSTaskCreate+0x198>
                OS_Sched();
    70b0:	00021400 	call	2140 <OS_Sched>
    70b4:	00001306 	br	7104 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    70b8:	0005303a 	rdctl	r2,status
    70bc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    70c0:	e0fff417 	ldw	r3,-48(fp)
    70c4:	00bfff84 	movi	r2,-2
    70c8:	1884703a 	and	r2,r3,r2
    70cc:	1001703a 	wrctl	status,r2
  
  return context;
    70d0:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    70d4:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    70d8:	e0bffe03 	ldbu	r2,-8(fp)
    70dc:	00c000b4 	movhi	r3,2
    70e0:	18ef6f04 	addi	r3,r3,-16964
    70e4:	1085883a 	add	r2,r2,r2
    70e8:	1085883a 	add	r2,r2,r2
    70ec:	10c5883a 	add	r2,r2,r3
    70f0:	10000015 	stw	zero,0(r2)
    70f4:	e0bff817 	ldw	r2,-32(fp)
    70f8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    70fc:	e0bff317 	ldw	r2,-52(fp)
    7100:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    7104:	e0bff903 	ldbu	r2,-28(fp)
    7108:	e0bfff15 	stw	r2,-4(fp)
    710c:	00000606 	br	7128 <OSTaskCreate+0x1bc>
    7110:	e0bff817 	ldw	r2,-32(fp)
    7114:	e0bff215 	stw	r2,-56(fp)
    7118:	e0bff217 	ldw	r2,-56(fp)
    711c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    7120:	00800a04 	movi	r2,40
    7124:	e0bfff15 	stw	r2,-4(fp)
    7128:	e0bfff17 	ldw	r2,-4(fp)
}
    712c:	e037883a 	mov	sp,fp
    7130:	dfc00117 	ldw	ra,4(sp)
    7134:	df000017 	ldw	fp,0(sp)
    7138:	dec00204 	addi	sp,sp,8
    713c:	f800283a 	ret

00007140 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    7140:	deffeb04 	addi	sp,sp,-84
    7144:	dfc01415 	stw	ra,80(sp)
    7148:	df001315 	stw	fp,76(sp)
    714c:	df001304 	addi	fp,sp,76
    7150:	e13ff915 	stw	r4,-28(fp)
    7154:	e17ffa15 	stw	r5,-24(fp)
    7158:	e1bffb15 	stw	r6,-20(fp)
    715c:	e0800217 	ldw	r2,8(fp)
    7160:	e0c00617 	ldw	r3,24(fp)
    7164:	e1fffc05 	stb	r7,-16(fp)
    7168:	e0bffd0d 	sth	r2,-12(fp)
    716c:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    7170:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    7174:	e0bffc03 	ldbu	r2,-16(fp)
    7178:	10800570 	cmpltui	r2,r2,21
    717c:	1000031e 	bne	r2,zero,718c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    7180:	00800a84 	movi	r2,42
    7184:	e0bfff15 	stw	r2,-4(fp)
    7188:	00006706 	br	7328 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    718c:	0005303a 	rdctl	r2,status
    7190:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7194:	e0fff517 	ldw	r3,-44(fp)
    7198:	00bfff84 	movi	r2,-2
    719c:	1884703a 	and	r2,r3,r2
    71a0:	1001703a 	wrctl	status,r2
  
  return context;
    71a4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    71a8:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    71ac:	00800074 	movhi	r2,1
    71b0:	1082f004 	addi	r2,r2,3008
    71b4:	10800003 	ldbu	r2,0(r2)
    71b8:	10803fcc 	andi	r2,r2,255
    71bc:	1005003a 	cmpeq	r2,r2,zero
    71c0:	1000071e 	bne	r2,zero,71e0 <OSTaskCreateExt+0xa0>
    71c4:	e0bff617 	ldw	r2,-40(fp)
    71c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    71cc:	e0bff417 	ldw	r2,-48(fp)
    71d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    71d4:	00800f04 	movi	r2,60
    71d8:	e0bfff15 	stw	r2,-4(fp)
    71dc:	00005206 	br	7328 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    71e0:	e0bffc03 	ldbu	r2,-16(fp)
    71e4:	00c000b4 	movhi	r3,2
    71e8:	18ef6f04 	addi	r3,r3,-16964
    71ec:	1085883a 	add	r2,r2,r2
    71f0:	1085883a 	add	r2,r2,r2
    71f4:	10c5883a 	add	r2,r2,r3
    71f8:	10800017 	ldw	r2,0(r2)
    71fc:	1004c03a 	cmpne	r2,r2,zero
    7200:	1000431e 	bne	r2,zero,7310 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    7204:	e0bffc03 	ldbu	r2,-16(fp)
    7208:	00c000b4 	movhi	r3,2
    720c:	18ef6f04 	addi	r3,r3,-16964
    7210:	1085883a 	add	r2,r2,r2
    7214:	1085883a 	add	r2,r2,r2
    7218:	10c7883a 	add	r3,r2,r3
    721c:	00800044 	movi	r2,1
    7220:	18800015 	stw	r2,0(r3)
    7224:	e0bff617 	ldw	r2,-40(fp)
    7228:	e0bff315 	stw	r2,-52(fp)
    722c:	e0bff317 	ldw	r2,-52(fp)
    7230:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    7234:	e1bffe0b 	ldhu	r6,-8(fp)
    7238:	e1000317 	ldw	r4,12(fp)
    723c:	e1400417 	ldw	r5,16(fp)
    7240:	00083bc0 	call	83bc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    7244:	e1fffe0b 	ldhu	r7,-8(fp)
    7248:	e13ff917 	ldw	r4,-28(fp)
    724c:	e17ffa17 	ldw	r5,-24(fp)
    7250:	e1bffb17 	ldw	r6,-20(fp)
    7254:	000c7140 	call	c714 <OSTaskStkInit>
    7258:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    725c:	e13ffc03 	ldbu	r4,-16(fp)
    7260:	e1fffd0b 	ldhu	r7,-12(fp)
    7264:	e0fffe0b 	ldhu	r3,-8(fp)
    7268:	e0800417 	ldw	r2,16(fp)
    726c:	d8800015 	stw	r2,0(sp)
    7270:	e0800517 	ldw	r2,20(fp)
    7274:	d8800115 	stw	r2,4(sp)
    7278:	d8c00215 	stw	r3,8(sp)
    727c:	e17ff817 	ldw	r5,-32(fp)
    7280:	e1800317 	ldw	r6,12(fp)
    7284:	00025480 	call	2548 <OS_TCBInit>
    7288:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
    728c:	e0bff703 	ldbu	r2,-36(fp)
    7290:	1004c03a 	cmpne	r2,r2,zero
    7294:	1000081e 	bne	r2,zero,72b8 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    7298:	00800074 	movhi	r2,1
    729c:	1082e244 	addi	r2,r2,2953
    72a0:	10800003 	ldbu	r2,0(r2)
    72a4:	10803fcc 	andi	r2,r2,255
    72a8:	10800058 	cmpnei	r2,r2,1
    72ac:	1000151e 	bne	r2,zero,7304 <OSTaskCreateExt+0x1c4>
                OS_Sched();
    72b0:	00021400 	call	2140 <OS_Sched>
    72b4:	00001306 	br	7304 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72b8:	0005303a 	rdctl	r2,status
    72bc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72c0:	e0fff217 	ldw	r3,-56(fp)
    72c4:	00bfff84 	movi	r2,-2
    72c8:	1884703a 	and	r2,r3,r2
    72cc:	1001703a 	wrctl	status,r2
  
  return context;
    72d0:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    72d4:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    72d8:	e0bffc03 	ldbu	r2,-16(fp)
    72dc:	00c000b4 	movhi	r3,2
    72e0:	18ef6f04 	addi	r3,r3,-16964
    72e4:	1085883a 	add	r2,r2,r2
    72e8:	1085883a 	add	r2,r2,r2
    72ec:	10c5883a 	add	r2,r2,r3
    72f0:	10000015 	stw	zero,0(r2)
    72f4:	e0bff617 	ldw	r2,-40(fp)
    72f8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    72fc:	e0bff117 	ldw	r2,-60(fp)
    7300:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    7304:	e0bff703 	ldbu	r2,-36(fp)
    7308:	e0bfff15 	stw	r2,-4(fp)
    730c:	00000606 	br	7328 <OSTaskCreateExt+0x1e8>
    7310:	e0bff617 	ldw	r2,-40(fp)
    7314:	e0bff015 	stw	r2,-64(fp)
    7318:	e0bff017 	ldw	r2,-64(fp)
    731c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    7320:	00800a04 	movi	r2,40
    7324:	e0bfff15 	stw	r2,-4(fp)
    7328:	e0bfff17 	ldw	r2,-4(fp)
}
    732c:	e037883a 	mov	sp,fp
    7330:	dfc00117 	ldw	ra,4(sp)
    7334:	df000017 	ldw	fp,0(sp)
    7338:	dec00204 	addi	sp,sp,8
    733c:	f800283a 	ret

00007340 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    7340:	defff304 	addi	sp,sp,-52
    7344:	dfc00c15 	stw	ra,48(sp)
    7348:	df000b15 	stw	fp,44(sp)
    734c:	df000b04 	addi	fp,sp,44
    7350:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    7354:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    7358:	00800074 	movhi	r2,1
    735c:	1082f004 	addi	r2,r2,3008
    7360:	10800003 	ldbu	r2,0(r2)
    7364:	10803fcc 	andi	r2,r2,255
    7368:	1005003a 	cmpeq	r2,r2,zero
    736c:	1000031e 	bne	r2,zero,737c <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
    7370:	00801004 	movi	r2,64
    7374:	e0bfff15 	stw	r2,-4(fp)
    7378:	0000ee06 	br	7734 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    737c:	e0bffe03 	ldbu	r2,-8(fp)
    7380:	10800518 	cmpnei	r2,r2,20
    7384:	1000031e 	bne	r2,zero,7394 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
    7388:	00800f84 	movi	r2,62
    738c:	e0bfff15 	stw	r2,-4(fp)
    7390:	0000e806 	br	7734 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    7394:	e0bffe03 	ldbu	r2,-8(fp)
    7398:	10800530 	cmpltui	r2,r2,20
    739c:	1000061e 	bne	r2,zero,73b8 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
    73a0:	e0bffe03 	ldbu	r2,-8(fp)
    73a4:	10803fe0 	cmpeqi	r2,r2,255
    73a8:	1000031e 	bne	r2,zero,73b8 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
    73ac:	00800a84 	movi	r2,42
    73b0:	e0bfff15 	stw	r2,-4(fp)
    73b4:	0000df06 	br	7734 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    73b8:	0005303a 	rdctl	r2,status
    73bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    73c0:	e0fffa17 	ldw	r3,-24(fp)
    73c4:	00bfff84 	movi	r2,-2
    73c8:	1884703a 	and	r2,r3,r2
    73cc:	1001703a 	wrctl	status,r2
  
  return context;
    73d0:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    73d4:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    73d8:	e0bffe03 	ldbu	r2,-8(fp)
    73dc:	10803fd8 	cmpnei	r2,r2,255
    73e0:	1000051e 	bne	r2,zero,73f8 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    73e4:	00800074 	movhi	r2,1
    73e8:	1082f104 	addi	r2,r2,3012
    73ec:	10800017 	ldw	r2,0(r2)
    73f0:	10800c83 	ldbu	r2,50(r2)
    73f4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    73f8:	e0bffe03 	ldbu	r2,-8(fp)
    73fc:	00c000b4 	movhi	r3,2
    7400:	18ef6f04 	addi	r3,r3,-16964
    7404:	1085883a 	add	r2,r2,r2
    7408:	1085883a 	add	r2,r2,r2
    740c:	10c5883a 	add	r2,r2,r3
    7410:	10800017 	ldw	r2,0(r2)
    7414:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    7418:	e0bffc17 	ldw	r2,-16(fp)
    741c:	1004c03a 	cmpne	r2,r2,zero
    7420:	1000071e 	bne	r2,zero,7440 <OSTaskDel+0x100>
    7424:	e0bffb17 	ldw	r2,-20(fp)
    7428:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    742c:	e0bff917 	ldw	r2,-28(fp)
    7430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7434:	008010c4 	movi	r2,67
    7438:	e0bfff15 	stw	r2,-4(fp)
    743c:	0000bd06 	br	7734 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    7440:	e0bffc17 	ldw	r2,-16(fp)
    7444:	10800058 	cmpnei	r2,r2,1
    7448:	1000071e 	bne	r2,zero,7468 <OSTaskDel+0x128>
    744c:	e0bffb17 	ldw	r2,-20(fp)
    7450:	e0bff815 	stw	r2,-32(fp)
    7454:	e0bff817 	ldw	r2,-32(fp)
    7458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    745c:	00800f44 	movi	r2,61
    7460:	e0bfff15 	stw	r2,-4(fp)
    7464:	0000b306 	br	7734 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    7468:	e0bffc17 	ldw	r2,-16(fp)
    746c:	10800d03 	ldbu	r2,52(r2)
    7470:	11003fcc 	andi	r4,r2,255
    7474:	e0bffc17 	ldw	r2,-16(fp)
    7478:	10800d03 	ldbu	r2,52(r2)
    747c:	10c03fcc 	andi	r3,r2,255
    7480:	00800074 	movhi	r2,1
    7484:	1082ee44 	addi	r2,r2,3001
    7488:	10c5883a 	add	r2,r2,r3
    748c:	10800003 	ldbu	r2,0(r2)
    7490:	1007883a 	mov	r3,r2
    7494:	e0bffc17 	ldw	r2,-16(fp)
    7498:	10800d43 	ldbu	r2,53(r2)
    749c:	0084303a 	nor	r2,zero,r2
    74a0:	1884703a 	and	r2,r3,r2
    74a4:	1007883a 	mov	r3,r2
    74a8:	00800074 	movhi	r2,1
    74ac:	1082ee44 	addi	r2,r2,3001
    74b0:	1105883a 	add	r2,r2,r4
    74b4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    74b8:	e0bffc17 	ldw	r2,-16(fp)
    74bc:	10800d03 	ldbu	r2,52(r2)
    74c0:	10c03fcc 	andi	r3,r2,255
    74c4:	00800074 	movhi	r2,1
    74c8:	1082ee44 	addi	r2,r2,3001
    74cc:	10c5883a 	add	r2,r2,r3
    74d0:	10800003 	ldbu	r2,0(r2)
    74d4:	10803fcc 	andi	r2,r2,255
    74d8:	1004c03a 	cmpne	r2,r2,zero
    74dc:	10000c1e 	bne	r2,zero,7510 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    74e0:	e0bffc17 	ldw	r2,-16(fp)
    74e4:	10800d83 	ldbu	r2,54(r2)
    74e8:	0084303a 	nor	r2,zero,r2
    74ec:	1007883a 	mov	r3,r2
    74f0:	00800074 	movhi	r2,1
    74f4:	1082ee04 	addi	r2,r2,3000
    74f8:	10800003 	ldbu	r2,0(r2)
    74fc:	1884703a 	and	r2,r3,r2
    7500:	1007883a 	mov	r3,r2
    7504:	00800074 	movhi	r2,1
    7508:	1082ee04 	addi	r2,r2,3000
    750c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    7510:	e0bffc17 	ldw	r2,-16(fp)
    7514:	10800717 	ldw	r2,28(r2)
    7518:	1005003a 	cmpeq	r2,r2,zero
    751c:	1000041e 	bne	r2,zero,7530 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    7520:	e0bffc17 	ldw	r2,-16(fp)
    7524:	11400717 	ldw	r5,28(r2)
    7528:	e13ffc17 	ldw	r4,-16(fp)
    752c:	0001af80 	call	1af8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    7530:	e0bffc17 	ldw	r2,-16(fp)
    7534:	10800817 	ldw	r2,32(r2)
    7538:	1005003a 	cmpeq	r2,r2,zero
    753c:	1000041e 	bne	r2,zero,7550 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    7540:	e0bffc17 	ldw	r2,-16(fp)
    7544:	11400817 	ldw	r5,32(r2)
    7548:	e13ffc17 	ldw	r4,-16(fp)
    754c:	0001bb00 	call	1bb0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    7550:	e0bffc17 	ldw	r2,-16(fp)
    7554:	10800a17 	ldw	r2,40(r2)
    7558:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    755c:	e0bffd17 	ldw	r2,-12(fp)
    7560:	1005003a 	cmpeq	r2,r2,zero
    7564:	1000021e 	bne	r2,zero,7570 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    7568:	e13ffd17 	ldw	r4,-12(fp)
    756c:	00042440 	call	4244 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    7570:	e0bffc17 	ldw	r2,-16(fp)
    7574:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    7578:	e0bffc17 	ldw	r2,-16(fp)
    757c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    7580:	e0bffc17 	ldw	r2,-16(fp)
    7584:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    7588:	00800074 	movhi	r2,1
    758c:	1082e204 	addi	r2,r2,2952
    7590:	10800003 	ldbu	r2,0(r2)
    7594:	10803fcc 	andi	r2,r2,255
    7598:	10803fe0 	cmpeqi	r2,r2,255
    759c:	1000081e 	bne	r2,zero,75c0 <OSTaskDel+0x280>
        OSLockNesting++;
    75a0:	00800074 	movhi	r2,1
    75a4:	1082e204 	addi	r2,r2,2952
    75a8:	10800003 	ldbu	r2,0(r2)
    75ac:	10800044 	addi	r2,r2,1
    75b0:	1007883a 	mov	r3,r2
    75b4:	00800074 	movhi	r2,1
    75b8:	1082e204 	addi	r2,r2,2952
    75bc:	10c00005 	stb	r3,0(r2)
    75c0:	e0bffb17 	ldw	r2,-20(fp)
    75c4:	e0bff715 	stw	r2,-36(fp)
    75c8:	e0bff717 	ldw	r2,-36(fp)
    75cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    75d0:	00016e40 	call	16e4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    75d4:	0005303a 	rdctl	r2,status
    75d8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    75dc:	e0fff617 	ldw	r3,-40(fp)
    75e0:	00bfff84 	movi	r2,-2
    75e4:	1884703a 	and	r2,r3,r2
    75e8:	1001703a 	wrctl	status,r2
  
  return context;
    75ec:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    75f0:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    75f4:	00800074 	movhi	r2,1
    75f8:	1082e204 	addi	r2,r2,2952
    75fc:	10800003 	ldbu	r2,0(r2)
    7600:	10803fcc 	andi	r2,r2,255
    7604:	1005003a 	cmpeq	r2,r2,zero
    7608:	1000081e 	bne	r2,zero,762c <OSTaskDel+0x2ec>
        OSLockNesting--;
    760c:	00800074 	movhi	r2,1
    7610:	1082e204 	addi	r2,r2,2952
    7614:	10800003 	ldbu	r2,0(r2)
    7618:	10bfffc4 	addi	r2,r2,-1
    761c:	1007883a 	mov	r3,r2
    7620:	00800074 	movhi	r2,1
    7624:	1082e204 	addi	r2,r2,2952
    7628:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    762c:	e13ffc17 	ldw	r4,-16(fp)
    7630:	000ca440 	call	ca44 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    7634:	00800074 	movhi	r2,1
    7638:	1082ea44 	addi	r2,r2,2985
    763c:	10800003 	ldbu	r2,0(r2)
    7640:	10bfffc4 	addi	r2,r2,-1
    7644:	1007883a 	mov	r3,r2
    7648:	00800074 	movhi	r2,1
    764c:	1082ea44 	addi	r2,r2,2985
    7650:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    7654:	e0bffe03 	ldbu	r2,-8(fp)
    7658:	00c000b4 	movhi	r3,2
    765c:	18ef6f04 	addi	r3,r3,-16964
    7660:	1085883a 	add	r2,r2,r2
    7664:	1085883a 	add	r2,r2,r2
    7668:	10c5883a 	add	r2,r2,r3
    766c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    7670:	e0bffc17 	ldw	r2,-16(fp)
    7674:	10800617 	ldw	r2,24(r2)
    7678:	1004c03a 	cmpne	r2,r2,zero
    767c:	1000091e 	bne	r2,zero,76a4 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    7680:	e0bffc17 	ldw	r2,-16(fp)
    7684:	10800517 	ldw	r2,20(r2)
    7688:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    768c:	e0bffc17 	ldw	r2,-16(fp)
    7690:	10c00517 	ldw	r3,20(r2)
    7694:	00800074 	movhi	r2,1
    7698:	1082e504 	addi	r2,r2,2964
    769c:	10c00015 	stw	r3,0(r2)
    76a0:	00000a06 	br	76cc <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    76a4:	e0bffc17 	ldw	r2,-16(fp)
    76a8:	10c00617 	ldw	r3,24(r2)
    76ac:	e0bffc17 	ldw	r2,-16(fp)
    76b0:	10800517 	ldw	r2,20(r2)
    76b4:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    76b8:	e0bffc17 	ldw	r2,-16(fp)
    76bc:	10c00517 	ldw	r3,20(r2)
    76c0:	e0bffc17 	ldw	r2,-16(fp)
    76c4:	10800617 	ldw	r2,24(r2)
    76c8:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    76cc:	00800074 	movhi	r2,1
    76d0:	1082e904 	addi	r2,r2,2980
    76d4:	10c00017 	ldw	r3,0(r2)
    76d8:	e0bffc17 	ldw	r2,-16(fp)
    76dc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    76e0:	00c00074 	movhi	r3,1
    76e4:	18c2e904 	addi	r3,r3,2980
    76e8:	e0bffc17 	ldw	r2,-16(fp)
    76ec:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    76f0:	e0fffc17 	ldw	r3,-16(fp)
    76f4:	00800fc4 	movi	r2,63
    76f8:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    76fc:	e0bffc17 	ldw	r2,-16(fp)
    7700:	10001345 	stb	zero,77(r2)
    7704:	e0bffb17 	ldw	r2,-20(fp)
    7708:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    770c:	e0bff517 	ldw	r2,-44(fp)
    7710:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    7714:	00800074 	movhi	r2,1
    7718:	1082e244 	addi	r2,r2,2953
    771c:	10800003 	ldbu	r2,0(r2)
    7720:	10803fcc 	andi	r2,r2,255
    7724:	10800058 	cmpnei	r2,r2,1
    7728:	1000011e 	bne	r2,zero,7730 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
    772c:	00021400 	call	2140 <OS_Sched>
    }
    return (OS_ERR_NONE);
    7730:	e03fff15 	stw	zero,-4(fp)
    7734:	e0bfff17 	ldw	r2,-4(fp)
}
    7738:	e037883a 	mov	sp,fp
    773c:	dfc00117 	ldw	ra,4(sp)
    7740:	df000017 	ldw	fp,0(sp)
    7744:	dec00204 	addi	sp,sp,8
    7748:	f800283a 	ret

0000774c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    774c:	defff404 	addi	sp,sp,-48
    7750:	df000b15 	stw	fp,44(sp)
    7754:	df000b04 	addi	fp,sp,44
    7758:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    775c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    7760:	e0bffe03 	ldbu	r2,-8(fp)
    7764:	10800518 	cmpnei	r2,r2,20
    7768:	1000031e 	bne	r2,zero,7778 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    776c:	00800f84 	movi	r2,62
    7770:	e0bfff15 	stw	r2,-4(fp)
    7774:	00004c06 	br	78a8 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    7778:	e0bffe03 	ldbu	r2,-8(fp)
    777c:	10800530 	cmpltui	r2,r2,20
    7780:	1000061e 	bne	r2,zero,779c <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
    7784:	e0bffe03 	ldbu	r2,-8(fp)
    7788:	10803fe0 	cmpeqi	r2,r2,255
    778c:	1000031e 	bne	r2,zero,779c <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
    7790:	00800a84 	movi	r2,42
    7794:	e0bfff15 	stw	r2,-4(fp)
    7798:	00004306 	br	78a8 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    779c:	e0bffe03 	ldbu	r2,-8(fp)
    77a0:	10803fd8 	cmpnei	r2,r2,255
    77a4:	1000141e 	bne	r2,zero,77f8 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    77a8:	0005303a 	rdctl	r2,status
    77ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    77b0:	e0fffa17 	ldw	r3,-24(fp)
    77b4:	00bfff84 	movi	r2,-2
    77b8:	1884703a 	and	r2,r3,r2
    77bc:	1001703a 	wrctl	status,r2
  
  return context;
    77c0:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    77c4:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    77c8:	00800074 	movhi	r2,1
    77cc:	1082f104 	addi	r2,r2,3012
    77d0:	10800017 	ldw	r2,0(r2)
    77d4:	10800dc3 	ldbu	r2,55(r2)
    77d8:	e0bffd05 	stb	r2,-12(fp)
    77dc:	e0bffb17 	ldw	r2,-20(fp)
    77e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    77e4:	e0bff917 	ldw	r2,-28(fp)
    77e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    77ec:	e0bffd03 	ldbu	r2,-12(fp)
    77f0:	e0bfff15 	stw	r2,-4(fp)
    77f4:	00002c06 	br	78a8 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    77f8:	0005303a 	rdctl	r2,status
    77fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7800:	e0fff817 	ldw	r3,-32(fp)
    7804:	00bfff84 	movi	r2,-2
    7808:	1884703a 	and	r2,r3,r2
    780c:	1001703a 	wrctl	status,r2
  
  return context;
    7810:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    7814:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
    7818:	e0bffe03 	ldbu	r2,-8(fp)
    781c:	00c000b4 	movhi	r3,2
    7820:	18ef6f04 	addi	r3,r3,-16964
    7824:	1085883a 	add	r2,r2,r2
    7828:	1085883a 	add	r2,r2,r2
    782c:	10c5883a 	add	r2,r2,r3
    7830:	10800017 	ldw	r2,0(r2)
    7834:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    7838:	e0bffc17 	ldw	r2,-16(fp)
    783c:	1004c03a 	cmpne	r2,r2,zero
    7840:	1000071e 	bne	r2,zero,7860 <OSTaskDelReq+0x114>
    7844:	e0bffb17 	ldw	r2,-20(fp)
    7848:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    784c:	e0bff717 	ldw	r2,-36(fp)
    7850:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    7854:	008010c4 	movi	r2,67
    7858:	e0bfff15 	stw	r2,-4(fp)
    785c:	00001206 	br	78a8 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    7860:	e0bffc17 	ldw	r2,-16(fp)
    7864:	10800058 	cmpnei	r2,r2,1
    7868:	1000071e 	bne	r2,zero,7888 <OSTaskDelReq+0x13c>
    786c:	e0bffb17 	ldw	r2,-20(fp)
    7870:	e0bff615 	stw	r2,-40(fp)
    7874:	e0bff617 	ldw	r2,-40(fp)
    7878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    787c:	00800f44 	movi	r2,61
    7880:	e0bfff15 	stw	r2,-4(fp)
    7884:	00000806 	br	78a8 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    7888:	e0fffc17 	ldw	r3,-16(fp)
    788c:	00800fc4 	movi	r2,63
    7890:	18800dc5 	stb	r2,55(r3)
    7894:	e0bffb17 	ldw	r2,-20(fp)
    7898:	e0bff515 	stw	r2,-44(fp)
    789c:	e0bff517 	ldw	r2,-44(fp)
    78a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    78a4:	e03fff15 	stw	zero,-4(fp)
    78a8:	e0bfff17 	ldw	r2,-4(fp)
}
    78ac:	e037883a 	mov	sp,fp
    78b0:	df000017 	ldw	fp,0(sp)
    78b4:	dec00104 	addi	sp,sp,4
    78b8:	f800283a 	ret

000078bc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    78bc:	defff304 	addi	sp,sp,-52
    78c0:	dfc00c15 	stw	ra,48(sp)
    78c4:	df000b15 	stw	fp,44(sp)
    78c8:	df000b04 	addi	fp,sp,44
    78cc:	e17ffd15 	stw	r5,-12(fp)
    78d0:	e1bffe15 	stw	r6,-8(fp)
    78d4:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    78d8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    78dc:	e0bffe17 	ldw	r2,-8(fp)
    78e0:	1004c03a 	cmpne	r2,r2,zero
    78e4:	1000021e 	bne	r2,zero,78f0 <OSTaskNameGet+0x34>
        return (0);
    78e8:	e03fff15 	stw	zero,-4(fp)
    78ec:	00005b06 	br	7a5c <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    78f0:	e0bffc03 	ldbu	r2,-16(fp)
    78f4:	10800570 	cmpltui	r2,r2,21
    78f8:	1000081e 	bne	r2,zero,791c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    78fc:	e0bffc03 	ldbu	r2,-16(fp)
    7900:	10803fe0 	cmpeqi	r2,r2,255
    7904:	1000051e 	bne	r2,zero,791c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    7908:	e0fffe17 	ldw	r3,-8(fp)
    790c:	00800a84 	movi	r2,42
    7910:	18800005 	stb	r2,0(r3)
            return (0);
    7914:	e03fff15 	stw	zero,-4(fp)
    7918:	00005006 	br	7a5c <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    791c:	e0bffd17 	ldw	r2,-12(fp)
    7920:	1004c03a 	cmpne	r2,r2,zero
    7924:	1000051e 	bne	r2,zero,793c <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    7928:	e0fffe17 	ldw	r3,-8(fp)
    792c:	00800304 	movi	r2,12
    7930:	18800005 	stb	r2,0(r3)
        return (0);
    7934:	e03fff15 	stw	zero,-4(fp)
    7938:	00004806 	br	7a5c <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    793c:	00800074 	movhi	r2,1
    7940:	1082f004 	addi	r2,r2,3008
    7944:	10800003 	ldbu	r2,0(r2)
    7948:	10803fcc 	andi	r2,r2,255
    794c:	1005003a 	cmpeq	r2,r2,zero
    7950:	1000051e 	bne	r2,zero,7968 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
    7954:	e0fffe17 	ldw	r3,-8(fp)
    7958:	00800444 	movi	r2,17
    795c:	18800005 	stb	r2,0(r3)
        return (0);
    7960:	e03fff15 	stw	zero,-4(fp)
    7964:	00003d06 	br	7a5c <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7968:	0005303a 	rdctl	r2,status
    796c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7970:	e0fff817 	ldw	r3,-32(fp)
    7974:	00bfff84 	movi	r2,-2
    7978:	1884703a 	and	r2,r3,r2
    797c:	1001703a 	wrctl	status,r2
  
  return context;
    7980:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    7984:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    7988:	e0bffc03 	ldbu	r2,-16(fp)
    798c:	10803fd8 	cmpnei	r2,r2,255
    7990:	1000051e 	bne	r2,zero,79a8 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
    7994:	00800074 	movhi	r2,1
    7998:	1082f104 	addi	r2,r2,3012
    799c:	10800017 	ldw	r2,0(r2)
    79a0:	10800c83 	ldbu	r2,50(r2)
    79a4:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    79a8:	e0bffc03 	ldbu	r2,-16(fp)
    79ac:	00c000b4 	movhi	r3,2
    79b0:	18ef6f04 	addi	r3,r3,-16964
    79b4:	1085883a 	add	r2,r2,r2
    79b8:	1085883a 	add	r2,r2,r2
    79bc:	10c5883a 	add	r2,r2,r3
    79c0:	10800017 	ldw	r2,0(r2)
    79c4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    79c8:	e0bffb17 	ldw	r2,-20(fp)
    79cc:	1004c03a 	cmpne	r2,r2,zero
    79d0:	1000091e 	bne	r2,zero,79f8 <OSTaskNameGet+0x13c>
    79d4:	e0bff917 	ldw	r2,-28(fp)
    79d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79dc:	e0bff717 	ldw	r2,-36(fp)
    79e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    79e4:	e0fffe17 	ldw	r3,-8(fp)
    79e8:	008010c4 	movi	r2,67
    79ec:	18800005 	stb	r2,0(r3)
        return (0);
    79f0:	e03fff15 	stw	zero,-4(fp)
    79f4:	00001906 	br	7a5c <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    79f8:	e0bffb17 	ldw	r2,-20(fp)
    79fc:	10800058 	cmpnei	r2,r2,1
    7a00:	1000091e 	bne	r2,zero,7a28 <OSTaskNameGet+0x16c>
    7a04:	e0bff917 	ldw	r2,-28(fp)
    7a08:	e0bff615 	stw	r2,-40(fp)
    7a0c:	e0bff617 	ldw	r2,-40(fp)
    7a10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    7a14:	e0fffe17 	ldw	r3,-8(fp)
    7a18:	008010c4 	movi	r2,67
    7a1c:	18800005 	stb	r2,0(r3)
        return (0);
    7a20:	e03fff15 	stw	zero,-4(fp)
    7a24:	00000d06 	br	7a5c <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    7a28:	e0bffb17 	ldw	r2,-20(fp)
    7a2c:	11401304 	addi	r5,r2,76
    7a30:	e13ffd17 	ldw	r4,-12(fp)
    7a34:	00022840 	call	2284 <OS_StrCopy>
    7a38:	e0bffa05 	stb	r2,-24(fp)
    7a3c:	e0bff917 	ldw	r2,-28(fp)
    7a40:	e0bff515 	stw	r2,-44(fp)
    7a44:	e0bff517 	ldw	r2,-44(fp)
    7a48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7a4c:	e0bffe17 	ldw	r2,-8(fp)
    7a50:	10000005 	stb	zero,0(r2)
    return (len);
    7a54:	e0bffa03 	ldbu	r2,-24(fp)
    7a58:	e0bfff15 	stw	r2,-4(fp)
    7a5c:	e0bfff17 	ldw	r2,-4(fp)
}
    7a60:	e037883a 	mov	sp,fp
    7a64:	dfc00117 	ldw	ra,4(sp)
    7a68:	df000017 	ldw	fp,0(sp)
    7a6c:	dec00204 	addi	sp,sp,8
    7a70:	f800283a 	ret

00007a74 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    7a74:	defff304 	addi	sp,sp,-52
    7a78:	dfc00c15 	stw	ra,48(sp)
    7a7c:	df000b15 	stw	fp,44(sp)
    7a80:	df000b04 	addi	fp,sp,44
    7a84:	e17ffe15 	stw	r5,-8(fp)
    7a88:	e1bfff15 	stw	r6,-4(fp)
    7a8c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    7a90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    7a94:	e0bfff17 	ldw	r2,-4(fp)
    7a98:	1005003a 	cmpeq	r2,r2,zero
    7a9c:	1000611e 	bne	r2,zero,7c24 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    7aa0:	e0bffd03 	ldbu	r2,-12(fp)
    7aa4:	10800570 	cmpltui	r2,r2,21
    7aa8:	1000071e 	bne	r2,zero,7ac8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    7aac:	e0bffd03 	ldbu	r2,-12(fp)
    7ab0:	10803fe0 	cmpeqi	r2,r2,255
    7ab4:	1000041e 	bne	r2,zero,7ac8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    7ab8:	e0ffff17 	ldw	r3,-4(fp)
    7abc:	00800a84 	movi	r2,42
    7ac0:	18800005 	stb	r2,0(r3)
            return;
    7ac4:	00005706 	br	7c24 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    7ac8:	e0bffe17 	ldw	r2,-8(fp)
    7acc:	1004c03a 	cmpne	r2,r2,zero
    7ad0:	1000041e 	bne	r2,zero,7ae4 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    7ad4:	e0ffff17 	ldw	r3,-4(fp)
    7ad8:	00800304 	movi	r2,12
    7adc:	18800005 	stb	r2,0(r3)
        return;
    7ae0:	00005006 	br	7c24 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    7ae4:	00800074 	movhi	r2,1
    7ae8:	1082f004 	addi	r2,r2,3008
    7aec:	10800003 	ldbu	r2,0(r2)
    7af0:	10803fcc 	andi	r2,r2,255
    7af4:	1005003a 	cmpeq	r2,r2,zero
    7af8:	1000041e 	bne	r2,zero,7b0c <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
    7afc:	e0ffff17 	ldw	r3,-4(fp)
    7b00:	00800484 	movi	r2,18
    7b04:	18800005 	stb	r2,0(r3)
        return;
    7b08:	00004606 	br	7c24 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b0c:	0005303a 	rdctl	r2,status
    7b10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b14:	e0fff917 	ldw	r3,-28(fp)
    7b18:	00bfff84 	movi	r2,-2
    7b1c:	1884703a 	and	r2,r3,r2
    7b20:	1001703a 	wrctl	status,r2
  
  return context;
    7b24:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    7b28:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    7b2c:	e0bffd03 	ldbu	r2,-12(fp)
    7b30:	10803fd8 	cmpnei	r2,r2,255
    7b34:	1000051e 	bne	r2,zero,7b4c <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
    7b38:	00800074 	movhi	r2,1
    7b3c:	1082f104 	addi	r2,r2,3012
    7b40:	10800017 	ldw	r2,0(r2)
    7b44:	10800c83 	ldbu	r2,50(r2)
    7b48:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7b4c:	e0bffd03 	ldbu	r2,-12(fp)
    7b50:	00c000b4 	movhi	r3,2
    7b54:	18ef6f04 	addi	r3,r3,-16964
    7b58:	1085883a 	add	r2,r2,r2
    7b5c:	1085883a 	add	r2,r2,r2
    7b60:	10c5883a 	add	r2,r2,r3
    7b64:	10800017 	ldw	r2,0(r2)
    7b68:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    7b6c:	e0bffb17 	ldw	r2,-20(fp)
    7b70:	1004c03a 	cmpne	r2,r2,zero
    7b74:	1000081e 	bne	r2,zero,7b98 <OSTaskNameSet+0x124>
    7b78:	e0bffa17 	ldw	r2,-24(fp)
    7b7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7b80:	e0bff817 	ldw	r2,-32(fp)
    7b84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    7b88:	e0ffff17 	ldw	r3,-4(fp)
    7b8c:	008010c4 	movi	r2,67
    7b90:	18800005 	stb	r2,0(r3)
        return;
    7b94:	00002306 	br	7c24 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    7b98:	e0bffb17 	ldw	r2,-20(fp)
    7b9c:	10800058 	cmpnei	r2,r2,1
    7ba0:	1000081e 	bne	r2,zero,7bc4 <OSTaskNameSet+0x150>
    7ba4:	e0bffa17 	ldw	r2,-24(fp)
    7ba8:	e0bff715 	stw	r2,-36(fp)
    7bac:	e0bff717 	ldw	r2,-36(fp)
    7bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    7bb4:	e0ffff17 	ldw	r3,-4(fp)
    7bb8:	008010c4 	movi	r2,67
    7bbc:	18800005 	stb	r2,0(r3)
        return;
    7bc0:	00001806 	br	7c24 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    7bc4:	e13ffe17 	ldw	r4,-8(fp)
    7bc8:	00023040 	call	2304 <OS_StrLen>
    7bcc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    7bd0:	e0bffc03 	ldbu	r2,-16(fp)
    7bd4:	10800830 	cmpltui	r2,r2,32
    7bd8:	1000081e 	bne	r2,zero,7bfc <OSTaskNameSet+0x188>
    7bdc:	e0bffa17 	ldw	r2,-24(fp)
    7be0:	e0bff615 	stw	r2,-40(fp)
    7be4:	e0bff617 	ldw	r2,-40(fp)
    7be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    7bec:	e0ffff17 	ldw	r3,-4(fp)
    7bf0:	00801044 	movi	r2,65
    7bf4:	18800005 	stb	r2,0(r3)
        return;
    7bf8:	00000a06 	br	7c24 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    7bfc:	e0bffb17 	ldw	r2,-20(fp)
    7c00:	11001304 	addi	r4,r2,76
    7c04:	e17ffe17 	ldw	r5,-8(fp)
    7c08:	00022840 	call	2284 <OS_StrCopy>
    7c0c:	e0bffa17 	ldw	r2,-24(fp)
    7c10:	e0bff515 	stw	r2,-44(fp)
    7c14:	e0bff517 	ldw	r2,-44(fp)
    7c18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7c1c:	e0bfff17 	ldw	r2,-4(fp)
    7c20:	10000005 	stb	zero,0(r2)
}
    7c24:	e037883a 	mov	sp,fp
    7c28:	dfc00117 	ldw	ra,4(sp)
    7c2c:	df000017 	ldw	fp,0(sp)
    7c30:	dec00204 	addi	sp,sp,8
    7c34:	f800283a 	ret

00007c38 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    7c38:	defff304 	addi	sp,sp,-52
    7c3c:	dfc00c15 	stw	ra,48(sp)
    7c40:	df000b15 	stw	fp,44(sp)
    7c44:	df000b04 	addi	fp,sp,44
    7c48:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    7c4c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    7c50:	e0bffe03 	ldbu	r2,-8(fp)
    7c54:	10800530 	cmpltui	r2,r2,20
    7c58:	1000031e 	bne	r2,zero,7c68 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    7c5c:	00800a84 	movi	r2,42
    7c60:	e0bfff15 	stw	r2,-4(fp)
    7c64:	00007406 	br	7e38 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7c68:	0005303a 	rdctl	r2,status
    7c6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c70:	e0fffb17 	ldw	r3,-20(fp)
    7c74:	00bfff84 	movi	r2,-2
    7c78:	1884703a 	and	r2,r3,r2
    7c7c:	1001703a 	wrctl	status,r2
  
  return context;
    7c80:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7c84:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
    7c88:	e0bffe03 	ldbu	r2,-8(fp)
    7c8c:	00c000b4 	movhi	r3,2
    7c90:	18ef6f04 	addi	r3,r3,-16964
    7c94:	1085883a 	add	r2,r2,r2
    7c98:	1085883a 	add	r2,r2,r2
    7c9c:	10c5883a 	add	r2,r2,r3
    7ca0:	10800017 	ldw	r2,0(r2)
    7ca4:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    7ca8:	e0bffd17 	ldw	r2,-12(fp)
    7cac:	1004c03a 	cmpne	r2,r2,zero
    7cb0:	1000071e 	bne	r2,zero,7cd0 <OSTaskResume+0x98>
    7cb4:	e0bffc17 	ldw	r2,-16(fp)
    7cb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7cbc:	e0bffa17 	ldw	r2,-24(fp)
    7cc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    7cc4:	00801184 	movi	r2,70
    7cc8:	e0bfff15 	stw	r2,-4(fp)
    7ccc:	00005a06 	br	7e38 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    7cd0:	e0bffd17 	ldw	r2,-12(fp)
    7cd4:	10800058 	cmpnei	r2,r2,1
    7cd8:	1000071e 	bne	r2,zero,7cf8 <OSTaskResume+0xc0>
    7cdc:	e0bffc17 	ldw	r2,-16(fp)
    7ce0:	e0bff915 	stw	r2,-28(fp)
    7ce4:	e0bff917 	ldw	r2,-28(fp)
    7ce8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7cec:	008010c4 	movi	r2,67
    7cf0:	e0bfff15 	stw	r2,-4(fp)
    7cf4:	00005006 	br	7e38 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    7cf8:	e0bffd17 	ldw	r2,-12(fp)
    7cfc:	10800c03 	ldbu	r2,48(r2)
    7d00:	10803fcc 	andi	r2,r2,255
    7d04:	1080020c 	andi	r2,r2,8
    7d08:	1005003a 	cmpeq	r2,r2,zero
    7d0c:	1000441e 	bne	r2,zero,7e20 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    7d10:	e0bffd17 	ldw	r2,-12(fp)
    7d14:	10c00c03 	ldbu	r3,48(r2)
    7d18:	00bffdc4 	movi	r2,-9
    7d1c:	1884703a 	and	r2,r3,r2
    7d20:	1007883a 	mov	r3,r2
    7d24:	e0bffd17 	ldw	r2,-12(fp)
    7d28:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    7d2c:	e0bffd17 	ldw	r2,-12(fp)
    7d30:	10800c03 	ldbu	r2,48(r2)
    7d34:	10803fcc 	andi	r2,r2,255
    7d38:	1004c03a 	cmpne	r2,r2,zero
    7d3c:	1000321e 	bne	r2,zero,7e08 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
    7d40:	e0bffd17 	ldw	r2,-12(fp)
    7d44:	10800b8b 	ldhu	r2,46(r2)
    7d48:	10bfffcc 	andi	r2,r2,65535
    7d4c:	1004c03a 	cmpne	r2,r2,zero
    7d50:	1000281e 	bne	r2,zero,7df4 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    7d54:	e0bffd17 	ldw	r2,-12(fp)
    7d58:	10c00d83 	ldbu	r3,54(r2)
    7d5c:	00800074 	movhi	r2,1
    7d60:	1082ee04 	addi	r2,r2,3000
    7d64:	10800003 	ldbu	r2,0(r2)
    7d68:	1884b03a 	or	r2,r3,r2
    7d6c:	1007883a 	mov	r3,r2
    7d70:	00800074 	movhi	r2,1
    7d74:	1082ee04 	addi	r2,r2,3000
    7d78:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7d7c:	e0bffd17 	ldw	r2,-12(fp)
    7d80:	10800d03 	ldbu	r2,52(r2)
    7d84:	11003fcc 	andi	r4,r2,255
    7d88:	e0bffd17 	ldw	r2,-12(fp)
    7d8c:	10800d03 	ldbu	r2,52(r2)
    7d90:	10c03fcc 	andi	r3,r2,255
    7d94:	00800074 	movhi	r2,1
    7d98:	1082ee44 	addi	r2,r2,3001
    7d9c:	10c5883a 	add	r2,r2,r3
    7da0:	10c00003 	ldbu	r3,0(r2)
    7da4:	e0bffd17 	ldw	r2,-12(fp)
    7da8:	10800d43 	ldbu	r2,53(r2)
    7dac:	1884b03a 	or	r2,r3,r2
    7db0:	1007883a 	mov	r3,r2
    7db4:	00800074 	movhi	r2,1
    7db8:	1082ee44 	addi	r2,r2,3001
    7dbc:	1105883a 	add	r2,r2,r4
    7dc0:	10c00005 	stb	r3,0(r2)
    7dc4:	e0bffc17 	ldw	r2,-16(fp)
    7dc8:	e0bff815 	stw	r2,-32(fp)
    7dcc:	e0bff817 	ldw	r2,-32(fp)
    7dd0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    7dd4:	00800074 	movhi	r2,1
    7dd8:	1082e244 	addi	r2,r2,2953
    7ddc:	10800003 	ldbu	r2,0(r2)
    7de0:	10803fcc 	andi	r2,r2,255
    7de4:	10800058 	cmpnei	r2,r2,1
    7de8:	10000b1e 	bne	r2,zero,7e18 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
    7dec:	00021400 	call	2140 <OS_Sched>
    7df0:	00000906 	br	7e18 <OSTaskResume+0x1e0>
    7df4:	e0bffc17 	ldw	r2,-16(fp)
    7df8:	e0bff715 	stw	r2,-36(fp)
    7dfc:	e0bff717 	ldw	r2,-36(fp)
    7e00:	1001703a 	wrctl	status,r2
    7e04:	00000406 	br	7e18 <OSTaskResume+0x1e0>
    7e08:	e0bffc17 	ldw	r2,-16(fp)
    7e0c:	e0bff615 	stw	r2,-40(fp)
    7e10:	e0bff617 	ldw	r2,-40(fp)
    7e14:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    7e18:	e03fff15 	stw	zero,-4(fp)
    7e1c:	00000606 	br	7e38 <OSTaskResume+0x200>
    7e20:	e0bffc17 	ldw	r2,-16(fp)
    7e24:	e0bff515 	stw	r2,-44(fp)
    7e28:	e0bff517 	ldw	r2,-44(fp)
    7e2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    7e30:	00801104 	movi	r2,68
    7e34:	e0bfff15 	stw	r2,-4(fp)
    7e38:	e0bfff17 	ldw	r2,-4(fp)
}
    7e3c:	e037883a 	mov	sp,fp
    7e40:	dfc00117 	ldw	ra,4(sp)
    7e44:	df000017 	ldw	fp,0(sp)
    7e48:	dec00204 	addi	sp,sp,8
    7e4c:	f800283a 	ret

00007e50 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    7e50:	defff204 	addi	sp,sp,-56
    7e54:	df000d15 	stw	fp,52(sp)
    7e58:	df000d04 	addi	fp,sp,52
    7e5c:	e17ffe15 	stw	r5,-8(fp)
    7e60:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7e64:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    7e68:	e0bffd03 	ldbu	r2,-12(fp)
    7e6c:	10800570 	cmpltui	r2,r2,21
    7e70:	1000061e 	bne	r2,zero,7e8c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    7e74:	e0bffd03 	ldbu	r2,-12(fp)
    7e78:	10803fe0 	cmpeqi	r2,r2,255
    7e7c:	1000031e 	bne	r2,zero,7e8c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    7e80:	00800a84 	movi	r2,42
    7e84:	e0bfff15 	stw	r2,-4(fp)
    7e88:	00006b06 	br	8038 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    7e8c:	e0bffe17 	ldw	r2,-8(fp)
    7e90:	1004c03a 	cmpne	r2,r2,zero
    7e94:	1000031e 	bne	r2,zero,7ea4 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
    7e98:	00800244 	movi	r2,9
    7e9c:	e0bfff15 	stw	r2,-4(fp)
    7ea0:	00006506 	br	8038 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    7ea4:	e0bffe17 	ldw	r2,-8(fp)
    7ea8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    7eac:	e0bffe17 	ldw	r2,-8(fp)
    7eb0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7eb4:	0005303a 	rdctl	r2,status
    7eb8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7ebc:	e0fff717 	ldw	r3,-36(fp)
    7ec0:	00bfff84 	movi	r2,-2
    7ec4:	1884703a 	and	r2,r3,r2
    7ec8:	1001703a 	wrctl	status,r2
  
  return context;
    7ecc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    7ed0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    7ed4:	e0bffd03 	ldbu	r2,-12(fp)
    7ed8:	10803fd8 	cmpnei	r2,r2,255
    7edc:	1000051e 	bne	r2,zero,7ef4 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
    7ee0:	00800074 	movhi	r2,1
    7ee4:	1082f104 	addi	r2,r2,3012
    7ee8:	10800017 	ldw	r2,0(r2)
    7eec:	10800c83 	ldbu	r2,50(r2)
    7ef0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7ef4:	e0bffd03 	ldbu	r2,-12(fp)
    7ef8:	00c000b4 	movhi	r3,2
    7efc:	18ef6f04 	addi	r3,r3,-16964
    7f00:	1085883a 	add	r2,r2,r2
    7f04:	1085883a 	add	r2,r2,r2
    7f08:	10c5883a 	add	r2,r2,r3
    7f0c:	10800017 	ldw	r2,0(r2)
    7f10:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    7f14:	e0bffc17 	ldw	r2,-16(fp)
    7f18:	1004c03a 	cmpne	r2,r2,zero
    7f1c:	1000071e 	bne	r2,zero,7f3c <OSTaskStkChk+0xec>
    7f20:	e0bff817 	ldw	r2,-32(fp)
    7f24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f28:	e0bff617 	ldw	r2,-40(fp)
    7f2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7f30:	008010c4 	movi	r2,67
    7f34:	e0bfff15 	stw	r2,-4(fp)
    7f38:	00003f06 	br	8038 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    7f3c:	e0bffc17 	ldw	r2,-16(fp)
    7f40:	10800058 	cmpnei	r2,r2,1
    7f44:	1000071e 	bne	r2,zero,7f64 <OSTaskStkChk+0x114>
    7f48:	e0bff817 	ldw	r2,-32(fp)
    7f4c:	e0bff515 	stw	r2,-44(fp)
    7f50:	e0bff517 	ldw	r2,-44(fp)
    7f54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7f58:	008010c4 	movi	r2,67
    7f5c:	e0bfff15 	stw	r2,-4(fp)
    7f60:	00003506 	br	8038 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    7f64:	e0bffc17 	ldw	r2,-16(fp)
    7f68:	1080040b 	ldhu	r2,16(r2)
    7f6c:	10bfffcc 	andi	r2,r2,65535
    7f70:	1080004c 	andi	r2,r2,1
    7f74:	1004c03a 	cmpne	r2,r2,zero
    7f78:	1000071e 	bne	r2,zero,7f98 <OSTaskStkChk+0x148>
    7f7c:	e0bff817 	ldw	r2,-32(fp)
    7f80:	e0bff415 	stw	r2,-48(fp)
    7f84:	e0bff417 	ldw	r2,-48(fp)
    7f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    7f8c:	00801144 	movi	r2,69
    7f90:	e0bfff15 	stw	r2,-4(fp)
    7f94:	00002806 	br	8038 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
    7f98:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
    7f9c:	e0bffc17 	ldw	r2,-16(fp)
    7fa0:	10800317 	ldw	r2,12(r2)
    7fa4:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
    7fa8:	e0bffc17 	ldw	r2,-16(fp)
    7fac:	10800217 	ldw	r2,8(r2)
    7fb0:	e0bffb15 	stw	r2,-20(fp)
    7fb4:	e0bff817 	ldw	r2,-32(fp)
    7fb8:	e0bff315 	stw	r2,-52(fp)
    7fbc:	e0bff317 	ldw	r2,-52(fp)
    7fc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    7fc4:	00000306 	br	7fd4 <OSTaskStkChk+0x184>
        nfree++;
    7fc8:	e0bffa17 	ldw	r2,-24(fp)
    7fcc:	10800044 	addi	r2,r2,1
    7fd0:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    7fd4:	e0bffb17 	ldw	r2,-20(fp)
    7fd8:	10800017 	ldw	r2,0(r2)
    7fdc:	1005003a 	cmpeq	r2,r2,zero
    7fe0:	1007883a 	mov	r3,r2
    7fe4:	e0bffb17 	ldw	r2,-20(fp)
    7fe8:	10800104 	addi	r2,r2,4
    7fec:	e0bffb15 	stw	r2,-20(fp)
    7ff0:	18803fcc 	andi	r2,r3,255
    7ff4:	1004c03a 	cmpne	r2,r2,zero
    7ff8:	103ff31e 	bne	r2,zero,7fc8 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    7ffc:	e0bffa17 	ldw	r2,-24(fp)
    8000:	1085883a 	add	r2,r2,r2
    8004:	1085883a 	add	r2,r2,r2
    8008:	1007883a 	mov	r3,r2
    800c:	e0bffe17 	ldw	r2,-8(fp)
    8010:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    8014:	e0fff917 	ldw	r3,-28(fp)
    8018:	e0bffa17 	ldw	r2,-24(fp)
    801c:	1885c83a 	sub	r2,r3,r2
    8020:	1085883a 	add	r2,r2,r2
    8024:	1085883a 	add	r2,r2,r2
    8028:	1007883a 	mov	r3,r2
    802c:	e0bffe17 	ldw	r2,-8(fp)
    8030:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    8034:	e03fff15 	stw	zero,-4(fp)
    8038:	e0bfff17 	ldw	r2,-4(fp)
}
    803c:	e037883a 	mov	sp,fp
    8040:	df000017 	ldw	fp,0(sp)
    8044:	dec00104 	addi	sp,sp,4
    8048:	f800283a 	ret

0000804c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    804c:	defff404 	addi	sp,sp,-48
    8050:	dfc00b15 	stw	ra,44(sp)
    8054:	df000a15 	stw	fp,40(sp)
    8058:	df000a04 	addi	fp,sp,40
    805c:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8060:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    8064:	e0bffe03 	ldbu	r2,-8(fp)
    8068:	10800518 	cmpnei	r2,r2,20
    806c:	1000031e 	bne	r2,zero,807c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    8070:	008011c4 	movi	r2,71
    8074:	e0bfff15 	stw	r2,-4(fp)
    8078:	00007906 	br	8260 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    807c:	e0bffe03 	ldbu	r2,-8(fp)
    8080:	10800530 	cmpltui	r2,r2,20
    8084:	1000061e 	bne	r2,zero,80a0 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
    8088:	e0bffe03 	ldbu	r2,-8(fp)
    808c:	10803fe0 	cmpeqi	r2,r2,255
    8090:	1000031e 	bne	r2,zero,80a0 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
    8094:	00800a84 	movi	r2,42
    8098:	e0bfff15 	stw	r2,-4(fp)
    809c:	00007006 	br	8260 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    80a0:	0005303a 	rdctl	r2,status
    80a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    80a8:	e0fff917 	ldw	r3,-28(fp)
    80ac:	00bfff84 	movi	r2,-2
    80b0:	1884703a 	and	r2,r3,r2
    80b4:	1001703a 	wrctl	status,r2
  
  return context;
    80b8:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    80bc:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    80c0:	e0bffe03 	ldbu	r2,-8(fp)
    80c4:	10803fd8 	cmpnei	r2,r2,255
    80c8:	1000081e 	bne	r2,zero,80ec <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
    80cc:	00800074 	movhi	r2,1
    80d0:	1082f104 	addi	r2,r2,3012
    80d4:	10800017 	ldw	r2,0(r2)
    80d8:	10800c83 	ldbu	r2,50(r2)
    80dc:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
    80e0:	00800044 	movi	r2,1
    80e4:	e0bffd05 	stb	r2,-12(fp)
    80e8:	00000b06 	br	8118 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    80ec:	00800074 	movhi	r2,1
    80f0:	1082f104 	addi	r2,r2,3012
    80f4:	10800017 	ldw	r2,0(r2)
    80f8:	10800c83 	ldbu	r2,50(r2)
    80fc:	10c03fcc 	andi	r3,r2,255
    8100:	e0bffe03 	ldbu	r2,-8(fp)
    8104:	1880031e 	bne	r3,r2,8114 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
    8108:	00800044 	movi	r2,1
    810c:	e0bffd05 	stb	r2,-12(fp)
    8110:	00000106 	br	8118 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    8114:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8118:	e0bffe03 	ldbu	r2,-8(fp)
    811c:	00c000b4 	movhi	r3,2
    8120:	18ef6f04 	addi	r3,r3,-16964
    8124:	1085883a 	add	r2,r2,r2
    8128:	1085883a 	add	r2,r2,r2
    812c:	10c5883a 	add	r2,r2,r3
    8130:	10800017 	ldw	r2,0(r2)
    8134:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    8138:	e0bffc17 	ldw	r2,-16(fp)
    813c:	1004c03a 	cmpne	r2,r2,zero
    8140:	1000071e 	bne	r2,zero,8160 <OSTaskSuspend+0x114>
    8144:	e0bffa17 	ldw	r2,-24(fp)
    8148:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    814c:	e0bff817 	ldw	r2,-32(fp)
    8150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    8154:	00801204 	movi	r2,72
    8158:	e0bfff15 	stw	r2,-4(fp)
    815c:	00004006 	br	8260 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    8160:	e0bffc17 	ldw	r2,-16(fp)
    8164:	10800058 	cmpnei	r2,r2,1
    8168:	1000071e 	bne	r2,zero,8188 <OSTaskSuspend+0x13c>
    816c:	e0bffa17 	ldw	r2,-24(fp)
    8170:	e0bff715 	stw	r2,-36(fp)
    8174:	e0bff717 	ldw	r2,-36(fp)
    8178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    817c:	008010c4 	movi	r2,67
    8180:	e0bfff15 	stw	r2,-4(fp)
    8184:	00003606 	br	8260 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	10800d03 	ldbu	r2,52(r2)
    8190:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    8194:	e13ffb03 	ldbu	r4,-20(fp)
    8198:	e0fffb03 	ldbu	r3,-20(fp)
    819c:	00800074 	movhi	r2,1
    81a0:	1082ee44 	addi	r2,r2,3001
    81a4:	10c5883a 	add	r2,r2,r3
    81a8:	10800003 	ldbu	r2,0(r2)
    81ac:	1007883a 	mov	r3,r2
    81b0:	e0bffc17 	ldw	r2,-16(fp)
    81b4:	10800d43 	ldbu	r2,53(r2)
    81b8:	0084303a 	nor	r2,zero,r2
    81bc:	1884703a 	and	r2,r3,r2
    81c0:	1007883a 	mov	r3,r2
    81c4:	00800074 	movhi	r2,1
    81c8:	1082ee44 	addi	r2,r2,3001
    81cc:	1105883a 	add	r2,r2,r4
    81d0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    81d4:	e0fffb03 	ldbu	r3,-20(fp)
    81d8:	00800074 	movhi	r2,1
    81dc:	1082ee44 	addi	r2,r2,3001
    81e0:	10c5883a 	add	r2,r2,r3
    81e4:	10800003 	ldbu	r2,0(r2)
    81e8:	10803fcc 	andi	r2,r2,255
    81ec:	1004c03a 	cmpne	r2,r2,zero
    81f0:	10000c1e 	bne	r2,zero,8224 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    81f4:	e0bffc17 	ldw	r2,-16(fp)
    81f8:	10800d83 	ldbu	r2,54(r2)
    81fc:	0084303a 	nor	r2,zero,r2
    8200:	1007883a 	mov	r3,r2
    8204:	00800074 	movhi	r2,1
    8208:	1082ee04 	addi	r2,r2,3000
    820c:	10800003 	ldbu	r2,0(r2)
    8210:	1884703a 	and	r2,r3,r2
    8214:	1007883a 	mov	r3,r2
    8218:	00800074 	movhi	r2,1
    821c:	1082ee04 	addi	r2,r2,3000
    8220:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    8224:	e0bffc17 	ldw	r2,-16(fp)
    8228:	10800c03 	ldbu	r2,48(r2)
    822c:	10800214 	ori	r2,r2,8
    8230:	1007883a 	mov	r3,r2
    8234:	e0bffc17 	ldw	r2,-16(fp)
    8238:	10c00c05 	stb	r3,48(r2)
    823c:	e0bffa17 	ldw	r2,-24(fp)
    8240:	e0bff615 	stw	r2,-40(fp)
    8244:	e0bff617 	ldw	r2,-40(fp)
    8248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    824c:	e0bffd03 	ldbu	r2,-12(fp)
    8250:	10800058 	cmpnei	r2,r2,1
    8254:	1000011e 	bne	r2,zero,825c <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
    8258:	00021400 	call	2140 <OS_Sched>
    }
    return (OS_ERR_NONE);
    825c:	e03fff15 	stw	zero,-4(fp)
    8260:	e0bfff17 	ldw	r2,-4(fp)
}
    8264:	e037883a 	mov	sp,fp
    8268:	dfc00117 	ldw	ra,4(sp)
    826c:	df000017 	ldw	fp,0(sp)
    8270:	dec00204 	addi	sp,sp,8
    8274:	f800283a 	ret

00008278 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    8278:	defff504 	addi	sp,sp,-44
    827c:	dfc00a15 	stw	ra,40(sp)
    8280:	df000915 	stw	fp,36(sp)
    8284:	df000904 	addi	fp,sp,36
    8288:	e17ffe15 	stw	r5,-8(fp)
    828c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8290:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    8294:	e0bffd03 	ldbu	r2,-12(fp)
    8298:	10800570 	cmpltui	r2,r2,21
    829c:	1000061e 	bne	r2,zero,82b8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    82a0:	e0bffd03 	ldbu	r2,-12(fp)
    82a4:	10803fe0 	cmpeqi	r2,r2,255
    82a8:	1000031e 	bne	r2,zero,82b8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    82ac:	00800a84 	movi	r2,42
    82b0:	e0bfff15 	stw	r2,-4(fp)
    82b4:	00003b06 	br	83a4 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    82b8:	e0bffe17 	ldw	r2,-8(fp)
    82bc:	1004c03a 	cmpne	r2,r2,zero
    82c0:	1000031e 	bne	r2,zero,82d0 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
    82c4:	00800244 	movi	r2,9
    82c8:	e0bfff15 	stw	r2,-4(fp)
    82cc:	00003506 	br	83a4 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    82d0:	0005303a 	rdctl	r2,status
    82d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    82d8:	e0fffa17 	ldw	r3,-24(fp)
    82dc:	00bfff84 	movi	r2,-2
    82e0:	1884703a 	and	r2,r3,r2
    82e4:	1001703a 	wrctl	status,r2
  
  return context;
    82e8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    82ec:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    82f0:	e0bffd03 	ldbu	r2,-12(fp)
    82f4:	10803fd8 	cmpnei	r2,r2,255
    82f8:	1000051e 	bne	r2,zero,8310 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
    82fc:	00800074 	movhi	r2,1
    8300:	1082f104 	addi	r2,r2,3012
    8304:	10800017 	ldw	r2,0(r2)
    8308:	10800c83 	ldbu	r2,50(r2)
    830c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8310:	e0bffd03 	ldbu	r2,-12(fp)
    8314:	00c000b4 	movhi	r3,2
    8318:	18ef6f04 	addi	r3,r3,-16964
    831c:	1085883a 	add	r2,r2,r2
    8320:	1085883a 	add	r2,r2,r2
    8324:	10c5883a 	add	r2,r2,r3
    8328:	10800017 	ldw	r2,0(r2)
    832c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    8330:	e0bffc17 	ldw	r2,-16(fp)
    8334:	1004c03a 	cmpne	r2,r2,zero
    8338:	1000071e 	bne	r2,zero,8358 <OSTaskQuery+0xe0>
    833c:	e0bffb17 	ldw	r2,-20(fp)
    8340:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8344:	e0bff917 	ldw	r2,-28(fp)
    8348:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    834c:	00800a44 	movi	r2,41
    8350:	e0bfff15 	stw	r2,-4(fp)
    8354:	00001306 	br	83a4 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    8358:	e0bffc17 	ldw	r2,-16(fp)
    835c:	10800058 	cmpnei	r2,r2,1
    8360:	1000071e 	bne	r2,zero,8380 <OSTaskQuery+0x108>
    8364:	e0bffb17 	ldw	r2,-20(fp)
    8368:	e0bff815 	stw	r2,-32(fp)
    836c:	e0bff817 	ldw	r2,-32(fp)
    8370:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8374:	008010c4 	movi	r2,67
    8378:	e0bfff15 	stw	r2,-4(fp)
    837c:	00000906 	br	83a4 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    8380:	e13ffe17 	ldw	r4,-8(fp)
    8384:	e17ffc17 	ldw	r5,-16(fp)
    8388:	01801b04 	movi	r6,108
    838c:	00020d40 	call	20d4 <OS_MemCopy>
    8390:	e0bffb17 	ldw	r2,-20(fp)
    8394:	e0bff715 	stw	r2,-36(fp)
    8398:	e0bff717 	ldw	r2,-36(fp)
    839c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    83a0:	e03fff15 	stw	zero,-4(fp)
    83a4:	e0bfff17 	ldw	r2,-4(fp)
}
    83a8:	e037883a 	mov	sp,fp
    83ac:	dfc00117 	ldw	ra,4(sp)
    83b0:	df000017 	ldw	fp,0(sp)
    83b4:	dec00204 	addi	sp,sp,8
    83b8:	f800283a 	ret

000083bc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    83bc:	defffc04 	addi	sp,sp,-16
    83c0:	df000315 	stw	fp,12(sp)
    83c4:	df000304 	addi	fp,sp,12
    83c8:	e13ffd15 	stw	r4,-12(fp)
    83cc:	e17ffe15 	stw	r5,-8(fp)
    83d0:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    83d4:	e0bfff0b 	ldhu	r2,-4(fp)
    83d8:	1080004c 	andi	r2,r2,1
    83dc:	10803fcc 	andi	r2,r2,255
    83e0:	1005003a 	cmpeq	r2,r2,zero
    83e4:	1000101e 	bne	r2,zero,8428 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    83e8:	e0bfff0b 	ldhu	r2,-4(fp)
    83ec:	1080008c 	andi	r2,r2,2
    83f0:	1005003a 	cmpeq	r2,r2,zero
    83f4:	10000c1e 	bne	r2,zero,8428 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    83f8:	00000806 	br	841c <OS_TaskStkClr+0x60>
                size--;
    83fc:	e0bffe17 	ldw	r2,-8(fp)
    8400:	10bfffc4 	addi	r2,r2,-1
    8404:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    8408:	e0bffd17 	ldw	r2,-12(fp)
    840c:	10000015 	stw	zero,0(r2)
    8410:	e0bffd17 	ldw	r2,-12(fp)
    8414:	10800104 	addi	r2,r2,4
    8418:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    841c:	e0bffe17 	ldw	r2,-8(fp)
    8420:	1004c03a 	cmpne	r2,r2,zero
    8424:	103ff51e 	bne	r2,zero,83fc <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    8428:	e037883a 	mov	sp,fp
    842c:	df000017 	ldw	fp,0(sp)
    8430:	dec00104 	addi	sp,sp,4
    8434:	f800283a 	ret

00008438 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    8438:	defff904 	addi	sp,sp,-28
    843c:	dfc00615 	stw	ra,24(sp)
    8440:	df000515 	stw	fp,20(sp)
    8444:	df000504 	addi	fp,sp,20
    8448:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    844c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8450:	00800074 	movhi	r2,1
    8454:	1082f004 	addi	r2,r2,3008
    8458:	10800003 	ldbu	r2,0(r2)
    845c:	10803fcc 	andi	r2,r2,255
    8460:	1004c03a 	cmpne	r2,r2,zero
    8464:	1000421e 	bne	r2,zero,8570 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    8468:	e0bfff0b 	ldhu	r2,-4(fp)
    846c:	1005003a 	cmpeq	r2,r2,zero
    8470:	10003f1e 	bne	r2,zero,8570 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8474:	0005303a 	rdctl	r2,status
    8478:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    847c:	e0fffc17 	ldw	r3,-16(fp)
    8480:	00bfff84 	movi	r2,-2
    8484:	1884703a 	and	r2,r3,r2
    8488:	1001703a 	wrctl	status,r2
  
  return context;
    848c:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
    8490:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    8494:	00800074 	movhi	r2,1
    8498:	1082f104 	addi	r2,r2,3012
    849c:	10800017 	ldw	r2,0(r2)
    84a0:	10800d03 	ldbu	r2,52(r2)
    84a4:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    84a8:	e13ffe03 	ldbu	r4,-8(fp)
    84ac:	e0fffe03 	ldbu	r3,-8(fp)
    84b0:	00800074 	movhi	r2,1
    84b4:	1082ee44 	addi	r2,r2,3001
    84b8:	10c5883a 	add	r2,r2,r3
    84bc:	10800003 	ldbu	r2,0(r2)
    84c0:	1007883a 	mov	r3,r2
    84c4:	00800074 	movhi	r2,1
    84c8:	1082f104 	addi	r2,r2,3012
    84cc:	10800017 	ldw	r2,0(r2)
    84d0:	10800d43 	ldbu	r2,53(r2)
    84d4:	0084303a 	nor	r2,zero,r2
    84d8:	1884703a 	and	r2,r3,r2
    84dc:	1007883a 	mov	r3,r2
    84e0:	00800074 	movhi	r2,1
    84e4:	1082ee44 	addi	r2,r2,3001
    84e8:	1105883a 	add	r2,r2,r4
    84ec:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
    84f0:	e0fffe03 	ldbu	r3,-8(fp)
    84f4:	00800074 	movhi	r2,1
    84f8:	1082ee44 	addi	r2,r2,3001
    84fc:	10c5883a 	add	r2,r2,r3
    8500:	10800003 	ldbu	r2,0(r2)
    8504:	10803fcc 	andi	r2,r2,255
    8508:	1004c03a 	cmpne	r2,r2,zero
    850c:	10000e1e 	bne	r2,zero,8548 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    8510:	00800074 	movhi	r2,1
    8514:	1082f104 	addi	r2,r2,3012
    8518:	10800017 	ldw	r2,0(r2)
    851c:	10800d83 	ldbu	r2,54(r2)
    8520:	0084303a 	nor	r2,zero,r2
    8524:	1007883a 	mov	r3,r2
    8528:	00800074 	movhi	r2,1
    852c:	1082ee04 	addi	r2,r2,3000
    8530:	10800003 	ldbu	r2,0(r2)
    8534:	1884703a 	and	r2,r3,r2
    8538:	1007883a 	mov	r3,r2
    853c:	00800074 	movhi	r2,1
    8540:	1082ee04 	addi	r2,r2,3000
    8544:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    8548:	00800074 	movhi	r2,1
    854c:	1082f104 	addi	r2,r2,3012
    8550:	10c00017 	ldw	r3,0(r2)
    8554:	e0bfff0b 	ldhu	r2,-4(fp)
    8558:	18800b8d 	sth	r2,46(r3)
    855c:	e0bffd17 	ldw	r2,-12(fp)
    8560:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8564:	e0bffb17 	ldw	r2,-20(fp)
    8568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    856c:	00021400 	call	2140 <OS_Sched>
    }
}
    8570:	e037883a 	mov	sp,fp
    8574:	dfc00117 	ldw	ra,4(sp)
    8578:	df000017 	ldw	fp,0(sp)
    857c:	dec00204 	addi	sp,sp,8
    8580:	f800283a 	ret

00008584 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    8584:	defff504 	addi	sp,sp,-44
    8588:	dfc00a15 	stw	ra,40(sp)
    858c:	df000915 	stw	fp,36(sp)
    8590:	dc400815 	stw	r17,32(sp)
    8594:	dc000715 	stw	r16,28(sp)
    8598:	df000704 	addi	fp,sp,28
    859c:	e13ffb05 	stb	r4,-20(fp)
    85a0:	e17ffc05 	stb	r5,-16(fp)
    85a4:	e1bffd05 	stb	r6,-12(fp)
    85a8:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    85ac:	00800074 	movhi	r2,1
    85b0:	1082f004 	addi	r2,r2,3008
    85b4:	10800003 	ldbu	r2,0(r2)
    85b8:	10803fcc 	andi	r2,r2,255
    85bc:	1005003a 	cmpeq	r2,r2,zero
    85c0:	1000031e 	bne	r2,zero,85d0 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    85c4:	00801544 	movi	r2,85
    85c8:	e0bfff15 	stw	r2,-4(fp)
    85cc:	00007b06 	br	87bc <OSTimeDlyHMSM+0x238>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    85d0:	e0bffb03 	ldbu	r2,-20(fp)
    85d4:	1004c03a 	cmpne	r2,r2,zero
    85d8:	10000c1e 	bne	r2,zero,860c <OSTimeDlyHMSM+0x88>
        if (minutes == 0) {
    85dc:	e0bffc03 	ldbu	r2,-16(fp)
    85e0:	1004c03a 	cmpne	r2,r2,zero
    85e4:	1000091e 	bne	r2,zero,860c <OSTimeDlyHMSM+0x88>
            if (seconds == 0) {
    85e8:	e0bffd03 	ldbu	r2,-12(fp)
    85ec:	1004c03a 	cmpne	r2,r2,zero
    85f0:	1000061e 	bne	r2,zero,860c <OSTimeDlyHMSM+0x88>
                if (ms == 0) {
    85f4:	e0bffe0b 	ldhu	r2,-8(fp)
    85f8:	1004c03a 	cmpne	r2,r2,zero
    85fc:	1000031e 	bne	r2,zero,860c <OSTimeDlyHMSM+0x88>
                    return (OS_ERR_TIME_ZERO_DLY);
    8600:	00801504 	movi	r2,84
    8604:	e0bfff15 	stw	r2,-4(fp)
    8608:	00006c06 	br	87bc <OSTimeDlyHMSM+0x238>
                }
            }
        }
    }
    if (minutes > 59) {
    860c:	e0bffc03 	ldbu	r2,-16(fp)
    8610:	10800f30 	cmpltui	r2,r2,60
    8614:	1000031e 	bne	r2,zero,8624 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    8618:	00801444 	movi	r2,81
    861c:	e0bfff15 	stw	r2,-4(fp)
    8620:	00006606 	br	87bc <OSTimeDlyHMSM+0x238>
    }
    if (seconds > 59) {
    8624:	e0bffd03 	ldbu	r2,-12(fp)
    8628:	10800f30 	cmpltui	r2,r2,60
    862c:	1000031e 	bne	r2,zero,863c <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_SECONDS);
    8630:	00801484 	movi	r2,82
    8634:	e0bfff15 	stw	r2,-4(fp)
    8638:	00006006 	br	87bc <OSTimeDlyHMSM+0x238>
    }
    if (ms > 999) {
    863c:	e0bffe0b 	ldhu	r2,-8(fp)
    8640:	1080fa30 	cmpltui	r2,r2,1000
    8644:	1000031e 	bne	r2,zero,8654 <OSTimeDlyHMSM+0xd0>
        return (OS_ERR_TIME_INVALID_MS);
    8648:	008014c4 	movi	r2,83
    864c:	e0bfff15 	stw	r2,-4(fp)
    8650:	00005a06 	br	87bc <OSTimeDlyHMSM+0x238>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    8654:	e13ffb03 	ldbu	r4,-20(fp)
    8658:	01438404 	movi	r5,3600
    865c:	000e5740 	call	e574 <__mulsi3>
    8660:	1021883a 	mov	r16,r2
    8664:	e13ffc03 	ldbu	r4,-16(fp)
    8668:	01400f04 	movi	r5,60
    866c:	000e5740 	call	e574 <__mulsi3>
    8670:	8087883a 	add	r3,r16,r2
    8674:	e0bffd03 	ldbu	r2,-12(fp)
    8678:	1889883a 	add	r4,r3,r2
    867c:	000e2940 	call	e294 <__floatunsidf>
    8680:	100b883a 	mov	r5,r2
    8684:	180d883a 	mov	r6,r3
    8688:	2809883a 	mov	r4,r5
    868c:	300b883a 	mov	r5,r6
    8690:	000d883a 	mov	r6,zero
    8694:	01d023f4 	movhi	r7,16527
    8698:	39d00004 	addi	r7,r7,16384
    869c:	000db180 	call	db18 <__muldf3>
    86a0:	1009883a 	mov	r4,r2
    86a4:	180b883a 	mov	r5,r3
    86a8:	2021883a 	mov	r16,r4
    86ac:	2823883a 	mov	r17,r5
    86b0:	e13ffe0b 	ldhu	r4,-8(fp)
    86b4:	000e2940 	call	e294 <__floatunsidf>
    86b8:	100b883a 	mov	r5,r2
    86bc:	180d883a 	mov	r6,r3
    86c0:	2809883a 	mov	r4,r5
    86c4:	300b883a 	mov	r5,r6
    86c8:	000d883a 	mov	r6,zero
    86cc:	01cff834 	movhi	r7,16352
    86d0:	000daa40 	call	daa4 <__adddf3>
    86d4:	1009883a 	mov	r4,r2
    86d8:	180b883a 	mov	r5,r3
    86dc:	2005883a 	mov	r2,r4
    86e0:	2807883a 	mov	r3,r5
    86e4:	1009883a 	mov	r4,r2
    86e8:	180b883a 	mov	r5,r3
    86ec:	000d883a 	mov	r6,zero
    86f0:	01d023f4 	movhi	r7,16527
    86f4:	39d00004 	addi	r7,r7,16384
    86f8:	000db180 	call	db18 <__muldf3>
    86fc:	1009883a 	mov	r4,r2
    8700:	180b883a 	mov	r5,r3
    8704:	2005883a 	mov	r2,r4
    8708:	2807883a 	mov	r3,r5
    870c:	1009883a 	mov	r4,r2
    8710:	180b883a 	mov	r5,r3
    8714:	000d883a 	mov	r6,zero
    8718:	01d023f4 	movhi	r7,16527
    871c:	39d00004 	addi	r7,r7,16384
    8720:	000dedc0 	call	dedc <__divdf3>
    8724:	1009883a 	mov	r4,r2
    8728:	180b883a 	mov	r5,r3
    872c:	2005883a 	mov	r2,r4
    8730:	2807883a 	mov	r3,r5
    8734:	8009883a 	mov	r4,r16
    8738:	880b883a 	mov	r5,r17
    873c:	100d883a 	mov	r6,r2
    8740:	180f883a 	mov	r7,r3
    8744:	000daa40 	call	daa4 <__adddf3>
    8748:	1009883a 	mov	r4,r2
    874c:	180b883a 	mov	r5,r3
    8750:	2005883a 	mov	r2,r4
    8754:	2807883a 	mov	r3,r5
    8758:	1009883a 	mov	r4,r2
    875c:	180b883a 	mov	r5,r3
    8760:	000d5700 	call	d570 <__fixunsdfsi>
    8764:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    8768:	e0bffa17 	ldw	r2,-24(fp)
    876c:	1004d43a 	srli	r2,r2,16
    8770:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    8774:	e0bffa17 	ldw	r2,-24(fp)
    8778:	10bfffcc 	andi	r2,r2,65535
    877c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
    8780:	e0bffa17 	ldw	r2,-24(fp)
    8784:	113fffcc 	andi	r4,r2,65535
    8788:	00084380 	call	8438 <OSTimeDly>
    while (loops > 0) {
    878c:	00000706 	br	87ac <OSTimeDlyHMSM+0x228>
        OSTimeDly((INT16U)32768u);
    8790:	01200014 	movui	r4,32768
    8794:	00084380 	call	8438 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    8798:	01200014 	movui	r4,32768
    879c:	00084380 	call	8438 <OSTimeDly>
        loops--;
    87a0:	e0bff90b 	ldhu	r2,-28(fp)
    87a4:	10bfffc4 	addi	r2,r2,-1
    87a8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    87ac:	e0bff90b 	ldhu	r2,-28(fp)
    87b0:	1004c03a 	cmpne	r2,r2,zero
    87b4:	103ff61e 	bne	r2,zero,8790 <OSTimeDlyHMSM+0x20c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    87b8:	e03fff15 	stw	zero,-4(fp)
    87bc:	e0bfff17 	ldw	r2,-4(fp)
}
    87c0:	e037883a 	mov	sp,fp
    87c4:	dfc00317 	ldw	ra,12(sp)
    87c8:	df000217 	ldw	fp,8(sp)
    87cc:	dc400117 	ldw	r17,4(sp)
    87d0:	dc000017 	ldw	r16,0(sp)
    87d4:	dec00404 	addi	sp,sp,16
    87d8:	f800283a 	ret

000087dc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    87dc:	defff404 	addi	sp,sp,-48
    87e0:	dfc00b15 	stw	ra,44(sp)
    87e4:	df000a15 	stw	fp,40(sp)
    87e8:	df000a04 	addi	fp,sp,40
    87ec:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    87f0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    87f4:	e0bffe03 	ldbu	r2,-8(fp)
    87f8:	10800530 	cmpltui	r2,r2,20
    87fc:	1000031e 	bne	r2,zero,880c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    8800:	00800a84 	movi	r2,42
    8804:	e0bfff15 	stw	r2,-4(fp)
    8808:	00007206 	br	89d4 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    880c:	0005303a 	rdctl	r2,status
    8810:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8814:	e0fffb17 	ldw	r3,-20(fp)
    8818:	00bfff84 	movi	r2,-2
    881c:	1884703a 	and	r2,r3,r2
    8820:	1001703a 	wrctl	status,r2
  
  return context;
    8824:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    8828:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    882c:	e0bffe03 	ldbu	r2,-8(fp)
    8830:	00c000b4 	movhi	r3,2
    8834:	18ef6f04 	addi	r3,r3,-16964
    8838:	1085883a 	add	r2,r2,r2
    883c:	1085883a 	add	r2,r2,r2
    8840:	10c5883a 	add	r2,r2,r3
    8844:	10800017 	ldw	r2,0(r2)
    8848:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
    884c:	e0bffd17 	ldw	r2,-12(fp)
    8850:	1004c03a 	cmpne	r2,r2,zero
    8854:	1000071e 	bne	r2,zero,8874 <OSTimeDlyResume+0x98>
    8858:	e0bffc17 	ldw	r2,-16(fp)
    885c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8860:	e0bffa17 	ldw	r2,-24(fp)
    8864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    8868:	008010c4 	movi	r2,67
    886c:	e0bfff15 	stw	r2,-4(fp)
    8870:	00005806 	br	89d4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    8874:	e0bffd17 	ldw	r2,-12(fp)
    8878:	10800058 	cmpnei	r2,r2,1
    887c:	1000071e 	bne	r2,zero,889c <OSTimeDlyResume+0xc0>
    8880:	e0bffc17 	ldw	r2,-16(fp)
    8884:	e0bff915 	stw	r2,-28(fp)
    8888:	e0bff917 	ldw	r2,-28(fp)
    888c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    8890:	008010c4 	movi	r2,67
    8894:	e0bfff15 	stw	r2,-4(fp)
    8898:	00004e06 	br	89d4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    889c:	e0bffd17 	ldw	r2,-12(fp)
    88a0:	10800b8b 	ldhu	r2,46(r2)
    88a4:	10bfffcc 	andi	r2,r2,65535
    88a8:	1004c03a 	cmpne	r2,r2,zero
    88ac:	1000071e 	bne	r2,zero,88cc <OSTimeDlyResume+0xf0>
    88b0:	e0bffc17 	ldw	r2,-16(fp)
    88b4:	e0bff815 	stw	r2,-32(fp)
    88b8:	e0bff817 	ldw	r2,-32(fp)
    88bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    88c0:	00801404 	movi	r2,80
    88c4:	e0bfff15 	stw	r2,-4(fp)
    88c8:	00004206 	br	89d4 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    88cc:	e0bffd17 	ldw	r2,-12(fp)
    88d0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    88d4:	e0bffd17 	ldw	r2,-12(fp)
    88d8:	10800c03 	ldbu	r2,48(r2)
    88dc:	10803fcc 	andi	r2,r2,255
    88e0:	10800dcc 	andi	r2,r2,55
    88e4:	1005003a 	cmpeq	r2,r2,zero
    88e8:	10000b1e 	bne	r2,zero,8918 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    88ec:	e0bffd17 	ldw	r2,-12(fp)
    88f0:	10c00c03 	ldbu	r3,48(r2)
    88f4:	00bff204 	movi	r2,-56
    88f8:	1884703a 	and	r2,r3,r2
    88fc:	1007883a 	mov	r3,r2
    8900:	e0bffd17 	ldw	r2,-12(fp)
    8904:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    8908:	e0fffd17 	ldw	r3,-12(fp)
    890c:	00800044 	movi	r2,1
    8910:	18800c45 	stb	r2,49(r3)
    8914:	00000206 	br	8920 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    8918:	e0bffd17 	ldw	r2,-12(fp)
    891c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    8920:	e0bffd17 	ldw	r2,-12(fp)
    8924:	10800c03 	ldbu	r2,48(r2)
    8928:	10803fcc 	andi	r2,r2,255
    892c:	1080020c 	andi	r2,r2,8
    8930:	1004c03a 	cmpne	r2,r2,zero
    8934:	1000221e 	bne	r2,zero,89c0 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    8938:	e0bffd17 	ldw	r2,-12(fp)
    893c:	10c00d83 	ldbu	r3,54(r2)
    8940:	00800074 	movhi	r2,1
    8944:	1082ee04 	addi	r2,r2,3000
    8948:	10800003 	ldbu	r2,0(r2)
    894c:	1884b03a 	or	r2,r3,r2
    8950:	1007883a 	mov	r3,r2
    8954:	00800074 	movhi	r2,1
    8958:	1082ee04 	addi	r2,r2,3000
    895c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8960:	e0bffd17 	ldw	r2,-12(fp)
    8964:	10800d03 	ldbu	r2,52(r2)
    8968:	11003fcc 	andi	r4,r2,255
    896c:	e0bffd17 	ldw	r2,-12(fp)
    8970:	10800d03 	ldbu	r2,52(r2)
    8974:	10c03fcc 	andi	r3,r2,255
    8978:	00800074 	movhi	r2,1
    897c:	1082ee44 	addi	r2,r2,3001
    8980:	10c5883a 	add	r2,r2,r3
    8984:	10c00003 	ldbu	r3,0(r2)
    8988:	e0bffd17 	ldw	r2,-12(fp)
    898c:	10800d43 	ldbu	r2,53(r2)
    8990:	1884b03a 	or	r2,r3,r2
    8994:	1007883a 	mov	r3,r2
    8998:	00800074 	movhi	r2,1
    899c:	1082ee44 	addi	r2,r2,3001
    89a0:	1105883a 	add	r2,r2,r4
    89a4:	10c00005 	stb	r3,0(r2)
    89a8:	e0bffc17 	ldw	r2,-16(fp)
    89ac:	e0bff715 	stw	r2,-36(fp)
    89b0:	e0bff717 	ldw	r2,-36(fp)
    89b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    89b8:	00021400 	call	2140 <OS_Sched>
    89bc:	00000406 	br	89d0 <OSTimeDlyResume+0x1f4>
    89c0:	e0bffc17 	ldw	r2,-16(fp)
    89c4:	e0bff615 	stw	r2,-40(fp)
    89c8:	e0bff617 	ldw	r2,-40(fp)
    89cc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    89d0:	e03fff15 	stw	zero,-4(fp)
    89d4:	e0bfff17 	ldw	r2,-4(fp)
}
    89d8:	e037883a 	mov	sp,fp
    89dc:	dfc00117 	ldw	ra,4(sp)
    89e0:	df000017 	ldw	fp,0(sp)
    89e4:	dec00204 	addi	sp,sp,8
    89e8:	f800283a 	ret

000089ec <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    89ec:	defffb04 	addi	sp,sp,-20
    89f0:	df000415 	stw	fp,16(sp)
    89f4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    89f8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    89fc:	0005303a 	rdctl	r2,status
    8a00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a04:	e0fffd17 	ldw	r3,-12(fp)
    8a08:	00bfff84 	movi	r2,-2
    8a0c:	1884703a 	and	r2,r3,r2
    8a10:	1001703a 	wrctl	status,r2
  
  return context;
    8a14:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    8a18:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
    8a1c:	00800074 	movhi	r2,1
    8a20:	1082f204 	addi	r2,r2,3016
    8a24:	10800017 	ldw	r2,0(r2)
    8a28:	e0bfff15 	stw	r2,-4(fp)
    8a2c:	e0bffe17 	ldw	r2,-8(fp)
    8a30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8a34:	e0bffc17 	ldw	r2,-16(fp)
    8a38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    8a3c:	e0bfff17 	ldw	r2,-4(fp)
}
    8a40:	e037883a 	mov	sp,fp
    8a44:	df000017 	ldw	fp,0(sp)
    8a48:	dec00104 	addi	sp,sp,4
    8a4c:	f800283a 	ret

00008a50 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    8a50:	defffb04 	addi	sp,sp,-20
    8a54:	df000415 	stw	fp,16(sp)
    8a58:	df000404 	addi	fp,sp,16
    8a5c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8a60:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8a64:	0005303a 	rdctl	r2,status
    8a68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a6c:	e0fffd17 	ldw	r3,-12(fp)
    8a70:	00bfff84 	movi	r2,-2
    8a74:	1884703a 	and	r2,r3,r2
    8a78:	1001703a 	wrctl	status,r2
  
  return context;
    8a7c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    8a80:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
    8a84:	00c00074 	movhi	r3,1
    8a88:	18c2f204 	addi	r3,r3,3016
    8a8c:	e0bfff17 	ldw	r2,-4(fp)
    8a90:	18800015 	stw	r2,0(r3)
    8a94:	e0bffe17 	ldw	r2,-8(fp)
    8a98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8a9c:	e0bffc17 	ldw	r2,-16(fp)
    8aa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    8aa4:	e037883a 	mov	sp,fp
    8aa8:	df000017 	ldw	fp,0(sp)
    8aac:	dec00104 	addi	sp,sp,4
    8ab0:	f800283a 	ret

00008ab4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8ab4:	defffd04 	addi	sp,sp,-12
    8ab8:	dfc00215 	stw	ra,8(sp)
    8abc:	df000115 	stw	fp,4(sp)
    8ac0:	df000104 	addi	fp,sp,4
    8ac4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    8ac8:	000c6240 	call	c624 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8acc:	00800044 	movi	r2,1
    8ad0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8ad4:	e037883a 	mov	sp,fp
    8ad8:	dfc00117 	ldw	ra,4(sp)
    8adc:	df000017 	ldw	fp,0(sp)
    8ae0:	dec00204 	addi	sp,sp,8
    8ae4:	f800283a 	ret

00008ae8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8ae8:	defffe04 	addi	sp,sp,-8
    8aec:	dfc00115 	stw	ra,4(sp)
    8af0:	df000015 	stw	fp,0(sp)
    8af4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    8af8:	01008074 	movhi	r4,513
    8afc:	2128b804 	addi	r4,r4,-23840
    8b00:	000b883a 	mov	r5,zero
    8b04:	000d883a 	mov	r6,zero
    8b08:	01c0fa04 	movi	r7,1000
    8b0c:	000a3e80 	call	a3e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    8b10:	01000074 	movhi	r4,1
    8b14:	213bf404 	addi	r4,r4,-4144
    8b18:	0008c380 	call	8c38 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8b1c:	01000074 	movhi	r4,1
    8b20:	213c3004 	addi	r4,r4,-3904
    8b24:	000b883a 	mov	r5,zero
    8b28:	018000c4 	movi	r6,3
    8b2c:	00097640 	call	9764 <altera_avalon_jtag_uart_init>
    8b30:	01000074 	movhi	r4,1
    8b34:	213c2604 	addi	r4,r4,-3944
    8b38:	0008c000 	call	8c00 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    8b3c:	00c08074 	movhi	r3,513
    8b40:	18e80004 	addi	r3,r3,-24576
    8b44:	00800044 	movi	r2,1
    8b48:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
    8b4c:	01000074 	movhi	r4,1
    8b50:	21004b04 	addi	r4,r4,300
    8b54:	000b883a 	mov	r5,zero
    8b58:	01800184 	movi	r6,6
    8b5c:	000a5700 	call	a570 <altera_avalon_uart_init>
    8b60:	01000074 	movhi	r4,1
    8b64:	21004104 	addi	r4,r4,260
    8b68:	0008c000 	call	8c00 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
    8b6c:	01000074 	movhi	r4,1
    8b70:	21007f04 	addi	r4,r4,508
    8b74:	000b883a 	mov	r5,zero
    8b78:	018001c4 	movi	r6,7
    8b7c:	000a5700 	call	a570 <altera_avalon_uart_init>
    8b80:	01000074 	movhi	r4,1
    8b84:	21007504 	addi	r4,r4,468
    8b88:	0008c000 	call	8c00 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
    8b8c:	01000074 	movhi	r4,1
    8b90:	2100b304 	addi	r4,r4,716
    8b94:	000b883a 	mov	r5,zero
    8b98:	01800204 	movi	r6,8
    8b9c:	000a5700 	call	a570 <altera_avalon_uart_init>
    8ba0:	01000074 	movhi	r4,1
    8ba4:	2100a904 	addi	r4,r4,676
    8ba8:	0008c000 	call	8c00 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
    8bac:	01000074 	movhi	r4,1
    8bb0:	2100e704 	addi	r4,r4,924
    8bb4:	000b883a 	mov	r5,zero
    8bb8:	01800244 	movi	r6,9
    8bbc:	000a5700 	call	a570 <altera_avalon_uart_init>
    8bc0:	01000074 	movhi	r4,1
    8bc4:	2100dd04 	addi	r4,r4,884
    8bc8:	0008c000 	call	8c00 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    8bcc:	01000074 	movhi	r4,1
    8bd0:	21011b04 	addi	r4,r4,1132
    8bd4:	000b883a 	mov	r5,zero
    8bd8:	01800104 	movi	r6,4
    8bdc:	000a5700 	call	a570 <altera_avalon_uart_init>
    8be0:	01000074 	movhi	r4,1
    8be4:	21011104 	addi	r4,r4,1092
    8be8:	0008c000 	call	8c00 <alt_dev_reg>
}
    8bec:	e037883a 	mov	sp,fp
    8bf0:	dfc00117 	ldw	ra,4(sp)
    8bf4:	df000017 	ldw	fp,0(sp)
    8bf8:	dec00204 	addi	sp,sp,8
    8bfc:	f800283a 	ret

00008c00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8c00:	defffd04 	addi	sp,sp,-12
    8c04:	dfc00215 	stw	ra,8(sp)
    8c08:	df000115 	stw	fp,4(sp)
    8c0c:	df000104 	addi	fp,sp,4
    8c10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8c14:	e13fff17 	ldw	r4,-4(fp)
    8c18:	01400074 	movhi	r5,1
    8c1c:	2942d004 	addi	r5,r5,2880
    8c20:	000ba580 	call	ba58 <alt_dev_llist_insert>
}
    8c24:	e037883a 	mov	sp,fp
    8c28:	dfc00117 	ldw	ra,4(sp)
    8c2c:	df000017 	ldw	fp,0(sp)
    8c30:	dec00204 	addi	sp,sp,8
    8c34:	f800283a 	ret

00008c38 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    8c38:	defffc04 	addi	sp,sp,-16
    8c3c:	dfc00315 	stw	ra,12(sp)
    8c40:	df000215 	stw	fp,8(sp)
    8c44:	df000204 	addi	fp,sp,8
    8c48:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    8c4c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    8c50:	e13fff17 	ldw	r4,-4(fp)
    8c54:	0008cc40 	call	8cc4 <alt_epcs_flash_query>
    8c58:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    8c5c:	e0bffe17 	ldw	r2,-8(fp)
    8c60:	1004c03a 	cmpne	r2,r2,zero
    8c64:	1000031e 	bne	r2,zero,8c74 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    8c68:	e13fff17 	ldw	r4,-4(fp)
    8c6c:	0008c8c0 	call	8c8c <alt_flash_device_register>
    8c70:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    8c74:	e0bffe17 	ldw	r2,-8(fp)
}
    8c78:	e037883a 	mov	sp,fp
    8c7c:	dfc00117 	ldw	ra,4(sp)
    8c80:	df000017 	ldw	fp,0(sp)
    8c84:	dec00204 	addi	sp,sp,8
    8c88:	f800283a 	ret

00008c8c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    8c8c:	defffd04 	addi	sp,sp,-12
    8c90:	dfc00215 	stw	ra,8(sp)
    8c94:	df000115 	stw	fp,4(sp)
    8c98:	df000104 	addi	fp,sp,4
    8c9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    8ca0:	e13fff17 	ldw	r4,-4(fp)
    8ca4:	01400074 	movhi	r5,1
    8ca8:	2942d404 	addi	r5,r5,2896
    8cac:	000ba580 	call	ba58 <alt_dev_llist_insert>
}
    8cb0:	e037883a 	mov	sp,fp
    8cb4:	dfc00117 	ldw	ra,4(sp)
    8cb8:	df000017 	ldw	fp,0(sp)
    8cbc:	dec00204 	addi	sp,sp,8
    8cc0:	f800283a 	ret

00008cc4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    8cc4:	defffc04 	addi	sp,sp,-16
    8cc8:	dfc00315 	stw	ra,12(sp)
    8ccc:	df000215 	stw	fp,8(sp)
    8cd0:	df000204 	addi	fp,sp,8
    8cd4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    8cd8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    8cdc:	e0bfff17 	ldw	r2,-4(fp)
    8ce0:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    8ce4:	e0bfff17 	ldw	r2,-4(fp)
    8ce8:	11002d17 	ldw	r4,180(r2)
    8cec:	000b5dc0 	call	b5dc <epcs_read_electronic_signature>
    8cf0:	10c03fcc 	andi	r3,r2,255
    8cf4:	e0bfff17 	ldw	r2,-4(fp)
    8cf8:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    8cfc:	e0bfff17 	ldw	r2,-4(fp)
    8d00:	10802f17 	ldw	r2,188(r2)
    8d04:	10800598 	cmpnei	r2,r2,22
    8d08:	10000a1e 	bne	r2,zero,8d34 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    8d0c:	e0ffff17 	ldw	r3,-4(fp)
    8d10:	00802034 	movhi	r2,128
    8d14:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
    8d18:	e0ffff17 	ldw	r3,-4(fp)
    8d1c:	00802004 	movi	r2,128
    8d20:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    8d24:	e0ffff17 	ldw	r3,-4(fp)
    8d28:	00800074 	movhi	r2,1
    8d2c:	18801015 	stw	r2,64(r3)
    8d30:	00007306 	br	8f00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    8d34:	e0bfff17 	ldw	r2,-4(fp)
    8d38:	10802f17 	ldw	r2,188(r2)
    8d3c:	10800518 	cmpnei	r2,r2,20
    8d40:	10000a1e 	bne	r2,zero,8d6c <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    8d44:	e0ffff17 	ldw	r3,-4(fp)
    8d48:	00800834 	movhi	r2,32
    8d4c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
    8d50:	e0ffff17 	ldw	r3,-4(fp)
    8d54:	00800804 	movi	r2,32
    8d58:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    8d5c:	e0ffff17 	ldw	r3,-4(fp)
    8d60:	00800074 	movhi	r2,1
    8d64:	18801015 	stw	r2,64(r3)
    8d68:	00006506 	br	8f00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    8d6c:	e0bfff17 	ldw	r2,-4(fp)
    8d70:	10802f17 	ldw	r2,188(r2)
    8d74:	108004d8 	cmpnei	r2,r2,19
    8d78:	10000a1e 	bne	r2,zero,8da4 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    8d7c:	e0ffff17 	ldw	r3,-4(fp)
    8d80:	00800434 	movhi	r2,16
    8d84:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
    8d88:	e0ffff17 	ldw	r3,-4(fp)
    8d8c:	00800404 	movi	r2,16
    8d90:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    8d94:	e0ffff17 	ldw	r3,-4(fp)
    8d98:	00800074 	movhi	r2,1
    8d9c:	18801015 	stw	r2,64(r3)
    8da0:	00005706 	br	8f00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    8da4:	e0bfff17 	ldw	r2,-4(fp)
    8da8:	10802f17 	ldw	r2,188(r2)
    8dac:	10800498 	cmpnei	r2,r2,18
    8db0:	10000a1e 	bne	r2,zero,8ddc <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    8db4:	e0ffff17 	ldw	r3,-4(fp)
    8db8:	00800234 	movhi	r2,8
    8dbc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
    8dc0:	e0ffff17 	ldw	r3,-4(fp)
    8dc4:	00800204 	movi	r2,8
    8dc8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    8dcc:	e0ffff17 	ldw	r3,-4(fp)
    8dd0:	00800074 	movhi	r2,1
    8dd4:	18801015 	stw	r2,64(r3)
    8dd8:	00004906 	br	8f00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    8ddc:	e0bfff17 	ldw	r2,-4(fp)
    8de0:	10802f17 	ldw	r2,188(r2)
    8de4:	10800418 	cmpnei	r2,r2,16
    8de8:	10000a1e 	bne	r2,zero,8e14 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    8dec:	e0ffff17 	ldw	r3,-4(fp)
    8df0:	008000b4 	movhi	r2,2
    8df4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
    8df8:	e0ffff17 	ldw	r3,-4(fp)
    8dfc:	00800104 	movi	r2,4
    8e00:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
    8e04:	e0ffff17 	ldw	r3,-4(fp)
    8e08:	00a00014 	movui	r2,32768
    8e0c:	18801015 	stw	r2,64(r3)
    8e10:	00003b06 	br	8f00 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    8e14:	e0bfff17 	ldw	r2,-4(fp)
    8e18:	11002d17 	ldw	r4,180(r2)
    8e1c:	000b6480 	call	b648 <epcs_read_device_id>
    8e20:	1007883a 	mov	r3,r2
    8e24:	e0bfff17 	ldw	r2,-4(fp)
    8e28:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    8e2c:	e0bfff17 	ldw	r2,-4(fp)
    8e30:	10c02f17 	ldw	r3,188(r2)
    8e34:	00804034 	movhi	r2,256
    8e38:	10bfffc4 	addi	r2,r2,-1
    8e3c:	1886703a 	and	r3,r3,r2
    8e40:	00800874 	movhi	r2,33
    8e44:	10ae8604 	addi	r2,r2,-17896
    8e48:	18800a1e 	bne	r3,r2,8e74 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    8e4c:	e0ffff17 	ldw	r3,-4(fp)
    8e50:	00804034 	movhi	r2,256
    8e54:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    8e58:	e0ffff17 	ldw	r3,-4(fp)
    8e5c:	00804004 	movi	r2,256
    8e60:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    8e64:	e0ffff17 	ldw	r3,-4(fp)
    8e68:	00800074 	movhi	r2,1
    8e6c:	18801015 	stw	r2,64(r3)
    8e70:	00002306 	br	8f00 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    8e74:	e0bfff17 	ldw	r2,-4(fp)
    8e78:	10802f17 	ldw	r2,188(r2)
    8e7c:	10803fcc 	andi	r2,r2,255
    8e80:	10800618 	cmpnei	r2,r2,24
    8e84:	10000a1e 	bne	r2,zero,8eb0 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    8e88:	e0ffff17 	ldw	r3,-4(fp)
    8e8c:	00804034 	movhi	r2,256
    8e90:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
    8e94:	e0ffff17 	ldw	r3,-4(fp)
    8e98:	00801004 	movi	r2,64
    8e9c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
    8ea0:	e0ffff17 	ldw	r3,-4(fp)
    8ea4:	00800134 	movhi	r2,4
    8ea8:	18801015 	stw	r2,64(r3)
    8eac:	00001406 	br	8f00 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    8eb0:	e0bfff17 	ldw	r2,-4(fp)
    8eb4:	10802f17 	ldw	r2,188(r2)
    8eb8:	10803fcc 	andi	r2,r2,255
    8ebc:	10800658 	cmpnei	r2,r2,25
    8ec0:	10000d1e 	bne	r2,zero,8ef8 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    8ec4:	e0ffff17 	ldw	r3,-4(fp)
    8ec8:	00808034 	movhi	r2,512
    8ecc:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    8ed0:	e0ffff17 	ldw	r3,-4(fp)
    8ed4:	00808004 	movi	r2,512
    8ed8:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    8edc:	e0ffff17 	ldw	r3,-4(fp)
    8ee0:	00800074 	movhi	r2,1
    8ee4:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    8ee8:	e0ffff17 	ldw	r3,-4(fp)
    8eec:	00800044 	movi	r2,1
    8ef0:	18803115 	stw	r2,196(r3)
    8ef4:	00000206 	br	8f00 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    8ef8:	00bffb44 	movi	r2,-19
    8efc:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    8f00:	e0bfff17 	ldw	r2,-4(fp)
    8f04:	10800e17 	ldw	r2,56(r2)
    8f08:	1007883a 	mov	r3,r2
    8f0c:	e0bfff17 	ldw	r2,-4(fp)
    8f10:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
    8f14:	e0ffff17 	ldw	r3,-4(fp)
    8f18:	00800044 	movi	r2,1
    8f1c:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
    8f20:	e0bfff17 	ldw	r2,-4(fp)
    8f24:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    8f28:	e0ffff17 	ldw	r3,-4(fp)
    8f2c:	00804004 	movi	r2,256
    8f30:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
    8f34:	e0bffe17 	ldw	r2,-8(fp)
}
    8f38:	e037883a 	mov	sp,fp
    8f3c:	dfc00117 	ldw	ra,4(sp)
    8f40:	df000017 	ldw	fp,0(sp)
    8f44:	dec00204 	addi	sp,sp,8
    8f48:	f800283a 	ret

00008f4c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    8f4c:	deffeb04 	addi	sp,sp,-84
    8f50:	dfc01415 	stw	ra,80(sp)
    8f54:	df001315 	stw	fp,76(sp)
    8f58:	df001304 	addi	fp,sp,76
    8f5c:	e13ff915 	stw	r4,-28(fp)
    8f60:	e17ffa15 	stw	r5,-24(fp)
    8f64:	e1bffb15 	stw	r6,-20(fp)
    8f68:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    8f6c:	00800804 	movi	r2,32
    8f70:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
    8f74:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
    8f78:	00002c06 	br	902c <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    8f7c:	e0bff017 	ldw	r2,-64(fp)
    8f80:	e0bfff15 	stw	r2,-4(fp)
    8f84:	e0fffc17 	ldw	r3,-16(fp)
    8f88:	e0fffe15 	stw	r3,-8(fp)
    8f8c:	e0bfff17 	ldw	r2,-4(fp)
    8f90:	e0fffe17 	ldw	r3,-8(fp)
    8f94:	10c0022e 	bgeu	r2,r3,8fa0 <alt_epcs_flash_memcmp+0x54>
    8f98:	e0bfff17 	ldw	r2,-4(fp)
    8f9c:	e0bffe15 	stw	r2,-8(fp)
    8fa0:	e0fffe17 	ldw	r3,-8(fp)
    8fa4:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    8fa8:	e0fffb17 	ldw	r3,-20(fp)
    8fac:	e0bfef17 	ldw	r2,-68(fp)
    8fb0:	188b883a 	add	r5,r3,r2
    8fb4:	e1bff104 	addi	r6,fp,-60
    8fb8:	e13ff917 	ldw	r4,-28(fp)
    8fbc:	e1ffee17 	ldw	r7,-72(fp)
    8fc0:	00095840 	call	9584 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    8fc4:	1004403a 	cmpge	r2,r2,zero
    8fc8:	1000031e 	bne	r2,zero,8fd8 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    8fcc:	00bfffc4 	movi	r2,-1
    8fd0:	e0bffd15 	stw	r2,-12(fp)
    8fd4:	00001906 	br	903c <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    8fd8:	e0fffa17 	ldw	r3,-24(fp)
    8fdc:	e0bfef17 	ldw	r2,-68(fp)
    8fe0:	1889883a 	add	r4,r3,r2
    8fe4:	e1bfee17 	ldw	r6,-72(fp)
    8fe8:	e17ff104 	addi	r5,fp,-60
    8fec:	000d0680 	call	d068 <memcmp>
    8ff0:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
    8ff4:	e0bfed17 	ldw	r2,-76(fp)
    8ff8:	1005003a 	cmpeq	r2,r2,zero
    8ffc:	1000031e 	bne	r2,zero,900c <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
    9000:	e0ffed17 	ldw	r3,-76(fp)
    9004:	e0fffd15 	stw	r3,-12(fp)
    9008:	00000c06 	br	903c <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
    900c:	e0ffee17 	ldw	r3,-72(fp)
    9010:	e0bffc17 	ldw	r2,-16(fp)
    9014:	10c5c83a 	sub	r2,r2,r3
    9018:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
    901c:	e0ffef17 	ldw	r3,-68(fp)
    9020:	e0bfee17 	ldw	r2,-72(fp)
    9024:	1885883a 	add	r2,r3,r2
    9028:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    902c:	e0bffc17 	ldw	r2,-16(fp)
    9030:	1004c03a 	cmpne	r2,r2,zero
    9034:	103fd11e 	bne	r2,zero,8f7c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    9038:	e03ffd15 	stw	zero,-12(fp)
    903c:	e0bffd17 	ldw	r2,-12(fp)
}
    9040:	e037883a 	mov	sp,fp
    9044:	dfc00117 	ldw	ra,4(sp)
    9048:	df000017 	ldw	fp,0(sp)
    904c:	dec00204 	addi	sp,sp,8
    9050:	f800283a 	ret

00009054 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    9054:	defff204 	addi	sp,sp,-56
    9058:	dfc00d15 	stw	ra,52(sp)
    905c:	df000c15 	stw	fp,48(sp)
    9060:	df000c04 	addi	fp,sp,48
    9064:	e13ffa15 	stw	r4,-24(fp)
    9068:	e17ffb15 	stw	r5,-20(fp)
    906c:	e1bffc15 	stw	r6,-16(fp)
    9070:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
    9074:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    9078:	e03ff815 	stw	zero,-32(fp)
    907c:	00008b06 	br	92ac <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    9080:	e0bff817 	ldw	r2,-32(fp)
    9084:	e0fffa17 	ldw	r3,-24(fp)
    9088:	1004913a 	slli	r2,r2,4
    908c:	10c5883a 	add	r2,r2,r3
    9090:	10800d04 	addi	r2,r2,52
    9094:	10c00017 	ldw	r3,0(r2)
    9098:	e0bffb17 	ldw	r2,-20(fp)
    909c:	10c08016 	blt	r2,r3,92a0 <alt_epcs_flash_write+0x24c>
    90a0:	e0bff817 	ldw	r2,-32(fp)
    90a4:	e0fffa17 	ldw	r3,-24(fp)
    90a8:	1004913a 	slli	r2,r2,4
    90ac:	10c5883a 	add	r2,r2,r3
    90b0:	10800d04 	addi	r2,r2,52
    90b4:	11000017 	ldw	r4,0(r2)
    90b8:	e0bff817 	ldw	r2,-32(fp)
    90bc:	e0fffa17 	ldw	r3,-24(fp)
    90c0:	1004913a 	slli	r2,r2,4
    90c4:	10c5883a 	add	r2,r2,r3
    90c8:	10800e04 	addi	r2,r2,56
    90cc:	10800017 	ldw	r2,0(r2)
    90d0:	2087883a 	add	r3,r4,r2
    90d4:	e0bffb17 	ldw	r2,-20(fp)
    90d8:	10c0710e 	bge	r2,r3,92a0 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    90dc:	e0bff817 	ldw	r2,-32(fp)
    90e0:	e0fffa17 	ldw	r3,-24(fp)
    90e4:	1004913a 	slli	r2,r2,4
    90e8:	10c5883a 	add	r2,r2,r3
    90ec:	10800d04 	addi	r2,r2,52
    90f0:	10800017 	ldw	r2,0(r2)
    90f4:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    90f8:	e03ff715 	stw	zero,-36(fp)
    90fc:	00006006 	br	9280 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
    9100:	e0fffb17 	ldw	r3,-20(fp)
    9104:	e0bff517 	ldw	r2,-44(fp)
    9108:	18805116 	blt	r3,r2,9250 <alt_epcs_flash_write+0x1fc>
    910c:	e0bff817 	ldw	r2,-32(fp)
    9110:	e0fffa17 	ldw	r3,-24(fp)
    9114:	1004913a 	slli	r2,r2,4
    9118:	10c5883a 	add	r2,r2,r3
    911c:	10801004 	addi	r2,r2,64
    9120:	10c00017 	ldw	r3,0(r2)
    9124:	e0bff517 	ldw	r2,-44(fp)
    9128:	1887883a 	add	r3,r3,r2
    912c:	e0bffb17 	ldw	r2,-20(fp)
    9130:	10c0470e 	bge	r2,r3,9250 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    9134:	e0bff817 	ldw	r2,-32(fp)
    9138:	e0fffa17 	ldw	r3,-24(fp)
    913c:	1004913a 	slli	r2,r2,4
    9140:	10c5883a 	add	r2,r2,r3
    9144:	10801004 	addi	r2,r2,64
    9148:	10c00017 	ldw	r3,0(r2)
    914c:	e0bff517 	ldw	r2,-44(fp)
    9150:	1887883a 	add	r3,r3,r2
    9154:	e0bffb17 	ldw	r2,-20(fp)
    9158:	1885c83a 	sub	r2,r3,r2
    915c:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    9160:	e0bff617 	ldw	r2,-40(fp)
    9164:	e0bfff15 	stw	r2,-4(fp)
    9168:	e0fffd17 	ldw	r3,-12(fp)
    916c:	e0fffe15 	stw	r3,-8(fp)
    9170:	e0bfff17 	ldw	r2,-4(fp)
    9174:	e0fffe17 	ldw	r3,-8(fp)
    9178:	10c0020e 	bge	r2,r3,9184 <alt_epcs_flash_write+0x130>
    917c:	e0bfff17 	ldw	r2,-4(fp)
    9180:	e0bffe15 	stw	r2,-8(fp)
    9184:	e0fffe17 	ldw	r3,-8(fp)
    9188:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    918c:	e1fff617 	ldw	r7,-40(fp)
    9190:	e13ffa17 	ldw	r4,-24(fp)
    9194:	e17ffc17 	ldw	r5,-16(fp)
    9198:	e1bffb17 	ldw	r6,-20(fp)
    919c:	0008f4c0 	call	8f4c <alt_epcs_flash_memcmp>
    91a0:	1005003a 	cmpeq	r2,r2,zero
    91a4:	1000131e 	bne	r2,zero,91f4 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    91a8:	e0bffa17 	ldw	r2,-24(fp)
    91ac:	10800817 	ldw	r2,32(r2)
    91b0:	e13ffa17 	ldw	r4,-24(fp)
    91b4:	e17ff517 	ldw	r5,-44(fp)
    91b8:	103ee83a 	callr	r2
    91bc:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
    91c0:	e0bff917 	ldw	r2,-28(fp)
    91c4:	1004c03a 	cmpne	r2,r2,zero
    91c8:	10000a1e 	bne	r2,zero,91f4 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
    91cc:	e0bffa17 	ldw	r2,-24(fp)
    91d0:	10c00917 	ldw	r3,36(r2)
    91d4:	e0bff617 	ldw	r2,-40(fp)
    91d8:	d8800015 	stw	r2,0(sp)
    91dc:	e13ffa17 	ldw	r4,-24(fp)
    91e0:	e17ff517 	ldw	r5,-44(fp)
    91e4:	e1bffb17 	ldw	r6,-20(fp)
    91e8:	e1fffc17 	ldw	r7,-16(fp)
    91ec:	183ee83a 	callr	r3
    91f0:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    91f4:	e0fffd17 	ldw	r3,-12(fp)
    91f8:	e0bff617 	ldw	r2,-40(fp)
    91fc:	18802f26 	beq	r3,r2,92bc <alt_epcs_flash_write+0x268>
    9200:	e0bff917 	ldw	r2,-28(fp)
    9204:	1004c03a 	cmpne	r2,r2,zero
    9208:	10002c1e 	bne	r2,zero,92bc <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
    920c:	e0fffd17 	ldw	r3,-12(fp)
    9210:	e0bff617 	ldw	r2,-40(fp)
    9214:	1885c83a 	sub	r2,r3,r2
    9218:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    921c:	e0bff817 	ldw	r2,-32(fp)
    9220:	e0fffa17 	ldw	r3,-24(fp)
    9224:	1004913a 	slli	r2,r2,4
    9228:	10c5883a 	add	r2,r2,r3
    922c:	10801004 	addi	r2,r2,64
    9230:	10c00017 	ldw	r3,0(r2)
    9234:	e0bff517 	ldw	r2,-44(fp)
    9238:	1885883a 	add	r2,r3,r2
    923c:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    9240:	e0fffc17 	ldw	r3,-16(fp)
    9244:	e0bff617 	ldw	r2,-40(fp)
    9248:	1885883a 	add	r2,r3,r2
    924c:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    9250:	e0bff817 	ldw	r2,-32(fp)
    9254:	e0fffa17 	ldw	r3,-24(fp)
    9258:	1004913a 	slli	r2,r2,4
    925c:	10c5883a 	add	r2,r2,r3
    9260:	10801004 	addi	r2,r2,64
    9264:	10c00017 	ldw	r3,0(r2)
    9268:	e0bff517 	ldw	r2,-44(fp)
    926c:	10c5883a 	add	r2,r2,r3
    9270:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    9274:	e0bff717 	ldw	r2,-36(fp)
    9278:	10800044 	addi	r2,r2,1
    927c:	e0bff715 	stw	r2,-36(fp)
    9280:	e0bff817 	ldw	r2,-32(fp)
    9284:	e0fffa17 	ldw	r3,-24(fp)
    9288:	1004913a 	slli	r2,r2,4
    928c:	10c5883a 	add	r2,r2,r3
    9290:	10800f04 	addi	r2,r2,60
    9294:	10c00017 	ldw	r3,0(r2)
    9298:	e0bff717 	ldw	r2,-36(fp)
    929c:	10ff9816 	blt	r2,r3,9100 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    92a0:	e0bff817 	ldw	r2,-32(fp)
    92a4:	10800044 	addi	r2,r2,1
    92a8:	e0bff815 	stw	r2,-32(fp)
    92ac:	e0bffa17 	ldw	r2,-24(fp)
    92b0:	10c00c17 	ldw	r3,48(r2)
    92b4:	e0bff817 	ldw	r2,-32(fp)
    92b8:	10ff7116 	blt	r2,r3,9080 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    92bc:	e0bff917 	ldw	r2,-28(fp)
}
    92c0:	e037883a 	mov	sp,fp
    92c4:	dfc00117 	ldw	ra,4(sp)
    92c8:	df000017 	ldw	fp,0(sp)
    92cc:	dec00204 	addi	sp,sp,8
    92d0:	f800283a 	ret

000092d4 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    92d4:	defffa04 	addi	sp,sp,-24
    92d8:	df000515 	stw	fp,20(sp)
    92dc:	df000504 	addi	fp,sp,20
    92e0:	e13ffd15 	stw	r4,-12(fp)
    92e4:	e17ffe15 	stw	r5,-8(fp)
    92e8:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    92ec:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
    92f8:	e0bffb17 	ldw	r2,-20(fp)
    92fc:	10c00c17 	ldw	r3,48(r2)
    9300:	e0bfff17 	ldw	r2,-4(fp)
    9304:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    9308:	e0bffb17 	ldw	r2,-20(fp)
    930c:	10800c17 	ldw	r2,48(r2)
    9310:	1004c03a 	cmpne	r2,r2,zero
    9314:	1000031e 	bne	r2,zero,9324 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
    9318:	00bffec4 	movi	r2,-5
    931c:	e0bffc15 	stw	r2,-16(fp)
    9320:	00000b06 	br	9350 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    9324:	e0bffb17 	ldw	r2,-20(fp)
    9328:	10800c17 	ldw	r2,48(r2)
    932c:	10800250 	cmplti	r2,r2,9
    9330:	1000031e 	bne	r2,zero,9340 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
    9334:	00bffd04 	movi	r2,-12
    9338:	e0bffc15 	stw	r2,-16(fp)
    933c:	00000406 	br	9350 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
    9340:	e0bffb17 	ldw	r2,-20(fp)
    9344:	10c00d04 	addi	r3,r2,52
    9348:	e0bffe17 	ldw	r2,-8(fp)
    934c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    9350:	e0bffc17 	ldw	r2,-16(fp)
}
    9354:	e037883a 	mov	sp,fp
    9358:	df000017 	ldw	fp,0(sp)
    935c:	dec00104 	addi	sp,sp,4
    9360:	f800283a 	ret

00009364 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    9364:	defffa04 	addi	sp,sp,-24
    9368:	dfc00515 	stw	ra,20(sp)
    936c:	df000415 	stw	fp,16(sp)
    9370:	df000404 	addi	fp,sp,16
    9374:	e13ffe15 	stw	r4,-8(fp)
    9378:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    937c:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    9380:	e0bffe17 	ldw	r2,-8(fp)
    9384:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    9388:	e13ffe17 	ldw	r4,-8(fp)
    938c:	e17fff17 	ldw	r5,-4(fp)
    9390:	00093d40 	call	93d4 <alt_epcs_test_address>
    9394:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
    9398:	e0bffd17 	ldw	r2,-12(fp)
    939c:	1004803a 	cmplt	r2,r2,zero
    93a0:	1000061e 	bne	r2,zero,93bc <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    93a4:	e0bffc17 	ldw	r2,-16(fp)
    93a8:	11002d17 	ldw	r4,180(r2)
    93ac:	e17fff17 	ldw	r5,-4(fp)
    93b0:	e0bffc17 	ldw	r2,-16(fp)
    93b4:	11803117 	ldw	r6,196(r2)
    93b8:	000b1040 	call	b104 <epcs_sector_erase>
  }
  return ret_code;
    93bc:	e0bffd17 	ldw	r2,-12(fp)
}
    93c0:	e037883a 	mov	sp,fp
    93c4:	dfc00117 	ldw	ra,4(sp)
    93c8:	df000017 	ldw	fp,0(sp)
    93cc:	dec00204 	addi	sp,sp,8
    93d0:	f800283a 	ret

000093d4 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    93d4:	defff904 	addi	sp,sp,-28
    93d8:	df000615 	stw	fp,24(sp)
    93dc:	df000604 	addi	fp,sp,24
    93e0:	e13ffe15 	stw	r4,-8(fp)
    93e4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    93e8:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    93ec:	e0bffe17 	ldw	r2,-8(fp)
    93f0:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    93f4:	e0bffc17 	ldw	r2,-16(fp)
    93f8:	10800c17 	ldw	r2,48(r2)
    93fc:	10bfffc4 	addi	r2,r2,-1
    9400:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    9404:	e0bffb17 	ldw	r2,-20(fp)
    9408:	e0fffc17 	ldw	r3,-16(fp)
    940c:	1004913a 	slli	r2,r2,4
    9410:	10c5883a 	add	r2,r2,r3
    9414:	10800d04 	addi	r2,r2,52
    9418:	11000017 	ldw	r4,0(r2)
    941c:	e0bffb17 	ldw	r2,-20(fp)
    9420:	e0fffc17 	ldw	r3,-16(fp)
    9424:	1004913a 	slli	r2,r2,4
    9428:	10c5883a 	add	r2,r2,r3
    942c:	10800e04 	addi	r2,r2,56
    9430:	10800017 	ldw	r2,0(r2)
    9434:	2085883a 	add	r2,r4,r2
    9438:	10bfffc4 	addi	r2,r2,-1
    943c:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
    9440:	e0ffff17 	ldw	r3,-4(fp)
    9444:	e0bffa17 	ldw	r2,-24(fp)
    9448:	10c0022e 	bgeu	r2,r3,9454 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    944c:	00bffec4 	movi	r2,-5
    9450:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
    9454:	e0bffd17 	ldw	r2,-12(fp)
}
    9458:	e037883a 	mov	sp,fp
    945c:	df000017 	ldw	fp,0(sp)
    9460:	dec00104 	addi	sp,sp,4
    9464:	f800283a 	ret

00009468 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    9468:	defff204 	addi	sp,sp,-56
    946c:	dfc00d15 	stw	ra,52(sp)
    9470:	df000c15 	stw	fp,48(sp)
    9474:	df000c04 	addi	fp,sp,48
    9478:	e13ffa15 	stw	r4,-24(fp)
    947c:	e17ffb15 	stw	r5,-20(fp)
    9480:	e1bffc15 	stw	r6,-16(fp)
    9484:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    9488:	e0bffa17 	ldw	r2,-24(fp)
    948c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    9490:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    9494:	e13ffa17 	ldw	r4,-24(fp)
    9498:	e17ffc17 	ldw	r5,-16(fp)
    949c:	00093d40 	call	93d4 <alt_epcs_test_address>
    94a0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    94a4:	e0bff917 	ldw	r2,-28(fp)
    94a8:	1004803a 	cmplt	r2,r2,zero
    94ac:	10002f1e 	bne	r2,zero,956c <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    94b0:	00002b06 	br	9560 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    94b4:	e0bff817 	ldw	r2,-32(fp)
    94b8:	10c03017 	ldw	r3,192(r2)
    94bc:	e0bffc17 	ldw	r2,-16(fp)
    94c0:	1887883a 	add	r3,r3,r2
    94c4:	e0bff817 	ldw	r2,-32(fp)
    94c8:	10803017 	ldw	r2,192(r2)
    94cc:	0085c83a 	sub	r2,zero,r2
    94d0:	1884703a 	and	r2,r3,r2
    94d4:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    94d8:	e0fff517 	ldw	r3,-44(fp)
    94dc:	e0bffc17 	ldw	r2,-16(fp)
    94e0:	1885c83a 	sub	r2,r3,r2
    94e4:	e0c00217 	ldw	r3,8(fp)
    94e8:	e0ffff15 	stw	r3,-4(fp)
    94ec:	e0bffe15 	stw	r2,-8(fp)
    94f0:	e0bfff17 	ldw	r2,-4(fp)
    94f4:	e0fffe17 	ldw	r3,-8(fp)
    94f8:	10c0020e 	bge	r2,r3,9504 <alt_epcs_flash_write_block+0x9c>
    94fc:	e0bfff17 	ldw	r2,-4(fp)
    9500:	e0bffe15 	stw	r2,-8(fp)
    9504:	e0fffe17 	ldw	r3,-8(fp)
    9508:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    950c:	e0bff817 	ldw	r2,-32(fp)
    9510:	11002d17 	ldw	r4,180(r2)
    9514:	e0fffd17 	ldw	r3,-12(fp)
    9518:	e0bff717 	ldw	r2,-36(fp)
    951c:	188d883a 	add	r6,r3,r2
    9520:	e0bff817 	ldw	r2,-32(fp)
    9524:	10803117 	ldw	r2,196(r2)
    9528:	d8800015 	stw	r2,0(sp)
    952c:	e17ffc17 	ldw	r5,-16(fp)
    9530:	e1fff617 	ldw	r7,-40(fp)
    9534:	000b46c0 	call	b46c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    9538:	e0c00217 	ldw	r3,8(fp)
    953c:	e0bff617 	ldw	r2,-40(fp)
    9540:	1885c83a 	sub	r2,r3,r2
    9544:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    9548:	e0fff717 	ldw	r3,-36(fp)
    954c:	e0bff617 	ldw	r2,-40(fp)
    9550:	1885883a 	add	r2,r3,r2
    9554:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    9558:	e0bff517 	ldw	r2,-44(fp)
    955c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    9560:	e0800217 	ldw	r2,8(fp)
    9564:	1004c03a 	cmpne	r2,r2,zero
    9568:	103fd21e 	bne	r2,zero,94b4 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    956c:	e0bff917 	ldw	r2,-28(fp)
}
    9570:	e037883a 	mov	sp,fp
    9574:	dfc00117 	ldw	ra,4(sp)
    9578:	df000017 	ldw	fp,0(sp)
    957c:	dec00204 	addi	sp,sp,8
    9580:	f800283a 	ret

00009584 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    9584:	defff704 	addi	sp,sp,-36
    9588:	dfc00815 	stw	ra,32(sp)
    958c:	df000715 	stw	fp,28(sp)
    9590:	df000704 	addi	fp,sp,28
    9594:	e13ffc15 	stw	r4,-16(fp)
    9598:	e17ffd15 	stw	r5,-12(fp)
    959c:	e1bffe15 	stw	r6,-8(fp)
    95a0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    95a4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    95a8:	e0bffc17 	ldw	r2,-16(fp)
    95ac:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    95b0:	e13ffc17 	ldw	r4,-16(fp)
    95b4:	e17ffd17 	ldw	r5,-12(fp)
    95b8:	00093d40 	call	93d4 <alt_epcs_test_address>
    95bc:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
    95c0:	e0bffb17 	ldw	r2,-20(fp)
    95c4:	1004803a 	cmplt	r2,r2,zero
    95c8:	10000e1e 	bne	r2,zero,9604 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    95cc:	e0bffa17 	ldw	r2,-24(fp)
    95d0:	11002d17 	ldw	r4,180(r2)
    95d4:	e1bffe17 	ldw	r6,-8(fp)
    95d8:	e0bffa17 	ldw	r2,-24(fp)
    95dc:	10803117 	ldw	r2,196(r2)
    95e0:	d8800015 	stw	r2,0(sp)
    95e4:	e17ffd17 	ldw	r5,-12(fp)
    95e8:	e1ffff17 	ldw	r7,-4(fp)
    95ec:	000b26c0 	call	b26c <epcs_read_buffer>
    95f0:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    95f4:	e0fffb17 	ldw	r3,-20(fp)
    95f8:	e0bfff17 	ldw	r2,-4(fp)
    95fc:	1880011e 	bne	r3,r2,9604 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    9600:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
    9604:	e0bffb17 	ldw	r2,-20(fp)
}
    9608:	e037883a 	mov	sp,fp
    960c:	dfc00117 	ldw	ra,4(sp)
    9610:	df000017 	ldw	fp,0(sp)
    9614:	dec00204 	addi	sp,sp,8
    9618:	f800283a 	ret

0000961c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    961c:	defffa04 	addi	sp,sp,-24
    9620:	dfc00515 	stw	ra,20(sp)
    9624:	df000415 	stw	fp,16(sp)
    9628:	df000404 	addi	fp,sp,16
    962c:	e13ffd15 	stw	r4,-12(fp)
    9630:	e17ffe15 	stw	r5,-8(fp)
    9634:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9638:	e0bffd17 	ldw	r2,-12(fp)
    963c:	10800017 	ldw	r2,0(r2)
    9640:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9644:	e0bffc17 	ldw	r2,-16(fp)
    9648:	11000a04 	addi	r4,r2,40
    964c:	e0bffd17 	ldw	r2,-12(fp)
    9650:	11c00217 	ldw	r7,8(r2)
    9654:	e17ffe17 	ldw	r5,-8(fp)
    9658:	e1bfff17 	ldw	r6,-4(fp)
    965c:	0009ddc0 	call	9ddc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9660:	e037883a 	mov	sp,fp
    9664:	dfc00117 	ldw	ra,4(sp)
    9668:	df000017 	ldw	fp,0(sp)
    966c:	dec00204 	addi	sp,sp,8
    9670:	f800283a 	ret

00009674 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9674:	defffa04 	addi	sp,sp,-24
    9678:	dfc00515 	stw	ra,20(sp)
    967c:	df000415 	stw	fp,16(sp)
    9680:	df000404 	addi	fp,sp,16
    9684:	e13ffd15 	stw	r4,-12(fp)
    9688:	e17ffe15 	stw	r5,-8(fp)
    968c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9690:	e0bffd17 	ldw	r2,-12(fp)
    9694:	10800017 	ldw	r2,0(r2)
    9698:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    969c:	e0bffc17 	ldw	r2,-16(fp)
    96a0:	11000a04 	addi	r4,r2,40
    96a4:	e0bffd17 	ldw	r2,-12(fp)
    96a8:	11c00217 	ldw	r7,8(r2)
    96ac:	e17ffe17 	ldw	r5,-8(fp)
    96b0:	e1bfff17 	ldw	r6,-4(fp)
    96b4:	000a09c0 	call	a09c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    96b8:	e037883a 	mov	sp,fp
    96bc:	dfc00117 	ldw	ra,4(sp)
    96c0:	df000017 	ldw	fp,0(sp)
    96c4:	dec00204 	addi	sp,sp,8
    96c8:	f800283a 	ret

000096cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    96cc:	defffc04 	addi	sp,sp,-16
    96d0:	dfc00315 	stw	ra,12(sp)
    96d4:	df000215 	stw	fp,8(sp)
    96d8:	df000204 	addi	fp,sp,8
    96dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    96e0:	e0bfff17 	ldw	r2,-4(fp)
    96e4:	10800017 	ldw	r2,0(r2)
    96e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    96ec:	e0bffe17 	ldw	r2,-8(fp)
    96f0:	11000a04 	addi	r4,r2,40
    96f4:	e0bfff17 	ldw	r2,-4(fp)
    96f8:	11400217 	ldw	r5,8(r2)
    96fc:	0009c740 	call	9c74 <altera_avalon_jtag_uart_close>
}
    9700:	e037883a 	mov	sp,fp
    9704:	dfc00117 	ldw	ra,4(sp)
    9708:	df000017 	ldw	fp,0(sp)
    970c:	dec00204 	addi	sp,sp,8
    9710:	f800283a 	ret

00009714 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    9714:	defffa04 	addi	sp,sp,-24
    9718:	dfc00515 	stw	ra,20(sp)
    971c:	df000415 	stw	fp,16(sp)
    9720:	df000404 	addi	fp,sp,16
    9724:	e13ffd15 	stw	r4,-12(fp)
    9728:	e17ffe15 	stw	r5,-8(fp)
    972c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    9730:	e0bffd17 	ldw	r2,-12(fp)
    9734:	10800017 	ldw	r2,0(r2)
    9738:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    973c:	e0bffc17 	ldw	r2,-16(fp)
    9740:	11000a04 	addi	r4,r2,40
    9744:	e17ffe17 	ldw	r5,-8(fp)
    9748:	e1bfff17 	ldw	r6,-4(fp)
    974c:	0009ce80 	call	9ce8 <altera_avalon_jtag_uart_ioctl>
}
    9750:	e037883a 	mov	sp,fp
    9754:	dfc00117 	ldw	ra,4(sp)
    9758:	df000017 	ldw	fp,0(sp)
    975c:	dec00204 	addi	sp,sp,8
    9760:	f800283a 	ret

00009764 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    9764:	defff404 	addi	sp,sp,-48
    9768:	dfc00b15 	stw	ra,44(sp)
    976c:	df000a15 	stw	fp,40(sp)
    9770:	df000a04 	addi	fp,sp,40
    9774:	e13ffd15 	stw	r4,-12(fp)
    9778:	e17ffe15 	stw	r5,-8(fp)
    977c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    9780:	e0bffd17 	ldw	r2,-12(fp)
    9784:	10800c04 	addi	r2,r2,48
    9788:	e0bffb15 	stw	r2,-20(fp)
    978c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    9790:	e13ffc0b 	ldhu	r4,-16(fp)
    9794:	e17ffc84 	addi	r5,fp,-14
    9798:	0002ce80 	call	2ce8 <OSFlagCreate>
    979c:	1007883a 	mov	r3,r2
    97a0:	e0bffb17 	ldw	r2,-20(fp)
    97a4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    97a8:	e0bffd17 	ldw	r2,-12(fp)
    97ac:	10800a04 	addi	r2,r2,40
    97b0:	e0bff915 	stw	r2,-28(fp)
    97b4:	00800044 	movi	r2,1
    97b8:	e0bffa0d 	sth	r2,-24(fp)
    97bc:	e13ffa0b 	ldhu	r4,-24(fp)
    97c0:	0005ef00 	call	5ef0 <OSSemCreate>
    97c4:	1007883a 	mov	r3,r2
    97c8:	e0bff917 	ldw	r2,-28(fp)
    97cc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    97d0:	e0bffd17 	ldw	r2,-12(fp)
    97d4:	10800b04 	addi	r2,r2,44
    97d8:	e0bff715 	stw	r2,-36(fp)
    97dc:	00800044 	movi	r2,1
    97e0:	e0bff80d 	sth	r2,-32(fp)
    97e4:	e13ff80b 	ldhu	r4,-32(fp)
    97e8:	0005ef00 	call	5ef0 <OSSemCreate>
    97ec:	1007883a 	mov	r3,r2
    97f0:	e0bff717 	ldw	r2,-36(fp)
    97f4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    97f8:	e0fffd17 	ldw	r3,-12(fp)
    97fc:	00800044 	movi	r2,1
    9800:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    9804:	e0bffd17 	ldw	r2,-12(fp)
    9808:	10800017 	ldw	r2,0(r2)
    980c:	11000104 	addi	r4,r2,4
    9810:	e0bffd17 	ldw	r2,-12(fp)
    9814:	10800817 	ldw	r2,32(r2)
    9818:	1007883a 	mov	r3,r2
    981c:	2005883a 	mov	r2,r4
    9820:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    9824:	e13ffe17 	ldw	r4,-8(fp)
    9828:	e17fff17 	ldw	r5,-4(fp)
    982c:	d8000015 	stw	zero,0(sp)
    9830:	01800074 	movhi	r6,1
    9834:	31a62704 	addi	r6,r6,-26468
    9838:	e1fffd17 	ldw	r7,-12(fp)
    983c:	000bd040 	call	bd04 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    9840:	e0bffd17 	ldw	r2,-12(fp)
    9844:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    9848:	e0bffd17 	ldw	r2,-12(fp)
    984c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    9850:	00800074 	movhi	r2,1
    9854:	1082f804 	addi	r2,r2,3040
    9858:	10800017 	ldw	r2,0(r2)
    985c:	100b883a 	mov	r5,r2
    9860:	01800074 	movhi	r6,1
    9864:	31a6d804 	addi	r6,r6,-25760
    9868:	e1fffd17 	ldw	r7,-12(fp)
    986c:	000b7780 	call	b778 <alt_alarm_start>
    9870:	1004403a 	cmpge	r2,r2,zero
    9874:	1000041e 	bne	r2,zero,9888 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    9878:	e0fffd17 	ldw	r3,-12(fp)
    987c:	00a00034 	movhi	r2,32768
    9880:	10bfffc4 	addi	r2,r2,-1
    9884:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    9888:	e037883a 	mov	sp,fp
    988c:	dfc00117 	ldw	ra,4(sp)
    9890:	df000017 	ldw	fp,0(sp)
    9894:	dec00204 	addi	sp,sp,8
    9898:	f800283a 	ret

0000989c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    989c:	defff204 	addi	sp,sp,-56
    98a0:	dfc00d15 	stw	ra,52(sp)
    98a4:	df000c15 	stw	fp,48(sp)
    98a8:	df000c04 	addi	fp,sp,48
    98ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    98b0:	e0bfff17 	ldw	r2,-4(fp)
    98b4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    98b8:	e0bffd17 	ldw	r2,-12(fp)
    98bc:	10800017 	ldw	r2,0(r2)
    98c0:	e0bffc15 	stw	r2,-16(fp)
    98c4:	00000006 	br	98c8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    98c8:	e0bffc17 	ldw	r2,-16(fp)
    98cc:	10800104 	addi	r2,r2,4
    98d0:	10800037 	ldwio	r2,0(r2)
    98d4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    98d8:	e0bffb17 	ldw	r2,-20(fp)
    98dc:	1080c00c 	andi	r2,r2,768
    98e0:	1005003a 	cmpeq	r2,r2,zero
    98e4:	1000991e 	bne	r2,zero,9b4c <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    98e8:	e0bffb17 	ldw	r2,-20(fp)
    98ec:	1080400c 	andi	r2,r2,256
    98f0:	1005003a 	cmpeq	r2,r2,zero
    98f4:	1000481e 	bne	r2,zero,9a18 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    98f8:	00800074 	movhi	r2,1
    98fc:	e0bffa15 	stw	r2,-24(fp)
    9900:	00000006 	br	9904 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9904:	e0bffd17 	ldw	r2,-12(fp)
    9908:	10800d17 	ldw	r2,52(r2)
    990c:	10800044 	addi	r2,r2,1
    9910:	1081ffcc 	andi	r2,r2,2047
    9914:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    9918:	e0bffd17 	ldw	r2,-12(fp)
    991c:	10c00e17 	ldw	r3,56(r2)
    9920:	e0bff917 	ldw	r2,-28(fp)
    9924:	18802826 	beq	r3,r2,99c8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9928:	e0bffc17 	ldw	r2,-16(fp)
    992c:	10800037 	ldwio	r2,0(r2)
    9930:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    9934:	e0bffa17 	ldw	r2,-24(fp)
    9938:	10a0000c 	andi	r2,r2,32768
    993c:	1005003a 	cmpeq	r2,r2,zero
    9940:	1000211e 	bne	r2,zero,99c8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9944:	e0bffd17 	ldw	r2,-12(fp)
    9948:	10c00d17 	ldw	r3,52(r2)
    994c:	e0bffa17 	ldw	r2,-24(fp)
    9950:	1009883a 	mov	r4,r2
    9954:	e0bffd17 	ldw	r2,-12(fp)
    9958:	1885883a 	add	r2,r3,r2
    995c:	10801104 	addi	r2,r2,68
    9960:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9964:	e0bffd17 	ldw	r2,-12(fp)
    9968:	10800d17 	ldw	r2,52(r2)
    996c:	10800044 	addi	r2,r2,1
    9970:	10c1ffcc 	andi	r3,r2,2047
    9974:	e0bffd17 	ldw	r2,-12(fp)
    9978:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    997c:	e0bffd17 	ldw	r2,-12(fp)
    9980:	10800c17 	ldw	r2,48(r2)
    9984:	e0bff615 	stw	r2,-40(fp)
    9988:	00800044 	movi	r2,1
    998c:	e0bff70d 	sth	r2,-36(fp)
    9990:	00800044 	movi	r2,1
    9994:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    9998:	00800074 	movhi	r2,1
    999c:	1082e244 	addi	r2,r2,2953
    99a0:	10800003 	ldbu	r2,0(r2)
    99a4:	10803fcc 	andi	r2,r2,255
    99a8:	1005003a 	cmpeq	r2,r2,zero
    99ac:	103fd51e 	bne	r2,zero,9904 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
    99b0:	e17ff70b 	ldhu	r5,-36(fp)
    99b4:	e1bff783 	ldbu	r6,-34(fp)
    99b8:	e1fffe04 	addi	r7,fp,-8
    99bc:	e13ff617 	ldw	r4,-40(fp)
    99c0:	0003a100 	call	3a10 <OSFlagPost>
    return err;
    99c4:	003fcf06 	br	9904 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    99c8:	e0bffa17 	ldw	r2,-24(fp)
    99cc:	10bfffec 	andhi	r2,r2,65535
    99d0:	1005003a 	cmpeq	r2,r2,zero
    99d4:	1000101e 	bne	r2,zero,9a18 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    99d8:	e0bffd17 	ldw	r2,-12(fp)
    99dc:	10c00817 	ldw	r3,32(r2)
    99e0:	00bfff84 	movi	r2,-2
    99e4:	1886703a 	and	r3,r3,r2
    99e8:	e0bffd17 	ldw	r2,-12(fp)
    99ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    99f0:	e0bffc17 	ldw	r2,-16(fp)
    99f4:	11000104 	addi	r4,r2,4
    99f8:	e0bffd17 	ldw	r2,-12(fp)
    99fc:	10800817 	ldw	r2,32(r2)
    9a00:	1007883a 	mov	r3,r2
    9a04:	2005883a 	mov	r2,r4
    9a08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9a0c:	e0bffc17 	ldw	r2,-16(fp)
    9a10:	10800104 	addi	r2,r2,4
    9a14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    9a18:	e0bffb17 	ldw	r2,-20(fp)
    9a1c:	1080800c 	andi	r2,r2,512
    9a20:	1005003a 	cmpeq	r2,r2,zero
    9a24:	103fa81e 	bne	r2,zero,98c8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    9a28:	e0bffb17 	ldw	r2,-20(fp)
    9a2c:	10bfffec 	andhi	r2,r2,65535
    9a30:	1004d43a 	srli	r2,r2,16
    9a34:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    9a38:	00002706 	br	9ad8 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    9a3c:	e13ffc17 	ldw	r4,-16(fp)
    9a40:	e0bffd17 	ldw	r2,-12(fp)
    9a44:	10c01017 	ldw	r3,64(r2)
    9a48:	e0bffd17 	ldw	r2,-12(fp)
    9a4c:	1885883a 	add	r2,r3,r2
    9a50:	10821104 	addi	r2,r2,2116
    9a54:	10800003 	ldbu	r2,0(r2)
    9a58:	10c03fcc 	andi	r3,r2,255
    9a5c:	18c0201c 	xori	r3,r3,128
    9a60:	18ffe004 	addi	r3,r3,-128
    9a64:	2005883a 	mov	r2,r4
    9a68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9a6c:	e0bffd17 	ldw	r2,-12(fp)
    9a70:	10801017 	ldw	r2,64(r2)
    9a74:	10800044 	addi	r2,r2,1
    9a78:	10c1ffcc 	andi	r3,r2,2047
    9a7c:	e0bffd17 	ldw	r2,-12(fp)
    9a80:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    9a84:	e0bffd17 	ldw	r2,-12(fp)
    9a88:	10800c17 	ldw	r2,48(r2)
    9a8c:	e0bff415 	stw	r2,-48(fp)
    9a90:	00800084 	movi	r2,2
    9a94:	e0bff50d 	sth	r2,-44(fp)
    9a98:	00800044 	movi	r2,1
    9a9c:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    9aa0:	00800074 	movhi	r2,1
    9aa4:	1082e244 	addi	r2,r2,2953
    9aa8:	10800003 	ldbu	r2,0(r2)
    9aac:	10803fcc 	andi	r2,r2,255
    9ab0:	1005003a 	cmpeq	r2,r2,zero
    9ab4:	1000051e 	bne	r2,zero,9acc <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
    9ab8:	e17ff50b 	ldhu	r5,-44(fp)
    9abc:	e1bff583 	ldbu	r6,-42(fp)
    9ac0:	e1fffe44 	addi	r7,fp,-7
    9ac4:	e13ff417 	ldw	r4,-48(fp)
    9ac8:	0003a100 	call	3a10 <OSFlagPost>

        space--;
    9acc:	e0bff817 	ldw	r2,-32(fp)
    9ad0:	10bfffc4 	addi	r2,r2,-1
    9ad4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    9ad8:	e0bff817 	ldw	r2,-32(fp)
    9adc:	1005003a 	cmpeq	r2,r2,zero
    9ae0:	1000051e 	bne	r2,zero,9af8 <altera_avalon_jtag_uart_irq+0x25c>
    9ae4:	e0bffd17 	ldw	r2,-12(fp)
    9ae8:	10c01017 	ldw	r3,64(r2)
    9aec:	e0bffd17 	ldw	r2,-12(fp)
    9af0:	10800f17 	ldw	r2,60(r2)
    9af4:	18bfd11e 	bne	r3,r2,9a3c <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    9af8:	e0bff817 	ldw	r2,-32(fp)
    9afc:	1005003a 	cmpeq	r2,r2,zero
    9b00:	103f711e 	bne	r2,zero,98c8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    9b04:	e0bffd17 	ldw	r2,-12(fp)
    9b08:	10c00817 	ldw	r3,32(r2)
    9b0c:	00bfff44 	movi	r2,-3
    9b10:	1886703a 	and	r3,r3,r2
    9b14:	e0bffd17 	ldw	r2,-12(fp)
    9b18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9b1c:	e0bffd17 	ldw	r2,-12(fp)
    9b20:	10800017 	ldw	r2,0(r2)
    9b24:	11000104 	addi	r4,r2,4
    9b28:	e0bffd17 	ldw	r2,-12(fp)
    9b2c:	10800817 	ldw	r2,32(r2)
    9b30:	1007883a 	mov	r3,r2
    9b34:	2005883a 	mov	r2,r4
    9b38:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9b3c:	e0bffc17 	ldw	r2,-16(fp)
    9b40:	10800104 	addi	r2,r2,4
    9b44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    9b48:	003f5f06 	br	98c8 <altera_avalon_jtag_uart_irq+0x2c>
}
    9b4c:	e037883a 	mov	sp,fp
    9b50:	dfc00117 	ldw	ra,4(sp)
    9b54:	df000017 	ldw	fp,0(sp)
    9b58:	dec00204 	addi	sp,sp,8
    9b5c:	f800283a 	ret

00009b60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    9b60:	defff804 	addi	sp,sp,-32
    9b64:	dfc00715 	stw	ra,28(sp)
    9b68:	df000615 	stw	fp,24(sp)
    9b6c:	df000604 	addi	fp,sp,24
    9b70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    9b74:	e0bfff17 	ldw	r2,-4(fp)
    9b78:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    9b7c:	e0bffd17 	ldw	r2,-12(fp)
    9b80:	10800017 	ldw	r2,0(r2)
    9b84:	10800104 	addi	r2,r2,4
    9b88:	10800037 	ldwio	r2,0(r2)
    9b8c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    9b90:	e0bffc17 	ldw	r2,-16(fp)
    9b94:	1081000c 	andi	r2,r2,1024
    9b98:	1005003a 	cmpeq	r2,r2,zero
    9b9c:	10000c1e 	bne	r2,zero,9bd0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    9ba0:	e0bffd17 	ldw	r2,-12(fp)
    9ba4:	10800017 	ldw	r2,0(r2)
    9ba8:	11000104 	addi	r4,r2,4
    9bac:	e0bffd17 	ldw	r2,-12(fp)
    9bb0:	10800817 	ldw	r2,32(r2)
    9bb4:	10810014 	ori	r2,r2,1024
    9bb8:	1007883a 	mov	r3,r2
    9bbc:	2005883a 	mov	r2,r4
    9bc0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    9bc4:	e0bffd17 	ldw	r2,-12(fp)
    9bc8:	10000915 	stw	zero,36(r2)
    9bcc:	00002106 	br	9c54 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    9bd0:	e0bffd17 	ldw	r2,-12(fp)
    9bd4:	10c00917 	ldw	r3,36(r2)
    9bd8:	00a00034 	movhi	r2,32768
    9bdc:	10bfff04 	addi	r2,r2,-4
    9be0:	10c01c36 	bltu	r2,r3,9c54 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
    9be4:	e0bffd17 	ldw	r2,-12(fp)
    9be8:	10800917 	ldw	r2,36(r2)
    9bec:	10c00044 	addi	r3,r2,1
    9bf0:	e0bffd17 	ldw	r2,-12(fp)
    9bf4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    9bf8:	e0bffd17 	ldw	r2,-12(fp)
    9bfc:	10c00917 	ldw	r3,36(r2)
    9c00:	e0bffd17 	ldw	r2,-12(fp)
    9c04:	10800117 	ldw	r2,4(r2)
    9c08:	18801236 	bltu	r3,r2,9c54 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    9c0c:	e0bffd17 	ldw	r2,-12(fp)
    9c10:	10800c17 	ldw	r2,48(r2)
    9c14:	e0bffa15 	stw	r2,-24(fp)
    9c18:	00800104 	movi	r2,4
    9c1c:	e0bffb0d 	sth	r2,-20(fp)
    9c20:	00800044 	movi	r2,1
    9c24:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    9c28:	00800074 	movhi	r2,1
    9c2c:	1082e244 	addi	r2,r2,2953
    9c30:	10800003 	ldbu	r2,0(r2)
    9c34:	10803fcc 	andi	r2,r2,255
    9c38:	1005003a 	cmpeq	r2,r2,zero
    9c3c:	1000051e 	bne	r2,zero,9c54 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
    9c40:	e17ffb0b 	ldhu	r5,-20(fp)
    9c44:	e1bffb83 	ldbu	r6,-18(fp)
    9c48:	e1fffe04 	addi	r7,fp,-8
    9c4c:	e13ffa17 	ldw	r4,-24(fp)
    9c50:	0003a100 	call	3a10 <OSFlagPost>
    9c54:	00800074 	movhi	r2,1
    9c58:	1082f804 	addi	r2,r2,3040
    9c5c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    9c60:	e037883a 	mov	sp,fp
    9c64:	dfc00117 	ldw	ra,4(sp)
    9c68:	df000017 	ldw	fp,0(sp)
    9c6c:	dec00204 	addi	sp,sp,8
    9c70:	f800283a 	ret

00009c74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    9c74:	defffc04 	addi	sp,sp,-16
    9c78:	df000315 	stw	fp,12(sp)
    9c7c:	df000304 	addi	fp,sp,12
    9c80:	e13ffd15 	stw	r4,-12(fp)
    9c84:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9c88:	00000706 	br	9ca8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    9c8c:	e0bffe17 	ldw	r2,-8(fp)
    9c90:	1090000c 	andi	r2,r2,16384
    9c94:	1005003a 	cmpeq	r2,r2,zero
    9c98:	1000031e 	bne	r2,zero,9ca8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    9c9c:	00bffd44 	movi	r2,-11
    9ca0:	e0bfff15 	stw	r2,-4(fp)
    9ca4:	00000b06 	br	9cd4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9ca8:	e0bffd17 	ldw	r2,-12(fp)
    9cac:	10c01017 	ldw	r3,64(r2)
    9cb0:	e0bffd17 	ldw	r2,-12(fp)
    9cb4:	10800f17 	ldw	r2,60(r2)
    9cb8:	18800526 	beq	r3,r2,9cd0 <altera_avalon_jtag_uart_close+0x5c>
    9cbc:	e0bffd17 	ldw	r2,-12(fp)
    9cc0:	10c00917 	ldw	r3,36(r2)
    9cc4:	e0bffd17 	ldw	r2,-12(fp)
    9cc8:	10800117 	ldw	r2,4(r2)
    9ccc:	18bfef36 	bltu	r3,r2,9c8c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    9cd0:	e03fff15 	stw	zero,-4(fp)
    9cd4:	e0bfff17 	ldw	r2,-4(fp)
}
    9cd8:	e037883a 	mov	sp,fp
    9cdc:	df000017 	ldw	fp,0(sp)
    9ce0:	dec00104 	addi	sp,sp,4
    9ce4:	f800283a 	ret

00009ce8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    9ce8:	defff804 	addi	sp,sp,-32
    9cec:	df000715 	stw	fp,28(sp)
    9cf0:	df000704 	addi	fp,sp,28
    9cf4:	e13ffb15 	stw	r4,-20(fp)
    9cf8:	e17ffc15 	stw	r5,-16(fp)
    9cfc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    9d00:	00bff9c4 	movi	r2,-25
    9d04:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    9d08:	e0bffc17 	ldw	r2,-16(fp)
    9d0c:	e0bfff15 	stw	r2,-4(fp)
    9d10:	e0ffff17 	ldw	r3,-4(fp)
    9d14:	189a8060 	cmpeqi	r2,r3,27137
    9d18:	1000041e 	bne	r2,zero,9d2c <altera_avalon_jtag_uart_ioctl+0x44>
    9d1c:	e0ffff17 	ldw	r3,-4(fp)
    9d20:	189a80a0 	cmpeqi	r2,r3,27138
    9d24:	10001b1e 	bne	r2,zero,9d94 <altera_avalon_jtag_uart_ioctl+0xac>
    9d28:	00002706 	br	9dc8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    9d2c:	e0bffb17 	ldw	r2,-20(fp)
    9d30:	10c00117 	ldw	r3,4(r2)
    9d34:	00a00034 	movhi	r2,32768
    9d38:	10bfffc4 	addi	r2,r2,-1
    9d3c:	18802226 	beq	r3,r2,9dc8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    9d40:	e0bffd17 	ldw	r2,-12(fp)
    9d44:	10800017 	ldw	r2,0(r2)
    9d48:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    9d4c:	e0bff917 	ldw	r2,-28(fp)
    9d50:	10800090 	cmplti	r2,r2,2
    9d54:	1000071e 	bne	r2,zero,9d74 <altera_avalon_jtag_uart_ioctl+0x8c>
    9d58:	e0fff917 	ldw	r3,-28(fp)
    9d5c:	00a00034 	movhi	r2,32768
    9d60:	10bfffc4 	addi	r2,r2,-1
    9d64:	18800326 	beq	r3,r2,9d74 <altera_avalon_jtag_uart_ioctl+0x8c>
    9d68:	e0bff917 	ldw	r2,-28(fp)
    9d6c:	e0bffe15 	stw	r2,-8(fp)
    9d70:	00000306 	br	9d80 <altera_avalon_jtag_uart_ioctl+0x98>
    9d74:	00e00034 	movhi	r3,32768
    9d78:	18ffff84 	addi	r3,r3,-2
    9d7c:	e0fffe15 	stw	r3,-8(fp)
    9d80:	e0bffb17 	ldw	r2,-20(fp)
    9d84:	e0fffe17 	ldw	r3,-8(fp)
    9d88:	10c00115 	stw	r3,4(r2)
      rc = 0;
    9d8c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    9d90:	00000d06 	br	9dc8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    9d94:	e0bffb17 	ldw	r2,-20(fp)
    9d98:	10c00117 	ldw	r3,4(r2)
    9d9c:	00a00034 	movhi	r2,32768
    9da0:	10bfffc4 	addi	r2,r2,-1
    9da4:	18800826 	beq	r3,r2,9dc8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    9da8:	e13ffd17 	ldw	r4,-12(fp)
    9dac:	e0bffb17 	ldw	r2,-20(fp)
    9db0:	10c00917 	ldw	r3,36(r2)
    9db4:	e0bffb17 	ldw	r2,-20(fp)
    9db8:	10800117 	ldw	r2,4(r2)
    9dbc:	1885803a 	cmpltu	r2,r3,r2
    9dc0:	20800015 	stw	r2,0(r4)
      rc = 0;
    9dc4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    9dc8:	e0bffa17 	ldw	r2,-24(fp)
}
    9dcc:	e037883a 	mov	sp,fp
    9dd0:	df000017 	ldw	fp,0(sp)
    9dd4:	dec00104 	addi	sp,sp,4
    9dd8:	f800283a 	ret

00009ddc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    9ddc:	deffeb04 	addi	sp,sp,-84
    9de0:	dfc01415 	stw	ra,80(sp)
    9de4:	df001315 	stw	fp,76(sp)
    9de8:	df001304 	addi	fp,sp,76
    9dec:	e13ffb15 	stw	r4,-20(fp)
    9df0:	e17ffc15 	stw	r5,-16(fp)
    9df4:	e1bffd15 	stw	r6,-12(fp)
    9df8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    9dfc:	e0bffc17 	ldw	r2,-16(fp)
    9e00:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    9e04:	e0bffb17 	ldw	r2,-20(fp)
    9e08:	10800a17 	ldw	r2,40(r2)
    9e0c:	e0bff315 	stw	r2,-52(fp)
    9e10:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    9e14:	e17ff40b 	ldhu	r5,-48(fp)
    9e18:	e1bffa44 	addi	r6,fp,-23
    9e1c:	e13ff317 	ldw	r4,-52(fp)
    9e20:	00062a40 	call	62a4 <OSSemPend>

  while (space > 0)
    9e24:	00006406 	br	9fb8 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    9e28:	e0bffb17 	ldw	r2,-20(fp)
    9e2c:	10800d17 	ldw	r2,52(r2)
    9e30:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
    9e34:	e0bffb17 	ldw	r2,-20(fp)
    9e38:	10800e17 	ldw	r2,56(r2)
    9e3c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
    9e40:	e0fff617 	ldw	r3,-40(fp)
    9e44:	e0bff517 	ldw	r2,-44(fp)
    9e48:	18800536 	bltu	r3,r2,9e60 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
    9e4c:	e0bff617 	ldw	r2,-40(fp)
    9e50:	e0fff517 	ldw	r3,-44(fp)
    9e54:	10c5c83a 	sub	r2,r2,r3
    9e58:	e0bff715 	stw	r2,-36(fp)
    9e5c:	00000406 	br	9e70 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    9e60:	00820004 	movi	r2,2048
    9e64:	e0fff517 	ldw	r3,-44(fp)
    9e68:	10c5c83a 	sub	r2,r2,r3
    9e6c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
    9e70:	e0bff717 	ldw	r2,-36(fp)
    9e74:	1005003a 	cmpeq	r2,r2,zero
    9e78:	10001f1e 	bne	r2,zero,9ef8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    9e7c:	e0fffd17 	ldw	r3,-12(fp)
    9e80:	e0bff717 	ldw	r2,-36(fp)
    9e84:	1880022e 	bgeu	r3,r2,9e90 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
    9e88:	e0bffd17 	ldw	r2,-12(fp)
    9e8c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    9e90:	e0bffb17 	ldw	r2,-20(fp)
    9e94:	10c01104 	addi	r3,r2,68
    9e98:	e0bff517 	ldw	r2,-44(fp)
    9e9c:	1887883a 	add	r3,r3,r2
    9ea0:	e0bff917 	ldw	r2,-28(fp)
    9ea4:	1009883a 	mov	r4,r2
    9ea8:	180b883a 	mov	r5,r3
    9eac:	e1bff717 	ldw	r6,-36(fp)
    9eb0:	000d0dc0 	call	d0dc <memcpy>
      ptr   += n;
    9eb4:	e0fff717 	ldw	r3,-36(fp)
    9eb8:	e0bff917 	ldw	r2,-28(fp)
    9ebc:	10c5883a 	add	r2,r2,r3
    9ec0:	e0bff915 	stw	r2,-28(fp)
      space -= n;
    9ec4:	e0fffd17 	ldw	r3,-12(fp)
    9ec8:	e0bff717 	ldw	r2,-36(fp)
    9ecc:	1885c83a 	sub	r2,r3,r2
    9ed0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9ed4:	e0fff517 	ldw	r3,-44(fp)
    9ed8:	e0bff717 	ldw	r2,-36(fp)
    9edc:	1885883a 	add	r2,r3,r2
    9ee0:	10c1ffcc 	andi	r3,r2,2047
    9ee4:	e0bffb17 	ldw	r2,-20(fp)
    9ee8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    9eec:	e0bffd17 	ldw	r2,-12(fp)
    9ef0:	10800048 	cmpgei	r2,r2,1
    9ef4:	103fcc1e 	bne	r2,zero,9e28 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
    9ef8:	e0fff917 	ldw	r3,-28(fp)
    9efc:	e0bffc17 	ldw	r2,-16(fp)
    9f00:	1880301e 	bne	r3,r2,9fc4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    9f04:	e0bffe17 	ldw	r2,-8(fp)
    9f08:	1090000c 	andi	r2,r2,16384
    9f0c:	1004c03a 	cmpne	r2,r2,zero
    9f10:	10002c1e 	bne	r2,zero,9fc4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    9f14:	00800074 	movhi	r2,1
    9f18:	1082e244 	addi	r2,r2,2953
    9f1c:	10800003 	ldbu	r2,0(r2)
    9f20:	10803fcc 	andi	r2,r2,255
    9f24:	10800058 	cmpnei	r2,r2,1
    9f28:	1000161e 	bne	r2,zero,9f84 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    9f2c:	e0bffb17 	ldw	r2,-20(fp)
    9f30:	10800c17 	ldw	r2,48(r2)
    9f34:	e0bff015 	stw	r2,-64(fp)
    9f38:	00800144 	movi	r2,5
    9f3c:	e0bff10d 	sth	r2,-60(fp)
    9f40:	00bfe0c4 	movi	r2,-125
    9f44:	e0bff185 	stb	r2,-58(fp)
    9f48:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    9f4c:	00800074 	movhi	r2,1
    9f50:	1082e244 	addi	r2,r2,2953
    9f54:	10800003 	ldbu	r2,0(r2)
    9f58:	10803fcc 	andi	r2,r2,255
    9f5c:	1005003a 	cmpeq	r2,r2,zero
    9f60:	1000111e 	bne	r2,zero,9fa8 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    9f64:	e17ff10b 	ldhu	r5,-60(fp)
    9f68:	e1bff183 	ldbu	r6,-58(fp)
    9f6c:	e1fff20b 	ldhu	r7,-56(fp)
    9f70:	e0bffa04 	addi	r2,fp,-24
    9f74:	d8800015 	stw	r2,0(sp)
    9f78:	e13ff017 	ldw	r4,-64(fp)
    9f7c:	00033640 	call	3364 <OSFlagPend>
    return err;
    9f80:	00000906 	br	9fa8 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    9f84:	e0bffb17 	ldw	r2,-20(fp)
    9f88:	10c00d17 	ldw	r3,52(r2)
    9f8c:	e0bff617 	ldw	r2,-40(fp)
    9f90:	1880051e 	bne	r3,r2,9fa8 <altera_avalon_jtag_uart_read+0x1cc>
    9f94:	e0bffb17 	ldw	r2,-20(fp)
    9f98:	10c00917 	ldw	r3,36(r2)
    9f9c:	e0bffb17 	ldw	r2,-20(fp)
    9fa0:	10800117 	ldw	r2,4(r2)
    9fa4:	18bff736 	bltu	r3,r2,9f84 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    9fa8:	e0bffb17 	ldw	r2,-20(fp)
    9fac:	10c00d17 	ldw	r3,52(r2)
    9fb0:	e0bff617 	ldw	r2,-40(fp)
    9fb4:	18800326 	beq	r3,r2,9fc4 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    9fb8:	e0bffd17 	ldw	r2,-12(fp)
    9fbc:	10800048 	cmpgei	r2,r2,1
    9fc0:	103f991e 	bne	r2,zero,9e28 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    9fc4:	e0bffb17 	ldw	r2,-20(fp)
    9fc8:	11000a17 	ldw	r4,40(r2)
    9fcc:	000669c0 	call	669c <OSSemPost>

  if (ptr != buffer)
    9fd0:	e0fff917 	ldw	r3,-28(fp)
    9fd4:	e0bffc17 	ldw	r2,-16(fp)
    9fd8:	18801926 	beq	r3,r2,a040 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9fdc:	0005303a 	rdctl	r2,status
    9fe0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9fe4:	e0ffef17 	ldw	r3,-68(fp)
    9fe8:	00bfff84 	movi	r2,-2
    9fec:	1884703a 	and	r2,r3,r2
    9ff0:	1001703a 	wrctl	status,r2
  
  return context;
    9ff4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    9ff8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    9ffc:	e0bffb17 	ldw	r2,-20(fp)
    a000:	10800817 	ldw	r2,32(r2)
    a004:	10c00054 	ori	r3,r2,1
    a008:	e0bffb17 	ldw	r2,-20(fp)
    a00c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a010:	e0bffb17 	ldw	r2,-20(fp)
    a014:	10800017 	ldw	r2,0(r2)
    a018:	11000104 	addi	r4,r2,4
    a01c:	e0bffb17 	ldw	r2,-20(fp)
    a020:	10800817 	ldw	r2,32(r2)
    a024:	1007883a 	mov	r3,r2
    a028:	2005883a 	mov	r2,r4
    a02c:	10c00035 	stwio	r3,0(r2)
    a030:	e0bff817 	ldw	r2,-32(fp)
    a034:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a038:	e0bfee17 	ldw	r2,-72(fp)
    a03c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    a040:	e0fff917 	ldw	r3,-28(fp)
    a044:	e0bffc17 	ldw	r2,-16(fp)
    a048:	18800526 	beq	r3,r2,a060 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
    a04c:	e0fff917 	ldw	r3,-28(fp)
    a050:	e0bffc17 	ldw	r2,-16(fp)
    a054:	1887c83a 	sub	r3,r3,r2
    a058:	e0ffff15 	stw	r3,-4(fp)
    a05c:	00000906 	br	a084 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    a060:	e0bffe17 	ldw	r2,-8(fp)
    a064:	1090000c 	andi	r2,r2,16384
    a068:	1005003a 	cmpeq	r2,r2,zero
    a06c:	1000031e 	bne	r2,zero,a07c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
    a070:	00bffd44 	movi	r2,-11
    a074:	e0bfff15 	stw	r2,-4(fp)
    a078:	00000206 	br	a084 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    a07c:	00bffec4 	movi	r2,-5
    a080:	e0bfff15 	stw	r2,-4(fp)
    a084:	e0bfff17 	ldw	r2,-4(fp)
}
    a088:	e037883a 	mov	sp,fp
    a08c:	dfc00117 	ldw	ra,4(sp)
    a090:	df000017 	ldw	fp,0(sp)
    a094:	dec00204 	addi	sp,sp,8
    a098:	f800283a 	ret

0000a09c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a09c:	deffeb04 	addi	sp,sp,-84
    a0a0:	dfc01415 	stw	ra,80(sp)
    a0a4:	df001315 	stw	fp,76(sp)
    a0a8:	df001304 	addi	fp,sp,76
    a0ac:	e13ffb15 	stw	r4,-20(fp)
    a0b0:	e17ffc15 	stw	r5,-16(fp)
    a0b4:	e1bffd15 	stw	r6,-12(fp)
    a0b8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    a0bc:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    a0c0:	e0bffc17 	ldw	r2,-16(fp)
    a0c4:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    a0c8:	e0bffb17 	ldw	r2,-20(fp)
    a0cc:	10800b17 	ldw	r2,44(r2)
    a0d0:	e0bff315 	stw	r2,-52(fp)
    a0d4:	e03ff40d 	sth	zero,-48(fp)
    a0d8:	e17ff40b 	ldhu	r5,-48(fp)
    a0dc:	e1bffa04 	addi	r6,fp,-24
    a0e0:	e13ff317 	ldw	r4,-52(fp)
    a0e4:	00062a40 	call	62a4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    a0e8:	00003a06 	br	a1d4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    a0ec:	e0bffb17 	ldw	r2,-20(fp)
    a0f0:	10800f17 	ldw	r2,60(r2)
    a0f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    a0f8:	e0bffb17 	ldw	r2,-20(fp)
    a0fc:	10801017 	ldw	r2,64(r2)
    a100:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
    a104:	e0fff917 	ldw	r3,-28(fp)
    a108:	e0bff817 	ldw	r2,-32(fp)
    a10c:	1880062e 	bgeu	r3,r2,a128 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
    a110:	e0fff817 	ldw	r3,-32(fp)
    a114:	e0bff917 	ldw	r2,-28(fp)
    a118:	1885c83a 	sub	r2,r3,r2
    a11c:	10bfffc4 	addi	r2,r2,-1
    a120:	e0bff715 	stw	r2,-36(fp)
    a124:	00000c06 	br	a158 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
    a128:	e0bff817 	ldw	r2,-32(fp)
    a12c:	1005003a 	cmpeq	r2,r2,zero
    a130:	1000051e 	bne	r2,zero,a148 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    a134:	00820004 	movi	r2,2048
    a138:	e0fff917 	ldw	r3,-28(fp)
    a13c:	10c5c83a 	sub	r2,r2,r3
    a140:	e0bff715 	stw	r2,-36(fp)
    a144:	00000406 	br	a158 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    a148:	0081ffc4 	movi	r2,2047
    a14c:	e0fff917 	ldw	r3,-28(fp)
    a150:	10c5c83a 	sub	r2,r2,r3
    a154:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
    a158:	e0bff717 	ldw	r2,-36(fp)
    a15c:	1005003a 	cmpeq	r2,r2,zero
    a160:	10001f1e 	bne	r2,zero,a1e0 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
    a164:	e0fffd17 	ldw	r3,-12(fp)
    a168:	e0bff717 	ldw	r2,-36(fp)
    a16c:	1880022e 	bgeu	r3,r2,a178 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    a170:	e0bffd17 	ldw	r2,-12(fp)
    a174:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    a178:	e0bffb17 	ldw	r2,-20(fp)
    a17c:	10c21104 	addi	r3,r2,2116
    a180:	e0bff917 	ldw	r2,-28(fp)
    a184:	1885883a 	add	r2,r3,r2
    a188:	e0fffc17 	ldw	r3,-16(fp)
    a18c:	1009883a 	mov	r4,r2
    a190:	180b883a 	mov	r5,r3
    a194:	e1bff717 	ldw	r6,-36(fp)
    a198:	000d0dc0 	call	d0dc <memcpy>
      ptr   += n;
    a19c:	e0fff717 	ldw	r3,-36(fp)
    a1a0:	e0bffc17 	ldw	r2,-16(fp)
    a1a4:	10c5883a 	add	r2,r2,r3
    a1a8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    a1ac:	e0fffd17 	ldw	r3,-12(fp)
    a1b0:	e0bff717 	ldw	r2,-36(fp)
    a1b4:	1885c83a 	sub	r2,r3,r2
    a1b8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a1bc:	e0fff917 	ldw	r3,-28(fp)
    a1c0:	e0bff717 	ldw	r2,-36(fp)
    a1c4:	1885883a 	add	r2,r3,r2
    a1c8:	10c1ffcc 	andi	r3,r2,2047
    a1cc:	e0bffb17 	ldw	r2,-20(fp)
    a1d0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    a1d4:	e0bffd17 	ldw	r2,-12(fp)
    a1d8:	10800048 	cmpgei	r2,r2,1
    a1dc:	103fc31e 	bne	r2,zero,a0ec <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1e0:	0005303a 	rdctl	r2,status
    a1e4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1e8:	e0fff217 	ldw	r3,-56(fp)
    a1ec:	00bfff84 	movi	r2,-2
    a1f0:	1884703a 	and	r2,r3,r2
    a1f4:	1001703a 	wrctl	status,r2
  
  return context;
    a1f8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    a1fc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a200:	e0bffb17 	ldw	r2,-20(fp)
    a204:	10800817 	ldw	r2,32(r2)
    a208:	10c00094 	ori	r3,r2,2
    a20c:	e0bffb17 	ldw	r2,-20(fp)
    a210:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a214:	e0bffb17 	ldw	r2,-20(fp)
    a218:	10800017 	ldw	r2,0(r2)
    a21c:	11000104 	addi	r4,r2,4
    a220:	e0bffb17 	ldw	r2,-20(fp)
    a224:	10800817 	ldw	r2,32(r2)
    a228:	1007883a 	mov	r3,r2
    a22c:	2005883a 	mov	r2,r4
    a230:	10c00035 	stwio	r3,0(r2)
    a234:	e0bff617 	ldw	r2,-40(fp)
    a238:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a23c:	e0bff117 	ldw	r2,-60(fp)
    a240:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    a244:	e0bffd17 	ldw	r2,-12(fp)
    a248:	10800050 	cmplti	r2,r2,1
    a24c:	10002d1e 	bne	r2,zero,a304 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
    a250:	e0bffe17 	ldw	r2,-8(fp)
    a254:	1090000c 	andi	r2,r2,16384
    a258:	1004c03a 	cmpne	r2,r2,zero
    a25c:	10002c1e 	bne	r2,zero,a310 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    a260:	00800074 	movhi	r2,1
    a264:	1082e244 	addi	r2,r2,2953
    a268:	10800003 	ldbu	r2,0(r2)
    a26c:	10803fcc 	andi	r2,r2,255
    a270:	10800058 	cmpnei	r2,r2,1
    a274:	1000161e 	bne	r2,zero,a2d0 <altera_avalon_jtag_uart_write+0x234>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    a278:	e0bffb17 	ldw	r2,-20(fp)
    a27c:	10800c17 	ldw	r2,48(r2)
    a280:	e0bfee15 	stw	r2,-72(fp)
    a284:	00800184 	movi	r2,6
    a288:	e0bfef0d 	sth	r2,-68(fp)
    a28c:	00bfe0c4 	movi	r2,-125
    a290:	e0bfef85 	stb	r2,-66(fp)
    a294:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    a298:	00800074 	movhi	r2,1
    a29c:	1082e244 	addi	r2,r2,2953
    a2a0:	10800003 	ldbu	r2,0(r2)
    a2a4:	10803fcc 	andi	r2,r2,255
    a2a8:	1005003a 	cmpeq	r2,r2,zero
    a2ac:	1000111e 	bne	r2,zero,a2f4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    a2b0:	e17fef0b 	ldhu	r5,-68(fp)
    a2b4:	e1bfef83 	ldbu	r6,-66(fp)
    a2b8:	e1fff00b 	ldhu	r7,-64(fp)
    a2bc:	e0bffa44 	addi	r2,fp,-23
    a2c0:	d8800015 	stw	r2,0(sp)
    a2c4:	e13fee17 	ldw	r4,-72(fp)
    a2c8:	00033640 	call	3364 <OSFlagPend>
    return err;
    a2cc:	00000906 	br	a2f4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    a2d0:	e0bffb17 	ldw	r2,-20(fp)
    a2d4:	10c01017 	ldw	r3,64(r2)
    a2d8:	e0bff817 	ldw	r2,-32(fp)
    a2dc:	1880051e 	bne	r3,r2,a2f4 <altera_avalon_jtag_uart_write+0x258>
    a2e0:	e0bffb17 	ldw	r2,-20(fp)
    a2e4:	10c00917 	ldw	r3,36(r2)
    a2e8:	e0bffb17 	ldw	r2,-20(fp)
    a2ec:	10800117 	ldw	r2,4(r2)
    a2f0:	18bff736 	bltu	r3,r2,a2d0 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    a2f4:	e0bffb17 	ldw	r2,-20(fp)
    a2f8:	10c01017 	ldw	r3,64(r2)
    a2fc:	e0bff817 	ldw	r2,-32(fp)
    a300:	18800326 	beq	r3,r2,a310 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
    a304:	e0bffd17 	ldw	r2,-12(fp)
    a308:	10800048 	cmpgei	r2,r2,1
    a30c:	103fb11e 	bne	r2,zero,a1d4 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    a310:	e0bffb17 	ldw	r2,-20(fp)
    a314:	11000b17 	ldw	r4,44(r2)
    a318:	000669c0 	call	669c <OSSemPost>

  if (ptr != start)
    a31c:	e0fffc17 	ldw	r3,-16(fp)
    a320:	e0bff517 	ldw	r2,-44(fp)
    a324:	18800526 	beq	r3,r2,a33c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
    a328:	e0fffc17 	ldw	r3,-16(fp)
    a32c:	e0bff517 	ldw	r2,-44(fp)
    a330:	1887c83a 	sub	r3,r3,r2
    a334:	e0ffff15 	stw	r3,-4(fp)
    a338:	00000906 	br	a360 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
    a33c:	e0bffe17 	ldw	r2,-8(fp)
    a340:	1090000c 	andi	r2,r2,16384
    a344:	1005003a 	cmpeq	r2,r2,zero
    a348:	1000031e 	bne	r2,zero,a358 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
    a34c:	00bffd44 	movi	r2,-11
    a350:	e0bfff15 	stw	r2,-4(fp)
    a354:	00000206 	br	a360 <altera_avalon_jtag_uart_write+0x2c4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    a358:	00bffec4 	movi	r2,-5
    a35c:	e0bfff15 	stw	r2,-4(fp)
    a360:	e0bfff17 	ldw	r2,-4(fp)
}
    a364:	e037883a 	mov	sp,fp
    a368:	dfc00117 	ldw	ra,4(sp)
    a36c:	df000017 	ldw	fp,0(sp)
    a370:	dec00204 	addi	sp,sp,8
    a374:	f800283a 	ret

0000a378 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    a378:	defffa04 	addi	sp,sp,-24
    a37c:	dfc00515 	stw	ra,20(sp)
    a380:	df000415 	stw	fp,16(sp)
    a384:	df000404 	addi	fp,sp,16
    a388:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    a38c:	e0bfff17 	ldw	r2,-4(fp)
    a390:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    a394:	e0bfff17 	ldw	r2,-4(fp)
    a398:	10800104 	addi	r2,r2,4
    a39c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a3a0:	0005303a 	rdctl	r2,status
    a3a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a3a8:	e0fffd17 	ldw	r3,-12(fp)
    a3ac:	00bfff84 	movi	r2,-2
    a3b0:	1884703a 	and	r2,r3,r2
    a3b4:	1001703a 	wrctl	status,r2
  
  return context;
    a3b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    a3bc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    a3c0:	000c5140 	call	c514 <alt_tick>
    a3c4:	e0bffe17 	ldw	r2,-8(fp)
    a3c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a3cc:	e0bffc17 	ldw	r2,-16(fp)
    a3d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    a3d4:	e037883a 	mov	sp,fp
    a3d8:	dfc00117 	ldw	ra,4(sp)
    a3dc:	df000017 	ldw	fp,0(sp)
    a3e0:	dec00204 	addi	sp,sp,8
    a3e4:	f800283a 	ret

0000a3e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    a3e8:	defff804 	addi	sp,sp,-32
    a3ec:	dfc00715 	stw	ra,28(sp)
    a3f0:	df000615 	stw	fp,24(sp)
    a3f4:	df000604 	addi	fp,sp,24
    a3f8:	e13ffc15 	stw	r4,-16(fp)
    a3fc:	e17ffd15 	stw	r5,-12(fp)
    a400:	e1bffe15 	stw	r6,-8(fp)
    a404:	e1ffff15 	stw	r7,-4(fp)
    a408:	e0bfff17 	ldw	r2,-4(fp)
    a40c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    a410:	00800074 	movhi	r2,1
    a414:	1082f804 	addi	r2,r2,3040
    a418:	10800017 	ldw	r2,0(r2)
    a41c:	1004c03a 	cmpne	r2,r2,zero
    a420:	1000041e 	bne	r2,zero,a434 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    a424:	00c00074 	movhi	r3,1
    a428:	18c2f804 	addi	r3,r3,3040
    a42c:	e0bffb17 	ldw	r2,-20(fp)
    a430:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    a434:	e0bffc17 	ldw	r2,-16(fp)
    a438:	10800104 	addi	r2,r2,4
    a43c:	1007883a 	mov	r3,r2
    a440:	008001c4 	movi	r2,7
    a444:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    a448:	d8000015 	stw	zero,0(sp)
    a44c:	e13ffd17 	ldw	r4,-12(fp)
    a450:	e17ffe17 	ldw	r5,-8(fp)
    a454:	01800074 	movhi	r6,1
    a458:	31a8de04 	addi	r6,r6,-23688
    a45c:	e1fffc17 	ldw	r7,-16(fp)
    a460:	000bd040 	call	bd04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    a464:	e037883a 	mov	sp,fp
    a468:	dfc00117 	ldw	ra,4(sp)
    a46c:	df000017 	ldw	fp,0(sp)
    a470:	dec00204 	addi	sp,sp,8
    a474:	f800283a 	ret

0000a478 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a478:	defffa04 	addi	sp,sp,-24
    a47c:	dfc00515 	stw	ra,20(sp)
    a480:	df000415 	stw	fp,16(sp)
    a484:	df000404 	addi	fp,sp,16
    a488:	e13ffd15 	stw	r4,-12(fp)
    a48c:	e17ffe15 	stw	r5,-8(fp)
    a490:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    a494:	e0bffd17 	ldw	r2,-12(fp)
    a498:	10800017 	ldw	r2,0(r2)
    a49c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    a4a0:	e0bffc17 	ldw	r2,-16(fp)
    a4a4:	11000a04 	addi	r4,r2,40
    a4a8:	e0bffd17 	ldw	r2,-12(fp)
    a4ac:	11c00217 	ldw	r7,8(r2)
    a4b0:	e17ffe17 	ldw	r5,-8(fp)
    a4b4:	e1bfff17 	ldw	r6,-4(fp)
    a4b8:	000aaec0 	call	aaec <altera_avalon_uart_read>
      fd->fd_flags);
}
    a4bc:	e037883a 	mov	sp,fp
    a4c0:	dfc00117 	ldw	ra,4(sp)
    a4c4:	df000017 	ldw	fp,0(sp)
    a4c8:	dec00204 	addi	sp,sp,8
    a4cc:	f800283a 	ret

0000a4d0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a4d0:	defffa04 	addi	sp,sp,-24
    a4d4:	dfc00515 	stw	ra,20(sp)
    a4d8:	df000415 	stw	fp,16(sp)
    a4dc:	df000404 	addi	fp,sp,16
    a4e0:	e13ffd15 	stw	r4,-12(fp)
    a4e4:	e17ffe15 	stw	r5,-8(fp)
    a4e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    a4ec:	e0bffd17 	ldw	r2,-12(fp)
    a4f0:	10800017 	ldw	r2,0(r2)
    a4f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    a4f8:	e0bffc17 	ldw	r2,-16(fp)
    a4fc:	11000a04 	addi	r4,r2,40
    a500:	e0bffd17 	ldw	r2,-12(fp)
    a504:	11c00217 	ldw	r7,8(r2)
    a508:	e17ffe17 	ldw	r5,-8(fp)
    a50c:	e1bfff17 	ldw	r6,-4(fp)
    a510:	000adfc0 	call	adfc <altera_avalon_uart_write>
      fd->fd_flags);
}
    a514:	e037883a 	mov	sp,fp
    a518:	dfc00117 	ldw	ra,4(sp)
    a51c:	df000017 	ldw	fp,0(sp)
    a520:	dec00204 	addi	sp,sp,8
    a524:	f800283a 	ret

0000a528 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    a528:	defffc04 	addi	sp,sp,-16
    a52c:	dfc00315 	stw	ra,12(sp)
    a530:	df000215 	stw	fp,8(sp)
    a534:	df000204 	addi	fp,sp,8
    a538:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    a53c:	e0bfff17 	ldw	r2,-4(fp)
    a540:	10800017 	ldw	r2,0(r2)
    a544:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    a548:	e0bffe17 	ldw	r2,-8(fp)
    a54c:	11000a04 	addi	r4,r2,40
    a550:	e0bfff17 	ldw	r2,-4(fp)
    a554:	11400217 	ldw	r5,8(r2)
    a558:	000aa8c0 	call	aa8c <altera_avalon_uart_close>
}
    a55c:	e037883a 	mov	sp,fp
    a560:	dfc00117 	ldw	ra,4(sp)
    a564:	df000017 	ldw	fp,0(sp)
    a568:	dec00204 	addi	sp,sp,8
    a56c:	f800283a 	ret

0000a570 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    a570:	deffee04 	addi	sp,sp,-72
    a574:	dfc01115 	stw	ra,68(sp)
    a578:	df001015 	stw	fp,64(sp)
    a57c:	df001004 	addi	fp,sp,64
    a580:	e13ffa15 	stw	r4,-24(fp)
    a584:	e17ffb15 	stw	r5,-20(fp)
    a588:	e1bffc15 	stw	r6,-16(fp)
  void* base = sp->base;
    a58c:	e0bffa17 	ldw	r2,-24(fp)
    a590:	10800017 	ldw	r2,0(r2)
    a594:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    a598:	e0bffa17 	ldw	r2,-24(fp)
    a59c:	10800704 	addi	r2,r2,28
    a5a0:	e0bff515 	stw	r2,-44(fp)
    a5a4:	e03ff60d 	sth	zero,-40(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    a5a8:	e13ff60b 	ldhu	r4,-40(fp)
    a5ac:	e17ff904 	addi	r5,fp,-28
    a5b0:	0002ce80 	call	2ce8 <OSFlagCreate>
    a5b4:	1007883a 	mov	r3,r2
    a5b8:	e0bff517 	ldw	r2,-44(fp)
    a5bc:	10c00015 	stw	r3,0(r2)
  return err;
    a5c0:	e0bff903 	ldbu	r2,-28(fp)
    a5c4:	10803fcc 	andi	r2,r2,255
    a5c8:	1004c03a 	cmpne	r2,r2,zero
    a5cc:	10002a1e 	bne	r2,zero,a678 <altera_avalon_uart_init+0x108>
    a5d0:	e0bffa17 	ldw	r2,-24(fp)
    a5d4:	10800804 	addi	r2,r2,32
    a5d8:	e0bff315 	stw	r2,-52(fp)
    a5dc:	00800044 	movi	r2,1
    a5e0:	e0bff40d 	sth	r2,-48(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    a5e4:	e13ff40b 	ldhu	r4,-48(fp)
    a5e8:	0005ef00 	call	5ef0 <OSSemCreate>
    a5ec:	1007883a 	mov	r3,r2
    a5f0:	e0bff317 	ldw	r2,-52(fp)
    a5f4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    a5f8:	e0bff317 	ldw	r2,-52(fp)
    a5fc:	10800017 	ldw	r2,0(r2)
    a600:	1005003a 	cmpeq	r2,r2,zero
    a604:	1000021e 	bne	r2,zero,a610 <altera_avalon_uart_init+0xa0>
    a608:	e03ffe15 	stw	zero,-8(fp)
    a60c:	00000206 	br	a618 <altera_avalon_uart_init+0xa8>
    a610:	00bfffc4 	movi	r2,-1
    a614:	e0bffe15 	stw	r2,-8(fp)
    a618:	e0bffe17 	ldw	r2,-8(fp)
    a61c:	1004c03a 	cmpne	r2,r2,zero
    a620:	1000151e 	bne	r2,zero,a678 <altera_avalon_uart_init+0x108>
    a624:	e0bffa17 	ldw	r2,-24(fp)
    a628:	10800904 	addi	r2,r2,36
    a62c:	e0bff115 	stw	r2,-60(fp)
    a630:	00800044 	movi	r2,1
    a634:	e0bff20d 	sth	r2,-56(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    a638:	e13ff20b 	ldhu	r4,-56(fp)
    a63c:	0005ef00 	call	5ef0 <OSSemCreate>
    a640:	1007883a 	mov	r3,r2
    a644:	e0bff117 	ldw	r2,-60(fp)
    a648:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    a64c:	e0bff117 	ldw	r2,-60(fp)
    a650:	10800017 	ldw	r2,0(r2)
    a654:	1005003a 	cmpeq	r2,r2,zero
    a658:	1000021e 	bne	r2,zero,a664 <altera_avalon_uart_init+0xf4>
    a65c:	e03ffd15 	stw	zero,-12(fp)
    a660:	00000206 	br	a66c <altera_avalon_uart_init+0xfc>
    a664:	00bfffc4 	movi	r2,-1
    a668:	e0bffd15 	stw	r2,-12(fp)
    a66c:	e0bffd17 	ldw	r2,-12(fp)
    a670:	1005003a 	cmpeq	r2,r2,zero
    a674:	1000031e 	bne	r2,zero,a684 <altera_avalon_uart_init+0x114>
    a678:	00800044 	movi	r2,1
    a67c:	e0bfff15 	stw	r2,-4(fp)
    a680:	00000106 	br	a688 <altera_avalon_uart_init+0x118>
    a684:	e03fff15 	stw	zero,-4(fp)
    a688:	e0bfff17 	ldw	r2,-4(fp)
    a68c:	e0bff715 	stw	r2,-36(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    a690:	e0bff717 	ldw	r2,-36(fp)
    a694:	1004c03a 	cmpne	r2,r2,zero
    a698:	1000111e 	bne	r2,zero,a6e0 <altera_avalon_uart_init+0x170>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    a69c:	e0fffa17 	ldw	r3,-24(fp)
    a6a0:	00832004 	movi	r2,3200
    a6a4:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    a6a8:	e0bff817 	ldw	r2,-32(fp)
    a6ac:	11000304 	addi	r4,r2,12
    a6b0:	e0bffa17 	ldw	r2,-24(fp)
    a6b4:	10800117 	ldw	r2,4(r2)
    a6b8:	1007883a 	mov	r3,r2
    a6bc:	2005883a 	mov	r2,r4
    a6c0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    a6c4:	d8000015 	stw	zero,0(sp)
    a6c8:	e13ffb17 	ldw	r4,-20(fp)
    a6cc:	e17ffc17 	ldw	r5,-16(fp)
    a6d0:	01800074 	movhi	r6,1
    a6d4:	31a9bd04 	addi	r6,r6,-22796
    a6d8:	e1fffa17 	ldw	r7,-24(fp)
    a6dc:	000bd040 	call	bd04 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    a6e0:	e037883a 	mov	sp,fp
    a6e4:	dfc00117 	ldw	ra,4(sp)
    a6e8:	df000017 	ldw	fp,0(sp)
    a6ec:	dec00204 	addi	sp,sp,8
    a6f0:	f800283a 	ret

0000a6f4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    a6f4:	defffa04 	addi	sp,sp,-24
    a6f8:	dfc00515 	stw	ra,20(sp)
    a6fc:	df000415 	stw	fp,16(sp)
    a700:	df000404 	addi	fp,sp,16
    a704:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    a708:	e0bfff17 	ldw	r2,-4(fp)
    a70c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    a710:	e0bffd17 	ldw	r2,-12(fp)
    a714:	10800017 	ldw	r2,0(r2)
    a718:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    a71c:	e0bffc17 	ldw	r2,-16(fp)
    a720:	10800204 	addi	r2,r2,8
    a724:	10800037 	ldwio	r2,0(r2)
    a728:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    a72c:	e0bffc17 	ldw	r2,-16(fp)
    a730:	10800204 	addi	r2,r2,8
    a734:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    a738:	e0bffc17 	ldw	r2,-16(fp)
    a73c:	10800204 	addi	r2,r2,8
    a740:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    a744:	e0bffe17 	ldw	r2,-8(fp)
    a748:	1080200c 	andi	r2,r2,128
    a74c:	1005003a 	cmpeq	r2,r2,zero
    a750:	1000031e 	bne	r2,zero,a760 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    a754:	e13ffd17 	ldw	r4,-12(fp)
    a758:	e17ffe17 	ldw	r5,-8(fp)
    a75c:	000a7900 	call	a790 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    a760:	e0bffe17 	ldw	r2,-8(fp)
    a764:	1081100c 	andi	r2,r2,1088
    a768:	1005003a 	cmpeq	r2,r2,zero
    a76c:	1000031e 	bne	r2,zero,a77c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    a770:	e13ffd17 	ldw	r4,-12(fp)
    a774:	e17ffe17 	ldw	r5,-8(fp)
    a778:	000a8cc0 	call	a8cc <altera_avalon_uart_txirq>
  }
  

}
    a77c:	e037883a 	mov	sp,fp
    a780:	dfc00117 	ldw	ra,4(sp)
    a784:	df000017 	ldw	fp,0(sp)
    a788:	dec00204 	addi	sp,sp,8
    a78c:	f800283a 	ret

0000a790 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    a790:	defff804 	addi	sp,sp,-32
    a794:	dfc00715 	stw	ra,28(sp)
    a798:	df000615 	stw	fp,24(sp)
    a79c:	df000604 	addi	fp,sp,24
    a7a0:	e13ffe15 	stw	r4,-8(fp)
    a7a4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    a7a8:	e0bfff17 	ldw	r2,-4(fp)
    a7ac:	108000cc 	andi	r2,r2,3
    a7b0:	1004c03a 	cmpne	r2,r2,zero
    a7b4:	1000401e 	bne	r2,zero,a8b8 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    a7b8:	e0bffe17 	ldw	r2,-8(fp)
    a7bc:	10c00317 	ldw	r3,12(r2)
    a7c0:	e0bffe17 	ldw	r2,-8(fp)
    a7c4:	10800217 	ldw	r2,8(r2)
    a7c8:	1880121e 	bne	r3,r2,a814 <altera_avalon_uart_rxirq+0x84>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
    a7cc:	e0bffe17 	ldw	r2,-8(fp)
    a7d0:	10800717 	ldw	r2,28(r2)
    a7d4:	e0bffa15 	stw	r2,-24(fp)
    a7d8:	00800044 	movi	r2,1
    a7dc:	e0bffb0d 	sth	r2,-20(fp)
    a7e0:	00800044 	movi	r2,1
    a7e4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    a7e8:	00800074 	movhi	r2,1
    a7ec:	1082e244 	addi	r2,r2,2953
    a7f0:	10800003 	ldbu	r2,0(r2)
    a7f4:	10803fcc 	andi	r2,r2,255
    a7f8:	1005003a 	cmpeq	r2,r2,zero
    a7fc:	1000051e 	bne	r2,zero,a814 <altera_avalon_uart_rxirq+0x84>
  {
    OSFlagPost (group, flags, opt, &err);
    a800:	e17ffb0b 	ldhu	r5,-20(fp)
    a804:	e1bffb83 	ldbu	r6,-18(fp)
    a808:	e1fffd04 	addi	r7,fp,-12
    a80c:	e13ffa17 	ldw	r4,-24(fp)
    a810:	0003a100 	call	3a10 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    a814:	e0bffe17 	ldw	r2,-8(fp)
    a818:	10800317 	ldw	r2,12(r2)
    a81c:	10800044 	addi	r2,r2,1
    a820:	10800fcc 	andi	r2,r2,63
    a824:	e0bffc15 	stw	r2,-16(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    a828:	e0bffe17 	ldw	r2,-8(fp)
    a82c:	11000317 	ldw	r4,12(r2)
    a830:	e0bffe17 	ldw	r2,-8(fp)
    a834:	10800017 	ldw	r2,0(r2)
    a838:	10800037 	ldwio	r2,0(r2)
    a83c:	1007883a 	mov	r3,r2
    a840:	e0bffe17 	ldw	r2,-8(fp)
    a844:	2085883a 	add	r2,r4,r2
    a848:	10800a04 	addi	r2,r2,40
    a84c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    a850:	e0fffe17 	ldw	r3,-8(fp)
    a854:	e0bffc17 	ldw	r2,-16(fp)
    a858:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    a85c:	e0bffe17 	ldw	r2,-8(fp)
    a860:	10800317 	ldw	r2,12(r2)
    a864:	10800044 	addi	r2,r2,1
    a868:	10800fcc 	andi	r2,r2,63
    a86c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    a870:	e0bffe17 	ldw	r2,-8(fp)
    a874:	10c00217 	ldw	r3,8(r2)
    a878:	e0bffc17 	ldw	r2,-16(fp)
    a87c:	18800e1e 	bne	r3,r2,a8b8 <altera_avalon_uart_rxirq+0x128>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    a880:	e0bffe17 	ldw	r2,-8(fp)
    a884:	10c00117 	ldw	r3,4(r2)
    a888:	00bfdfc4 	movi	r2,-129
    a88c:	1886703a 	and	r3,r3,r2
    a890:	e0bffe17 	ldw	r2,-8(fp)
    a894:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    a898:	e0bffe17 	ldw	r2,-8(fp)
    a89c:	10800017 	ldw	r2,0(r2)
    a8a0:	11000304 	addi	r4,r2,12
    a8a4:	e0bffe17 	ldw	r2,-8(fp)
    a8a8:	10800117 	ldw	r2,4(r2)
    a8ac:	1007883a 	mov	r3,r2
    a8b0:	2005883a 	mov	r2,r4
    a8b4:	10c00035 	stwio	r3,0(r2)
  }   
}
    a8b8:	e037883a 	mov	sp,fp
    a8bc:	dfc00117 	ldw	ra,4(sp)
    a8c0:	df000017 	ldw	fp,0(sp)
    a8c4:	dec00204 	addi	sp,sp,8
    a8c8:	f800283a 	ret

0000a8cc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    a8cc:	defffa04 	addi	sp,sp,-24
    a8d0:	dfc00515 	stw	ra,20(sp)
    a8d4:	df000415 	stw	fp,16(sp)
    a8d8:	df000404 	addi	fp,sp,16
    a8dc:	e13ffe15 	stw	r4,-8(fp)
    a8e0:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    a8e4:	e0bffe17 	ldw	r2,-8(fp)
    a8e8:	10c00417 	ldw	r3,16(r2)
    a8ec:	e0bffe17 	ldw	r2,-8(fp)
    a8f0:	10800517 	ldw	r2,20(r2)
    a8f4:	18804d26 	beq	r3,r2,aa2c <altera_avalon_uart_txirq+0x160>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    a8f8:	e0bffe17 	ldw	r2,-8(fp)
    a8fc:	10800617 	ldw	r2,24(r2)
    a900:	1080008c 	andi	r2,r2,2
    a904:	1005003a 	cmpeq	r2,r2,zero
    a908:	1000041e 	bne	r2,zero,a91c <altera_avalon_uart_txirq+0x50>
    a90c:	e0bfff17 	ldw	r2,-4(fp)
    a910:	1082000c 	andi	r2,r2,2048
    a914:	1005003a 	cmpeq	r2,r2,zero
    a918:	1000351e 	bne	r2,zero,a9f0 <altera_avalon_uart_txirq+0x124>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    a91c:	e0bffe17 	ldw	r2,-8(fp)
    a920:	10c00417 	ldw	r3,16(r2)
    a924:	e0bffe17 	ldw	r2,-8(fp)
    a928:	10800517 	ldw	r2,20(r2)
    a92c:	10800044 	addi	r2,r2,1
    a930:	10800fcc 	andi	r2,r2,63
    a934:	1880121e 	bne	r3,r2,a980 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
    a938:	e0bffe17 	ldw	r2,-8(fp)
    a93c:	10800717 	ldw	r2,28(r2)
    a940:	e0bffc15 	stw	r2,-16(fp)
    a944:	00800084 	movi	r2,2
    a948:	e0bffd0d 	sth	r2,-12(fp)
    a94c:	00800044 	movi	r2,1
    a950:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    a954:	00800074 	movhi	r2,1
    a958:	1082e244 	addi	r2,r2,2953
    a95c:	10800003 	ldbu	r2,0(r2)
    a960:	10803fcc 	andi	r2,r2,255
    a964:	1005003a 	cmpeq	r2,r2,zero
    a968:	1000051e 	bne	r2,zero,a980 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
    a96c:	e17ffd0b 	ldhu	r5,-12(fp)
    a970:	e1bffd83 	ldbu	r6,-10(fp)
    a974:	e1fffdc4 	addi	r7,fp,-9
    a978:	e13ffc17 	ldw	r4,-16(fp)
    a97c:	0003a100 	call	3a10 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    a980:	e0bffe17 	ldw	r2,-8(fp)
    a984:	10800017 	ldw	r2,0(r2)
    a988:	11000104 	addi	r4,r2,4
    a98c:	e0bffe17 	ldw	r2,-8(fp)
    a990:	10c00417 	ldw	r3,16(r2)
    a994:	e0bffe17 	ldw	r2,-8(fp)
    a998:	1885883a 	add	r2,r3,r2
    a99c:	10801a04 	addi	r2,r2,104
    a9a0:	10800003 	ldbu	r2,0(r2)
    a9a4:	10c03fcc 	andi	r3,r2,255
    a9a8:	2005883a 	mov	r2,r4
    a9ac:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    a9b0:	e0bffe17 	ldw	r2,-8(fp)
    a9b4:	10800417 	ldw	r2,16(r2)
    a9b8:	10c00044 	addi	r3,r2,1
    a9bc:	e0bffe17 	ldw	r2,-8(fp)
    a9c0:	10c00415 	stw	r3,16(r2)
    a9c4:	e0bffe17 	ldw	r2,-8(fp)
    a9c8:	10800417 	ldw	r2,16(r2)
    a9cc:	10c00fcc 	andi	r3,r2,63
    a9d0:	e0bffe17 	ldw	r2,-8(fp)
    a9d4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    a9d8:	e0bffe17 	ldw	r2,-8(fp)
    a9dc:	10800117 	ldw	r2,4(r2)
    a9e0:	10c01014 	ori	r3,r2,64
    a9e4:	e0bffe17 	ldw	r2,-8(fp)
    a9e8:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    a9ec:	00000f06 	br	aa2c <altera_avalon_uart_txirq+0x160>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    a9f0:	e0bffe17 	ldw	r2,-8(fp)
    a9f4:	10800017 	ldw	r2,0(r2)
    a9f8:	10800204 	addi	r2,r2,8
    a9fc:	10800037 	ldwio	r2,0(r2)
    aa00:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    aa04:	e0bfff17 	ldw	r2,-4(fp)
    aa08:	1082000c 	andi	r2,r2,2048
    aa0c:	1004c03a 	cmpne	r2,r2,zero
    aa10:	1000061e 	bne	r2,zero,aa2c <altera_avalon_uart_txirq+0x160>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    aa14:	e0bffe17 	ldw	r2,-8(fp)
    aa18:	10c00117 	ldw	r3,4(r2)
    aa1c:	00bfefc4 	movi	r2,-65
    aa20:	1886703a 	and	r3,r3,r2
    aa24:	e0bffe17 	ldw	r2,-8(fp)
    aa28:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    aa2c:	e0bffe17 	ldw	r2,-8(fp)
    aa30:	10c00417 	ldw	r3,16(r2)
    aa34:	e0bffe17 	ldw	r2,-8(fp)
    aa38:	10800517 	ldw	r2,20(r2)
    aa3c:	1880061e 	bne	r3,r2,aa58 <altera_avalon_uart_txirq+0x18c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    aa40:	e0bffe17 	ldw	r2,-8(fp)
    aa44:	10c00117 	ldw	r3,4(r2)
    aa48:	00beefc4 	movi	r2,-1089
    aa4c:	1886703a 	and	r3,r3,r2
    aa50:	e0bffe17 	ldw	r2,-8(fp)
    aa54:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    aa58:	e0bffe17 	ldw	r2,-8(fp)
    aa5c:	10800017 	ldw	r2,0(r2)
    aa60:	11000304 	addi	r4,r2,12
    aa64:	e0bffe17 	ldw	r2,-8(fp)
    aa68:	10800117 	ldw	r2,4(r2)
    aa6c:	1007883a 	mov	r3,r2
    aa70:	2005883a 	mov	r2,r4
    aa74:	10c00035 	stwio	r3,0(r2)
}
    aa78:	e037883a 	mov	sp,fp
    aa7c:	dfc00117 	ldw	ra,4(sp)
    aa80:	df000017 	ldw	fp,0(sp)
    aa84:	dec00204 	addi	sp,sp,8
    aa88:	f800283a 	ret

0000aa8c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    aa8c:	defffc04 	addi	sp,sp,-16
    aa90:	df000315 	stw	fp,12(sp)
    aa94:	df000304 	addi	fp,sp,12
    aa98:	e13ffd15 	stw	r4,-12(fp)
    aa9c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    aaa0:	00000706 	br	aac0 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    aaa4:	e0bffe17 	ldw	r2,-8(fp)
    aaa8:	1090000c 	andi	r2,r2,16384
    aaac:	1005003a 	cmpeq	r2,r2,zero
    aab0:	1000031e 	bne	r2,zero,aac0 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    aab4:	00bffd44 	movi	r2,-11
    aab8:	e0bfff15 	stw	r2,-4(fp)
    aabc:	00000606 	br	aad8 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    aac0:	e0bffd17 	ldw	r2,-12(fp)
    aac4:	10c00417 	ldw	r3,16(r2)
    aac8:	e0bffd17 	ldw	r2,-12(fp)
    aacc:	10800517 	ldw	r2,20(r2)
    aad0:	18bff41e 	bne	r3,r2,aaa4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    aad4:	e03fff15 	stw	zero,-4(fp)
    aad8:	e0bfff17 	ldw	r2,-4(fp)
}
    aadc:	e037883a 	mov	sp,fp
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00104 	addi	sp,sp,4
    aae8:	f800283a 	ret

0000aaec <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    aaec:	deffe904 	addi	sp,sp,-92
    aaf0:	dfc01615 	stw	ra,88(sp)
    aaf4:	df001515 	stw	fp,84(sp)
    aaf8:	df001504 	addi	fp,sp,84
    aafc:	e13ffb15 	stw	r4,-20(fp)
    ab00:	e17ffc15 	stw	r5,-16(fp)
    ab04:	e1bffd15 	stw	r6,-12(fp)
    ab08:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    ab0c:	e03ff605 	stb	zero,-40(fp)
  int             count = 0;
    ab10:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    ab14:	e0bffe17 	ldw	r2,-8(fp)
    ab18:	1090000c 	andi	r2,r2,16384
    ab1c:	1005003a 	cmpeq	r2,r2,zero
    ab20:	e0bff815 	stw	r2,-32(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
    ab24:	e0bffb17 	ldw	r2,-20(fp)
    ab28:	10800817 	ldw	r2,32(r2)
    ab2c:	e0bff315 	stw	r2,-52(fp)
    ab30:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    ab34:	e17ff40b 	ldhu	r5,-48(fp)
    ab38:	e1bffa04 	addi	r6,fp,-24
    ab3c:	e13ff317 	ldw	r4,-52(fp)
    ab40:	00062a40 	call	62a4 <OSSemPend>
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    ab44:	e0bffb17 	ldw	r2,-20(fp)
    ab48:	10800217 	ldw	r2,8(r2)
    ab4c:	10800044 	addi	r2,r2,1
    ab50:	10800fcc 	andi	r2,r2,63
    ab54:	e0bff715 	stw	r2,-36(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    ab58:	00001906 	br	abc0 <altera_avalon_uart_read+0xd4>
    {
      count++;
    ab5c:	e0bff517 	ldw	r2,-44(fp)
    ab60:	10800044 	addi	r2,r2,1
    ab64:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    ab68:	e0bffb17 	ldw	r2,-20(fp)
    ab6c:	10c00217 	ldw	r3,8(r2)
    ab70:	e0bffb17 	ldw	r2,-20(fp)
    ab74:	1885883a 	add	r2,r3,r2
    ab78:	10800a04 	addi	r2,r2,40
    ab7c:	10800003 	ldbu	r2,0(r2)
    ab80:	1007883a 	mov	r3,r2
    ab84:	e0bffc17 	ldw	r2,-16(fp)
    ab88:	10c00005 	stb	r3,0(r2)
    ab8c:	e0bffc17 	ldw	r2,-16(fp)
    ab90:	10800044 	addi	r2,r2,1
    ab94:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    ab98:	e0bffb17 	ldw	r2,-20(fp)
    ab9c:	10800217 	ldw	r2,8(r2)
    aba0:	10c00044 	addi	r3,r2,1
    aba4:	e0bffb17 	ldw	r2,-20(fp)
    aba8:	10c00215 	stw	r3,8(r2)
    abac:	e0bffb17 	ldw	r2,-20(fp)
    abb0:	10800217 	ldw	r2,8(r2)
    abb4:	10c00fcc 	andi	r3,r2,63
    abb8:	e0bffb17 	ldw	r2,-20(fp)
    abbc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    abc0:	e0fff517 	ldw	r3,-44(fp)
    abc4:	e0bffd17 	ldw	r2,-12(fp)
    abc8:	1880050e 	bge	r3,r2,abe0 <altera_avalon_uart_read+0xf4>
    abcc:	e0bffb17 	ldw	r2,-20(fp)
    abd0:	10c00217 	ldw	r3,8(r2)
    abd4:	e0bffb17 	ldw	r2,-20(fp)
    abd8:	10800317 	ldw	r2,12(r2)
    abdc:	18bfdf1e 	bne	r3,r2,ab5c <altera_avalon_uart_read+0x70>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    abe0:	e0bff517 	ldw	r2,-44(fp)
    abe4:	1004c03a 	cmpne	r2,r2,zero
    abe8:	10003c1e 	bne	r2,zero,acdc <altera_avalon_uart_read+0x1f0>
    abec:	e0bffb17 	ldw	r2,-20(fp)
    abf0:	10c00217 	ldw	r3,8(r2)
    abf4:	e0bffb17 	ldw	r2,-20(fp)
    abf8:	10800317 	ldw	r2,12(r2)
    abfc:	1880371e 	bne	r3,r2,acdc <altera_avalon_uart_read+0x1f0>
    {
      if (!block)
    ac00:	e0bff817 	ldw	r2,-32(fp)
    ac04:	1004c03a 	cmpne	r2,r2,zero
    ac08:	1000061e 	bne	r2,zero,ac24 <altera_avalon_uart_read+0x138>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    ac0c:	000ad9c0 	call	ad9c <alt_get_errno>
    ac10:	00c002c4 	movi	r3,11
    ac14:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    ac18:	00800044 	movi	r2,1
    ac1c:	e0bff605 	stb	r2,-40(fp)
        break;
    ac20:	00003406 	br	acf4 <altera_avalon_uart_read+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ac24:	0005303a 	rdctl	r2,status
    ac28:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ac2c:	e0fff217 	ldw	r3,-56(fp)
    ac30:	00bfff84 	movi	r2,-2
    ac34:	1884703a 	and	r2,r3,r2
    ac38:	1001703a 	wrctl	status,r2
  
  return context;
    ac3c:	e0bff217 	ldw	r2,-56(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    ac40:	e0bff915 	stw	r2,-28(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    ac44:	e0bffb17 	ldw	r2,-20(fp)
    ac48:	10800117 	ldw	r2,4(r2)
    ac4c:	10c02014 	ori	r3,r2,128
    ac50:	e0bffb17 	ldw	r2,-20(fp)
    ac54:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    ac58:	e0bffb17 	ldw	r2,-20(fp)
    ac5c:	10800017 	ldw	r2,0(r2)
    ac60:	11000304 	addi	r4,r2,12
    ac64:	e0bffb17 	ldw	r2,-20(fp)
    ac68:	10800117 	ldw	r2,4(r2)
    ac6c:	1007883a 	mov	r3,r2
    ac70:	2005883a 	mov	r2,r4
    ac74:	10c00035 	stwio	r3,0(r2)
    ac78:	e0bff917 	ldw	r2,-28(fp)
    ac7c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ac80:	e0bff117 	ldw	r2,-60(fp)
    ac84:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
    ac88:	e0bffb17 	ldw	r2,-20(fp)
    ac8c:	10800717 	ldw	r2,28(r2)
    ac90:	e0bfee15 	stw	r2,-72(fp)
    ac94:	00800044 	movi	r2,1
    ac98:	e0bfef0d 	sth	r2,-68(fp)
    ac9c:	00bfe0c4 	movi	r2,-125
    aca0:	e0bfef85 	stb	r2,-66(fp)
    aca4:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    aca8:	00800074 	movhi	r2,1
    acac:	1082e244 	addi	r2,r2,2953
    acb0:	10800003 	ldbu	r2,0(r2)
    acb4:	10803fcc 	andi	r2,r2,255
    acb8:	1005003a 	cmpeq	r2,r2,zero
    acbc:	1000071e 	bne	r2,zero,acdc <altera_avalon_uart_read+0x1f0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    acc0:	e17fef0b 	ldhu	r5,-68(fp)
    acc4:	e1bfef83 	ldbu	r6,-66(fp)
    acc8:	e1fff00b 	ldhu	r7,-64(fp)
    accc:	e0bffa44 	addi	r2,fp,-23
    acd0:	d8800015 	stw	r2,0(sp)
    acd4:	e13fee17 	ldw	r4,-72(fp)
    acd8:	00033640 	call	3364 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    acdc:	e0bff517 	ldw	r2,-44(fp)
    ace0:	1004c03a 	cmpne	r2,r2,zero
    ace4:	1000031e 	bne	r2,zero,acf4 <altera_avalon_uart_read+0x208>
    ace8:	e0bffd17 	ldw	r2,-12(fp)
    acec:	1004c03a 	cmpne	r2,r2,zero
    acf0:	103fb31e 	bne	r2,zero,abc0 <altera_avalon_uart_read+0xd4>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    acf4:	e0bffb17 	ldw	r2,-20(fp)
    acf8:	11000817 	ldw	r4,32(r2)
    acfc:	000669c0 	call	669c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ad00:	0005303a 	rdctl	r2,status
    ad04:	e0bfed15 	stw	r2,-76(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ad08:	e0ffed17 	ldw	r3,-76(fp)
    ad0c:	00bfff84 	movi	r2,-2
    ad10:	1884703a 	and	r2,r3,r2
    ad14:	1001703a 	wrctl	status,r2
  
  return context;
    ad18:	e0bfed17 	ldw	r2,-76(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    ad1c:	e0bff915 	stw	r2,-28(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    ad20:	e0bffb17 	ldw	r2,-20(fp)
    ad24:	10800117 	ldw	r2,4(r2)
    ad28:	10c02014 	ori	r3,r2,128
    ad2c:	e0bffb17 	ldw	r2,-20(fp)
    ad30:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    ad34:	e0bffb17 	ldw	r2,-20(fp)
    ad38:	10800017 	ldw	r2,0(r2)
    ad3c:	11000304 	addi	r4,r2,12
    ad40:	e0bffb17 	ldw	r2,-20(fp)
    ad44:	10800117 	ldw	r2,4(r2)
    ad48:	1007883a 	mov	r3,r2
    ad4c:	2005883a 	mov	r2,r4
    ad50:	10c00035 	stwio	r3,0(r2)
    ad54:	e0bff917 	ldw	r2,-28(fp)
    ad58:	e0bfec15 	stw	r2,-80(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ad5c:	e0bfec17 	ldw	r2,-80(fp)
    ad60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    ad64:	e0bff603 	ldbu	r2,-40(fp)
    ad68:	1005003a 	cmpeq	r2,r2,zero
    ad6c:	1000031e 	bne	r2,zero,ad7c <altera_avalon_uart_read+0x290>
    return ~EWOULDBLOCK;
    ad70:	00bffd04 	movi	r2,-12
    ad74:	e0bfff15 	stw	r2,-4(fp)
    ad78:	00000206 	br	ad84 <altera_avalon_uart_read+0x298>
  }
  else {
    return count;
    ad7c:	e0bff517 	ldw	r2,-44(fp)
    ad80:	e0bfff15 	stw	r2,-4(fp)
    ad84:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    ad88:	e037883a 	mov	sp,fp
    ad8c:	dfc00117 	ldw	ra,4(sp)
    ad90:	df000017 	ldw	fp,0(sp)
    ad94:	dec00204 	addi	sp,sp,8
    ad98:	f800283a 	ret

0000ad9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad9c:	defffd04 	addi	sp,sp,-12
    ada0:	dfc00215 	stw	ra,8(sp)
    ada4:	df000115 	stw	fp,4(sp)
    ada8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    adac:	00800074 	movhi	r2,1
    adb0:	1082d304 	addi	r2,r2,2892
    adb4:	10800017 	ldw	r2,0(r2)
    adb8:	1005003a 	cmpeq	r2,r2,zero
    adbc:	1000061e 	bne	r2,zero,add8 <alt_get_errno+0x3c>
    adc0:	00800074 	movhi	r2,1
    adc4:	1082d304 	addi	r2,r2,2892
    adc8:	10800017 	ldw	r2,0(r2)
    adcc:	103ee83a 	callr	r2
    add0:	e0bfff15 	stw	r2,-4(fp)
    add4:	00000306 	br	ade4 <alt_get_errno+0x48>
    add8:	00800074 	movhi	r2,1
    addc:	1082fa04 	addi	r2,r2,3048
    ade0:	e0bfff15 	stw	r2,-4(fp)
    ade4:	e0bfff17 	ldw	r2,-4(fp)
}
    ade8:	e037883a 	mov	sp,fp
    adec:	dfc00117 	ldw	ra,4(sp)
    adf0:	df000017 	ldw	fp,0(sp)
    adf4:	dec00204 	addi	sp,sp,8
    adf8:	f800283a 	ret

0000adfc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    adfc:	deffeb04 	addi	sp,sp,-84
    ae00:	dfc01415 	stw	ra,80(sp)
    ae04:	df001315 	stw	fp,76(sp)
    ae08:	df001304 	addi	fp,sp,76
    ae0c:	e13ffc15 	stw	r4,-16(fp)
    ae10:	e17ffd15 	stw	r5,-12(fp)
    ae14:	e1bffe15 	stw	r6,-8(fp)
    ae18:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    ae1c:	e0bffe17 	ldw	r2,-8(fp)
    ae20:	e0bff715 	stw	r2,-36(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    ae24:	e0bfff17 	ldw	r2,-4(fp)
    ae28:	1090000c 	andi	r2,r2,16384
    ae2c:	e0bff915 	stw	r2,-28(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
    ae30:	e0bffc17 	ldw	r2,-16(fp)
    ae34:	10800917 	ldw	r2,36(r2)
    ae38:	e0bff515 	stw	r2,-44(fp)
    ae3c:	e03ff60d 	sth	zero,-40(fp)
    ae40:	e17ff60b 	ldhu	r5,-40(fp)
    ae44:	e1bffb04 	addi	r6,fp,-20
    ae48:	e13ff517 	ldw	r4,-44(fp)
    ae4c:	00062a40 	call	62a4 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    ae50:	00005506 	br	afa8 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    ae54:	e0bffc17 	ldw	r2,-16(fp)
    ae58:	10800517 	ldw	r2,20(r2)
    ae5c:	10800044 	addi	r2,r2,1
    ae60:	10800fcc 	andi	r2,r2,63
    ae64:	e0bff815 	stw	r2,-32(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    ae68:	e0bffc17 	ldw	r2,-16(fp)
    ae6c:	10c00417 	ldw	r3,16(r2)
    ae70:	e0bff817 	ldw	r2,-32(fp)
    ae74:	18803a1e 	bne	r3,r2,af60 <altera_avalon_uart_write+0x164>
    {
      if (no_block)
    ae78:	e0bff917 	ldw	r2,-28(fp)
    ae7c:	1005003a 	cmpeq	r2,r2,zero
    ae80:	1000051e 	bne	r2,zero,ae98 <altera_avalon_uart_write+0x9c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    ae84:	000b0440 	call	b044 <alt_get_errno>
    ae88:	1007883a 	mov	r3,r2
    ae8c:	008002c4 	movi	r2,11
    ae90:	18800015 	stw	r2,0(r3)
        break;
    ae94:	00004706 	br	afb4 <altera_avalon_uart_write+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae98:	0005303a 	rdctl	r2,status
    ae9c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aea0:	e0fff417 	ldw	r3,-48(fp)
    aea4:	00bfff84 	movi	r2,-2
    aea8:	1884703a 	and	r2,r3,r2
    aeac:	1001703a 	wrctl	status,r2
  
  return context;
    aeb0:	e0bff417 	ldw	r2,-48(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    aeb4:	e0bffa15 	stw	r2,-24(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    aeb8:	e0bffc17 	ldw	r2,-16(fp)
    aebc:	10800117 	ldw	r2,4(r2)
    aec0:	10c11014 	ori	r3,r2,1088
    aec4:	e0bffc17 	ldw	r2,-16(fp)
    aec8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    aecc:	e0bffc17 	ldw	r2,-16(fp)
    aed0:	10800017 	ldw	r2,0(r2)
    aed4:	11000304 	addi	r4,r2,12
    aed8:	e0bffc17 	ldw	r2,-16(fp)
    aedc:	10800117 	ldw	r2,4(r2)
    aee0:	1007883a 	mov	r3,r2
    aee4:	2005883a 	mov	r2,r4
    aee8:	10c00035 	stwio	r3,0(r2)
    aeec:	e0bffa17 	ldw	r2,-24(fp)
    aef0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aef4:	e0bff317 	ldw	r2,-52(fp)
    aef8:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
    aefc:	e0bffc17 	ldw	r2,-16(fp)
    af00:	10800717 	ldw	r2,28(r2)
    af04:	e0bff015 	stw	r2,-64(fp)
    af08:	00800084 	movi	r2,2
    af0c:	e0bff10d 	sth	r2,-60(fp)
    af10:	00bfe0c4 	movi	r2,-125
    af14:	e0bff185 	stb	r2,-58(fp)
    af18:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    af1c:	00800074 	movhi	r2,1
    af20:	1082e244 	addi	r2,r2,2953
    af24:	10800003 	ldbu	r2,0(r2)
    af28:	10803fcc 	andi	r2,r2,255
    af2c:	1005003a 	cmpeq	r2,r2,zero
    af30:	1000071e 	bne	r2,zero,af50 <altera_avalon_uart_write+0x154>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    af34:	e17ff10b 	ldhu	r5,-60(fp)
    af38:	e1bff183 	ldbu	r6,-58(fp)
    af3c:	e1fff20b 	ldhu	r7,-56(fp)
    af40:	e0bffb44 	addi	r2,fp,-19
    af44:	d8800015 	stw	r2,0(sp)
    af48:	e13ff017 	ldw	r4,-64(fp)
    af4c:	00033640 	call	3364 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    af50:	e0bffc17 	ldw	r2,-16(fp)
    af54:	10c00417 	ldw	r3,16(r2)
    af58:	e0bff817 	ldw	r2,-32(fp)
    af5c:	18bfe726 	beq	r3,r2,aefc <altera_avalon_uart_write+0x100>
      }
    }

    count--;
    af60:	e0bff717 	ldw	r2,-36(fp)
    af64:	10bfffc4 	addi	r2,r2,-1
    af68:	e0bff715 	stw	r2,-36(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    af6c:	e0bffc17 	ldw	r2,-16(fp)
    af70:	10c00517 	ldw	r3,20(r2)
    af74:	e0bffd17 	ldw	r2,-12(fp)
    af78:	10800003 	ldbu	r2,0(r2)
    af7c:	1009883a 	mov	r4,r2
    af80:	e0bffc17 	ldw	r2,-16(fp)
    af84:	1885883a 	add	r2,r3,r2
    af88:	10801a04 	addi	r2,r2,104
    af8c:	11000005 	stb	r4,0(r2)
    af90:	e0bffd17 	ldw	r2,-12(fp)
    af94:	10800044 	addi	r2,r2,1
    af98:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    af9c:	e0fffc17 	ldw	r3,-16(fp)
    afa0:	e0bff817 	ldw	r2,-32(fp)
    afa4:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    afa8:	e0bff717 	ldw	r2,-36(fp)
    afac:	1004c03a 	cmpne	r2,r2,zero
    afb0:	103fa81e 	bne	r2,zero,ae54 <altera_avalon_uart_write+0x58>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
    afb4:	e0bffc17 	ldw	r2,-16(fp)
    afb8:	11000917 	ldw	r4,36(r2)
    afbc:	000669c0 	call	669c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    afc0:	0005303a 	rdctl	r2,status
    afc4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    afc8:	e0ffef17 	ldw	r3,-68(fp)
    afcc:	00bfff84 	movi	r2,-2
    afd0:	1884703a 	and	r2,r3,r2
    afd4:	1001703a 	wrctl	status,r2
  
  return context;
    afd8:	e0bfef17 	ldw	r2,-68(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    afdc:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    afe0:	e0bffc17 	ldw	r2,-16(fp)
    afe4:	10800117 	ldw	r2,4(r2)
    afe8:	10c11014 	ori	r3,r2,1088
    afec:	e0bffc17 	ldw	r2,-16(fp)
    aff0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    aff4:	e0bffc17 	ldw	r2,-16(fp)
    aff8:	10800017 	ldw	r2,0(r2)
    affc:	11000304 	addi	r4,r2,12
    b000:	e0bffc17 	ldw	r2,-16(fp)
    b004:	10800117 	ldw	r2,4(r2)
    b008:	1007883a 	mov	r3,r2
    b00c:	2005883a 	mov	r2,r4
    b010:	10c00035 	stwio	r3,0(r2)
    b014:	e0bffa17 	ldw	r2,-24(fp)
    b018:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b01c:	e0bfee17 	ldw	r2,-72(fp)
    b020:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    b024:	e0fffe17 	ldw	r3,-8(fp)
    b028:	e0bff717 	ldw	r2,-36(fp)
    b02c:	1885c83a 	sub	r2,r3,r2
}
    b030:	e037883a 	mov	sp,fp
    b034:	dfc00117 	ldw	ra,4(sp)
    b038:	df000017 	ldw	fp,0(sp)
    b03c:	dec00204 	addi	sp,sp,8
    b040:	f800283a 	ret

0000b044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b044:	defffd04 	addi	sp,sp,-12
    b048:	dfc00215 	stw	ra,8(sp)
    b04c:	df000115 	stw	fp,4(sp)
    b050:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b054:	00800074 	movhi	r2,1
    b058:	1082d304 	addi	r2,r2,2892
    b05c:	10800017 	ldw	r2,0(r2)
    b060:	1005003a 	cmpeq	r2,r2,zero
    b064:	1000061e 	bne	r2,zero,b080 <alt_get_errno+0x3c>
    b068:	00800074 	movhi	r2,1
    b06c:	1082d304 	addi	r2,r2,2892
    b070:	10800017 	ldw	r2,0(r2)
    b074:	103ee83a 	callr	r2
    b078:	e0bfff15 	stw	r2,-4(fp)
    b07c:	00000306 	br	b08c <alt_get_errno+0x48>
    b080:	00800074 	movhi	r2,1
    b084:	1082fa04 	addi	r2,r2,3048
    b088:	e0bfff15 	stw	r2,-4(fp)
    b08c:	e0bfff17 	ldw	r2,-4(fp)
}
    b090:	e037883a 	mov	sp,fp
    b094:	dfc00117 	ldw	ra,4(sp)
    b098:	df000017 	ldw	fp,0(sp)
    b09c:	dec00204 	addi	sp,sp,8
    b0a0:	f800283a 	ret

0000b0a4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    b0a4:	defff904 	addi	sp,sp,-28
    b0a8:	dfc00615 	stw	ra,24(sp)
    b0ac:	df000515 	stw	fp,20(sp)
    b0b0:	df000504 	addi	fp,sp,20
    b0b4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    b0b8:	00800144 	movi	r2,5
    b0bc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    b0c0:	00800044 	movi	r2,1
    b0c4:	d8800015 	stw	r2,0(sp)
    b0c8:	e0bffe44 	addi	r2,fp,-7
    b0cc:	d8800115 	stw	r2,4(sp)
    b0d0:	d8000215 	stw	zero,8(sp)
    b0d4:	e13fff17 	ldw	r4,-4(fp)
    b0d8:	000b883a 	mov	r5,zero
    b0dc:	01800044 	movi	r6,1
    b0e0:	e1fffe04 	addi	r7,fp,-8
    b0e4:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    b0e8:	e0bffe43 	ldbu	r2,-7(fp)
    b0ec:	10803fcc 	andi	r2,r2,255
}
    b0f0:	e037883a 	mov	sp,fp
    b0f4:	dfc00117 	ldw	ra,4(sp)
    b0f8:	df000017 	ldw	fp,0(sp)
    b0fc:	dec00204 	addi	sp,sp,8
    b100:	f800283a 	ret

0000b104 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    b104:	defff604 	addi	sp,sp,-40
    b108:	dfc00915 	stw	ra,36(sp)
    b10c:	df000815 	stw	fp,32(sp)
    b110:	df000804 	addi	fp,sp,32
    b114:	e13ffd15 	stw	r4,-12(fp)
    b118:	e17ffe15 	stw	r5,-8(fp)
    b11c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    b120:	e0bfff17 	ldw	r2,-4(fp)
    b124:	1005003a 	cmpeq	r2,r2,zero
    b128:	1000121e 	bne	r2,zero,b174 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    b12c:	00bff604 	movi	r2,-40
    b130:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    b134:	e0bffe17 	ldw	r2,-8(fp)
    b138:	1004d63a 	srli	r2,r2,24
    b13c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    b140:	e0bffe17 	ldw	r2,-8(fp)
    b144:	1004d43a 	srli	r2,r2,16
    b148:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    b14c:	e0bffe17 	ldw	r2,-8(fp)
    b150:	1004d23a 	srli	r2,r2,8
    b154:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    b158:	e0bffe17 	ldw	r2,-8(fp)
    b15c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    b160:	00800144 	movi	r2,5
    b164:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    b168:	e13ffd17 	ldw	r4,-12(fp)
    b16c:	000b6c80 	call	b6c8 <epcs_enter_4_bytes_mode>
    b170:	00000c06 	br	b1a4 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
    b174:	00bff604 	movi	r2,-40
    b178:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    b17c:	e0bffe17 	ldw	r2,-8(fp)
    b180:	1004d43a 	srli	r2,r2,16
    b184:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    b188:	e0bffe17 	ldw	r2,-8(fp)
    b18c:	1004d23a 	srli	r2,r2,8
    b190:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    b194:	e0bffe17 	ldw	r2,-8(fp)
    b198:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    b19c:	00800104 	movi	r2,4
    b1a0:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    b1a4:	e13ffd17 	ldw	r4,-12(fp)
    b1a8:	000b3b80 	call	b3b8 <epcs_write_enable>

  alt_avalon_spi_command(
    b1ac:	e1bffb03 	ldbu	r6,-20(fp)
    b1b0:	e1fffb44 	addi	r7,fp,-19
    b1b4:	d8000015 	stw	zero,0(sp)
    b1b8:	d8000115 	stw	zero,4(sp)
    b1bc:	d8000215 	stw	zero,8(sp)
    b1c0:	e13ffd17 	ldw	r4,-12(fp)
    b1c4:	000b883a 	mov	r5,zero
    b1c8:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    b1cc:	e13ffd17 	ldw	r4,-12(fp)
    b1d0:	000b1fc0 	call	b1fc <epcs_await_wip_released>

  if(four_bytes_mode)
    b1d4:	e0bfff17 	ldw	r2,-4(fp)
    b1d8:	1005003a 	cmpeq	r2,r2,zero
    b1dc:	1000021e 	bne	r2,zero,b1e8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    b1e0:	e13ffd17 	ldw	r4,-12(fp)
    b1e4:	000b7200 	call	b720 <epcs_exit_4_bytes_mode>
  }
}
    b1e8:	e037883a 	mov	sp,fp
    b1ec:	dfc00117 	ldw	ra,4(sp)
    b1f0:	df000017 	ldw	fp,0(sp)
    b1f4:	dec00204 	addi	sp,sp,8
    b1f8:	f800283a 	ret

0000b1fc <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    b1fc:	defffd04 	addi	sp,sp,-12
    b200:	dfc00215 	stw	ra,8(sp)
    b204:	df000115 	stw	fp,4(sp)
    b208:	df000104 	addi	fp,sp,4
    b20c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    b210:	e13fff17 	ldw	r4,-4(fp)
    b214:	000b2340 	call	b234 <epcs_test_wip>
    b218:	1004c03a 	cmpne	r2,r2,zero
    b21c:	103ffc1e 	bne	r2,zero,b210 <epcs_await_wip_released+0x14>
  {
  }
}
    b220:	e037883a 	mov	sp,fp
    b224:	dfc00117 	ldw	ra,4(sp)
    b228:	df000017 	ldw	fp,0(sp)
    b22c:	dec00204 	addi	sp,sp,8
    b230:	f800283a 	ret

0000b234 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    b234:	defffd04 	addi	sp,sp,-12
    b238:	dfc00215 	stw	ra,8(sp)
    b23c:	df000115 	stw	fp,4(sp)
    b240:	df000104 	addi	fp,sp,4
    b244:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    b248:	e13fff17 	ldw	r4,-4(fp)
    b24c:	000b0a40 	call	b0a4 <epcs_read_status_register>
    b250:	10803fcc 	andi	r2,r2,255
    b254:	1080004c 	andi	r2,r2,1
}
    b258:	e037883a 	mov	sp,fp
    b25c:	dfc00117 	ldw	ra,4(sp)
    b260:	df000017 	ldw	fp,0(sp)
    b264:	dec00204 	addi	sp,sp,8
    b268:	f800283a 	ret

0000b26c <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    b26c:	defff404 	addi	sp,sp,-48
    b270:	dfc00b15 	stw	ra,44(sp)
    b274:	df000a15 	stw	fp,40(sp)
    b278:	df000a04 	addi	fp,sp,40
    b27c:	e13ffc15 	stw	r4,-16(fp)
    b280:	e17ffd15 	stw	r5,-12(fp)
    b284:	e1bffe15 	stw	r6,-8(fp)
    b288:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    b28c:	008000c4 	movi	r2,3
    b290:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    b294:	e0800217 	ldw	r2,8(fp)
    b298:	1005003a 	cmpeq	r2,r2,zero
    b29c:	10001c1e 	bne	r2,zero,b310 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    b2a0:	e0bffd17 	ldw	r2,-12(fp)
    b2a4:	1005d63a 	srai	r2,r2,24
    b2a8:	1007883a 	mov	r3,r2
    b2ac:	00bfffc4 	movi	r2,-1
    b2b0:	1884703a 	and	r2,r3,r2
    b2b4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    b2b8:	e0bffd17 	ldw	r2,-12(fp)
    b2bc:	1005d43a 	srai	r2,r2,16
    b2c0:	1007883a 	mov	r3,r2
    b2c4:	00bfffc4 	movi	r2,-1
    b2c8:	1884703a 	and	r2,r3,r2
    b2cc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    b2d0:	e0bffd17 	ldw	r2,-12(fp)
    b2d4:	1005d23a 	srai	r2,r2,8
    b2d8:	1007883a 	mov	r3,r2
    b2dc:	00bfffc4 	movi	r2,-1
    b2e0:	1884703a 	and	r2,r3,r2
    b2e4:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    b2e8:	e0bffd17 	ldw	r2,-12(fp)
    b2ec:	1007883a 	mov	r3,r2
    b2f0:	00bfffc4 	movi	r2,-1
    b2f4:	1884703a 	and	r2,r3,r2
    b2f8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    b2fc:	00800144 	movi	r2,5
    b300:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    b304:	e13ffc17 	ldw	r4,-16(fp)
    b308:	000b6c80 	call	b6c8 <epcs_enter_4_bytes_mode>
    b30c:	00001306 	br	b35c <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    b310:	e0bffd17 	ldw	r2,-12(fp)
    b314:	1005d43a 	srai	r2,r2,16
    b318:	1007883a 	mov	r3,r2
    b31c:	00bfffc4 	movi	r2,-1
    b320:	1884703a 	and	r2,r3,r2
    b324:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    b328:	e0bffd17 	ldw	r2,-12(fp)
    b32c:	1005d23a 	srai	r2,r2,8
    b330:	1007883a 	mov	r3,r2
    b334:	00bfffc4 	movi	r2,-1
    b338:	1884703a 	and	r2,r3,r2
    b33c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    b340:	e0bffd17 	ldw	r2,-12(fp)
    b344:	1007883a 	mov	r3,r2
    b348:	00bfffc4 	movi	r2,-1
    b34c:	1884703a 	and	r2,r3,r2
    b350:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    b354:	00800104 	movi	r2,4
    b358:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    b35c:	e13ffc17 	ldw	r4,-16(fp)
    b360:	000b1fc0 	call	b1fc <epcs_await_wip_released>

  alt_avalon_spi_command(
    b364:	e0bfff17 	ldw	r2,-4(fp)
    b368:	e1fffa04 	addi	r7,fp,-24
    b36c:	d8800015 	stw	r2,0(sp)
    b370:	e0bffe17 	ldw	r2,-8(fp)
    b374:	d8800115 	stw	r2,4(sp)
    b378:	d8000215 	stw	zero,8(sp)
    b37c:	e13ffc17 	ldw	r4,-16(fp)
    b380:	000b883a 	mov	r5,zero
    b384:	e1bff917 	ldw	r6,-28(fp)
    b388:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    b38c:	e0800217 	ldw	r2,8(fp)
    b390:	1005003a 	cmpeq	r2,r2,zero
    b394:	1000021e 	bne	r2,zero,b3a0 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
    b398:	e13ffc17 	ldw	r4,-16(fp)
    b39c:	000b7200 	call	b720 <epcs_exit_4_bytes_mode>
  }

  return length;
    b3a0:	e0bfff17 	ldw	r2,-4(fp)
}
    b3a4:	e037883a 	mov	sp,fp
    b3a8:	dfc00117 	ldw	ra,4(sp)
    b3ac:	df000017 	ldw	fp,0(sp)
    b3b0:	dec00204 	addi	sp,sp,8
    b3b4:	f800283a 	ret

0000b3b8 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    b3b8:	defff904 	addi	sp,sp,-28
    b3bc:	dfc00615 	stw	ra,24(sp)
    b3c0:	df000515 	stw	fp,20(sp)
    b3c4:	df000504 	addi	fp,sp,20
    b3c8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    b3cc:	00800184 	movi	r2,6
    b3d0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    b3d4:	d8000015 	stw	zero,0(sp)
    b3d8:	d8000115 	stw	zero,4(sp)
    b3dc:	d8000215 	stw	zero,8(sp)
    b3e0:	e13fff17 	ldw	r4,-4(fp)
    b3e4:	000b883a 	mov	r5,zero
    b3e8:	01800044 	movi	r6,1
    b3ec:	e1fffe04 	addi	r7,fp,-8
    b3f0:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    b3f4:	e037883a 	mov	sp,fp
    b3f8:	dfc00117 	ldw	ra,4(sp)
    b3fc:	df000017 	ldw	fp,0(sp)
    b400:	dec00204 	addi	sp,sp,8
    b404:	f800283a 	ret

0000b408 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    b408:	defff804 	addi	sp,sp,-32
    b40c:	dfc00715 	stw	ra,28(sp)
    b410:	df000615 	stw	fp,24(sp)
    b414:	df000604 	addi	fp,sp,24
    b418:	e13ffe15 	stw	r4,-8(fp)
    b41c:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    b420:	00800044 	movi	r2,1
    b424:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    b428:	e0bfff03 	ldbu	r2,-4(fp)
    b42c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    b430:	d8000015 	stw	zero,0(sp)
    b434:	d8000115 	stw	zero,4(sp)
    b438:	d8000215 	stw	zero,8(sp)
    b43c:	e13ffe17 	ldw	r4,-8(fp)
    b440:	000b883a 	mov	r5,zero
    b444:	01800084 	movi	r6,2
    b448:	e1fffd04 	addi	r7,fp,-12
    b44c:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    b450:	e13ffe17 	ldw	r4,-8(fp)
    b454:	000b1fc0 	call	b1fc <epcs_await_wip_released>
}
    b458:	e037883a 	mov	sp,fp
    b45c:	dfc00117 	ldw	ra,4(sp)
    b460:	df000017 	ldw	fp,0(sp)
    b464:	dec00204 	addi	sp,sp,8
    b468:	f800283a 	ret

0000b46c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    b46c:	defff404 	addi	sp,sp,-48
    b470:	dfc00b15 	stw	ra,44(sp)
    b474:	df000a15 	stw	fp,40(sp)
    b478:	df000a04 	addi	fp,sp,40
    b47c:	e13ffc15 	stw	r4,-16(fp)
    b480:	e17ffd15 	stw	r5,-12(fp)
    b484:	e1bffe15 	stw	r6,-8(fp)
    b488:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    b48c:	00800084 	movi	r2,2
    b490:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    b494:	e0800217 	ldw	r2,8(fp)
    b498:	1005003a 	cmpeq	r2,r2,zero
    b49c:	10001c1e 	bne	r2,zero,b510 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
    b4a0:	e0bffd17 	ldw	r2,-12(fp)
    b4a4:	1005d63a 	srai	r2,r2,24
    b4a8:	1007883a 	mov	r3,r2
    b4ac:	00bfffc4 	movi	r2,-1
    b4b0:	1884703a 	and	r2,r3,r2
    b4b4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    b4b8:	e0bffd17 	ldw	r2,-12(fp)
    b4bc:	1005d43a 	srai	r2,r2,16
    b4c0:	1007883a 	mov	r3,r2
    b4c4:	00bfffc4 	movi	r2,-1
    b4c8:	1884703a 	and	r2,r3,r2
    b4cc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    b4d0:	e0bffd17 	ldw	r2,-12(fp)
    b4d4:	1005d23a 	srai	r2,r2,8
    b4d8:	1007883a 	mov	r3,r2
    b4dc:	00bfffc4 	movi	r2,-1
    b4e0:	1884703a 	and	r2,r3,r2
    b4e4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    b4e8:	e0bffd17 	ldw	r2,-12(fp)
    b4ec:	1007883a 	mov	r3,r2
    b4f0:	00bfffc4 	movi	r2,-1
    b4f4:	1884703a 	and	r2,r3,r2
    b4f8:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    b4fc:	00800144 	movi	r2,5
    b500:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    b504:	e13ffc17 	ldw	r4,-16(fp)
    b508:	000b6c80 	call	b6c8 <epcs_enter_4_bytes_mode>
    b50c:	00001306 	br	b55c <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    b510:	e0bffd17 	ldw	r2,-12(fp)
    b514:	1005d43a 	srai	r2,r2,16
    b518:	1007883a 	mov	r3,r2
    b51c:	00bfffc4 	movi	r2,-1
    b520:	1884703a 	and	r2,r3,r2
    b524:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    b528:	e0bffd17 	ldw	r2,-12(fp)
    b52c:	1005d23a 	srai	r2,r2,8
    b530:	1007883a 	mov	r3,r2
    b534:	00bfffc4 	movi	r2,-1
    b538:	1884703a 	and	r2,r3,r2
    b53c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    b540:	e0bffd17 	ldw	r2,-12(fp)
    b544:	1007883a 	mov	r3,r2
    b548:	00bfffc4 	movi	r2,-1
    b54c:	1884703a 	and	r2,r3,r2
    b550:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    b554:	00800104 	movi	r2,4
    b558:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    b55c:	e13ffc17 	ldw	r4,-16(fp)
    b560:	000b3b80 	call	b3b8 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    b564:	e1fffa04 	addi	r7,fp,-24
    b568:	d8000015 	stw	zero,0(sp)
    b56c:	d8000115 	stw	zero,4(sp)
    b570:	00800044 	movi	r2,1
    b574:	d8800215 	stw	r2,8(sp)
    b578:	e13ffc17 	ldw	r4,-16(fp)
    b57c:	000b883a 	mov	r5,zero
    b580:	e1bff917 	ldw	r6,-28(fp)
    b584:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    b588:	e1bfff17 	ldw	r6,-4(fp)
    b58c:	d8000015 	stw	zero,0(sp)
    b590:	d8000115 	stw	zero,4(sp)
    b594:	d8000215 	stw	zero,8(sp)
    b598:	e13ffc17 	ldw	r4,-16(fp)
    b59c:	000b883a 	mov	r5,zero
    b5a0:	e1fffe17 	ldw	r7,-8(fp)
    b5a4:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    b5a8:	e13ffc17 	ldw	r4,-16(fp)
    b5ac:	000b1fc0 	call	b1fc <epcs_await_wip_released>

  if(four_bytes_mode)
    b5b0:	e0800217 	ldw	r2,8(fp)
    b5b4:	1005003a 	cmpeq	r2,r2,zero
    b5b8:	1000021e 	bne	r2,zero,b5c4 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
    b5bc:	e13ffc17 	ldw	r4,-16(fp)
    b5c0:	000b7200 	call	b720 <epcs_exit_4_bytes_mode>
  }

  return length;
    b5c4:	e0bfff17 	ldw	r2,-4(fp)
}
    b5c8:	e037883a 	mov	sp,fp
    b5cc:	dfc00117 	ldw	ra,4(sp)
    b5d0:	df000017 	ldw	fp,0(sp)
    b5d4:	dec00204 	addi	sp,sp,8
    b5d8:	f800283a 	ret

0000b5dc <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    b5dc:	defff804 	addi	sp,sp,-32
    b5e0:	dfc00715 	stw	ra,28(sp)
    b5e4:	df000615 	stw	fp,24(sp)
    b5e8:	df000604 	addi	fp,sp,24
    b5ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    b5f0:	00bfeac4 	movi	r2,-85
    b5f4:	e0bffd05 	stb	r2,-12(fp)
    b5f8:	e03ffd45 	stb	zero,-11(fp)
    b5fc:	e03ffd85 	stb	zero,-10(fp)
    b600:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    b604:	00800044 	movi	r2,1
    b608:	d8800015 	stw	r2,0(sp)
    b60c:	e0bffe04 	addi	r2,fp,-8
    b610:	d8800115 	stw	r2,4(sp)
    b614:	d8000215 	stw	zero,8(sp)
    b618:	e13fff17 	ldw	r4,-4(fp)
    b61c:	000b883a 	mov	r5,zero
    b620:	01800104 	movi	r6,4
    b624:	e1fffd04 	addi	r7,fp,-12
    b628:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    b62c:	e0bffe03 	ldbu	r2,-8(fp)
    b630:	10803fcc 	andi	r2,r2,255
}
    b634:	e037883a 	mov	sp,fp
    b638:	dfc00117 	ldw	ra,4(sp)
    b63c:	df000017 	ldw	fp,0(sp)
    b640:	dec00204 	addi	sp,sp,8
    b644:	f800283a 	ret

0000b648 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    b648:	defff904 	addi	sp,sp,-28
    b64c:	dfc00615 	stw	ra,24(sp)
    b650:	df000515 	stw	fp,20(sp)
    b654:	df000504 	addi	fp,sp,20
    b658:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    b65c:	00bfe7c4 	movi	r2,-97
    b660:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    b664:	008000c4 	movi	r2,3
    b668:	d8800015 	stw	r2,0(sp)
    b66c:	e0bffe44 	addi	r2,fp,-7
    b670:	d8800115 	stw	r2,4(sp)
    b674:	d8000215 	stw	zero,8(sp)
    b678:	e13fff17 	ldw	r4,-4(fp)
    b67c:	000b883a 	mov	r5,zero
    b680:	01800044 	movi	r6,1
    b684:	e1fffe04 	addi	r7,fp,-8
    b688:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    b68c:	e0bffe43 	ldbu	r2,-7(fp)
    b690:	10803fcc 	andi	r2,r2,255
    b694:	1006943a 	slli	r3,r2,16
    b698:	e0bffe83 	ldbu	r2,-6(fp)
    b69c:	10803fcc 	andi	r2,r2,255
    b6a0:	1004923a 	slli	r2,r2,8
    b6a4:	1886b03a 	or	r3,r3,r2
    b6a8:	e0bffec3 	ldbu	r2,-5(fp)
    b6ac:	10803fcc 	andi	r2,r2,255
    b6b0:	1884b03a 	or	r2,r3,r2
}
    b6b4:	e037883a 	mov	sp,fp
    b6b8:	dfc00117 	ldw	ra,4(sp)
    b6bc:	df000017 	ldw	fp,0(sp)
    b6c0:	dec00204 	addi	sp,sp,8
    b6c4:	f800283a 	ret

0000b6c8 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    b6c8:	defff904 	addi	sp,sp,-28
    b6cc:	dfc00615 	stw	ra,24(sp)
    b6d0:	df000515 	stw	fp,20(sp)
    b6d4:	df000504 	addi	fp,sp,20
    b6d8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    b6dc:	00bfedc4 	movi	r2,-73
    b6e0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    b6e4:	e13fff17 	ldw	r4,-4(fp)
    b6e8:	000b3b80 	call	b3b8 <epcs_write_enable>

  alt_avalon_spi_command(
    b6ec:	d8000015 	stw	zero,0(sp)
    b6f0:	d8000115 	stw	zero,4(sp)
    b6f4:	d8000215 	stw	zero,8(sp)
    b6f8:	e13fff17 	ldw	r4,-4(fp)
    b6fc:	000b883a 	mov	r5,zero
    b700:	01800044 	movi	r6,1
    b704:	e1fffe04 	addi	r7,fp,-8
    b708:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    b70c:	e037883a 	mov	sp,fp
    b710:	dfc00117 	ldw	ra,4(sp)
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00204 	addi	sp,sp,8
    b71c:	f800283a 	ret

0000b720 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    b720:	defff904 	addi	sp,sp,-28
    b724:	dfc00615 	stw	ra,24(sp)
    b728:	df000515 	stw	fp,20(sp)
    b72c:	df000504 	addi	fp,sp,20
    b730:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    b734:	00bffa44 	movi	r2,-23
    b738:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    b73c:	e13fff17 	ldw	r4,-4(fp)
    b740:	000b3b80 	call	b3b8 <epcs_write_enable>

  alt_avalon_spi_command(
    b744:	d8000015 	stw	zero,0(sp)
    b748:	d8000115 	stw	zero,4(sp)
    b74c:	d8000215 	stw	zero,8(sp)
    b750:	e13fff17 	ldw	r4,-4(fp)
    b754:	000b883a 	mov	r5,zero
    b758:	01800044 	movi	r6,1
    b75c:	e1fffe04 	addi	r7,fp,-8
    b760:	000cb2c0 	call	cb2c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    b764:	e037883a 	mov	sp,fp
    b768:	dfc00117 	ldw	ra,4(sp)
    b76c:	df000017 	ldw	fp,0(sp)
    b770:	dec00204 	addi	sp,sp,8
    b774:	f800283a 	ret

0000b778 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b778:	defff404 	addi	sp,sp,-48
    b77c:	df000b15 	stw	fp,44(sp)
    b780:	df000b04 	addi	fp,sp,44
    b784:	e13ffb15 	stw	r4,-20(fp)
    b788:	e17ffc15 	stw	r5,-16(fp)
    b78c:	e1bffd15 	stw	r6,-12(fp)
    b790:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b794:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b798:	00800074 	movhi	r2,1
    b79c:	1082f804 	addi	r2,r2,3040
    b7a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    b7a4:	1005003a 	cmpeq	r2,r2,zero
    b7a8:	1000411e 	bne	r2,zero,b8b0 <alt_alarm_start+0x138>
  {
    if (alarm)
    b7ac:	e0bffb17 	ldw	r2,-20(fp)
    b7b0:	1005003a 	cmpeq	r2,r2,zero
    b7b4:	10003b1e 	bne	r2,zero,b8a4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    b7b8:	e0fffb17 	ldw	r3,-20(fp)
    b7bc:	e0bffd17 	ldw	r2,-12(fp)
    b7c0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    b7c4:	e0fffb17 	ldw	r3,-20(fp)
    b7c8:	e0bffe17 	ldw	r2,-8(fp)
    b7cc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7d0:	0005303a 	rdctl	r2,status
    b7d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7d8:	e0fff817 	ldw	r3,-32(fp)
    b7dc:	00bfff84 	movi	r2,-2
    b7e0:	1884703a 	and	r2,r3,r2
    b7e4:	1001703a 	wrctl	status,r2
  
  return context;
    b7e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    b7ec:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b7f0:	00800074 	movhi	r2,1
    b7f4:	1082f904 	addi	r2,r2,3044
    b7f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    b7fc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b800:	e0fffc17 	ldw	r3,-16(fp)
    b804:	e0bff917 	ldw	r2,-28(fp)
    b808:	1885883a 	add	r2,r3,r2
    b80c:	10c00044 	addi	r3,r2,1
    b810:	e0bffb17 	ldw	r2,-20(fp)
    b814:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b818:	e0bffb17 	ldw	r2,-20(fp)
    b81c:	10c00217 	ldw	r3,8(r2)
    b820:	e0bff917 	ldw	r2,-28(fp)
    b824:	1880042e 	bgeu	r3,r2,b838 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    b828:	e0fffb17 	ldw	r3,-20(fp)
    b82c:	00800044 	movi	r2,1
    b830:	18800405 	stb	r2,16(r3)
    b834:	00000206 	br	b840 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    b838:	e0bffb17 	ldw	r2,-20(fp)
    b83c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b840:	e0fffb17 	ldw	r3,-20(fp)
    b844:	00800074 	movhi	r2,1
    b848:	1082d704 	addi	r2,r2,2908
    b84c:	e0bff615 	stw	r2,-40(fp)
    b850:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b854:	e0fff717 	ldw	r3,-36(fp)
    b858:	e0bff617 	ldw	r2,-40(fp)
    b85c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b860:	e0bff617 	ldw	r2,-40(fp)
    b864:	10c00017 	ldw	r3,0(r2)
    b868:	e0bff717 	ldw	r2,-36(fp)
    b86c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b870:	e0bff617 	ldw	r2,-40(fp)
    b874:	10c00017 	ldw	r3,0(r2)
    b878:	e0bff717 	ldw	r2,-36(fp)
    b87c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b880:	e0fff617 	ldw	r3,-40(fp)
    b884:	e0bff717 	ldw	r2,-36(fp)
    b888:	18800015 	stw	r2,0(r3)
    b88c:	e0bffa17 	ldw	r2,-24(fp)
    b890:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b894:	e0bff517 	ldw	r2,-44(fp)
    b898:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b89c:	e03fff15 	stw	zero,-4(fp)
    b8a0:	00000506 	br	b8b8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    b8a4:	00bffa84 	movi	r2,-22
    b8a8:	e0bfff15 	stw	r2,-4(fp)
    b8ac:	00000206 	br	b8b8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    b8b0:	00bfde84 	movi	r2,-134
    b8b4:	e0bfff15 	stw	r2,-4(fp)
    b8b8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b8bc:	e037883a 	mov	sp,fp
    b8c0:	df000017 	ldw	fp,0(sp)
    b8c4:	dec00104 	addi	sp,sp,4
    b8c8:	f800283a 	ret

0000b8cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b8cc:	defff804 	addi	sp,sp,-32
    b8d0:	dfc00715 	stw	ra,28(sp)
    b8d4:	df000615 	stw	fp,24(sp)
    b8d8:	df000604 	addi	fp,sp,24
    b8dc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b8e0:	e0bffc17 	ldw	r2,-16(fp)
    b8e4:	1004803a 	cmplt	r2,r2,zero
    b8e8:	1000091e 	bne	r2,zero,b910 <close+0x44>
    b8ec:	e13ffc17 	ldw	r4,-16(fp)
    b8f0:	01400304 	movi	r5,12
    b8f4:	000e5740 	call	e574 <__mulsi3>
    b8f8:	1007883a 	mov	r3,r2
    b8fc:	00800074 	movhi	r2,1
    b900:	10814f04 	addi	r2,r2,1340
    b904:	1887883a 	add	r3,r3,r2
    b908:	e0ffff15 	stw	r3,-4(fp)
    b90c:	00000106 	br	b914 <close+0x48>
    b910:	e03fff15 	stw	zero,-4(fp)
    b914:	e0bfff17 	ldw	r2,-4(fp)
    b918:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b91c:	e0bffb17 	ldw	r2,-20(fp)
    b920:	1005003a 	cmpeq	r2,r2,zero
    b924:	10001d1e 	bne	r2,zero,b99c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b928:	e0bffb17 	ldw	r2,-20(fp)
    b92c:	10800017 	ldw	r2,0(r2)
    b930:	10800417 	ldw	r2,16(r2)
    b934:	1005003a 	cmpeq	r2,r2,zero
    b938:	1000071e 	bne	r2,zero,b958 <close+0x8c>
    b93c:	e0bffb17 	ldw	r2,-20(fp)
    b940:	10800017 	ldw	r2,0(r2)
    b944:	10800417 	ldw	r2,16(r2)
    b948:	e13ffb17 	ldw	r4,-20(fp)
    b94c:	103ee83a 	callr	r2
    b950:	e0bffe15 	stw	r2,-8(fp)
    b954:	00000106 	br	b95c <close+0x90>
    b958:	e03ffe15 	stw	zero,-8(fp)
    b95c:	e0bffe17 	ldw	r2,-8(fp)
    b960:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b964:	e13ffc17 	ldw	r4,-16(fp)
    b968:	000c4040 	call	c404 <alt_release_fd>
    if (rval < 0)
    b96c:	e0bffa17 	ldw	r2,-24(fp)
    b970:	1004403a 	cmpge	r2,r2,zero
    b974:	1000071e 	bne	r2,zero,b994 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    b978:	000b9cc0 	call	b9cc <alt_get_errno>
    b97c:	e0fffa17 	ldw	r3,-24(fp)
    b980:	00c7c83a 	sub	r3,zero,r3
    b984:	10c00015 	stw	r3,0(r2)
      return -1;
    b988:	00bfffc4 	movi	r2,-1
    b98c:	e0bffd15 	stw	r2,-12(fp)
    b990:	00000806 	br	b9b4 <close+0xe8>
    }
    return 0;
    b994:	e03ffd15 	stw	zero,-12(fp)
    b998:	00000606 	br	b9b4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b99c:	000b9cc0 	call	b9cc <alt_get_errno>
    b9a0:	1007883a 	mov	r3,r2
    b9a4:	00801444 	movi	r2,81
    b9a8:	18800015 	stw	r2,0(r3)
    return -1;
    b9ac:	00bfffc4 	movi	r2,-1
    b9b0:	e0bffd15 	stw	r2,-12(fp)
    b9b4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b9b8:	e037883a 	mov	sp,fp
    b9bc:	dfc00117 	ldw	ra,4(sp)
    b9c0:	df000017 	ldw	fp,0(sp)
    b9c4:	dec00204 	addi	sp,sp,8
    b9c8:	f800283a 	ret

0000b9cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b9cc:	defffd04 	addi	sp,sp,-12
    b9d0:	dfc00215 	stw	ra,8(sp)
    b9d4:	df000115 	stw	fp,4(sp)
    b9d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b9dc:	00800074 	movhi	r2,1
    b9e0:	1082d304 	addi	r2,r2,2892
    b9e4:	10800017 	ldw	r2,0(r2)
    b9e8:	1005003a 	cmpeq	r2,r2,zero
    b9ec:	1000061e 	bne	r2,zero,ba08 <alt_get_errno+0x3c>
    b9f0:	00800074 	movhi	r2,1
    b9f4:	1082d304 	addi	r2,r2,2892
    b9f8:	10800017 	ldw	r2,0(r2)
    b9fc:	103ee83a 	callr	r2
    ba00:	e0bfff15 	stw	r2,-4(fp)
    ba04:	00000306 	br	ba14 <alt_get_errno+0x48>
    ba08:	00800074 	movhi	r2,1
    ba0c:	1082fa04 	addi	r2,r2,3048
    ba10:	e0bfff15 	stw	r2,-4(fp)
    ba14:	e0bfff17 	ldw	r2,-4(fp)
}
    ba18:	e037883a 	mov	sp,fp
    ba1c:	dfc00117 	ldw	ra,4(sp)
    ba20:	df000017 	ldw	fp,0(sp)
    ba24:	dec00204 	addi	sp,sp,8
    ba28:	f800283a 	ret

0000ba2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ba2c:	defffc04 	addi	sp,sp,-16
    ba30:	df000315 	stw	fp,12(sp)
    ba34:	df000304 	addi	fp,sp,12
    ba38:	e13ffd15 	stw	r4,-12(fp)
    ba3c:	e17ffe15 	stw	r5,-8(fp)
    ba40:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ba44:	e0bfff17 	ldw	r2,-4(fp)
}
    ba48:	e037883a 	mov	sp,fp
    ba4c:	df000017 	ldw	fp,0(sp)
    ba50:	dec00104 	addi	sp,sp,4
    ba54:	f800283a 	ret

0000ba58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ba58:	defff904 	addi	sp,sp,-28
    ba5c:	dfc00615 	stw	ra,24(sp)
    ba60:	df000515 	stw	fp,20(sp)
    ba64:	df000504 	addi	fp,sp,20
    ba68:	e13ffd15 	stw	r4,-12(fp)
    ba6c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ba70:	e0bffd17 	ldw	r2,-12(fp)
    ba74:	1005003a 	cmpeq	r2,r2,zero
    ba78:	1000041e 	bne	r2,zero,ba8c <alt_dev_llist_insert+0x34>
    ba7c:	e0bffd17 	ldw	r2,-12(fp)
    ba80:	10800217 	ldw	r2,8(r2)
    ba84:	1004c03a 	cmpne	r2,r2,zero
    ba88:	1000071e 	bne	r2,zero,baa8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    ba8c:	000bb0c0 	call	bb0c <alt_get_errno>
    ba90:	1007883a 	mov	r3,r2
    ba94:	00800584 	movi	r2,22
    ba98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ba9c:	00bffa84 	movi	r2,-22
    baa0:	e0bfff15 	stw	r2,-4(fp)
    baa4:	00001306 	br	baf4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    baa8:	e0fffd17 	ldw	r3,-12(fp)
    baac:	e0bffe17 	ldw	r2,-8(fp)
    bab0:	e0bffb15 	stw	r2,-20(fp)
    bab4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bab8:	e0fffc17 	ldw	r3,-16(fp)
    babc:	e0bffb17 	ldw	r2,-20(fp)
    bac0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bac4:	e0bffb17 	ldw	r2,-20(fp)
    bac8:	10c00017 	ldw	r3,0(r2)
    bacc:	e0bffc17 	ldw	r2,-16(fp)
    bad0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bad4:	e0bffb17 	ldw	r2,-20(fp)
    bad8:	10c00017 	ldw	r3,0(r2)
    badc:	e0bffc17 	ldw	r2,-16(fp)
    bae0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bae4:	e0fffb17 	ldw	r3,-20(fp)
    bae8:	e0bffc17 	ldw	r2,-16(fp)
    baec:	18800015 	stw	r2,0(r3)

  return 0;  
    baf0:	e03fff15 	stw	zero,-4(fp)
    baf4:	e0bfff17 	ldw	r2,-4(fp)
}
    baf8:	e037883a 	mov	sp,fp
    bafc:	dfc00117 	ldw	ra,4(sp)
    bb00:	df000017 	ldw	fp,0(sp)
    bb04:	dec00204 	addi	sp,sp,8
    bb08:	f800283a 	ret

0000bb0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bb0c:	defffd04 	addi	sp,sp,-12
    bb10:	dfc00215 	stw	ra,8(sp)
    bb14:	df000115 	stw	fp,4(sp)
    bb18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bb1c:	00800074 	movhi	r2,1
    bb20:	1082d304 	addi	r2,r2,2892
    bb24:	10800017 	ldw	r2,0(r2)
    bb28:	1005003a 	cmpeq	r2,r2,zero
    bb2c:	1000061e 	bne	r2,zero,bb48 <alt_get_errno+0x3c>
    bb30:	00800074 	movhi	r2,1
    bb34:	1082d304 	addi	r2,r2,2892
    bb38:	10800017 	ldw	r2,0(r2)
    bb3c:	103ee83a 	callr	r2
    bb40:	e0bfff15 	stw	r2,-4(fp)
    bb44:	00000306 	br	bb54 <alt_get_errno+0x48>
    bb48:	00800074 	movhi	r2,1
    bb4c:	1082fa04 	addi	r2,r2,3048
    bb50:	e0bfff15 	stw	r2,-4(fp)
    bb54:	e0bfff17 	ldw	r2,-4(fp)
}
    bb58:	e037883a 	mov	sp,fp
    bb5c:	dfc00117 	ldw	ra,4(sp)
    bb60:	df000017 	ldw	fp,0(sp)
    bb64:	dec00204 	addi	sp,sp,8
    bb68:	f800283a 	ret

0000bb6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bb6c:	defffd04 	addi	sp,sp,-12
    bb70:	dfc00215 	stw	ra,8(sp)
    bb74:	df000115 	stw	fp,4(sp)
    bb78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bb7c:	00bfff04 	movi	r2,-4
    bb80:	00c00074 	movhi	r3,1
    bb84:	18fb3504 	addi	r3,r3,-4908
    bb88:	1885883a 	add	r2,r3,r2
    bb8c:	e0bfff15 	stw	r2,-4(fp)
    bb90:	00000606 	br	bbac <_do_ctors+0x40>
        (*ctor) (); 
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	10800017 	ldw	r2,0(r2)
    bb9c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bba0:	e0bfff17 	ldw	r2,-4(fp)
    bba4:	10bfff04 	addi	r2,r2,-4
    bba8:	e0bfff15 	stw	r2,-4(fp)
    bbac:	e0ffff17 	ldw	r3,-4(fp)
    bbb0:	00800074 	movhi	r2,1
    bbb4:	10bb3404 	addi	r2,r2,-4912
    bbb8:	18bff62e 	bgeu	r3,r2,bb94 <_do_ctors+0x28>
        (*ctor) (); 
}
    bbbc:	e037883a 	mov	sp,fp
    bbc0:	dfc00117 	ldw	ra,4(sp)
    bbc4:	df000017 	ldw	fp,0(sp)
    bbc8:	dec00204 	addi	sp,sp,8
    bbcc:	f800283a 	ret

0000bbd0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bbd0:	defffd04 	addi	sp,sp,-12
    bbd4:	dfc00215 	stw	ra,8(sp)
    bbd8:	df000115 	stw	fp,4(sp)
    bbdc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bbe0:	00bfff04 	movi	r2,-4
    bbe4:	00c00074 	movhi	r3,1
    bbe8:	18fb3504 	addi	r3,r3,-4908
    bbec:	1885883a 	add	r2,r3,r2
    bbf0:	e0bfff15 	stw	r2,-4(fp)
    bbf4:	00000606 	br	bc10 <_do_dtors+0x40>
        (*dtor) (); 
    bbf8:	e0bfff17 	ldw	r2,-4(fp)
    bbfc:	10800017 	ldw	r2,0(r2)
    bc00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bc04:	e0bfff17 	ldw	r2,-4(fp)
    bc08:	10bfff04 	addi	r2,r2,-4
    bc0c:	e0bfff15 	stw	r2,-4(fp)
    bc10:	e0ffff17 	ldw	r3,-4(fp)
    bc14:	00800074 	movhi	r2,1
    bc18:	10bb3504 	addi	r2,r2,-4908
    bc1c:	18bff62e 	bgeu	r3,r2,bbf8 <_do_dtors+0x28>
        (*dtor) (); 
}
    bc20:	e037883a 	mov	sp,fp
    bc24:	dfc00117 	ldw	ra,4(sp)
    bc28:	df000017 	ldw	fp,0(sp)
    bc2c:	dec00204 	addi	sp,sp,8
    bc30:	f800283a 	ret

0000bc34 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    bc34:	defffb04 	addi	sp,sp,-20
    bc38:	dfc00415 	stw	ra,16(sp)
    bc3c:	df000315 	stw	fp,12(sp)
    bc40:	df000304 	addi	fp,sp,12
    bc44:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    bc48:	e13ffe17 	ldw	r4,-8(fp)
    bc4c:	d1602504 	addi	r5,gp,-32620
    bc50:	000cd640 	call	cd64 <alt_find_dev>
    bc54:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
    bc58:	e0bffd17 	ldw	r2,-12(fp)
    bc5c:	1005003a 	cmpeq	r2,r2,zero
    bc60:	10000b1e 	bne	r2,zero,bc90 <alt_flash_open_dev+0x5c>
    bc64:	e0bffd17 	ldw	r2,-12(fp)
    bc68:	10800317 	ldw	r2,12(r2)
    bc6c:	1005003a 	cmpeq	r2,r2,zero
    bc70:	1000071e 	bne	r2,zero,bc90 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
    bc74:	e0bffd17 	ldw	r2,-12(fp)
    bc78:	10800317 	ldw	r2,12(r2)
    bc7c:	e13ffd17 	ldw	r4,-12(fp)
    bc80:	e17ffe17 	ldw	r5,-8(fp)
    bc84:	103ee83a 	callr	r2
    bc88:	e0bfff15 	stw	r2,-4(fp)
    bc8c:	00000206 	br	bc98 <alt_flash_open_dev+0x64>
  }

  return dev;
    bc90:	e0bffd17 	ldw	r2,-12(fp)
    bc94:	e0bfff15 	stw	r2,-4(fp)
    bc98:	e0bfff17 	ldw	r2,-4(fp)
}
    bc9c:	e037883a 	mov	sp,fp
    bca0:	dfc00117 	ldw	ra,4(sp)
    bca4:	df000017 	ldw	fp,0(sp)
    bca8:	dec00204 	addi	sp,sp,8
    bcac:	f800283a 	ret

0000bcb0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    bcb0:	defffd04 	addi	sp,sp,-12
    bcb4:	dfc00215 	stw	ra,8(sp)
    bcb8:	df000115 	stw	fp,4(sp)
    bcbc:	df000104 	addi	fp,sp,4
    bcc0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    bcc4:	e0bfff17 	ldw	r2,-4(fp)
    bcc8:	1005003a 	cmpeq	r2,r2,zero
    bccc:	1000081e 	bne	r2,zero,bcf0 <alt_flash_close_dev+0x40>
    bcd0:	e0bfff17 	ldw	r2,-4(fp)
    bcd4:	10800417 	ldw	r2,16(r2)
    bcd8:	1005003a 	cmpeq	r2,r2,zero
    bcdc:	1000041e 	bne	r2,zero,bcf0 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
    bce0:	e0bfff17 	ldw	r2,-4(fp)
    bce4:	10800417 	ldw	r2,16(r2)
    bce8:	e13fff17 	ldw	r4,-4(fp)
    bcec:	103ee83a 	callr	r2
  }
  return;
}
    bcf0:	e037883a 	mov	sp,fp
    bcf4:	dfc00117 	ldw	ra,4(sp)
    bcf8:	df000017 	ldw	fp,0(sp)
    bcfc:	dec00204 	addi	sp,sp,8
    bd00:	f800283a 	ret

0000bd04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bd04:	defff904 	addi	sp,sp,-28
    bd08:	dfc00615 	stw	ra,24(sp)
    bd0c:	df000515 	stw	fp,20(sp)
    bd10:	df000504 	addi	fp,sp,20
    bd14:	e13ffc15 	stw	r4,-16(fp)
    bd18:	e17ffd15 	stw	r5,-12(fp)
    bd1c:	e1bffe15 	stw	r6,-8(fp)
    bd20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    bd24:	e0800217 	ldw	r2,8(fp)
    bd28:	d8800015 	stw	r2,0(sp)
    bd2c:	e13ffc17 	ldw	r4,-16(fp)
    bd30:	e17ffd17 	ldw	r5,-12(fp)
    bd34:	e1bffe17 	ldw	r6,-8(fp)
    bd38:	e1ffff17 	ldw	r7,-4(fp)
    bd3c:	000bed80 	call	bed8 <alt_iic_isr_register>
}  
    bd40:	e037883a 	mov	sp,fp
    bd44:	dfc00117 	ldw	ra,4(sp)
    bd48:	df000017 	ldw	fp,0(sp)
    bd4c:	dec00204 	addi	sp,sp,8
    bd50:	f800283a 	ret

0000bd54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    bd54:	defff904 	addi	sp,sp,-28
    bd58:	df000615 	stw	fp,24(sp)
    bd5c:	df000604 	addi	fp,sp,24
    bd60:	e13ffe15 	stw	r4,-8(fp)
    bd64:	e17fff15 	stw	r5,-4(fp)
    bd68:	e0bfff17 	ldw	r2,-4(fp)
    bd6c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd70:	0005303a 	rdctl	r2,status
    bd74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd78:	e0fffb17 	ldw	r3,-20(fp)
    bd7c:	00bfff84 	movi	r2,-2
    bd80:	1884703a 	and	r2,r3,r2
    bd84:	1001703a 	wrctl	status,r2
  
  return context;
    bd88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bd8c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    bd90:	e0fffc17 	ldw	r3,-16(fp)
    bd94:	00800044 	movi	r2,1
    bd98:	10c4983a 	sll	r2,r2,r3
    bd9c:	1007883a 	mov	r3,r2
    bda0:	00800074 	movhi	r2,1
    bda4:	1082f704 	addi	r2,r2,3036
    bda8:	10800017 	ldw	r2,0(r2)
    bdac:	1886b03a 	or	r3,r3,r2
    bdb0:	00800074 	movhi	r2,1
    bdb4:	1082f704 	addi	r2,r2,3036
    bdb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bdbc:	00800074 	movhi	r2,1
    bdc0:	1082f704 	addi	r2,r2,3036
    bdc4:	10800017 	ldw	r2,0(r2)
    bdc8:	100170fa 	wrctl	ienable,r2
    bdcc:	e0bffd17 	ldw	r2,-12(fp)
    bdd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bdd4:	e0bffa17 	ldw	r2,-24(fp)
    bdd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bddc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    bde0:	e037883a 	mov	sp,fp
    bde4:	df000017 	ldw	fp,0(sp)
    bde8:	dec00104 	addi	sp,sp,4
    bdec:	f800283a 	ret

0000bdf0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    bdf0:	defff904 	addi	sp,sp,-28
    bdf4:	df000615 	stw	fp,24(sp)
    bdf8:	df000604 	addi	fp,sp,24
    bdfc:	e13ffe15 	stw	r4,-8(fp)
    be00:	e17fff15 	stw	r5,-4(fp)
    be04:	e0bfff17 	ldw	r2,-4(fp)
    be08:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be0c:	0005303a 	rdctl	r2,status
    be10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be14:	e0fffb17 	ldw	r3,-20(fp)
    be18:	00bfff84 	movi	r2,-2
    be1c:	1884703a 	and	r2,r3,r2
    be20:	1001703a 	wrctl	status,r2
  
  return context;
    be24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    be28:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    be2c:	e0fffc17 	ldw	r3,-16(fp)
    be30:	00800044 	movi	r2,1
    be34:	10c4983a 	sll	r2,r2,r3
    be38:	0084303a 	nor	r2,zero,r2
    be3c:	1007883a 	mov	r3,r2
    be40:	00800074 	movhi	r2,1
    be44:	1082f704 	addi	r2,r2,3036
    be48:	10800017 	ldw	r2,0(r2)
    be4c:	1886703a 	and	r3,r3,r2
    be50:	00800074 	movhi	r2,1
    be54:	1082f704 	addi	r2,r2,3036
    be58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    be5c:	00800074 	movhi	r2,1
    be60:	1082f704 	addi	r2,r2,3036
    be64:	10800017 	ldw	r2,0(r2)
    be68:	100170fa 	wrctl	ienable,r2
    be6c:	e0bffd17 	ldw	r2,-12(fp)
    be70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be74:	e0bffa17 	ldw	r2,-24(fp)
    be78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    be7c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    be80:	e037883a 	mov	sp,fp
    be84:	df000017 	ldw	fp,0(sp)
    be88:	dec00104 	addi	sp,sp,4
    be8c:	f800283a 	ret

0000be90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    be90:	defffc04 	addi	sp,sp,-16
    be94:	df000315 	stw	fp,12(sp)
    be98:	df000304 	addi	fp,sp,12
    be9c:	e13ffe15 	stw	r4,-8(fp)
    bea0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    bea4:	000530fa 	rdctl	r2,ienable
    bea8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    beac:	e0ffff17 	ldw	r3,-4(fp)
    beb0:	00800044 	movi	r2,1
    beb4:	10c4983a 	sll	r2,r2,r3
    beb8:	1007883a 	mov	r3,r2
    bebc:	e0bffd17 	ldw	r2,-12(fp)
    bec0:	1884703a 	and	r2,r3,r2
    bec4:	1004c03a 	cmpne	r2,r2,zero
}
    bec8:	e037883a 	mov	sp,fp
    becc:	df000017 	ldw	fp,0(sp)
    bed0:	dec00104 	addi	sp,sp,4
    bed4:	f800283a 	ret

0000bed8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bed8:	defff404 	addi	sp,sp,-48
    bedc:	dfc00b15 	stw	ra,44(sp)
    bee0:	df000a15 	stw	fp,40(sp)
    bee4:	df000a04 	addi	fp,sp,40
    bee8:	e13ffb15 	stw	r4,-20(fp)
    beec:	e17ffc15 	stw	r5,-16(fp)
    bef0:	e1bffd15 	stw	r6,-12(fp)
    bef4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    bef8:	00bffa84 	movi	r2,-22
    befc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    bf00:	e0bffc17 	ldw	r2,-16(fp)
    bf04:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bf08:	e0bff917 	ldw	r2,-28(fp)
    bf0c:	10800808 	cmpgei	r2,r2,32
    bf10:	1000291e 	bne	r2,zero,bfb8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf14:	0005303a 	rdctl	r2,status
    bf18:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf1c:	e0fff717 	ldw	r3,-36(fp)
    bf20:	00bfff84 	movi	r2,-2
    bf24:	1884703a 	and	r2,r3,r2
    bf28:	1001703a 	wrctl	status,r2
  
  return context;
    bf2c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bf30:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    bf34:	e0bff917 	ldw	r2,-28(fp)
    bf38:	00c000b4 	movhi	r3,2
    bf3c:	18ef8404 	addi	r3,r3,-16880
    bf40:	100490fa 	slli	r2,r2,3
    bf44:	10c7883a 	add	r3,r2,r3
    bf48:	e0bffd17 	ldw	r2,-12(fp)
    bf4c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    bf50:	e0bff917 	ldw	r2,-28(fp)
    bf54:	00c000b4 	movhi	r3,2
    bf58:	18ef8404 	addi	r3,r3,-16880
    bf5c:	100490fa 	slli	r2,r2,3
    bf60:	10c5883a 	add	r2,r2,r3
    bf64:	10c00104 	addi	r3,r2,4
    bf68:	e0bffe17 	ldw	r2,-8(fp)
    bf6c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bf70:	e0bffd17 	ldw	r2,-12(fp)
    bf74:	1005003a 	cmpeq	r2,r2,zero
    bf78:	1000051e 	bne	r2,zero,bf90 <alt_iic_isr_register+0xb8>
    bf7c:	e17ff917 	ldw	r5,-28(fp)
    bf80:	e13ffb17 	ldw	r4,-20(fp)
    bf84:	000bd540 	call	bd54 <alt_ic_irq_enable>
    bf88:	e0bfff15 	stw	r2,-4(fp)
    bf8c:	00000406 	br	bfa0 <alt_iic_isr_register+0xc8>
    bf90:	e17ff917 	ldw	r5,-28(fp)
    bf94:	e13ffb17 	ldw	r4,-20(fp)
    bf98:	000bdf00 	call	bdf0 <alt_ic_irq_disable>
    bf9c:	e0bfff15 	stw	r2,-4(fp)
    bfa0:	e0bfff17 	ldw	r2,-4(fp)
    bfa4:	e0bffa15 	stw	r2,-24(fp)
    bfa8:	e0bff817 	ldw	r2,-32(fp)
    bfac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfb0:	e0bff617 	ldw	r2,-40(fp)
    bfb4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bfb8:	e0bffa17 	ldw	r2,-24(fp)
}
    bfbc:	e037883a 	mov	sp,fp
    bfc0:	dfc00117 	ldw	ra,4(sp)
    bfc4:	df000017 	ldw	fp,0(sp)
    bfc8:	dec00204 	addi	sp,sp,8
    bfcc:	f800283a 	ret

0000bfd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bfd0:	defff804 	addi	sp,sp,-32
    bfd4:	dfc00715 	stw	ra,28(sp)
    bfd8:	df000615 	stw	fp,24(sp)
    bfdc:	dc000515 	stw	r16,20(sp)
    bfe0:	df000504 	addi	fp,sp,20
    bfe4:	e13ffc15 	stw	r4,-16(fp)
    bfe8:	e17ffd15 	stw	r5,-12(fp)
    bfec:	e1bffe15 	stw	r6,-8(fp)
    bff0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    bff4:	e13ffd17 	ldw	r4,-12(fp)
    bff8:	e17ffe17 	ldw	r5,-8(fp)
    bffc:	e1bfff17 	ldw	r6,-4(fp)
    c000:	000c2180 	call	c218 <open>
    c004:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c008:	e0bffb17 	ldw	r2,-20(fp)
    c00c:	1004803a 	cmplt	r2,r2,zero
    c010:	10001f1e 	bne	r2,zero,c090 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c014:	e13ffb17 	ldw	r4,-20(fp)
    c018:	04000074 	movhi	r16,1
    c01c:	84014f04 	addi	r16,r16,1340
    c020:	01400304 	movi	r5,12
    c024:	000e5740 	call	e574 <__mulsi3>
    c028:	1405883a 	add	r2,r2,r16
    c02c:	10c00017 	ldw	r3,0(r2)
    c030:	e0bffc17 	ldw	r2,-16(fp)
    c034:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c038:	e13ffb17 	ldw	r4,-20(fp)
    c03c:	04000074 	movhi	r16,1
    c040:	84014f04 	addi	r16,r16,1340
    c044:	01400304 	movi	r5,12
    c048:	000e5740 	call	e574 <__mulsi3>
    c04c:	1405883a 	add	r2,r2,r16
    c050:	10800104 	addi	r2,r2,4
    c054:	10c00017 	ldw	r3,0(r2)
    c058:	e0bffc17 	ldw	r2,-16(fp)
    c05c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c060:	e13ffb17 	ldw	r4,-20(fp)
    c064:	04000074 	movhi	r16,1
    c068:	84014f04 	addi	r16,r16,1340
    c06c:	01400304 	movi	r5,12
    c070:	000e5740 	call	e574 <__mulsi3>
    c074:	1405883a 	add	r2,r2,r16
    c078:	10800204 	addi	r2,r2,8
    c07c:	10c00017 	ldw	r3,0(r2)
    c080:	e0bffc17 	ldw	r2,-16(fp)
    c084:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c088:	e13ffb17 	ldw	r4,-20(fp)
    c08c:	000c4040 	call	c404 <alt_release_fd>
  }
} 
    c090:	e037883a 	mov	sp,fp
    c094:	dfc00217 	ldw	ra,8(sp)
    c098:	df000117 	ldw	fp,4(sp)
    c09c:	dc000017 	ldw	r16,0(sp)
    c0a0:	dec00304 	addi	sp,sp,12
    c0a4:	f800283a 	ret

0000c0a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c0a8:	defffb04 	addi	sp,sp,-20
    c0ac:	dfc00415 	stw	ra,16(sp)
    c0b0:	df000315 	stw	fp,12(sp)
    c0b4:	df000304 	addi	fp,sp,12
    c0b8:	e13ffd15 	stw	r4,-12(fp)
    c0bc:	e17ffe15 	stw	r5,-8(fp)
    c0c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c0c4:	01000074 	movhi	r4,1
    c0c8:	21015204 	addi	r4,r4,1352
    c0cc:	e17ffd17 	ldw	r5,-12(fp)
    c0d0:	01800044 	movi	r6,1
    c0d4:	01c07fc4 	movi	r7,511
    c0d8:	000bfd00 	call	bfd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c0dc:	01000074 	movhi	r4,1
    c0e0:	21014f04 	addi	r4,r4,1340
    c0e4:	e17ffe17 	ldw	r5,-8(fp)
    c0e8:	000d883a 	mov	r6,zero
    c0ec:	01c07fc4 	movi	r7,511
    c0f0:	000bfd00 	call	bfd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c0f4:	01000074 	movhi	r4,1
    c0f8:	21015504 	addi	r4,r4,1364
    c0fc:	e17fff17 	ldw	r5,-4(fp)
    c100:	01800044 	movi	r6,1
    c104:	01c07fc4 	movi	r7,511
    c108:	000bfd00 	call	bfd0 <alt_open_fd>
}  
    c10c:	e037883a 	mov	sp,fp
    c110:	dfc00117 	ldw	ra,4(sp)
    c114:	df000017 	ldw	fp,0(sp)
    c118:	dec00204 	addi	sp,sp,8
    c11c:	f800283a 	ret

0000c120 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c120:	defffa04 	addi	sp,sp,-24
    c124:	dfc00515 	stw	ra,20(sp)
    c128:	df000415 	stw	fp,16(sp)
    c12c:	dc000315 	stw	r16,12(sp)
    c130:	df000304 	addi	fp,sp,12
    c134:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c138:	e0bffe17 	ldw	r2,-8(fp)
    c13c:	10800217 	ldw	r2,8(r2)
    c140:	10d00034 	orhi	r3,r2,16384
    c144:	e0bffe17 	ldw	r2,-8(fp)
    c148:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c14c:	e03ffd15 	stw	zero,-12(fp)
    c150:	00002306 	br	c1e0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c154:	e13ffd17 	ldw	r4,-12(fp)
    c158:	04000074 	movhi	r16,1
    c15c:	84014f04 	addi	r16,r16,1340
    c160:	01400304 	movi	r5,12
    c164:	000e5740 	call	e574 <__mulsi3>
    c168:	1405883a 	add	r2,r2,r16
    c16c:	10c00017 	ldw	r3,0(r2)
    c170:	e0bffe17 	ldw	r2,-8(fp)
    c174:	10800017 	ldw	r2,0(r2)
    c178:	1880161e 	bne	r3,r2,c1d4 <alt_file_locked+0xb4>
    c17c:	e13ffd17 	ldw	r4,-12(fp)
    c180:	04000074 	movhi	r16,1
    c184:	84014f04 	addi	r16,r16,1340
    c188:	01400304 	movi	r5,12
    c18c:	000e5740 	call	e574 <__mulsi3>
    c190:	1405883a 	add	r2,r2,r16
    c194:	10800204 	addi	r2,r2,8
    c198:	10800017 	ldw	r2,0(r2)
    c19c:	1004403a 	cmpge	r2,r2,zero
    c1a0:	10000c1e 	bne	r2,zero,c1d4 <alt_file_locked+0xb4>
    c1a4:	e13ffd17 	ldw	r4,-12(fp)
    c1a8:	01400304 	movi	r5,12
    c1ac:	000e5740 	call	e574 <__mulsi3>
    c1b0:	1007883a 	mov	r3,r2
    c1b4:	00800074 	movhi	r2,1
    c1b8:	10814f04 	addi	r2,r2,1340
    c1bc:	1887883a 	add	r3,r3,r2
    c1c0:	e0bffe17 	ldw	r2,-8(fp)
    c1c4:	18800326 	beq	r3,r2,c1d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c1c8:	00bffcc4 	movi	r2,-13
    c1cc:	e0bfff15 	stw	r2,-4(fp)
    c1d0:	00000a06 	br	c1fc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c1d4:	e0bffd17 	ldw	r2,-12(fp)
    c1d8:	10800044 	addi	r2,r2,1
    c1dc:	e0bffd15 	stw	r2,-12(fp)
    c1e0:	00800074 	movhi	r2,1
    c1e4:	1082d204 	addi	r2,r2,2888
    c1e8:	10800017 	ldw	r2,0(r2)
    c1ec:	1007883a 	mov	r3,r2
    c1f0:	e0bffd17 	ldw	r2,-12(fp)
    c1f4:	18bfd72e 	bgeu	r3,r2,c154 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c1f8:	e03fff15 	stw	zero,-4(fp)
    c1fc:	e0bfff17 	ldw	r2,-4(fp)
}
    c200:	e037883a 	mov	sp,fp
    c204:	dfc00217 	ldw	ra,8(sp)
    c208:	df000117 	ldw	fp,4(sp)
    c20c:	dc000017 	ldw	r16,0(sp)
    c210:	dec00304 	addi	sp,sp,12
    c214:	f800283a 	ret

0000c218 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c218:	defff404 	addi	sp,sp,-48
    c21c:	dfc00b15 	stw	ra,44(sp)
    c220:	df000a15 	stw	fp,40(sp)
    c224:	df000a04 	addi	fp,sp,40
    c228:	e13ffb15 	stw	r4,-20(fp)
    c22c:	e17ffc15 	stw	r5,-16(fp)
    c230:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c234:	00bfffc4 	movi	r2,-1
    c238:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c23c:	00bffb44 	movi	r2,-19
    c240:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c244:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c248:	e13ffb17 	ldw	r4,-20(fp)
    c24c:	01400074 	movhi	r5,1
    c250:	2942d004 	addi	r5,r5,2880
    c254:	000cd640 	call	cd64 <alt_find_dev>
    c258:	e0bffa15 	stw	r2,-24(fp)
    c25c:	e0bffa17 	ldw	r2,-24(fp)
    c260:	1004c03a 	cmpne	r2,r2,zero
    c264:	1000051e 	bne	r2,zero,c27c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c268:	e13ffb17 	ldw	r4,-20(fp)
    c26c:	000cdf80 	call	cdf8 <alt_find_file>
    c270:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c274:	00800044 	movi	r2,1
    c278:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c27c:	e0bffa17 	ldw	r2,-24(fp)
    c280:	1005003a 	cmpeq	r2,r2,zero
    c284:	1000311e 	bne	r2,zero,c34c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c288:	e13ffa17 	ldw	r4,-24(fp)
    c28c:	000cf180 	call	cf18 <alt_get_fd>
    c290:	e0bff815 	stw	r2,-32(fp)
    c294:	e0bff817 	ldw	r2,-32(fp)
    c298:	1004403a 	cmpge	r2,r2,zero
    c29c:	1000031e 	bne	r2,zero,c2ac <open+0x94>
    {
      status = index;
    c2a0:	e0bff817 	ldw	r2,-32(fp)
    c2a4:	e0bff715 	stw	r2,-36(fp)
    c2a8:	00002a06 	br	c354 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c2ac:	e13ff817 	ldw	r4,-32(fp)
    c2b0:	01400304 	movi	r5,12
    c2b4:	000e5740 	call	e574 <__mulsi3>
    c2b8:	1007883a 	mov	r3,r2
    c2bc:	00800074 	movhi	r2,1
    c2c0:	10814f04 	addi	r2,r2,1340
    c2c4:	1885883a 	add	r2,r3,r2
    c2c8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c2cc:	e0fffc17 	ldw	r3,-16(fp)
    c2d0:	00900034 	movhi	r2,16384
    c2d4:	10bfffc4 	addi	r2,r2,-1
    c2d8:	1886703a 	and	r3,r3,r2
    c2dc:	e0bff917 	ldw	r2,-28(fp)
    c2e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c2e4:	e0bff617 	ldw	r2,-40(fp)
    c2e8:	1004c03a 	cmpne	r2,r2,zero
    c2ec:	1000061e 	bne	r2,zero,c308 <open+0xf0>
    c2f0:	e13ff917 	ldw	r4,-28(fp)
    c2f4:	000c1200 	call	c120 <alt_file_locked>
    c2f8:	e0bff715 	stw	r2,-36(fp)
    c2fc:	e0bff717 	ldw	r2,-36(fp)
    c300:	1004803a 	cmplt	r2,r2,zero
    c304:	1000131e 	bne	r2,zero,c354 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c308:	e0bffa17 	ldw	r2,-24(fp)
    c30c:	10800317 	ldw	r2,12(r2)
    c310:	1005003a 	cmpeq	r2,r2,zero
    c314:	1000091e 	bne	r2,zero,c33c <open+0x124>
    c318:	e0bffa17 	ldw	r2,-24(fp)
    c31c:	10800317 	ldw	r2,12(r2)
    c320:	e13ff917 	ldw	r4,-28(fp)
    c324:	e17ffb17 	ldw	r5,-20(fp)
    c328:	e1bffc17 	ldw	r6,-16(fp)
    c32c:	e1fffd17 	ldw	r7,-12(fp)
    c330:	103ee83a 	callr	r2
    c334:	e0bfff15 	stw	r2,-4(fp)
    c338:	00000106 	br	c340 <open+0x128>
    c33c:	e03fff15 	stw	zero,-4(fp)
    c340:	e0bfff17 	ldw	r2,-4(fp)
    c344:	e0bff715 	stw	r2,-36(fp)
    c348:	00000206 	br	c354 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c34c:	00bffb44 	movi	r2,-19
    c350:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c354:	e0bff717 	ldw	r2,-36(fp)
    c358:	1004403a 	cmpge	r2,r2,zero
    c35c:	1000091e 	bne	r2,zero,c384 <open+0x16c>
  {
    alt_release_fd (index);  
    c360:	e13ff817 	ldw	r4,-32(fp)
    c364:	000c4040 	call	c404 <alt_release_fd>
    ALT_ERRNO = -status;
    c368:	000c3a40 	call	c3a4 <alt_get_errno>
    c36c:	e0fff717 	ldw	r3,-36(fp)
    c370:	00c7c83a 	sub	r3,zero,r3
    c374:	10c00015 	stw	r3,0(r2)
    return -1;
    c378:	00bfffc4 	movi	r2,-1
    c37c:	e0bffe15 	stw	r2,-8(fp)
    c380:	00000206 	br	c38c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    c384:	e0bff817 	ldw	r2,-32(fp)
    c388:	e0bffe15 	stw	r2,-8(fp)
    c38c:	e0bffe17 	ldw	r2,-8(fp)
}
    c390:	e037883a 	mov	sp,fp
    c394:	dfc00117 	ldw	ra,4(sp)
    c398:	df000017 	ldw	fp,0(sp)
    c39c:	dec00204 	addi	sp,sp,8
    c3a0:	f800283a 	ret

0000c3a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c3a4:	defffd04 	addi	sp,sp,-12
    c3a8:	dfc00215 	stw	ra,8(sp)
    c3ac:	df000115 	stw	fp,4(sp)
    c3b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c3b4:	00800074 	movhi	r2,1
    c3b8:	1082d304 	addi	r2,r2,2892
    c3bc:	10800017 	ldw	r2,0(r2)
    c3c0:	1005003a 	cmpeq	r2,r2,zero
    c3c4:	1000061e 	bne	r2,zero,c3e0 <alt_get_errno+0x3c>
    c3c8:	00800074 	movhi	r2,1
    c3cc:	1082d304 	addi	r2,r2,2892
    c3d0:	10800017 	ldw	r2,0(r2)
    c3d4:	103ee83a 	callr	r2
    c3d8:	e0bfff15 	stw	r2,-4(fp)
    c3dc:	00000306 	br	c3ec <alt_get_errno+0x48>
    c3e0:	00800074 	movhi	r2,1
    c3e4:	1082fa04 	addi	r2,r2,3048
    c3e8:	e0bfff15 	stw	r2,-4(fp)
    c3ec:	e0bfff17 	ldw	r2,-4(fp)
}
    c3f0:	e037883a 	mov	sp,fp
    c3f4:	dfc00117 	ldw	ra,4(sp)
    c3f8:	df000017 	ldw	fp,0(sp)
    c3fc:	dec00204 	addi	sp,sp,8
    c400:	f800283a 	ret

0000c404 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c404:	defffc04 	addi	sp,sp,-16
    c408:	dfc00315 	stw	ra,12(sp)
    c40c:	df000215 	stw	fp,8(sp)
    c410:	dc000115 	stw	r16,4(sp)
    c414:	df000104 	addi	fp,sp,4
    c418:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c41c:	e0bfff17 	ldw	r2,-4(fp)
    c420:	108000d0 	cmplti	r2,r2,3
    c424:	10000f1e 	bne	r2,zero,c464 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    c428:	e13fff17 	ldw	r4,-4(fp)
    c42c:	04000074 	movhi	r16,1
    c430:	84014f04 	addi	r16,r16,1340
    c434:	01400304 	movi	r5,12
    c438:	000e5740 	call	e574 <__mulsi3>
    c43c:	1405883a 	add	r2,r2,r16
    c440:	10800204 	addi	r2,r2,8
    c444:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c448:	e13fff17 	ldw	r4,-4(fp)
    c44c:	04000074 	movhi	r16,1
    c450:	84014f04 	addi	r16,r16,1340
    c454:	01400304 	movi	r5,12
    c458:	000e5740 	call	e574 <__mulsi3>
    c45c:	1405883a 	add	r2,r2,r16
    c460:	10000015 	stw	zero,0(r2)
  }
}
    c464:	e037883a 	mov	sp,fp
    c468:	dfc00217 	ldw	ra,8(sp)
    c46c:	df000117 	ldw	fp,4(sp)
    c470:	dc000017 	ldw	r16,0(sp)
    c474:	dec00304 	addi	sp,sp,12
    c478:	f800283a 	ret

0000c47c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c47c:	defffa04 	addi	sp,sp,-24
    c480:	df000515 	stw	fp,20(sp)
    c484:	df000504 	addi	fp,sp,20
    c488:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c48c:	0005303a 	rdctl	r2,status
    c490:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c494:	e0fffd17 	ldw	r3,-12(fp)
    c498:	00bfff84 	movi	r2,-2
    c49c:	1884703a 	and	r2,r3,r2
    c4a0:	1001703a 	wrctl	status,r2
  
  return context;
    c4a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c4a8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    c4ac:	e0bfff17 	ldw	r2,-4(fp)
    c4b0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c4b4:	e0bffc17 	ldw	r2,-16(fp)
    c4b8:	10c00017 	ldw	r3,0(r2)
    c4bc:	e0bffc17 	ldw	r2,-16(fp)
    c4c0:	10800117 	ldw	r2,4(r2)
    c4c4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    c4c8:	e0bffc17 	ldw	r2,-16(fp)
    c4cc:	10c00117 	ldw	r3,4(r2)
    c4d0:	e0bffc17 	ldw	r2,-16(fp)
    c4d4:	10800017 	ldw	r2,0(r2)
    c4d8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c4dc:	e0fffc17 	ldw	r3,-16(fp)
    c4e0:	e0bffc17 	ldw	r2,-16(fp)
    c4e4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    c4e8:	e0fffc17 	ldw	r3,-16(fp)
    c4ec:	e0bffc17 	ldw	r2,-16(fp)
    c4f0:	18800015 	stw	r2,0(r3)
    c4f4:	e0bffe17 	ldw	r2,-8(fp)
    c4f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c4fc:	e0bffb17 	ldw	r2,-20(fp)
    c500:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c504:	e037883a 	mov	sp,fp
    c508:	df000017 	ldw	fp,0(sp)
    c50c:	dec00104 	addi	sp,sp,4
    c510:	f800283a 	ret

0000c514 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c514:	defffb04 	addi	sp,sp,-20
    c518:	dfc00415 	stw	ra,16(sp)
    c51c:	df000315 	stw	fp,12(sp)
    c520:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c524:	d0a02817 	ldw	r2,-32608(gp)
    c528:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c52c:	d0a04a17 	ldw	r2,-32472(gp)
    c530:	10800044 	addi	r2,r2,1
    c534:	d0a04a15 	stw	r2,-32472(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c538:	00003106 	br	c600 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    c53c:	e0bffe17 	ldw	r2,-8(fp)
    c540:	10800017 	ldw	r2,0(r2)
    c544:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c548:	e0bffe17 	ldw	r2,-8(fp)
    c54c:	10800403 	ldbu	r2,16(r2)
    c550:	10803fcc 	andi	r2,r2,255
    c554:	1005003a 	cmpeq	r2,r2,zero
    c558:	1000051e 	bne	r2,zero,c570 <alt_tick+0x5c>
    c55c:	d0a04a17 	ldw	r2,-32472(gp)
    c560:	1004c03a 	cmpne	r2,r2,zero
    c564:	1000021e 	bne	r2,zero,c570 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c568:	e0bffe17 	ldw	r2,-8(fp)
    c56c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c570:	e0bffe17 	ldw	r2,-8(fp)
    c574:	10c00217 	ldw	r3,8(r2)
    c578:	d0a04a17 	ldw	r2,-32472(gp)
    c57c:	10c01e36 	bltu	r2,r3,c5f8 <alt_tick+0xe4>
    c580:	e0bffe17 	ldw	r2,-8(fp)
    c584:	10800403 	ldbu	r2,16(r2)
    c588:	10803fcc 	andi	r2,r2,255
    c58c:	1004c03a 	cmpne	r2,r2,zero
    c590:	1000191e 	bne	r2,zero,c5f8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c594:	e0bffe17 	ldw	r2,-8(fp)
    c598:	10c00317 	ldw	r3,12(r2)
    c59c:	e0bffe17 	ldw	r2,-8(fp)
    c5a0:	11000517 	ldw	r4,20(r2)
    c5a4:	183ee83a 	callr	r3
    c5a8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c5ac:	e0bffd17 	ldw	r2,-12(fp)
    c5b0:	1004c03a 	cmpne	r2,r2,zero
    c5b4:	1000031e 	bne	r2,zero,c5c4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c5b8:	e13ffe17 	ldw	r4,-8(fp)
    c5bc:	000c47c0 	call	c47c <alt_alarm_stop>
    c5c0:	00000d06 	br	c5f8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c5c4:	e0bffe17 	ldw	r2,-8(fp)
    c5c8:	10c00217 	ldw	r3,8(r2)
    c5cc:	e0bffd17 	ldw	r2,-12(fp)
    c5d0:	1887883a 	add	r3,r3,r2
    c5d4:	e0bffe17 	ldw	r2,-8(fp)
    c5d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c5dc:	e0bffe17 	ldw	r2,-8(fp)
    c5e0:	10c00217 	ldw	r3,8(r2)
    c5e4:	d0a04a17 	ldw	r2,-32472(gp)
    c5e8:	1880032e 	bgeu	r3,r2,c5f8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c5ec:	e0fffe17 	ldw	r3,-8(fp)
    c5f0:	00800044 	movi	r2,1
    c5f4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c5f8:	e0bfff17 	ldw	r2,-4(fp)
    c5fc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c600:	d0e02804 	addi	r3,gp,-32608
    c604:	e0bffe17 	ldw	r2,-8(fp)
    c608:	10ffcc1e 	bne	r2,r3,c53c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c60c:	00014840 	call	1484 <OSTimeTick>
}
    c610:	e037883a 	mov	sp,fp
    c614:	dfc00117 	ldw	ra,4(sp)
    c618:	df000017 	ldw	fp,0(sp)
    c61c:	dec00204 	addi	sp,sp,8
    c620:	f800283a 	ret

0000c624 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c624:	deffff04 	addi	sp,sp,-4
    c628:	df000015 	stw	fp,0(sp)
    c62c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c630:	000170fa 	wrctl	ienable,zero
}
    c634:	e037883a 	mov	sp,fp
    c638:	df000017 	ldw	fp,0(sp)
    c63c:	dec00104 	addi	sp,sp,4
    c640:	f800283a 	ret

0000c644 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    c644:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    c648:	d0e02a17 	ldw	r3,-32600(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    c64c:	d1204217 	ldw	r4,-32504(gp)

      stw ra,  0(sp)
    c650:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    c654:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    c658:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    c65c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    c660:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    c664:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    c668:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    c66c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    c670:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    c674:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    c678:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    c67c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c680:	000ca640 	call	ca64 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    c684:	d1203d17 	ldw	r4,-32524(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    c688:	d1603507 	ldb	r5,-32556(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    c68c:	d1204215 	stw	r4,-32504(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    c690:	d1603545 	stb	r5,-32555(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    c694:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    c698:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    c69c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    c6a0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    c6a4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    c6a8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    c6ac:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    c6b0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    c6b4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    c6b8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    c6bc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    c6c0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    c6c4:	d0e02a15 	stw	r3,-32600(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    c6c8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    c6cc:	f800283a 	ret

0000c6d0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    c6d0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    c6d4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    c6d8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    c6dc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c6e0:	000ca640 	call	ca64 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    c6e4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    c6e8:	d4a03345 	stb	r18,-32563(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    c6ec:	003fe506 	br	c684 <OSCtxSw+0x40>

0000c6f0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    c6f0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    c6f4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    c6f8:	10800054 	ori	r2,r2,1
      wrctl status, r2
    c6fc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    c700:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    c704:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    c708:	dec00204 	addi	sp,sp,8

      callr r2
    c70c:	103ee83a 	callr	r2

      nop
    c710:	0001883a 	nop

0000c714 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    c714:	defff704 	addi	sp,sp,-36
    c718:	dfc00815 	stw	ra,32(sp)
    c71c:	df000715 	stw	fp,28(sp)
    c720:	df000704 	addi	fp,sp,28
    c724:	e13ffc15 	stw	r4,-16(fp)
    c728:	e17ffd15 	stw	r5,-12(fp)
    c72c:	e1bffe15 	stw	r6,-8(fp)
    c730:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    c734:	e0bffe17 	ldw	r2,-8(fp)
    c738:	1007883a 	mov	r3,r2
    c73c:	00bfff04 	movi	r2,-4
    c740:	1884703a 	and	r2,r3,r2
    c744:	10bf0004 	addi	r2,r2,-1024
    c748:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    c74c:	e0bff917 	ldw	r2,-28(fp)
    c750:	10000015 	stw	zero,0(r2)
    c754:	e0bff917 	ldw	r2,-28(fp)
    c758:	10c0bb04 	addi	r3,r2,748
    c75c:	e0bff917 	ldw	r2,-28(fp)
    c760:	10c00115 	stw	r3,4(r2)
    c764:	e0bff917 	ldw	r2,-28(fp)
    c768:	1080bb04 	addi	r2,r2,748
    c76c:	10c01704 	addi	r3,r2,92
    c770:	e0bff917 	ldw	r2,-28(fp)
    c774:	10c00215 	stw	r3,8(r2)
    c778:	e0bff917 	ldw	r2,-28(fp)
    c77c:	1080bb04 	addi	r2,r2,748
    c780:	10c02e04 	addi	r3,r2,184
    c784:	e0bff917 	ldw	r2,-28(fp)
    c788:	10c00315 	stw	r3,12(r2)
    c78c:	e0bff917 	ldw	r2,-28(fp)
    c790:	10000415 	stw	zero,16(r2)
    c794:	e0bff917 	ldw	r2,-28(fp)
    c798:	10800504 	addi	r2,r2,20
    c79c:	1009883a 	mov	r4,r2
    c7a0:	01800644 	movi	r6,25
    c7a4:	000b883a 	mov	r5,zero
    c7a8:	000d17c0 	call	d17c <memset>
    c7ac:	e0bff917 	ldw	r2,-28(fp)
    c7b0:	10000c15 	stw	zero,48(r2)
    c7b4:	e0fff917 	ldw	r3,-28(fp)
    c7b8:	00800074 	movhi	r2,1
    c7bc:	10bbad04 	addi	r2,r2,-4428
    c7c0:	18800d15 	stw	r2,52(r3)
    c7c4:	e0bff917 	ldw	r2,-28(fp)
    c7c8:	10000e15 	stw	zero,56(r2)
    c7cc:	e0bff917 	ldw	r2,-28(fp)
    c7d0:	10000f15 	stw	zero,60(r2)
    c7d4:	e0bff917 	ldw	r2,-28(fp)
    c7d8:	10001015 	stw	zero,64(r2)
    c7dc:	e0bff917 	ldw	r2,-28(fp)
    c7e0:	10001115 	stw	zero,68(r2)
    c7e4:	e0bff917 	ldw	r2,-28(fp)
    c7e8:	10001215 	stw	zero,72(r2)
    c7ec:	e0bff917 	ldw	r2,-28(fp)
    c7f0:	10001315 	stw	zero,76(r2)
    c7f4:	e0bff917 	ldw	r2,-28(fp)
    c7f8:	10001415 	stw	zero,80(r2)
    c7fc:	e0bff917 	ldw	r2,-28(fp)
    c800:	10001515 	stw	zero,84(r2)
    c804:	e0bff917 	ldw	r2,-28(fp)
    c808:	10001615 	stw	zero,88(r2)
    c80c:	e0bff917 	ldw	r2,-28(fp)
    c810:	10001715 	stw	zero,92(r2)
    c814:	e0bff917 	ldw	r2,-28(fp)
    c818:	10001805 	stb	zero,96(r2)
    c81c:	e0bff917 	ldw	r2,-28(fp)
    c820:	10801f04 	addi	r2,r2,124
    c824:	10000015 	stw	zero,0(r2)
    c828:	10000115 	stw	zero,4(r2)
    c82c:	10000215 	stw	zero,8(r2)
    c830:	10000315 	stw	zero,12(r2)
    c834:	10000415 	stw	zero,16(r2)
    c838:	10000515 	stw	zero,20(r2)
    c83c:	10000615 	stw	zero,24(r2)
    c840:	10000715 	stw	zero,28(r2)
    c844:	10000815 	stw	zero,32(r2)
    c848:	e0bff917 	ldw	r2,-28(fp)
    c84c:	10002815 	stw	zero,160(r2)
    c850:	e0fff917 	ldw	r3,-28(fp)
    c854:	00800044 	movi	r2,1
    c858:	18802915 	stw	r2,164(r3)
    c85c:	18002a15 	stw	zero,168(r3)
    c860:	e0fff917 	ldw	r3,-28(fp)
    c864:	008cc384 	movi	r2,13070
    c868:	18802b0d 	sth	r2,172(r3)
    c86c:	e0fff917 	ldw	r3,-28(fp)
    c870:	00aaf344 	movi	r2,-21555
    c874:	18802b8d 	sth	r2,174(r3)
    c878:	e0fff917 	ldw	r3,-28(fp)
    c87c:	00848d04 	movi	r2,4660
    c880:	18802c0d 	sth	r2,176(r3)
    c884:	e0fff917 	ldw	r3,-28(fp)
    c888:	00b99b44 	movi	r2,-6547
    c88c:	18802c8d 	sth	r2,178(r3)
    c890:	e0fff917 	ldw	r3,-28(fp)
    c894:	00b7bb04 	movi	r2,-8468
    c898:	18802d0d 	sth	r2,180(r3)
    c89c:	e0fff917 	ldw	r3,-28(fp)
    c8a0:	00800144 	movi	r2,5
    c8a4:	18802d8d 	sth	r2,182(r3)
    c8a8:	e0fff917 	ldw	r3,-28(fp)
    c8ac:	008002c4 	movi	r2,11
    c8b0:	18802e0d 	sth	r2,184(r3)
    c8b4:	e0bff917 	ldw	r2,-28(fp)
    c8b8:	10002f15 	stw	zero,188(r2)
    c8bc:	e0bff917 	ldw	r2,-28(fp)
    c8c0:	10003015 	stw	zero,192(r2)
    c8c4:	e0bff917 	ldw	r2,-28(fp)
    c8c8:	10003115 	stw	zero,196(r2)
    c8cc:	e0bff917 	ldw	r2,-28(fp)
    c8d0:	10003215 	stw	zero,200(r2)
    c8d4:	e0bff917 	ldw	r2,-28(fp)
    c8d8:	10003315 	stw	zero,204(r2)
    c8dc:	e0bff917 	ldw	r2,-28(fp)
    c8e0:	10003415 	stw	zero,208(r2)
    c8e4:	e0bff917 	ldw	r2,-28(fp)
    c8e8:	10003e15 	stw	zero,248(r2)
    c8ec:	e0bff917 	ldw	r2,-28(fp)
    c8f0:	10003f15 	stw	zero,252(r2)
    c8f4:	e0bff917 	ldw	r2,-28(fp)
    c8f8:	10004015 	stw	zero,256(r2)
    c8fc:	e0bff917 	ldw	r2,-28(fp)
    c900:	10004115 	stw	zero,260(r2)
    c904:	e0bff917 	ldw	r2,-28(fp)
    c908:	10004215 	stw	zero,264(r2)
    c90c:	e0bff917 	ldw	r2,-28(fp)
    c910:	10004315 	stw	zero,268(r2)
    c914:	e0bff917 	ldw	r2,-28(fp)
    c918:	10004415 	stw	zero,272(r2)
    c91c:	e0bff917 	ldw	r2,-28(fp)
    c920:	10004515 	stw	zero,276(r2)
    c924:	e0bff917 	ldw	r2,-28(fp)
    c928:	10004615 	stw	zero,280(r2)
    c92c:	e0bff917 	ldw	r2,-28(fp)
    c930:	10004715 	stw	zero,284(r2)
    c934:	e0bff917 	ldw	r2,-28(fp)
    c938:	10003505 	stb	zero,212(r2)
    c93c:	e0bff917 	ldw	r2,-28(fp)
    c940:	10003705 	stb	zero,220(r2)
    c944:	e0bff917 	ldw	r2,-28(fp)
    c948:	10003d15 	stw	zero,244(r2)
    c94c:	e0bff917 	ldw	r2,-28(fp)
    c950:	10005215 	stw	zero,328(r2)
    c954:	e0bff917 	ldw	r2,-28(fp)
    c958:	10005315 	stw	zero,332(r2)
    c95c:	e0bff917 	ldw	r2,-28(fp)
    c960:	10005415 	stw	zero,336(r2)
    c964:	e0bff917 	ldw	r2,-28(fp)
    c968:	10005515 	stw	zero,340(r2)
    c96c:	e0bff917 	ldw	r2,-28(fp)
    c970:	1000b515 	stw	zero,724(r2)
    c974:	e0bff917 	ldw	r2,-28(fp)
    c978:	10007515 	stw	zero,468(r2)
    c97c:	e0bff917 	ldw	r2,-28(fp)
    c980:	1000b715 	stw	zero,732(r2)
    c984:	e0bff917 	ldw	r2,-28(fp)
    c988:	1000b815 	stw	zero,736(r2)
    c98c:	e0bff917 	ldw	r2,-28(fp)
    c990:	1000b915 	stw	zero,740(r2)
    c994:	e0bff917 	ldw	r2,-28(fp)
    c998:	1000ba15 	stw	zero,744(r2)
    c99c:	e0bff917 	ldw	r2,-28(fp)
    c9a0:	1080bb04 	addi	r2,r2,748
    c9a4:	1009883a 	mov	r4,r2
    c9a8:	01804504 	movi	r6,276
    c9ac:	000b883a 	mov	r5,zero
    c9b0:	000d17c0 	call	d17c <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    c9b4:	e0bff917 	ldw	r2,-28(fp)
    c9b8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    c9bc:	e0bffb17 	ldw	r2,-20(fp)
    c9c0:	10bff304 	addi	r2,r2,-52
    c9c4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    c9c8:	e0bffa17 	ldw	r2,-24(fp)
    c9cc:	10c00c04 	addi	r3,r2,48
    c9d0:	e0bffc17 	ldw	r2,-16(fp)
    c9d4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    c9d8:	e0bffa17 	ldw	r2,-24(fp)
    c9dc:	10c00b04 	addi	r3,r2,44
    c9e0:	e0bffd17 	ldw	r2,-12(fp)
    c9e4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    c9e8:	e0bffa17 	ldw	r2,-24(fp)
    c9ec:	10c00a04 	addi	r3,r2,40
    c9f0:	e0bff917 	ldw	r2,-28(fp)
    c9f4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    c9f8:	00800074 	movhi	r2,1
    c9fc:	10b1bc04 	addi	r2,r2,-14608
    ca00:	10c00104 	addi	r3,r2,4
    ca04:	e0bffa17 	ldw	r2,-24(fp)
    ca08:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    ca0c:	e0bffa17 	ldw	r2,-24(fp)
}
    ca10:	e037883a 	mov	sp,fp
    ca14:	dfc00117 	ldw	ra,4(sp)
    ca18:	df000017 	ldw	fp,0(sp)
    ca1c:	dec00204 	addi	sp,sp,8
    ca20:	f800283a 	ret

0000ca24 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    ca24:	defffe04 	addi	sp,sp,-8
    ca28:	df000115 	stw	fp,4(sp)
    ca2c:	df000104 	addi	fp,sp,4
    ca30:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    ca34:	e037883a 	mov	sp,fp
    ca38:	df000017 	ldw	fp,0(sp)
    ca3c:	dec00104 	addi	sp,sp,4
    ca40:	f800283a 	ret

0000ca44 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    ca44:	defffe04 	addi	sp,sp,-8
    ca48:	df000115 	stw	fp,4(sp)
    ca4c:	df000104 	addi	fp,sp,4
    ca50:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    ca54:	e037883a 	mov	sp,fp
    ca58:	df000017 	ldw	fp,0(sp)
    ca5c:	dec00104 	addi	sp,sp,4
    ca60:	f800283a 	ret

0000ca64 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    ca64:	deffff04 	addi	sp,sp,-4
    ca68:	df000015 	stw	fp,0(sp)
    ca6c:	d839883a 	mov	fp,sp
}
    ca70:	e037883a 	mov	sp,fp
    ca74:	df000017 	ldw	fp,0(sp)
    ca78:	dec00104 	addi	sp,sp,4
    ca7c:	f800283a 	ret

0000ca80 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    ca80:	deffff04 	addi	sp,sp,-4
    ca84:	df000015 	stw	fp,0(sp)
    ca88:	d839883a 	mov	fp,sp
}
    ca8c:	e037883a 	mov	sp,fp
    ca90:	df000017 	ldw	fp,0(sp)
    ca94:	dec00104 	addi	sp,sp,4
    ca98:	f800283a 	ret

0000ca9c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    ca9c:	deffff04 	addi	sp,sp,-4
    caa0:	df000015 	stw	fp,0(sp)
    caa4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    caa8:	e037883a 	mov	sp,fp
    caac:	df000017 	ldw	fp,0(sp)
    cab0:	dec00104 	addi	sp,sp,4
    cab4:	f800283a 	ret

0000cab8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    cab8:	deffff04 	addi	sp,sp,-4
    cabc:	df000015 	stw	fp,0(sp)
    cac0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    cac4:	e037883a 	mov	sp,fp
    cac8:	df000017 	ldw	fp,0(sp)
    cacc:	dec00104 	addi	sp,sp,4
    cad0:	f800283a 	ret

0000cad4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    cad4:	deffff04 	addi	sp,sp,-4
    cad8:	df000015 	stw	fp,0(sp)
    cadc:	d839883a 	mov	fp,sp
}
    cae0:	e037883a 	mov	sp,fp
    cae4:	df000017 	ldw	fp,0(sp)
    cae8:	dec00104 	addi	sp,sp,4
    caec:	f800283a 	ret

0000caf0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    caf0:	deffff04 	addi	sp,sp,-4
    caf4:	df000015 	stw	fp,0(sp)
    caf8:	d839883a 	mov	fp,sp
}
    cafc:	e037883a 	mov	sp,fp
    cb00:	df000017 	ldw	fp,0(sp)
    cb04:	dec00104 	addi	sp,sp,4
    cb08:	f800283a 	ret

0000cb0c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    cb0c:	defffe04 	addi	sp,sp,-8
    cb10:	df000115 	stw	fp,4(sp)
    cb14:	df000104 	addi	fp,sp,4
    cb18:	e13fff15 	stw	r4,-4(fp)
}
    cb1c:	e037883a 	mov	sp,fp
    cb20:	df000017 	ldw	fp,0(sp)
    cb24:	dec00104 	addi	sp,sp,4
    cb28:	f800283a 	ret

0000cb2c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    cb2c:	defff404 	addi	sp,sp,-48
    cb30:	df000b15 	stw	fp,44(sp)
    cb34:	df000b04 	addi	fp,sp,44
    cb38:	e13ffc15 	stw	r4,-16(fp)
    cb3c:	e17ffd15 	stw	r5,-12(fp)
    cb40:	e1bffe15 	stw	r6,-8(fp)
    cb44:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    cb48:	e0fffe17 	ldw	r3,-8(fp)
    cb4c:	e0bfff17 	ldw	r2,-4(fp)
    cb50:	10c5883a 	add	r2,r2,r3
    cb54:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
    cb58:	e0c00117 	ldw	r3,4(fp)
    cb5c:	e0800217 	ldw	r2,8(fp)
    cb60:	10c5883a 	add	r2,r2,r3
    cb64:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
    cb68:	e0800117 	ldw	r2,4(fp)
    cb6c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
    cb70:	e0bffe17 	ldw	r2,-8(fp)
    cb74:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    cb78:	00800044 	movi	r2,1
    cb7c:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    cb80:	e0bffc17 	ldw	r2,-16(fp)
    cb84:	11000504 	addi	r4,r2,20
    cb88:	e0fffd17 	ldw	r3,-12(fp)
    cb8c:	00800044 	movi	r2,1
    cb90:	10c6983a 	sll	r3,r2,r3
    cb94:	2005883a 	mov	r2,r4
    cb98:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    cb9c:	e0800317 	ldw	r2,12(fp)
    cba0:	1080008c 	andi	r2,r2,2
    cba4:	1004c03a 	cmpne	r2,r2,zero
    cba8:	1000051e 	bne	r2,zero,cbc0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    cbac:	e0bffc17 	ldw	r2,-16(fp)
    cbb0:	10800304 	addi	r2,r2,12
    cbb4:	1007883a 	mov	r3,r2
    cbb8:	00810004 	movi	r2,1024
    cbbc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    cbc0:	e0bffc17 	ldw	r2,-16(fp)
    cbc4:	10800037 	ldwio	r2,0(r2)
    cbc8:	00000006 	br	cbcc <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    cbcc:	e0bffc17 	ldw	r2,-16(fp)
    cbd0:	10800204 	addi	r2,r2,8
    cbd4:	10800037 	ldwio	r2,0(r2)
    cbd8:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    cbdc:	e0bff717 	ldw	r2,-36(fp)
    cbe0:	1080100c 	andi	r2,r2,64
    cbe4:	1005003a 	cmpeq	r2,r2,zero
    cbe8:	1000031e 	bne	r2,zero,cbf8 <alt_avalon_spi_command+0xcc>
    cbec:	e0bff617 	ldw	r2,-40(fp)
    cbf0:	1004c03a 	cmpne	r2,r2,zero
    cbf4:	1000041e 	bne	r2,zero,cc08 <alt_avalon_spi_command+0xdc>
    cbf8:	e0bff717 	ldw	r2,-36(fp)
    cbfc:	1080200c 	andi	r2,r2,128
    cc00:	1005003a 	cmpeq	r2,r2,zero
    cc04:	103ff11e 	bne	r2,zero,cbcc <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    cc08:	e0bff717 	ldw	r2,-36(fp)
    cc0c:	1080100c 	andi	r2,r2,64
    cc10:	1005003a 	cmpeq	r2,r2,zero
    cc14:	1000201e 	bne	r2,zero,cc98 <alt_avalon_spi_command+0x16c>
    cc18:	e0bff617 	ldw	r2,-40(fp)
    cc1c:	10800050 	cmplti	r2,r2,1
    cc20:	10001d1e 	bne	r2,zero,cc98 <alt_avalon_spi_command+0x16c>
    {
      credits--;
    cc24:	e0bff617 	ldw	r2,-40(fp)
    cc28:	10bfffc4 	addi	r2,r2,-1
    cc2c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
    cc30:	e0ffff17 	ldw	r3,-4(fp)
    cc34:	e0bffb17 	ldw	r2,-20(fp)
    cc38:	18800b2e 	bgeu	r3,r2,cc68 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    cc3c:	e0bffc17 	ldw	r2,-16(fp)
    cc40:	11000104 	addi	r4,r2,4
    cc44:	e0bfff17 	ldw	r2,-4(fp)
    cc48:	10800003 	ldbu	r2,0(r2)
    cc4c:	10c03fcc 	andi	r3,r2,255
    cc50:	e0bfff17 	ldw	r2,-4(fp)
    cc54:	10800044 	addi	r2,r2,1
    cc58:	e0bfff15 	stw	r2,-4(fp)
    cc5c:	2005883a 	mov	r2,r4
    cc60:	10c00035 	stwio	r3,0(r2)
    cc64:	00000c06 	br	cc98 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
    cc68:	e0bff917 	ldw	r2,-28(fp)
    cc6c:	1005003a 	cmpeq	r2,r2,zero
    cc70:	1000071e 	bne	r2,zero,cc90 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
    cc74:	e0bff917 	ldw	r2,-28(fp)
    cc78:	10bfffc4 	addi	r2,r2,-1
    cc7c:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    cc80:	e0bffc17 	ldw	r2,-16(fp)
    cc84:	10800104 	addi	r2,r2,4
    cc88:	10000035 	stwio	zero,0(r2)
    cc8c:	00000206 	br	cc98 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
    cc90:	00bf0004 	movi	r2,-1024
    cc94:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    cc98:	e0bff717 	ldw	r2,-36(fp)
    cc9c:	1080200c 	andi	r2,r2,128
    cca0:	1005003a 	cmpeq	r2,r2,zero
    cca4:	103fc91e 	bne	r2,zero,cbcc <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    cca8:	e0bffc17 	ldw	r2,-16(fp)
    ccac:	10800037 	ldwio	r2,0(r2)
    ccb0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
    ccb4:	e0bff817 	ldw	r2,-32(fp)
    ccb8:	1005003a 	cmpeq	r2,r2,zero
    ccbc:	1000041e 	bne	r2,zero,ccd0 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
    ccc0:	e0bff817 	ldw	r2,-32(fp)
    ccc4:	10bfffc4 	addi	r2,r2,-1
    ccc8:	e0bff815 	stw	r2,-32(fp)
    cccc:	00000706 	br	ccec <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
    ccd0:	e0bff517 	ldw	r2,-44(fp)
    ccd4:	1007883a 	mov	r3,r2
    ccd8:	e0800217 	ldw	r2,8(fp)
    ccdc:	10c00005 	stb	r3,0(r2)
    cce0:	e0800217 	ldw	r2,8(fp)
    cce4:	10800044 	addi	r2,r2,1
    cce8:	e0800215 	stw	r2,8(fp)
      credits++;
    ccec:	e0bff617 	ldw	r2,-40(fp)
    ccf0:	10800044 	addi	r2,r2,1
    ccf4:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
    ccf8:	e0bff817 	ldw	r2,-32(fp)
    ccfc:	1004c03a 	cmpne	r2,r2,zero
    cd00:	103fb21e 	bne	r2,zero,cbcc <alt_avalon_spi_command+0xa0>
    cd04:	e0c00217 	ldw	r3,8(fp)
    cd08:	e0bffa17 	ldw	r2,-24(fp)
    cd0c:	18800126 	beq	r3,r2,cd14 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
    cd10:	003fae06 	br	cbcc <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    cd14:	e0bffc17 	ldw	r2,-16(fp)
    cd18:	10800204 	addi	r2,r2,8
    cd1c:	10800037 	ldwio	r2,0(r2)
    cd20:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    cd24:	e0bff717 	ldw	r2,-36(fp)
    cd28:	1080080c 	andi	r2,r2,32
    cd2c:	1005003a 	cmpeq	r2,r2,zero
    cd30:	103ff81e 	bne	r2,zero,cd14 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    cd34:	e0800317 	ldw	r2,12(fp)
    cd38:	1080004c 	andi	r2,r2,1
    cd3c:	1004c03a 	cmpne	r2,r2,zero
    cd40:	1000031e 	bne	r2,zero,cd50 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    cd44:	e0bffc17 	ldw	r2,-16(fp)
    cd48:	10800304 	addi	r2,r2,12
    cd4c:	10000035 	stwio	zero,0(r2)

  return read_length;
    cd50:	e0800117 	ldw	r2,4(fp)
}
    cd54:	e037883a 	mov	sp,fp
    cd58:	df000017 	ldw	fp,0(sp)
    cd5c:	dec00104 	addi	sp,sp,4
    cd60:	f800283a 	ret

0000cd64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    cd64:	defff904 	addi	sp,sp,-28
    cd68:	dfc00615 	stw	ra,24(sp)
    cd6c:	df000515 	stw	fp,20(sp)
    cd70:	df000504 	addi	fp,sp,20
    cd74:	e13ffd15 	stw	r4,-12(fp)
    cd78:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    cd7c:	e0bffe17 	ldw	r2,-8(fp)
    cd80:	10800017 	ldw	r2,0(r2)
    cd84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    cd88:	e13ffd17 	ldw	r4,-12(fp)
    cd8c:	000d2140 	call	d214 <strlen>
    cd90:	10800044 	addi	r2,r2,1
    cd94:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cd98:	00000d06 	br	cdd0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    cd9c:	e0bffc17 	ldw	r2,-16(fp)
    cda0:	11000217 	ldw	r4,8(r2)
    cda4:	e1bffb17 	ldw	r6,-20(fp)
    cda8:	e17ffd17 	ldw	r5,-12(fp)
    cdac:	000d0680 	call	d068 <memcmp>
    cdb0:	1004c03a 	cmpne	r2,r2,zero
    cdb4:	1000031e 	bne	r2,zero,cdc4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    cdb8:	e0bffc17 	ldw	r2,-16(fp)
    cdbc:	e0bfff15 	stw	r2,-4(fp)
    cdc0:	00000706 	br	cde0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cdc4:	e0bffc17 	ldw	r2,-16(fp)
    cdc8:	10800017 	ldw	r2,0(r2)
    cdcc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cdd0:	e0fffe17 	ldw	r3,-8(fp)
    cdd4:	e0bffc17 	ldw	r2,-16(fp)
    cdd8:	10fff01e 	bne	r2,r3,cd9c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cddc:	e03fff15 	stw	zero,-4(fp)
    cde0:	e0bfff17 	ldw	r2,-4(fp)
}
    cde4:	e037883a 	mov	sp,fp
    cde8:	dfc00117 	ldw	ra,4(sp)
    cdec:	df000017 	ldw	fp,0(sp)
    cdf0:	dec00204 	addi	sp,sp,8
    cdf4:	f800283a 	ret

0000cdf8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cdf8:	defffa04 	addi	sp,sp,-24
    cdfc:	dfc00515 	stw	ra,20(sp)
    ce00:	df000415 	stw	fp,16(sp)
    ce04:	df000404 	addi	fp,sp,16
    ce08:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ce0c:	00800074 	movhi	r2,1
    ce10:	1082ce04 	addi	r2,r2,2872
    ce14:	10800017 	ldw	r2,0(r2)
    ce18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ce1c:	00003306 	br	ceec <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    ce20:	e0bffd17 	ldw	r2,-12(fp)
    ce24:	11000217 	ldw	r4,8(r2)
    ce28:	000d2140 	call	d214 <strlen>
    ce2c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    ce30:	e0bffd17 	ldw	r2,-12(fp)
    ce34:	10c00217 	ldw	r3,8(r2)
    ce38:	e0bffc17 	ldw	r2,-16(fp)
    ce3c:	1885883a 	add	r2,r3,r2
    ce40:	10bfffc4 	addi	r2,r2,-1
    ce44:	10800003 	ldbu	r2,0(r2)
    ce48:	10803fcc 	andi	r2,r2,255
    ce4c:	1080201c 	xori	r2,r2,128
    ce50:	10bfe004 	addi	r2,r2,-128
    ce54:	10800bd8 	cmpnei	r2,r2,47
    ce58:	1000031e 	bne	r2,zero,ce68 <alt_find_file+0x70>
    {
      len -= 1;
    ce5c:	e0bffc17 	ldw	r2,-16(fp)
    ce60:	10bfffc4 	addi	r2,r2,-1
    ce64:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ce68:	e0bffc17 	ldw	r2,-16(fp)
    ce6c:	1007883a 	mov	r3,r2
    ce70:	e0bffe17 	ldw	r2,-8(fp)
    ce74:	1885883a 	add	r2,r3,r2
    ce78:	10800003 	ldbu	r2,0(r2)
    ce7c:	10803fcc 	andi	r2,r2,255
    ce80:	1080201c 	xori	r2,r2,128
    ce84:	10bfe004 	addi	r2,r2,-128
    ce88:	10800be0 	cmpeqi	r2,r2,47
    ce8c:	10000a1e 	bne	r2,zero,ceb8 <alt_find_file+0xc0>
    ce90:	e0bffc17 	ldw	r2,-16(fp)
    ce94:	1007883a 	mov	r3,r2
    ce98:	e0bffe17 	ldw	r2,-8(fp)
    ce9c:	1885883a 	add	r2,r3,r2
    cea0:	10800003 	ldbu	r2,0(r2)
    cea4:	10803fcc 	andi	r2,r2,255
    cea8:	1080201c 	xori	r2,r2,128
    ceac:	10bfe004 	addi	r2,r2,-128
    ceb0:	1004c03a 	cmpne	r2,r2,zero
    ceb4:	10000a1e 	bne	r2,zero,cee0 <alt_find_file+0xe8>
    ceb8:	e0bffd17 	ldw	r2,-12(fp)
    cebc:	11000217 	ldw	r4,8(r2)
    cec0:	e1bffc17 	ldw	r6,-16(fp)
    cec4:	e17ffe17 	ldw	r5,-8(fp)
    cec8:	000d0680 	call	d068 <memcmp>
    cecc:	1004c03a 	cmpne	r2,r2,zero
    ced0:	1000031e 	bne	r2,zero,cee0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ced4:	e0bffd17 	ldw	r2,-12(fp)
    ced8:	e0bfff15 	stw	r2,-4(fp)
    cedc:	00000806 	br	cf00 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    cee0:	e0bffd17 	ldw	r2,-12(fp)
    cee4:	10800017 	ldw	r2,0(r2)
    cee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ceec:	00c00074 	movhi	r3,1
    cef0:	18c2ce04 	addi	r3,r3,2872
    cef4:	e0bffd17 	ldw	r2,-12(fp)
    cef8:	10ffc91e 	bne	r2,r3,ce20 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cefc:	e03fff15 	stw	zero,-4(fp)
    cf00:	e0bfff17 	ldw	r2,-4(fp)
}
    cf04:	e037883a 	mov	sp,fp
    cf08:	dfc00117 	ldw	ra,4(sp)
    cf0c:	df000017 	ldw	fp,0(sp)
    cf10:	dec00204 	addi	sp,sp,8
    cf14:	f800283a 	ret

0000cf18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cf18:	defff704 	addi	sp,sp,-36
    cf1c:	dfc00815 	stw	ra,32(sp)
    cf20:	df000715 	stw	fp,28(sp)
    cf24:	dc000615 	stw	r16,24(sp)
    cf28:	df000604 	addi	fp,sp,24
    cf2c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cf30:	00bffa04 	movi	r2,-24
    cf34:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    cf38:	00800074 	movhi	r2,1
    cf3c:	1082f604 	addi	r2,r2,3032
    cf40:	10800017 	ldw	r2,0(r2)
    cf44:	e0bffa15 	stw	r2,-24(fp)
    cf48:	e03ffb0d 	sth	zero,-20(fp)
    cf4c:	e17ffb0b 	ldhu	r5,-20(fp)
    cf50:	e1bffe04 	addi	r6,fp,-8
    cf54:	e13ffa17 	ldw	r4,-24(fp)
    cf58:	00062a40 	call	62a4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cf5c:	e03ffd15 	stw	zero,-12(fp)
    cf60:	00002006 	br	cfe4 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
    cf64:	e13ffd17 	ldw	r4,-12(fp)
    cf68:	04000074 	movhi	r16,1
    cf6c:	84014f04 	addi	r16,r16,1340
    cf70:	01400304 	movi	r5,12
    cf74:	000e5740 	call	e574 <__mulsi3>
    cf78:	1405883a 	add	r2,r2,r16
    cf7c:	10800017 	ldw	r2,0(r2)
    cf80:	1004c03a 	cmpne	r2,r2,zero
    cf84:	1000141e 	bne	r2,zero,cfd8 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
    cf88:	e13ffd17 	ldw	r4,-12(fp)
    cf8c:	04000074 	movhi	r16,1
    cf90:	84014f04 	addi	r16,r16,1340
    cf94:	01400304 	movi	r5,12
    cf98:	000e5740 	call	e574 <__mulsi3>
    cf9c:	1407883a 	add	r3,r2,r16
    cfa0:	e0bfff17 	ldw	r2,-4(fp)
    cfa4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    cfa8:	00800074 	movhi	r2,1
    cfac:	1082d204 	addi	r2,r2,2888
    cfb0:	10c00017 	ldw	r3,0(r2)
    cfb4:	e0bffd17 	ldw	r2,-12(fp)
    cfb8:	1880040e 	bge	r3,r2,cfcc <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
    cfbc:	00c00074 	movhi	r3,1
    cfc0:	18c2d204 	addi	r3,r3,2888
    cfc4:	e0bffd17 	ldw	r2,-12(fp)
    cfc8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    cfcc:	e0bffd17 	ldw	r2,-12(fp)
    cfd0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    cfd4:	00000606 	br	cff0 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cfd8:	e0bffd17 	ldw	r2,-12(fp)
    cfdc:	10800044 	addi	r2,r2,1
    cfe0:	e0bffd15 	stw	r2,-12(fp)
    cfe4:	e0bffd17 	ldw	r2,-12(fp)
    cfe8:	10800810 	cmplti	r2,r2,32
    cfec:	103fdd1e 	bne	r2,zero,cf64 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    cff0:	00800074 	movhi	r2,1
    cff4:	1082f604 	addi	r2,r2,3032
    cff8:	11000017 	ldw	r4,0(r2)
    cffc:	000669c0 	call	669c <OSSemPost>

  return rc;
    d000:	e0bffc17 	ldw	r2,-16(fp)
}
    d004:	e037883a 	mov	sp,fp
    d008:	dfc00217 	ldw	ra,8(sp)
    d00c:	df000117 	ldw	fp,4(sp)
    d010:	dc000017 	ldw	r16,0(sp)
    d014:	dec00304 	addi	sp,sp,12
    d018:	f800283a 	ret

0000d01c <atexit>:
    d01c:	200b883a 	mov	r5,r4
    d020:	000d883a 	mov	r6,zero
    d024:	0009883a 	mov	r4,zero
    d028:	000f883a 	mov	r7,zero
    d02c:	000d2881 	jmpi	d288 <__register_exitproc>

0000d030 <exit>:
    d030:	defffe04 	addi	sp,sp,-8
    d034:	000b883a 	mov	r5,zero
    d038:	dc000015 	stw	r16,0(sp)
    d03c:	dfc00115 	stw	ra,4(sp)
    d040:	2021883a 	mov	r16,r4
    d044:	000d3c00 	call	d3c0 <__call_exitprocs>
    d048:	00800074 	movhi	r2,1
    d04c:	1082da04 	addi	r2,r2,2920
    d050:	11000017 	ldw	r4,0(r2)
    d054:	20800f17 	ldw	r2,60(r4)
    d058:	10000126 	beq	r2,zero,d060 <exit+0x30>
    d05c:	103ee83a 	callr	r2
    d060:	8009883a 	mov	r4,r16
    d064:	000eca40 	call	eca4 <_exit>

0000d068 <memcmp>:
    d068:	00c000c4 	movi	r3,3
    d06c:	1980032e 	bgeu	r3,r6,d07c <memcmp+0x14>
    d070:	2144b03a 	or	r2,r4,r5
    d074:	10c4703a 	and	r2,r2,r3
    d078:	10000f26 	beq	r2,zero,d0b8 <memcmp+0x50>
    d07c:	31ffffc4 	addi	r7,r6,-1
    d080:	3000061e 	bne	r6,zero,d09c <memcmp+0x34>
    d084:	00000a06 	br	d0b0 <memcmp+0x48>
    d088:	39ffffc4 	addi	r7,r7,-1
    d08c:	00bfffc4 	movi	r2,-1
    d090:	21000044 	addi	r4,r4,1
    d094:	29400044 	addi	r5,r5,1
    d098:	38800526 	beq	r7,r2,d0b0 <memcmp+0x48>
    d09c:	20c00003 	ldbu	r3,0(r4)
    d0a0:	28800003 	ldbu	r2,0(r5)
    d0a4:	18bff826 	beq	r3,r2,d088 <memcmp+0x20>
    d0a8:	1885c83a 	sub	r2,r3,r2
    d0ac:	f800283a 	ret
    d0b0:	0005883a 	mov	r2,zero
    d0b4:	f800283a 	ret
    d0b8:	180f883a 	mov	r7,r3
    d0bc:	20c00017 	ldw	r3,0(r4)
    d0c0:	28800017 	ldw	r2,0(r5)
    d0c4:	18bfed1e 	bne	r3,r2,d07c <memcmp+0x14>
    d0c8:	31bfff04 	addi	r6,r6,-4
    d0cc:	21000104 	addi	r4,r4,4
    d0d0:	29400104 	addi	r5,r5,4
    d0d4:	39bff936 	bltu	r7,r6,d0bc <memcmp+0x54>
    d0d8:	003fe806 	br	d07c <memcmp+0x14>

0000d0dc <memcpy>:
    d0dc:	01c003c4 	movi	r7,15
    d0e0:	2007883a 	mov	r3,r4
    d0e4:	3980032e 	bgeu	r7,r6,d0f4 <memcpy+0x18>
    d0e8:	2904b03a 	or	r2,r5,r4
    d0ec:	108000cc 	andi	r2,r2,3
    d0f0:	10000926 	beq	r2,zero,d118 <memcpy+0x3c>
    d0f4:	30000626 	beq	r6,zero,d110 <memcpy+0x34>
    d0f8:	30cd883a 	add	r6,r6,r3
    d0fc:	28800003 	ldbu	r2,0(r5)
    d100:	29400044 	addi	r5,r5,1
    d104:	18800005 	stb	r2,0(r3)
    d108:	18c00044 	addi	r3,r3,1
    d10c:	30fffb1e 	bne	r6,r3,d0fc <memcpy+0x20>
    d110:	2005883a 	mov	r2,r4
    d114:	f800283a 	ret
    d118:	3811883a 	mov	r8,r7
    d11c:	200f883a 	mov	r7,r4
    d120:	28c00017 	ldw	r3,0(r5)
    d124:	31bffc04 	addi	r6,r6,-16
    d128:	38c00015 	stw	r3,0(r7)
    d12c:	28800117 	ldw	r2,4(r5)
    d130:	38800115 	stw	r2,4(r7)
    d134:	28c00217 	ldw	r3,8(r5)
    d138:	38c00215 	stw	r3,8(r7)
    d13c:	28800317 	ldw	r2,12(r5)
    d140:	29400404 	addi	r5,r5,16
    d144:	38800315 	stw	r2,12(r7)
    d148:	39c00404 	addi	r7,r7,16
    d14c:	41bff436 	bltu	r8,r6,d120 <memcpy+0x44>
    d150:	008000c4 	movi	r2,3
    d154:	1180072e 	bgeu	r2,r6,d174 <memcpy+0x98>
    d158:	1007883a 	mov	r3,r2
    d15c:	28800017 	ldw	r2,0(r5)
    d160:	31bfff04 	addi	r6,r6,-4
    d164:	29400104 	addi	r5,r5,4
    d168:	38800015 	stw	r2,0(r7)
    d16c:	39c00104 	addi	r7,r7,4
    d170:	19bffa36 	bltu	r3,r6,d15c <memcpy+0x80>
    d174:	3807883a 	mov	r3,r7
    d178:	003fde06 	br	d0f4 <memcpy+0x18>

0000d17c <memset>:
    d17c:	008000c4 	movi	r2,3
    d180:	29403fcc 	andi	r5,r5,255
    d184:	2007883a 	mov	r3,r4
    d188:	1180022e 	bgeu	r2,r6,d194 <memset+0x18>
    d18c:	2084703a 	and	r2,r4,r2
    d190:	10000826 	beq	r2,zero,d1b4 <memset+0x38>
    d194:	30000526 	beq	r6,zero,d1ac <memset+0x30>
    d198:	2805883a 	mov	r2,r5
    d19c:	30cd883a 	add	r6,r6,r3
    d1a0:	18800005 	stb	r2,0(r3)
    d1a4:	18c00044 	addi	r3,r3,1
    d1a8:	19bffd1e 	bne	r3,r6,d1a0 <memset+0x24>
    d1ac:	2005883a 	mov	r2,r4
    d1b0:	f800283a 	ret
    d1b4:	2804923a 	slli	r2,r5,8
    d1b8:	020003c4 	movi	r8,15
    d1bc:	200f883a 	mov	r7,r4
    d1c0:	2884b03a 	or	r2,r5,r2
    d1c4:	1006943a 	slli	r3,r2,16
    d1c8:	10c6b03a 	or	r3,r2,r3
    d1cc:	41800a2e 	bgeu	r8,r6,d1f8 <memset+0x7c>
    d1d0:	4005883a 	mov	r2,r8
    d1d4:	31bffc04 	addi	r6,r6,-16
    d1d8:	38c00015 	stw	r3,0(r7)
    d1dc:	38c00115 	stw	r3,4(r7)
    d1e0:	38c00215 	stw	r3,8(r7)
    d1e4:	38c00315 	stw	r3,12(r7)
    d1e8:	39c00404 	addi	r7,r7,16
    d1ec:	11bff936 	bltu	r2,r6,d1d4 <memset+0x58>
    d1f0:	008000c4 	movi	r2,3
    d1f4:	1180052e 	bgeu	r2,r6,d20c <memset+0x90>
    d1f8:	31bfff04 	addi	r6,r6,-4
    d1fc:	008000c4 	movi	r2,3
    d200:	38c00015 	stw	r3,0(r7)
    d204:	39c00104 	addi	r7,r7,4
    d208:	11bffb36 	bltu	r2,r6,d1f8 <memset+0x7c>
    d20c:	3807883a 	mov	r3,r7
    d210:	003fe006 	br	d194 <memset+0x18>

0000d214 <strlen>:
    d214:	208000cc 	andi	r2,r4,3
    d218:	2011883a 	mov	r8,r4
    d21c:	1000161e 	bne	r2,zero,d278 <strlen+0x64>
    d220:	20c00017 	ldw	r3,0(r4)
    d224:	017fbff4 	movhi	r5,65279
    d228:	297fbfc4 	addi	r5,r5,-257
    d22c:	01e02074 	movhi	r7,32897
    d230:	39e02004 	addi	r7,r7,-32640
    d234:	1945883a 	add	r2,r3,r5
    d238:	11c4703a 	and	r2,r2,r7
    d23c:	00c6303a 	nor	r3,zero,r3
    d240:	1886703a 	and	r3,r3,r2
    d244:	18000c1e 	bne	r3,zero,d278 <strlen+0x64>
    d248:	280d883a 	mov	r6,r5
    d24c:	380b883a 	mov	r5,r7
    d250:	21000104 	addi	r4,r4,4
    d254:	20800017 	ldw	r2,0(r4)
    d258:	1187883a 	add	r3,r2,r6
    d25c:	1946703a 	and	r3,r3,r5
    d260:	0084303a 	nor	r2,zero,r2
    d264:	10c4703a 	and	r2,r2,r3
    d268:	103ff926 	beq	r2,zero,d250 <strlen+0x3c>
    d26c:	20800007 	ldb	r2,0(r4)
    d270:	10000326 	beq	r2,zero,d280 <strlen+0x6c>
    d274:	21000044 	addi	r4,r4,1
    d278:	20800007 	ldb	r2,0(r4)
    d27c:	103ffd1e 	bne	r2,zero,d274 <strlen+0x60>
    d280:	2205c83a 	sub	r2,r4,r8
    d284:	f800283a 	ret

0000d288 <__register_exitproc>:
    d288:	defffa04 	addi	sp,sp,-24
    d28c:	00800074 	movhi	r2,1
    d290:	1082da04 	addi	r2,r2,2920
    d294:	dc000015 	stw	r16,0(sp)
    d298:	14000017 	ldw	r16,0(r2)
    d29c:	dd000415 	stw	r20,16(sp)
    d2a0:	2829883a 	mov	r20,r5
    d2a4:	81405217 	ldw	r5,328(r16)
    d2a8:	dcc00315 	stw	r19,12(sp)
    d2ac:	dc800215 	stw	r18,8(sp)
    d2b0:	dc400115 	stw	r17,4(sp)
    d2b4:	dfc00515 	stw	ra,20(sp)
    d2b8:	2023883a 	mov	r17,r4
    d2bc:	3027883a 	mov	r19,r6
    d2c0:	3825883a 	mov	r18,r7
    d2c4:	28002526 	beq	r5,zero,d35c <__register_exitproc+0xd4>
    d2c8:	29000117 	ldw	r4,4(r5)
    d2cc:	008007c4 	movi	r2,31
    d2d0:	11002716 	blt	r2,r4,d370 <__register_exitproc+0xe8>
    d2d4:	8800101e 	bne	r17,zero,d318 <__register_exitproc+0x90>
    d2d8:	2105883a 	add	r2,r4,r4
    d2dc:	1085883a 	add	r2,r2,r2
    d2e0:	20c00044 	addi	r3,r4,1
    d2e4:	1145883a 	add	r2,r2,r5
    d2e8:	0009883a 	mov	r4,zero
    d2ec:	15000215 	stw	r20,8(r2)
    d2f0:	28c00115 	stw	r3,4(r5)
    d2f4:	2005883a 	mov	r2,r4
    d2f8:	dfc00517 	ldw	ra,20(sp)
    d2fc:	dd000417 	ldw	r20,16(sp)
    d300:	dcc00317 	ldw	r19,12(sp)
    d304:	dc800217 	ldw	r18,8(sp)
    d308:	dc400117 	ldw	r17,4(sp)
    d30c:	dc000017 	ldw	r16,0(sp)
    d310:	dec00604 	addi	sp,sp,24
    d314:	f800283a 	ret
    d318:	29802204 	addi	r6,r5,136
    d31c:	00800044 	movi	r2,1
    d320:	110e983a 	sll	r7,r2,r4
    d324:	30c04017 	ldw	r3,256(r6)
    d328:	2105883a 	add	r2,r4,r4
    d32c:	1085883a 	add	r2,r2,r2
    d330:	1185883a 	add	r2,r2,r6
    d334:	19c6b03a 	or	r3,r3,r7
    d338:	14802015 	stw	r18,128(r2)
    d33c:	14c00015 	stw	r19,0(r2)
    d340:	00800084 	movi	r2,2
    d344:	30c04015 	stw	r3,256(r6)
    d348:	88bfe31e 	bne	r17,r2,d2d8 <__register_exitproc+0x50>
    d34c:	30804117 	ldw	r2,260(r6)
    d350:	11c4b03a 	or	r2,r2,r7
    d354:	30804115 	stw	r2,260(r6)
    d358:	003fdf06 	br	d2d8 <__register_exitproc+0x50>
    d35c:	008000b4 	movhi	r2,2
    d360:	10afc404 	addi	r2,r2,-16624
    d364:	100b883a 	mov	r5,r2
    d368:	80805215 	stw	r2,328(r16)
    d36c:	003fd606 	br	d2c8 <__register_exitproc+0x40>
    d370:	00800034 	movhi	r2,0
    d374:	10800004 	addi	r2,r2,0
    d378:	1000021e 	bne	r2,zero,d384 <__register_exitproc+0xfc>
    d37c:	013fffc4 	movi	r4,-1
    d380:	003fdc06 	br	d2f4 <__register_exitproc+0x6c>
    d384:	01006404 	movi	r4,400
    d388:	103ee83a 	callr	r2
    d38c:	1007883a 	mov	r3,r2
    d390:	103ffa26 	beq	r2,zero,d37c <__register_exitproc+0xf4>
    d394:	80805217 	ldw	r2,328(r16)
    d398:	180b883a 	mov	r5,r3
    d39c:	18000115 	stw	zero,4(r3)
    d3a0:	18800015 	stw	r2,0(r3)
    d3a4:	80c05215 	stw	r3,328(r16)
    d3a8:	18006215 	stw	zero,392(r3)
    d3ac:	18006315 	stw	zero,396(r3)
    d3b0:	0009883a 	mov	r4,zero
    d3b4:	883fc826 	beq	r17,zero,d2d8 <__register_exitproc+0x50>
    d3b8:	003fd706 	br	d318 <__register_exitproc+0x90>

0000d3bc <register_fini>:
    d3bc:	f800283a 	ret

0000d3c0 <__call_exitprocs>:
    d3c0:	00800074 	movhi	r2,1
    d3c4:	1082da04 	addi	r2,r2,2920
    d3c8:	10800017 	ldw	r2,0(r2)
    d3cc:	defff304 	addi	sp,sp,-52
    d3d0:	df000b15 	stw	fp,44(sp)
    d3d4:	d8800115 	stw	r2,4(sp)
    d3d8:	00800034 	movhi	r2,0
    d3dc:	10800004 	addi	r2,r2,0
    d3e0:	1005003a 	cmpeq	r2,r2,zero
    d3e4:	d8800215 	stw	r2,8(sp)
    d3e8:	d8800117 	ldw	r2,4(sp)
    d3ec:	dd400815 	stw	r21,32(sp)
    d3f0:	dd000715 	stw	r20,28(sp)
    d3f4:	10805204 	addi	r2,r2,328
    d3f8:	dfc00c15 	stw	ra,48(sp)
    d3fc:	ddc00a15 	stw	r23,40(sp)
    d400:	dd800915 	stw	r22,36(sp)
    d404:	dcc00615 	stw	r19,24(sp)
    d408:	dc800515 	stw	r18,20(sp)
    d40c:	dc400415 	stw	r17,16(sp)
    d410:	dc000315 	stw	r16,12(sp)
    d414:	282b883a 	mov	r21,r5
    d418:	2039883a 	mov	fp,r4
    d41c:	d8800015 	stw	r2,0(sp)
    d420:	2829003a 	cmpeq	r20,r5,zero
    d424:	d8800117 	ldw	r2,4(sp)
    d428:	14405217 	ldw	r17,328(r2)
    d42c:	88001026 	beq	r17,zero,d470 <__call_exitprocs+0xb0>
    d430:	ddc00017 	ldw	r23,0(sp)
    d434:	88800117 	ldw	r2,4(r17)
    d438:	8c802204 	addi	r18,r17,136
    d43c:	143fffc4 	addi	r16,r2,-1
    d440:	80000916 	blt	r16,zero,d468 <__call_exitprocs+0xa8>
    d444:	05bfffc4 	movi	r22,-1
    d448:	a000151e 	bne	r20,zero,d4a0 <__call_exitprocs+0xe0>
    d44c:	8409883a 	add	r4,r16,r16
    d450:	2105883a 	add	r2,r4,r4
    d454:	1485883a 	add	r2,r2,r18
    d458:	10c02017 	ldw	r3,128(r2)
    d45c:	a8c01126 	beq	r21,r3,d4a4 <__call_exitprocs+0xe4>
    d460:	843fffc4 	addi	r16,r16,-1
    d464:	85bff81e 	bne	r16,r22,d448 <__call_exitprocs+0x88>
    d468:	d8800217 	ldw	r2,8(sp)
    d46c:	10003126 	beq	r2,zero,d534 <__call_exitprocs+0x174>
    d470:	dfc00c17 	ldw	ra,48(sp)
    d474:	df000b17 	ldw	fp,44(sp)
    d478:	ddc00a17 	ldw	r23,40(sp)
    d47c:	dd800917 	ldw	r22,36(sp)
    d480:	dd400817 	ldw	r21,32(sp)
    d484:	dd000717 	ldw	r20,28(sp)
    d488:	dcc00617 	ldw	r19,24(sp)
    d48c:	dc800517 	ldw	r18,20(sp)
    d490:	dc400417 	ldw	r17,16(sp)
    d494:	dc000317 	ldw	r16,12(sp)
    d498:	dec00d04 	addi	sp,sp,52
    d49c:	f800283a 	ret
    d4a0:	8409883a 	add	r4,r16,r16
    d4a4:	88c00117 	ldw	r3,4(r17)
    d4a8:	2105883a 	add	r2,r4,r4
    d4ac:	1445883a 	add	r2,r2,r17
    d4b0:	18ffffc4 	addi	r3,r3,-1
    d4b4:	11800217 	ldw	r6,8(r2)
    d4b8:	1c001526 	beq	r3,r16,d510 <__call_exitprocs+0x150>
    d4bc:	10000215 	stw	zero,8(r2)
    d4c0:	303fe726 	beq	r6,zero,d460 <__call_exitprocs+0xa0>
    d4c4:	00c00044 	movi	r3,1
    d4c8:	1c06983a 	sll	r3,r3,r16
    d4cc:	90804017 	ldw	r2,256(r18)
    d4d0:	8cc00117 	ldw	r19,4(r17)
    d4d4:	1884703a 	and	r2,r3,r2
    d4d8:	10001426 	beq	r2,zero,d52c <__call_exitprocs+0x16c>
    d4dc:	90804117 	ldw	r2,260(r18)
    d4e0:	1884703a 	and	r2,r3,r2
    d4e4:	10000c1e 	bne	r2,zero,d518 <__call_exitprocs+0x158>
    d4e8:	2105883a 	add	r2,r4,r4
    d4ec:	1485883a 	add	r2,r2,r18
    d4f0:	11400017 	ldw	r5,0(r2)
    d4f4:	e009883a 	mov	r4,fp
    d4f8:	303ee83a 	callr	r6
    d4fc:	88800117 	ldw	r2,4(r17)
    d500:	98bfc81e 	bne	r19,r2,d424 <__call_exitprocs+0x64>
    d504:	b8800017 	ldw	r2,0(r23)
    d508:	147fd526 	beq	r2,r17,d460 <__call_exitprocs+0xa0>
    d50c:	003fc506 	br	d424 <__call_exitprocs+0x64>
    d510:	8c000115 	stw	r16,4(r17)
    d514:	003fea06 	br	d4c0 <__call_exitprocs+0x100>
    d518:	2105883a 	add	r2,r4,r4
    d51c:	1485883a 	add	r2,r2,r18
    d520:	11000017 	ldw	r4,0(r2)
    d524:	303ee83a 	callr	r6
    d528:	003ff406 	br	d4fc <__call_exitprocs+0x13c>
    d52c:	303ee83a 	callr	r6
    d530:	003ff206 	br	d4fc <__call_exitprocs+0x13c>
    d534:	88800117 	ldw	r2,4(r17)
    d538:	1000081e 	bne	r2,zero,d55c <__call_exitprocs+0x19c>
    d53c:	89000017 	ldw	r4,0(r17)
    d540:	20000726 	beq	r4,zero,d560 <__call_exitprocs+0x1a0>
    d544:	b9000015 	stw	r4,0(r23)
    d548:	8809883a 	mov	r4,r17
    d54c:	00000000 	call	0 <__alt_mem_sdram>
    d550:	bc400017 	ldw	r17,0(r23)
    d554:	883fb71e 	bne	r17,zero,d434 <__call_exitprocs+0x74>
    d558:	003fc506 	br	d470 <__call_exitprocs+0xb0>
    d55c:	89000017 	ldw	r4,0(r17)
    d560:	882f883a 	mov	r23,r17
    d564:	2023883a 	mov	r17,r4
    d568:	883fb21e 	bne	r17,zero,d434 <__call_exitprocs+0x74>
    d56c:	003fc006 	br	d470 <__call_exitprocs+0xb0>

0000d570 <__fixunsdfsi>:
    d570:	defffb04 	addi	sp,sp,-20
    d574:	dc400115 	stw	r17,4(sp)
    d578:	dc000015 	stw	r16,0(sp)
    d57c:	04507834 	movhi	r17,16864
    d580:	0021883a 	mov	r16,zero
    d584:	800d883a 	mov	r6,r16
    d588:	880f883a 	mov	r7,r17
    d58c:	dcc00315 	stw	r19,12(sp)
    d590:	dc800215 	stw	r18,8(sp)
    d594:	2827883a 	mov	r19,r5
    d598:	2025883a 	mov	r18,r4
    d59c:	dfc00415 	stw	ra,16(sp)
    d5a0:	000e1340 	call	e134 <__gedf2>
    d5a4:	000d883a 	mov	r6,zero
    d5a8:	880f883a 	mov	r7,r17
    d5ac:	980b883a 	mov	r5,r19
    d5b0:	9009883a 	mov	r4,r18
    d5b4:	10000d16 	blt	r2,zero,d5ec <__fixunsdfsi+0x7c>
    d5b8:	000da240 	call	da24 <__subdf3>
    d5bc:	180b883a 	mov	r5,r3
    d5c0:	1009883a 	mov	r4,r2
    d5c4:	000e1bc0 	call	e1bc <__fixdfsi>
    d5c8:	00e00034 	movhi	r3,32768
    d5cc:	10c5883a 	add	r2,r2,r3
    d5d0:	dfc00417 	ldw	ra,16(sp)
    d5d4:	dcc00317 	ldw	r19,12(sp)
    d5d8:	dc800217 	ldw	r18,8(sp)
    d5dc:	dc400117 	ldw	r17,4(sp)
    d5e0:	dc000017 	ldw	r16,0(sp)
    d5e4:	dec00504 	addi	sp,sp,20
    d5e8:	f800283a 	ret
    d5ec:	980b883a 	mov	r5,r19
    d5f0:	9009883a 	mov	r4,r18
    d5f4:	000e1bc0 	call	e1bc <__fixdfsi>
    d5f8:	dfc00417 	ldw	ra,16(sp)
    d5fc:	dcc00317 	ldw	r19,12(sp)
    d600:	dc800217 	ldw	r18,8(sp)
    d604:	dc400117 	ldw	r17,4(sp)
    d608:	dc000017 	ldw	r16,0(sp)
    d60c:	dec00504 	addi	sp,sp,20
    d610:	f800283a 	ret

0000d614 <_fpadd_parts>:
    d614:	defff804 	addi	sp,sp,-32
    d618:	dcc00315 	stw	r19,12(sp)
    d61c:	2027883a 	mov	r19,r4
    d620:	21000017 	ldw	r4,0(r4)
    d624:	00c00044 	movi	r3,1
    d628:	dd400515 	stw	r21,20(sp)
    d62c:	dd000415 	stw	r20,16(sp)
    d630:	ddc00715 	stw	r23,28(sp)
    d634:	dd800615 	stw	r22,24(sp)
    d638:	dc800215 	stw	r18,8(sp)
    d63c:	dc400115 	stw	r17,4(sp)
    d640:	dc000015 	stw	r16,0(sp)
    d644:	282b883a 	mov	r21,r5
    d648:	3029883a 	mov	r20,r6
    d64c:	1900632e 	bgeu	r3,r4,d7dc <_fpadd_parts+0x1c8>
    d650:	28800017 	ldw	r2,0(r5)
    d654:	1880812e 	bgeu	r3,r2,d85c <_fpadd_parts+0x248>
    d658:	00c00104 	movi	r3,4
    d65c:	20c0dc26 	beq	r4,r3,d9d0 <_fpadd_parts+0x3bc>
    d660:	10c07e26 	beq	r2,r3,d85c <_fpadd_parts+0x248>
    d664:	00c00084 	movi	r3,2
    d668:	10c06726 	beq	r2,r3,d808 <_fpadd_parts+0x1f4>
    d66c:	20c07b26 	beq	r4,r3,d85c <_fpadd_parts+0x248>
    d670:	9dc00217 	ldw	r23,8(r19)
    d674:	28c00217 	ldw	r3,8(r5)
    d678:	9c400317 	ldw	r17,12(r19)
    d67c:	2bc00317 	ldw	r15,12(r5)
    d680:	b8cdc83a 	sub	r6,r23,r3
    d684:	9c800417 	ldw	r18,16(r19)
    d688:	2c000417 	ldw	r16,16(r5)
    d68c:	3009883a 	mov	r4,r6
    d690:	30009716 	blt	r6,zero,d8f0 <_fpadd_parts+0x2dc>
    d694:	00800fc4 	movi	r2,63
    d698:	11806b16 	blt	r2,r6,d848 <_fpadd_parts+0x234>
    d69c:	0100a40e 	bge	zero,r4,d930 <_fpadd_parts+0x31c>
    d6a0:	35bff804 	addi	r22,r6,-32
    d6a4:	b000bc16 	blt	r22,zero,d998 <_fpadd_parts+0x384>
    d6a8:	8596d83a 	srl	r11,r16,r22
    d6ac:	0019883a 	mov	r12,zero
    d6b0:	0013883a 	mov	r9,zero
    d6b4:	01000044 	movi	r4,1
    d6b8:	0015883a 	mov	r10,zero
    d6bc:	b000be16 	blt	r22,zero,d9b8 <_fpadd_parts+0x3a4>
    d6c0:	2590983a 	sll	r8,r4,r22
    d6c4:	000f883a 	mov	r7,zero
    d6c8:	00bfffc4 	movi	r2,-1
    d6cc:	3889883a 	add	r4,r7,r2
    d6d0:	408b883a 	add	r5,r8,r2
    d6d4:	21cd803a 	cmpltu	r6,r4,r7
    d6d8:	314b883a 	add	r5,r6,r5
    d6dc:	7904703a 	and	r2,r15,r4
    d6e0:	8146703a 	and	r3,r16,r5
    d6e4:	10c4b03a 	or	r2,r2,r3
    d6e8:	10000226 	beq	r2,zero,d6f4 <_fpadd_parts+0xe0>
    d6ec:	02400044 	movi	r9,1
    d6f0:	0015883a 	mov	r10,zero
    d6f4:	5a5eb03a 	or	r15,r11,r9
    d6f8:	62a0b03a 	or	r16,r12,r10
    d6fc:	99400117 	ldw	r5,4(r19)
    d700:	a8800117 	ldw	r2,4(r21)
    d704:	28806e26 	beq	r5,r2,d8c0 <_fpadd_parts+0x2ac>
    d708:	28006626 	beq	r5,zero,d8a4 <_fpadd_parts+0x290>
    d70c:	7c45c83a 	sub	r2,r15,r17
    d710:	7889803a 	cmpltu	r4,r15,r2
    d714:	8487c83a 	sub	r3,r16,r18
    d718:	1909c83a 	sub	r4,r3,r4
    d71c:	100d883a 	mov	r6,r2
    d720:	200f883a 	mov	r7,r4
    d724:	38007716 	blt	r7,zero,d904 <_fpadd_parts+0x2f0>
    d728:	a5c00215 	stw	r23,8(r20)
    d72c:	a1c00415 	stw	r7,16(r20)
    d730:	a0000115 	stw	zero,4(r20)
    d734:	a1800315 	stw	r6,12(r20)
    d738:	a2000317 	ldw	r8,12(r20)
    d73c:	a2400417 	ldw	r9,16(r20)
    d740:	00bfffc4 	movi	r2,-1
    d744:	408b883a 	add	r5,r8,r2
    d748:	2a09803a 	cmpltu	r4,r5,r8
    d74c:	488d883a 	add	r6,r9,r2
    d750:	01c40034 	movhi	r7,4096
    d754:	39ffffc4 	addi	r7,r7,-1
    d758:	218d883a 	add	r6,r4,r6
    d75c:	39801736 	bltu	r7,r6,d7bc <_fpadd_parts+0x1a8>
    d760:	31c06526 	beq	r6,r7,d8f8 <_fpadd_parts+0x2e4>
    d764:	a3000217 	ldw	r12,8(r20)
    d768:	4209883a 	add	r4,r8,r8
    d76c:	00bfffc4 	movi	r2,-1
    d770:	220f803a 	cmpltu	r7,r4,r8
    d774:	4a4b883a 	add	r5,r9,r9
    d778:	394f883a 	add	r7,r7,r5
    d77c:	2095883a 	add	r10,r4,r2
    d780:	3897883a 	add	r11,r7,r2
    d784:	510d803a 	cmpltu	r6,r10,r4
    d788:	6099883a 	add	r12,r12,r2
    d78c:	32d7883a 	add	r11,r6,r11
    d790:	00840034 	movhi	r2,4096
    d794:	10bfffc4 	addi	r2,r2,-1
    d798:	2011883a 	mov	r8,r4
    d79c:	3813883a 	mov	r9,r7
    d7a0:	a1000315 	stw	r4,12(r20)
    d7a4:	a1c00415 	stw	r7,16(r20)
    d7a8:	a3000215 	stw	r12,8(r20)
    d7ac:	12c00336 	bltu	r2,r11,d7bc <_fpadd_parts+0x1a8>
    d7b0:	58bfed1e 	bne	r11,r2,d768 <_fpadd_parts+0x154>
    d7b4:	00bfff84 	movi	r2,-2
    d7b8:	12bfeb2e 	bgeu	r2,r10,d768 <_fpadd_parts+0x154>
    d7bc:	a2800417 	ldw	r10,16(r20)
    d7c0:	008000c4 	movi	r2,3
    d7c4:	00c80034 	movhi	r3,8192
    d7c8:	18ffffc4 	addi	r3,r3,-1
    d7cc:	a2400317 	ldw	r9,12(r20)
    d7d0:	a0800015 	stw	r2,0(r20)
    d7d4:	1a802336 	bltu	r3,r10,d864 <_fpadd_parts+0x250>
    d7d8:	a027883a 	mov	r19,r20
    d7dc:	9805883a 	mov	r2,r19
    d7e0:	ddc00717 	ldw	r23,28(sp)
    d7e4:	dd800617 	ldw	r22,24(sp)
    d7e8:	dd400517 	ldw	r21,20(sp)
    d7ec:	dd000417 	ldw	r20,16(sp)
    d7f0:	dcc00317 	ldw	r19,12(sp)
    d7f4:	dc800217 	ldw	r18,8(sp)
    d7f8:	dc400117 	ldw	r17,4(sp)
    d7fc:	dc000017 	ldw	r16,0(sp)
    d800:	dec00804 	addi	sp,sp,32
    d804:	f800283a 	ret
    d808:	20fff41e 	bne	r4,r3,d7dc <_fpadd_parts+0x1c8>
    d80c:	31000015 	stw	r4,0(r6)
    d810:	98800117 	ldw	r2,4(r19)
    d814:	30800115 	stw	r2,4(r6)
    d818:	98c00217 	ldw	r3,8(r19)
    d81c:	30c00215 	stw	r3,8(r6)
    d820:	98800317 	ldw	r2,12(r19)
    d824:	30800315 	stw	r2,12(r6)
    d828:	98c00417 	ldw	r3,16(r19)
    d82c:	30c00415 	stw	r3,16(r6)
    d830:	98800117 	ldw	r2,4(r19)
    d834:	28c00117 	ldw	r3,4(r5)
    d838:	3027883a 	mov	r19,r6
    d83c:	10c4703a 	and	r2,r2,r3
    d840:	30800115 	stw	r2,4(r6)
    d844:	003fe506 	br	d7dc <_fpadd_parts+0x1c8>
    d848:	1dc02616 	blt	r3,r23,d8e4 <_fpadd_parts+0x2d0>
    d84c:	0023883a 	mov	r17,zero
    d850:	182f883a 	mov	r23,r3
    d854:	0025883a 	mov	r18,zero
    d858:	003fa806 	br	d6fc <_fpadd_parts+0xe8>
    d85c:	a827883a 	mov	r19,r21
    d860:	003fde06 	br	d7dc <_fpadd_parts+0x1c8>
    d864:	01800044 	movi	r6,1
    d868:	500497fa 	slli	r2,r10,31
    d86c:	4808d07a 	srli	r4,r9,1
    d870:	518ad83a 	srl	r5,r10,r6
    d874:	a2000217 	ldw	r8,8(r20)
    d878:	1108b03a 	or	r4,r2,r4
    d87c:	0007883a 	mov	r3,zero
    d880:	4984703a 	and	r2,r9,r6
    d884:	208cb03a 	or	r6,r4,r2
    d888:	28ceb03a 	or	r7,r5,r3
    d88c:	42000044 	addi	r8,r8,1
    d890:	a027883a 	mov	r19,r20
    d894:	a1c00415 	stw	r7,16(r20)
    d898:	a2000215 	stw	r8,8(r20)
    d89c:	a1800315 	stw	r6,12(r20)
    d8a0:	003fce06 	br	d7dc <_fpadd_parts+0x1c8>
    d8a4:	8bc5c83a 	sub	r2,r17,r15
    d8a8:	8889803a 	cmpltu	r4,r17,r2
    d8ac:	9407c83a 	sub	r3,r18,r16
    d8b0:	1909c83a 	sub	r4,r3,r4
    d8b4:	100d883a 	mov	r6,r2
    d8b8:	200f883a 	mov	r7,r4
    d8bc:	003f9906 	br	d724 <_fpadd_parts+0x110>
    d8c0:	7c45883a 	add	r2,r15,r17
    d8c4:	13c9803a 	cmpltu	r4,r2,r15
    d8c8:	8487883a 	add	r3,r16,r18
    d8cc:	20c9883a 	add	r4,r4,r3
    d8d0:	a1400115 	stw	r5,4(r20)
    d8d4:	a5c00215 	stw	r23,8(r20)
    d8d8:	a0800315 	stw	r2,12(r20)
    d8dc:	a1000415 	stw	r4,16(r20)
    d8e0:	003fb606 	br	d7bc <_fpadd_parts+0x1a8>
    d8e4:	001f883a 	mov	r15,zero
    d8e8:	0021883a 	mov	r16,zero
    d8ec:	003f8306 	br	d6fc <_fpadd_parts+0xe8>
    d8f0:	018dc83a 	sub	r6,zero,r6
    d8f4:	003f6706 	br	d694 <_fpadd_parts+0x80>
    d8f8:	00bfff84 	movi	r2,-2
    d8fc:	117faf36 	bltu	r2,r5,d7bc <_fpadd_parts+0x1a8>
    d900:	003f9806 	br	d764 <_fpadd_parts+0x150>
    d904:	0005883a 	mov	r2,zero
    d908:	1189c83a 	sub	r4,r2,r6
    d90c:	1105803a 	cmpltu	r2,r2,r4
    d910:	01cbc83a 	sub	r5,zero,r7
    d914:	2885c83a 	sub	r2,r5,r2
    d918:	01800044 	movi	r6,1
    d91c:	a1800115 	stw	r6,4(r20)
    d920:	a5c00215 	stw	r23,8(r20)
    d924:	a1000315 	stw	r4,12(r20)
    d928:	a0800415 	stw	r2,16(r20)
    d92c:	003f8206 	br	d738 <_fpadd_parts+0x124>
    d930:	203f7226 	beq	r4,zero,d6fc <_fpadd_parts+0xe8>
    d934:	35bff804 	addi	r22,r6,-32
    d938:	b9af883a 	add	r23,r23,r6
    d93c:	b0003116 	blt	r22,zero,da04 <_fpadd_parts+0x3f0>
    d940:	959ad83a 	srl	r13,r18,r22
    d944:	001d883a 	mov	r14,zero
    d948:	000f883a 	mov	r7,zero
    d94c:	01000044 	movi	r4,1
    d950:	0011883a 	mov	r8,zero
    d954:	b0002516 	blt	r22,zero,d9ec <_fpadd_parts+0x3d8>
    d958:	2594983a 	sll	r10,r4,r22
    d95c:	0013883a 	mov	r9,zero
    d960:	00bfffc4 	movi	r2,-1
    d964:	4889883a 	add	r4,r9,r2
    d968:	508b883a 	add	r5,r10,r2
    d96c:	224d803a 	cmpltu	r6,r4,r9
    d970:	314b883a 	add	r5,r6,r5
    d974:	8904703a 	and	r2,r17,r4
    d978:	9146703a 	and	r3,r18,r5
    d97c:	10c4b03a 	or	r2,r2,r3
    d980:	10000226 	beq	r2,zero,d98c <_fpadd_parts+0x378>
    d984:	01c00044 	movi	r7,1
    d988:	0011883a 	mov	r8,zero
    d98c:	69e2b03a 	or	r17,r13,r7
    d990:	7224b03a 	or	r18,r14,r8
    d994:	003f5906 	br	d6fc <_fpadd_parts+0xe8>
    d998:	8407883a 	add	r3,r16,r16
    d99c:	008007c4 	movi	r2,31
    d9a0:	1185c83a 	sub	r2,r2,r6
    d9a4:	1886983a 	sll	r3,r3,r2
    d9a8:	7996d83a 	srl	r11,r15,r6
    d9ac:	8198d83a 	srl	r12,r16,r6
    d9b0:	1ad6b03a 	or	r11,r3,r11
    d9b4:	003f3e06 	br	d6b0 <_fpadd_parts+0x9c>
    d9b8:	2006d07a 	srli	r3,r4,1
    d9bc:	008007c4 	movi	r2,31
    d9c0:	1185c83a 	sub	r2,r2,r6
    d9c4:	1890d83a 	srl	r8,r3,r2
    d9c8:	218e983a 	sll	r7,r4,r6
    d9cc:	003f3e06 	br	d6c8 <_fpadd_parts+0xb4>
    d9d0:	113f821e 	bne	r2,r4,d7dc <_fpadd_parts+0x1c8>
    d9d4:	28c00117 	ldw	r3,4(r5)
    d9d8:	98800117 	ldw	r2,4(r19)
    d9dc:	10ff7f26 	beq	r2,r3,d7dc <_fpadd_parts+0x1c8>
    d9e0:	04c00074 	movhi	r19,1
    d9e4:	9cfbaf04 	addi	r19,r19,-4420
    d9e8:	003f7c06 	br	d7dc <_fpadd_parts+0x1c8>
    d9ec:	2006d07a 	srli	r3,r4,1
    d9f0:	008007c4 	movi	r2,31
    d9f4:	1185c83a 	sub	r2,r2,r6
    d9f8:	1894d83a 	srl	r10,r3,r2
    d9fc:	2192983a 	sll	r9,r4,r6
    da00:	003fd706 	br	d960 <_fpadd_parts+0x34c>
    da04:	9487883a 	add	r3,r18,r18
    da08:	008007c4 	movi	r2,31
    da0c:	1185c83a 	sub	r2,r2,r6
    da10:	1886983a 	sll	r3,r3,r2
    da14:	899ad83a 	srl	r13,r17,r6
    da18:	919cd83a 	srl	r14,r18,r6
    da1c:	1b5ab03a 	or	r13,r3,r13
    da20:	003fc906 	br	d948 <_fpadd_parts+0x334>

0000da24 <__subdf3>:
    da24:	deffea04 	addi	sp,sp,-88
    da28:	dcc01415 	stw	r19,80(sp)
    da2c:	dcc00404 	addi	r19,sp,16
    da30:	2011883a 	mov	r8,r4
    da34:	2813883a 	mov	r9,r5
    da38:	dc401315 	stw	r17,76(sp)
    da3c:	d809883a 	mov	r4,sp
    da40:	980b883a 	mov	r5,r19
    da44:	dc400904 	addi	r17,sp,36
    da48:	dfc01515 	stw	ra,84(sp)
    da4c:	da400115 	stw	r9,4(sp)
    da50:	d9c00315 	stw	r7,12(sp)
    da54:	da000015 	stw	r8,0(sp)
    da58:	d9800215 	stw	r6,8(sp)
    da5c:	000ea640 	call	ea64 <__unpack_d>
    da60:	d9000204 	addi	r4,sp,8
    da64:	880b883a 	mov	r5,r17
    da68:	000ea640 	call	ea64 <__unpack_d>
    da6c:	d8800a17 	ldw	r2,40(sp)
    da70:	880b883a 	mov	r5,r17
    da74:	9809883a 	mov	r4,r19
    da78:	d9800e04 	addi	r6,sp,56
    da7c:	1080005c 	xori	r2,r2,1
    da80:	d8800a15 	stw	r2,40(sp)
    da84:	000d6140 	call	d614 <_fpadd_parts>
    da88:	1009883a 	mov	r4,r2
    da8c:	000e7500 	call	e750 <__pack_d>
    da90:	dfc01517 	ldw	ra,84(sp)
    da94:	dcc01417 	ldw	r19,80(sp)
    da98:	dc401317 	ldw	r17,76(sp)
    da9c:	dec01604 	addi	sp,sp,88
    daa0:	f800283a 	ret

0000daa4 <__adddf3>:
    daa4:	deffea04 	addi	sp,sp,-88
    daa8:	dcc01415 	stw	r19,80(sp)
    daac:	dcc00404 	addi	r19,sp,16
    dab0:	2011883a 	mov	r8,r4
    dab4:	2813883a 	mov	r9,r5
    dab8:	dc401315 	stw	r17,76(sp)
    dabc:	d809883a 	mov	r4,sp
    dac0:	980b883a 	mov	r5,r19
    dac4:	dc400904 	addi	r17,sp,36
    dac8:	dfc01515 	stw	ra,84(sp)
    dacc:	da400115 	stw	r9,4(sp)
    dad0:	d9c00315 	stw	r7,12(sp)
    dad4:	da000015 	stw	r8,0(sp)
    dad8:	d9800215 	stw	r6,8(sp)
    dadc:	000ea640 	call	ea64 <__unpack_d>
    dae0:	d9000204 	addi	r4,sp,8
    dae4:	880b883a 	mov	r5,r17
    dae8:	000ea640 	call	ea64 <__unpack_d>
    daec:	d9800e04 	addi	r6,sp,56
    daf0:	9809883a 	mov	r4,r19
    daf4:	880b883a 	mov	r5,r17
    daf8:	000d6140 	call	d614 <_fpadd_parts>
    dafc:	1009883a 	mov	r4,r2
    db00:	000e7500 	call	e750 <__pack_d>
    db04:	dfc01517 	ldw	ra,84(sp)
    db08:	dcc01417 	ldw	r19,80(sp)
    db0c:	dc401317 	ldw	r17,76(sp)
    db10:	dec01604 	addi	sp,sp,88
    db14:	f800283a 	ret

0000db18 <__muldf3>:
    db18:	deffe004 	addi	sp,sp,-128
    db1c:	dc401815 	stw	r17,96(sp)
    db20:	dc400404 	addi	r17,sp,16
    db24:	2011883a 	mov	r8,r4
    db28:	2813883a 	mov	r9,r5
    db2c:	dc001715 	stw	r16,92(sp)
    db30:	d809883a 	mov	r4,sp
    db34:	880b883a 	mov	r5,r17
    db38:	dc000904 	addi	r16,sp,36
    db3c:	dfc01f15 	stw	ra,124(sp)
    db40:	da400115 	stw	r9,4(sp)
    db44:	d9c00315 	stw	r7,12(sp)
    db48:	da000015 	stw	r8,0(sp)
    db4c:	d9800215 	stw	r6,8(sp)
    db50:	ddc01e15 	stw	r23,120(sp)
    db54:	dd801d15 	stw	r22,116(sp)
    db58:	dd401c15 	stw	r21,112(sp)
    db5c:	dd001b15 	stw	r20,108(sp)
    db60:	dcc01a15 	stw	r19,104(sp)
    db64:	dc801915 	stw	r18,100(sp)
    db68:	000ea640 	call	ea64 <__unpack_d>
    db6c:	d9000204 	addi	r4,sp,8
    db70:	800b883a 	mov	r5,r16
    db74:	000ea640 	call	ea64 <__unpack_d>
    db78:	d9000417 	ldw	r4,16(sp)
    db7c:	00800044 	movi	r2,1
    db80:	1100102e 	bgeu	r2,r4,dbc4 <__muldf3+0xac>
    db84:	d8c00917 	ldw	r3,36(sp)
    db88:	10c0062e 	bgeu	r2,r3,dba4 <__muldf3+0x8c>
    db8c:	00800104 	movi	r2,4
    db90:	20800a26 	beq	r4,r2,dbbc <__muldf3+0xa4>
    db94:	1880cc26 	beq	r3,r2,dec8 <__muldf3+0x3b0>
    db98:	00800084 	movi	r2,2
    db9c:	20800926 	beq	r4,r2,dbc4 <__muldf3+0xac>
    dba0:	1880191e 	bne	r3,r2,dc08 <__muldf3+0xf0>
    dba4:	d8c00a17 	ldw	r3,40(sp)
    dba8:	d8800517 	ldw	r2,20(sp)
    dbac:	8009883a 	mov	r4,r16
    dbb0:	10c4c03a 	cmpne	r2,r2,r3
    dbb4:	d8800a15 	stw	r2,40(sp)
    dbb8:	00000706 	br	dbd8 <__muldf3+0xc0>
    dbbc:	00800084 	movi	r2,2
    dbc0:	1880c326 	beq	r3,r2,ded0 <__muldf3+0x3b8>
    dbc4:	d8800517 	ldw	r2,20(sp)
    dbc8:	d8c00a17 	ldw	r3,40(sp)
    dbcc:	8809883a 	mov	r4,r17
    dbd0:	10c4c03a 	cmpne	r2,r2,r3
    dbd4:	d8800515 	stw	r2,20(sp)
    dbd8:	000e7500 	call	e750 <__pack_d>
    dbdc:	dfc01f17 	ldw	ra,124(sp)
    dbe0:	ddc01e17 	ldw	r23,120(sp)
    dbe4:	dd801d17 	ldw	r22,116(sp)
    dbe8:	dd401c17 	ldw	r21,112(sp)
    dbec:	dd001b17 	ldw	r20,108(sp)
    dbf0:	dcc01a17 	ldw	r19,104(sp)
    dbf4:	dc801917 	ldw	r18,100(sp)
    dbf8:	dc401817 	ldw	r17,96(sp)
    dbfc:	dc001717 	ldw	r16,92(sp)
    dc00:	dec02004 	addi	sp,sp,128
    dc04:	f800283a 	ret
    dc08:	dd800717 	ldw	r22,28(sp)
    dc0c:	dc800c17 	ldw	r18,48(sp)
    dc10:	002b883a 	mov	r21,zero
    dc14:	0023883a 	mov	r17,zero
    dc18:	a80b883a 	mov	r5,r21
    dc1c:	b00d883a 	mov	r6,r22
    dc20:	880f883a 	mov	r7,r17
    dc24:	ddc00817 	ldw	r23,32(sp)
    dc28:	dcc00d17 	ldw	r19,52(sp)
    dc2c:	9009883a 	mov	r4,r18
    dc30:	000e5ac0 	call	e5ac <__muldi3>
    dc34:	001b883a 	mov	r13,zero
    dc38:	680f883a 	mov	r7,r13
    dc3c:	b009883a 	mov	r4,r22
    dc40:	000b883a 	mov	r5,zero
    dc44:	980d883a 	mov	r6,r19
    dc48:	b82d883a 	mov	r22,r23
    dc4c:	002f883a 	mov	r23,zero
    dc50:	db401615 	stw	r13,88(sp)
    dc54:	d8801315 	stw	r2,76(sp)
    dc58:	d8c01415 	stw	r3,80(sp)
    dc5c:	dcc01515 	stw	r19,84(sp)
    dc60:	000e5ac0 	call	e5ac <__muldi3>
    dc64:	b00d883a 	mov	r6,r22
    dc68:	000b883a 	mov	r5,zero
    dc6c:	9009883a 	mov	r4,r18
    dc70:	b80f883a 	mov	r7,r23
    dc74:	1021883a 	mov	r16,r2
    dc78:	1823883a 	mov	r17,r3
    dc7c:	000e5ac0 	call	e5ac <__muldi3>
    dc80:	8085883a 	add	r2,r16,r2
    dc84:	140d803a 	cmpltu	r6,r2,r16
    dc88:	88c7883a 	add	r3,r17,r3
    dc8c:	30cd883a 	add	r6,r6,r3
    dc90:	1029883a 	mov	r20,r2
    dc94:	302b883a 	mov	r21,r6
    dc98:	da801317 	ldw	r10,76(sp)
    dc9c:	dac01417 	ldw	r11,80(sp)
    dca0:	db001517 	ldw	r12,84(sp)
    dca4:	db401617 	ldw	r13,88(sp)
    dca8:	3440612e 	bgeu	r6,r17,de30 <__muldf3+0x318>
    dcac:	0009883a 	mov	r4,zero
    dcb0:	5105883a 	add	r2,r10,r4
    dcb4:	128d803a 	cmpltu	r6,r2,r10
    dcb8:	5d07883a 	add	r3,r11,r20
    dcbc:	30cd883a 	add	r6,r6,r3
    dcc0:	0021883a 	mov	r16,zero
    dcc4:	04400044 	movi	r17,1
    dcc8:	1025883a 	mov	r18,r2
    dccc:	3027883a 	mov	r19,r6
    dcd0:	32c06236 	bltu	r6,r11,de5c <__muldf3+0x344>
    dcd4:	59807a26 	beq	r11,r6,dec0 <__muldf3+0x3a8>
    dcd8:	680b883a 	mov	r5,r13
    dcdc:	b80f883a 	mov	r7,r23
    dce0:	6009883a 	mov	r4,r12
    dce4:	b00d883a 	mov	r6,r22
    dce8:	000e5ac0 	call	e5ac <__muldi3>
    dcec:	1009883a 	mov	r4,r2
    dcf0:	000f883a 	mov	r7,zero
    dcf4:	1545883a 	add	r2,r2,r21
    dcf8:	1111803a 	cmpltu	r8,r2,r4
    dcfc:	19c7883a 	add	r3,r3,r7
    dd00:	40c7883a 	add	r3,r8,r3
    dd04:	88cb883a 	add	r5,r17,r3
    dd08:	d8c00617 	ldw	r3,24(sp)
    dd0c:	8089883a 	add	r4,r16,r2
    dd10:	d8800b17 	ldw	r2,44(sp)
    dd14:	18c00104 	addi	r3,r3,4
    dd18:	240d803a 	cmpltu	r6,r4,r16
    dd1c:	10c7883a 	add	r3,r2,r3
    dd20:	2013883a 	mov	r9,r4
    dd24:	d8800a17 	ldw	r2,40(sp)
    dd28:	d9000517 	ldw	r4,20(sp)
    dd2c:	314d883a 	add	r6,r6,r5
    dd30:	3015883a 	mov	r10,r6
    dd34:	2088c03a 	cmpne	r4,r4,r2
    dd38:	00880034 	movhi	r2,8192
    dd3c:	10bfffc4 	addi	r2,r2,-1
    dd40:	d9000f15 	stw	r4,60(sp)
    dd44:	d8c01015 	stw	r3,64(sp)
    dd48:	1180162e 	bgeu	r2,r6,dda4 <__muldf3+0x28c>
    dd4c:	1811883a 	mov	r8,r3
    dd50:	101f883a 	mov	r15,r2
    dd54:	980497fa 	slli	r2,r19,31
    dd58:	9016d07a 	srli	r11,r18,1
    dd5c:	500697fa 	slli	r3,r10,31
    dd60:	480cd07a 	srli	r6,r9,1
    dd64:	500ed07a 	srli	r7,r10,1
    dd68:	12d6b03a 	or	r11,r2,r11
    dd6c:	00800044 	movi	r2,1
    dd70:	198cb03a 	or	r6,r3,r6
    dd74:	4888703a 	and	r4,r9,r2
    dd78:	9818d07a 	srli	r12,r19,1
    dd7c:	001b883a 	mov	r13,zero
    dd80:	03a00034 	movhi	r14,32768
    dd84:	3013883a 	mov	r9,r6
    dd88:	3815883a 	mov	r10,r7
    dd8c:	4091883a 	add	r8,r8,r2
    dd90:	20000226 	beq	r4,zero,dd9c <__muldf3+0x284>
    dd94:	5b64b03a 	or	r18,r11,r13
    dd98:	63a6b03a 	or	r19,r12,r14
    dd9c:	7abfed36 	bltu	r15,r10,dd54 <__muldf3+0x23c>
    dda0:	da001015 	stw	r8,64(sp)
    dda4:	00840034 	movhi	r2,4096
    dda8:	10bfffc4 	addi	r2,r2,-1
    ddac:	12801436 	bltu	r2,r10,de00 <__muldf3+0x2e8>
    ddb0:	da001017 	ldw	r8,64(sp)
    ddb4:	101f883a 	mov	r15,r2
    ddb8:	4a45883a 	add	r2,r9,r9
    ddbc:	124d803a 	cmpltu	r6,r2,r9
    ddc0:	5287883a 	add	r3,r10,r10
    ddc4:	9497883a 	add	r11,r18,r18
    ddc8:	5c8f803a 	cmpltu	r7,r11,r18
    ddcc:	9cd9883a 	add	r12,r19,r19
    ddd0:	01000044 	movi	r4,1
    ddd4:	30cd883a 	add	r6,r6,r3
    ddd8:	3b0f883a 	add	r7,r7,r12
    dddc:	423fffc4 	addi	r8,r8,-1
    dde0:	1013883a 	mov	r9,r2
    dde4:	3015883a 	mov	r10,r6
    dde8:	111ab03a 	or	r13,r2,r4
    ddec:	98003016 	blt	r19,zero,deb0 <__muldf3+0x398>
    ddf0:	5825883a 	mov	r18,r11
    ddf4:	3827883a 	mov	r19,r7
    ddf8:	7abfef2e 	bgeu	r15,r10,ddb8 <__muldf3+0x2a0>
    ddfc:	da001015 	stw	r8,64(sp)
    de00:	00803fc4 	movi	r2,255
    de04:	488e703a 	and	r7,r9,r2
    de08:	00802004 	movi	r2,128
    de0c:	0007883a 	mov	r3,zero
    de10:	0011883a 	mov	r8,zero
    de14:	38801826 	beq	r7,r2,de78 <__muldf3+0x360>
    de18:	008000c4 	movi	r2,3
    de1c:	d9000e04 	addi	r4,sp,56
    de20:	da801215 	stw	r10,72(sp)
    de24:	d8800e15 	stw	r2,56(sp)
    de28:	da401115 	stw	r9,68(sp)
    de2c:	003f6a06 	br	dbd8 <__muldf3+0xc0>
    de30:	89802126 	beq	r17,r6,deb8 <__muldf3+0x3a0>
    de34:	0009883a 	mov	r4,zero
    de38:	5105883a 	add	r2,r10,r4
    de3c:	128d803a 	cmpltu	r6,r2,r10
    de40:	5d07883a 	add	r3,r11,r20
    de44:	30cd883a 	add	r6,r6,r3
    de48:	0021883a 	mov	r16,zero
    de4c:	0023883a 	mov	r17,zero
    de50:	1025883a 	mov	r18,r2
    de54:	3027883a 	mov	r19,r6
    de58:	32ff9e2e 	bgeu	r6,r11,dcd4 <__muldf3+0x1bc>
    de5c:	00800044 	movi	r2,1
    de60:	8089883a 	add	r4,r16,r2
    de64:	240d803a 	cmpltu	r6,r4,r16
    de68:	344d883a 	add	r6,r6,r17
    de6c:	2021883a 	mov	r16,r4
    de70:	3023883a 	mov	r17,r6
    de74:	003f9806 	br	dcd8 <__muldf3+0x1c0>
    de78:	403fe71e 	bne	r8,zero,de18 <__muldf3+0x300>
    de7c:	01004004 	movi	r4,256
    de80:	4904703a 	and	r2,r9,r4
    de84:	10c4b03a 	or	r2,r2,r3
    de88:	103fe31e 	bne	r2,zero,de18 <__muldf3+0x300>
    de8c:	94c4b03a 	or	r2,r18,r19
    de90:	103fe126 	beq	r2,zero,de18 <__muldf3+0x300>
    de94:	49c5883a 	add	r2,r9,r7
    de98:	1251803a 	cmpltu	r8,r2,r9
    de9c:	4291883a 	add	r8,r8,r10
    dea0:	013fc004 	movi	r4,-256
    dea4:	1112703a 	and	r9,r2,r4
    dea8:	4015883a 	mov	r10,r8
    deac:	003fda06 	br	de18 <__muldf3+0x300>
    deb0:	6813883a 	mov	r9,r13
    deb4:	003fce06 	br	ddf0 <__muldf3+0x2d8>
    deb8:	143f7c36 	bltu	r2,r16,dcac <__muldf3+0x194>
    debc:	003fdd06 	br	de34 <__muldf3+0x31c>
    dec0:	12bf852e 	bgeu	r2,r10,dcd8 <__muldf3+0x1c0>
    dec4:	003fe506 	br	de5c <__muldf3+0x344>
    dec8:	00800084 	movi	r2,2
    decc:	20bf351e 	bne	r4,r2,dba4 <__muldf3+0x8c>
    ded0:	01000074 	movhi	r4,1
    ded4:	213baf04 	addi	r4,r4,-4420
    ded8:	003f3f06 	br	dbd8 <__muldf3+0xc0>

0000dedc <__divdf3>:
    dedc:	deffed04 	addi	sp,sp,-76
    dee0:	dcc01115 	stw	r19,68(sp)
    dee4:	dcc00404 	addi	r19,sp,16
    dee8:	2011883a 	mov	r8,r4
    deec:	2813883a 	mov	r9,r5
    def0:	dc000e15 	stw	r16,56(sp)
    def4:	d809883a 	mov	r4,sp
    def8:	980b883a 	mov	r5,r19
    defc:	dc000904 	addi	r16,sp,36
    df00:	dfc01215 	stw	ra,72(sp)
    df04:	da400115 	stw	r9,4(sp)
    df08:	d9c00315 	stw	r7,12(sp)
    df0c:	da000015 	stw	r8,0(sp)
    df10:	d9800215 	stw	r6,8(sp)
    df14:	dc801015 	stw	r18,64(sp)
    df18:	dc400f15 	stw	r17,60(sp)
    df1c:	000ea640 	call	ea64 <__unpack_d>
    df20:	d9000204 	addi	r4,sp,8
    df24:	800b883a 	mov	r5,r16
    df28:	000ea640 	call	ea64 <__unpack_d>
    df2c:	d9000417 	ldw	r4,16(sp)
    df30:	00800044 	movi	r2,1
    df34:	11000b2e 	bgeu	r2,r4,df64 <__divdf3+0x88>
    df38:	d9400917 	ldw	r5,36(sp)
    df3c:	1140762e 	bgeu	r2,r5,e118 <__divdf3+0x23c>
    df40:	d8800517 	ldw	r2,20(sp)
    df44:	d8c00a17 	ldw	r3,40(sp)
    df48:	01800104 	movi	r6,4
    df4c:	10c4f03a 	xor	r2,r2,r3
    df50:	d8800515 	stw	r2,20(sp)
    df54:	21800226 	beq	r4,r6,df60 <__divdf3+0x84>
    df58:	00800084 	movi	r2,2
    df5c:	2080141e 	bne	r4,r2,dfb0 <__divdf3+0xd4>
    df60:	29000926 	beq	r5,r4,df88 <__divdf3+0xac>
    df64:	9809883a 	mov	r4,r19
    df68:	000e7500 	call	e750 <__pack_d>
    df6c:	dfc01217 	ldw	ra,72(sp)
    df70:	dcc01117 	ldw	r19,68(sp)
    df74:	dc801017 	ldw	r18,64(sp)
    df78:	dc400f17 	ldw	r17,60(sp)
    df7c:	dc000e17 	ldw	r16,56(sp)
    df80:	dec01304 	addi	sp,sp,76
    df84:	f800283a 	ret
    df88:	01000074 	movhi	r4,1
    df8c:	213baf04 	addi	r4,r4,-4420
    df90:	000e7500 	call	e750 <__pack_d>
    df94:	dfc01217 	ldw	ra,72(sp)
    df98:	dcc01117 	ldw	r19,68(sp)
    df9c:	dc801017 	ldw	r18,64(sp)
    dfa0:	dc400f17 	ldw	r17,60(sp)
    dfa4:	dc000e17 	ldw	r16,56(sp)
    dfa8:	dec01304 	addi	sp,sp,76
    dfac:	f800283a 	ret
    dfb0:	29805b26 	beq	r5,r6,e120 <__divdf3+0x244>
    dfb4:	28802d26 	beq	r5,r2,e06c <__divdf3+0x190>
    dfb8:	d8c00617 	ldw	r3,24(sp)
    dfbc:	d8800b17 	ldw	r2,44(sp)
    dfc0:	d9c00817 	ldw	r7,32(sp)
    dfc4:	dc400d17 	ldw	r17,52(sp)
    dfc8:	188bc83a 	sub	r5,r3,r2
    dfcc:	d9800717 	ldw	r6,28(sp)
    dfd0:	dc000c17 	ldw	r16,48(sp)
    dfd4:	d9400615 	stw	r5,24(sp)
    dfd8:	3c403836 	bltu	r7,r17,e0bc <__divdf3+0x1e0>
    dfdc:	89c03626 	beq	r17,r7,e0b8 <__divdf3+0x1dc>
    dfe0:	0015883a 	mov	r10,zero
    dfe4:	001d883a 	mov	r14,zero
    dfe8:	02c40034 	movhi	r11,4096
    dfec:	001f883a 	mov	r15,zero
    dff0:	003f883a 	mov	ra,zero
    dff4:	04800f44 	movi	r18,61
    dff8:	00000f06 	br	e038 <__divdf3+0x15c>
    dffc:	601d883a 	mov	r14,r12
    e000:	681f883a 	mov	r15,r13
    e004:	400d883a 	mov	r6,r8
    e008:	100f883a 	mov	r7,r2
    e00c:	3191883a 	add	r8,r6,r6
    e010:	5808d07a 	srli	r4,r11,1
    e014:	4185803a 	cmpltu	r2,r8,r6
    e018:	39d3883a 	add	r9,r7,r7
    e01c:	28c6b03a 	or	r3,r5,r3
    e020:	1245883a 	add	r2,r2,r9
    e024:	1815883a 	mov	r10,r3
    e028:	2017883a 	mov	r11,r4
    e02c:	400d883a 	mov	r6,r8
    e030:	100f883a 	mov	r7,r2
    e034:	fc801726 	beq	ra,r18,e094 <__divdf3+0x1b8>
    e038:	580a97fa 	slli	r5,r11,31
    e03c:	5006d07a 	srli	r3,r10,1
    e040:	ffc00044 	addi	ra,ra,1
    e044:	3c7ff136 	bltu	r7,r17,e00c <__divdf3+0x130>
    e048:	3411c83a 	sub	r8,r6,r16
    e04c:	3205803a 	cmpltu	r2,r6,r8
    e050:	3c53c83a 	sub	r9,r7,r17
    e054:	7298b03a 	or	r12,r14,r10
    e058:	7adab03a 	or	r13,r15,r11
    e05c:	4885c83a 	sub	r2,r9,r2
    e060:	89ffe61e 	bne	r17,r7,dffc <__divdf3+0x120>
    e064:	343fe936 	bltu	r6,r16,e00c <__divdf3+0x130>
    e068:	003fe406 	br	dffc <__divdf3+0x120>
    e06c:	9809883a 	mov	r4,r19
    e070:	d9800415 	stw	r6,16(sp)
    e074:	000e7500 	call	e750 <__pack_d>
    e078:	dfc01217 	ldw	ra,72(sp)
    e07c:	dcc01117 	ldw	r19,68(sp)
    e080:	dc801017 	ldw	r18,64(sp)
    e084:	dc400f17 	ldw	r17,60(sp)
    e088:	dc000e17 	ldw	r16,56(sp)
    e08c:	dec01304 	addi	sp,sp,76
    e090:	f800283a 	ret
    e094:	00803fc4 	movi	r2,255
    e098:	7090703a 	and	r8,r14,r2
    e09c:	00802004 	movi	r2,128
    e0a0:	0007883a 	mov	r3,zero
    e0a4:	0013883a 	mov	r9,zero
    e0a8:	40800d26 	beq	r8,r2,e0e0 <__divdf3+0x204>
    e0ac:	dbc00815 	stw	r15,32(sp)
    e0b0:	db800715 	stw	r14,28(sp)
    e0b4:	003fab06 	br	df64 <__divdf3+0x88>
    e0b8:	343fc92e 	bgeu	r6,r16,dfe0 <__divdf3+0x104>
    e0bc:	3185883a 	add	r2,r6,r6
    e0c0:	1189803a 	cmpltu	r4,r2,r6
    e0c4:	39c7883a 	add	r3,r7,r7
    e0c8:	20c9883a 	add	r4,r4,r3
    e0cc:	297fffc4 	addi	r5,r5,-1
    e0d0:	100d883a 	mov	r6,r2
    e0d4:	200f883a 	mov	r7,r4
    e0d8:	d9400615 	stw	r5,24(sp)
    e0dc:	003fc006 	br	dfe0 <__divdf3+0x104>
    e0e0:	483ff21e 	bne	r9,zero,e0ac <__divdf3+0x1d0>
    e0e4:	01004004 	movi	r4,256
    e0e8:	7104703a 	and	r2,r14,r4
    e0ec:	10c4b03a 	or	r2,r2,r3
    e0f0:	103fee1e 	bne	r2,zero,e0ac <__divdf3+0x1d0>
    e0f4:	31c4b03a 	or	r2,r6,r7
    e0f8:	103fec26 	beq	r2,zero,e0ac <__divdf3+0x1d0>
    e0fc:	7205883a 	add	r2,r14,r8
    e100:	1391803a 	cmpltu	r8,r2,r14
    e104:	43d1883a 	add	r8,r8,r15
    e108:	013fc004 	movi	r4,-256
    e10c:	111c703a 	and	r14,r2,r4
    e110:	401f883a 	mov	r15,r8
    e114:	003fe506 	br	e0ac <__divdf3+0x1d0>
    e118:	8009883a 	mov	r4,r16
    e11c:	003f9206 	br	df68 <__divdf3+0x8c>
    e120:	9809883a 	mov	r4,r19
    e124:	d8000715 	stw	zero,28(sp)
    e128:	d8000815 	stw	zero,32(sp)
    e12c:	d8000615 	stw	zero,24(sp)
    e130:	003f8d06 	br	df68 <__divdf3+0x8c>

0000e134 <__gedf2>:
    e134:	deffef04 	addi	sp,sp,-68
    e138:	dc400f15 	stw	r17,60(sp)
    e13c:	dc400404 	addi	r17,sp,16
    e140:	2005883a 	mov	r2,r4
    e144:	2807883a 	mov	r3,r5
    e148:	dc000e15 	stw	r16,56(sp)
    e14c:	d809883a 	mov	r4,sp
    e150:	880b883a 	mov	r5,r17
    e154:	dc000904 	addi	r16,sp,36
    e158:	d8c00115 	stw	r3,4(sp)
    e15c:	d8800015 	stw	r2,0(sp)
    e160:	d9800215 	stw	r6,8(sp)
    e164:	dfc01015 	stw	ra,64(sp)
    e168:	d9c00315 	stw	r7,12(sp)
    e16c:	000ea640 	call	ea64 <__unpack_d>
    e170:	d9000204 	addi	r4,sp,8
    e174:	800b883a 	mov	r5,r16
    e178:	000ea640 	call	ea64 <__unpack_d>
    e17c:	d8800417 	ldw	r2,16(sp)
    e180:	00c00044 	movi	r3,1
    e184:	01bfffc4 	movi	r6,-1
    e188:	1880062e 	bgeu	r3,r2,e1a4 <__gedf2+0x70>
    e18c:	d8800917 	ldw	r2,36(sp)
    e190:	8809883a 	mov	r4,r17
    e194:	800b883a 	mov	r5,r16
    e198:	1880022e 	bgeu	r3,r2,e1a4 <__gedf2+0x70>
    e19c:	000eb9c0 	call	eb9c <__fpcmp_parts_d>
    e1a0:	100d883a 	mov	r6,r2
    e1a4:	3005883a 	mov	r2,r6
    e1a8:	dfc01017 	ldw	ra,64(sp)
    e1ac:	dc400f17 	ldw	r17,60(sp)
    e1b0:	dc000e17 	ldw	r16,56(sp)
    e1b4:	dec01104 	addi	sp,sp,68
    e1b8:	f800283a 	ret

0000e1bc <__fixdfsi>:
    e1bc:	defff804 	addi	sp,sp,-32
    e1c0:	2005883a 	mov	r2,r4
    e1c4:	2807883a 	mov	r3,r5
    e1c8:	d809883a 	mov	r4,sp
    e1cc:	d9400204 	addi	r5,sp,8
    e1d0:	d8c00115 	stw	r3,4(sp)
    e1d4:	d8800015 	stw	r2,0(sp)
    e1d8:	dfc00715 	stw	ra,28(sp)
    e1dc:	000ea640 	call	ea64 <__unpack_d>
    e1e0:	d8c00217 	ldw	r3,8(sp)
    e1e4:	00800084 	movi	r2,2
    e1e8:	1880051e 	bne	r3,r2,e200 <__fixdfsi+0x44>
    e1ec:	0007883a 	mov	r3,zero
    e1f0:	1805883a 	mov	r2,r3
    e1f4:	dfc00717 	ldw	ra,28(sp)
    e1f8:	dec00804 	addi	sp,sp,32
    e1fc:	f800283a 	ret
    e200:	00800044 	movi	r2,1
    e204:	10fff92e 	bgeu	r2,r3,e1ec <__fixdfsi+0x30>
    e208:	00800104 	movi	r2,4
    e20c:	18800426 	beq	r3,r2,e220 <__fixdfsi+0x64>
    e210:	d8c00417 	ldw	r3,16(sp)
    e214:	183ff516 	blt	r3,zero,e1ec <__fixdfsi+0x30>
    e218:	00800784 	movi	r2,30
    e21c:	10c0080e 	bge	r2,r3,e240 <__fixdfsi+0x84>
    e220:	d8800317 	ldw	r2,12(sp)
    e224:	1000121e 	bne	r2,zero,e270 <__fixdfsi+0xb4>
    e228:	00e00034 	movhi	r3,32768
    e22c:	18ffffc4 	addi	r3,r3,-1
    e230:	1805883a 	mov	r2,r3
    e234:	dfc00717 	ldw	ra,28(sp)
    e238:	dec00804 	addi	sp,sp,32
    e23c:	f800283a 	ret
    e240:	00800f04 	movi	r2,60
    e244:	10d1c83a 	sub	r8,r2,r3
    e248:	40bff804 	addi	r2,r8,-32
    e24c:	d9800517 	ldw	r6,20(sp)
    e250:	d9c00617 	ldw	r7,24(sp)
    e254:	10000816 	blt	r2,zero,e278 <__fixdfsi+0xbc>
    e258:	3888d83a 	srl	r4,r7,r2
    e25c:	d8800317 	ldw	r2,12(sp)
    e260:	2007883a 	mov	r3,r4
    e264:	103fe226 	beq	r2,zero,e1f0 <__fixdfsi+0x34>
    e268:	0107c83a 	sub	r3,zero,r4
    e26c:	003fe006 	br	e1f0 <__fixdfsi+0x34>
    e270:	00e00034 	movhi	r3,32768
    e274:	003fde06 	br	e1f0 <__fixdfsi+0x34>
    e278:	39c7883a 	add	r3,r7,r7
    e27c:	008007c4 	movi	r2,31
    e280:	1205c83a 	sub	r2,r2,r8
    e284:	1886983a 	sll	r3,r3,r2
    e288:	3208d83a 	srl	r4,r6,r8
    e28c:	1908b03a 	or	r4,r3,r4
    e290:	003ff206 	br	e25c <__fixdfsi+0xa0>

0000e294 <__floatunsidf>:
    e294:	defff204 	addi	sp,sp,-56
    e298:	dfc00d15 	stw	ra,52(sp)
    e29c:	ddc00c15 	stw	r23,48(sp)
    e2a0:	dd800b15 	stw	r22,44(sp)
    e2a4:	dd400a15 	stw	r21,40(sp)
    e2a8:	dd000915 	stw	r20,36(sp)
    e2ac:	dcc00815 	stw	r19,32(sp)
    e2b0:	dc800715 	stw	r18,28(sp)
    e2b4:	dc400615 	stw	r17,24(sp)
    e2b8:	dc000515 	stw	r16,20(sp)
    e2bc:	d8000115 	stw	zero,4(sp)
    e2c0:	20000f1e 	bne	r4,zero,e300 <__floatunsidf+0x6c>
    e2c4:	00800084 	movi	r2,2
    e2c8:	d8800015 	stw	r2,0(sp)
    e2cc:	d809883a 	mov	r4,sp
    e2d0:	000e7500 	call	e750 <__pack_d>
    e2d4:	dfc00d17 	ldw	ra,52(sp)
    e2d8:	ddc00c17 	ldw	r23,48(sp)
    e2dc:	dd800b17 	ldw	r22,44(sp)
    e2e0:	dd400a17 	ldw	r21,40(sp)
    e2e4:	dd000917 	ldw	r20,36(sp)
    e2e8:	dcc00817 	ldw	r19,32(sp)
    e2ec:	dc800717 	ldw	r18,28(sp)
    e2f0:	dc400617 	ldw	r17,24(sp)
    e2f4:	dc000517 	ldw	r16,20(sp)
    e2f8:	dec00e04 	addi	sp,sp,56
    e2fc:	f800283a 	ret
    e300:	008000c4 	movi	r2,3
    e304:	00c00f04 	movi	r3,60
    e308:	002f883a 	mov	r23,zero
    e30c:	202d883a 	mov	r22,r4
    e310:	d8800015 	stw	r2,0(sp)
    e314:	d8c00215 	stw	r3,8(sp)
    e318:	d9000315 	stw	r4,12(sp)
    e31c:	ddc00415 	stw	r23,16(sp)
    e320:	000e6d00 	call	e6d0 <__clzsi2>
    e324:	12400744 	addi	r9,r2,29
    e328:	48000b16 	blt	r9,zero,e358 <__floatunsidf+0xc4>
    e32c:	483fe726 	beq	r9,zero,e2cc <__floatunsidf+0x38>
    e330:	10bfff44 	addi	r2,r2,-3
    e334:	10002e16 	blt	r2,zero,e3f0 <__floatunsidf+0x15c>
    e338:	b0a2983a 	sll	r17,r22,r2
    e33c:	0021883a 	mov	r16,zero
    e340:	d8800217 	ldw	r2,8(sp)
    e344:	dc400415 	stw	r17,16(sp)
    e348:	dc000315 	stw	r16,12(sp)
    e34c:	1245c83a 	sub	r2,r2,r9
    e350:	d8800215 	stw	r2,8(sp)
    e354:	003fdd06 	br	e2cc <__floatunsidf+0x38>
    e358:	0255c83a 	sub	r10,zero,r9
    e35c:	51bff804 	addi	r6,r10,-32
    e360:	30001b16 	blt	r6,zero,e3d0 <__floatunsidf+0x13c>
    e364:	b9a8d83a 	srl	r20,r23,r6
    e368:	002b883a 	mov	r21,zero
    e36c:	000f883a 	mov	r7,zero
    e370:	01000044 	movi	r4,1
    e374:	0011883a 	mov	r8,zero
    e378:	30002516 	blt	r6,zero,e410 <__floatunsidf+0x17c>
    e37c:	21a6983a 	sll	r19,r4,r6
    e380:	0025883a 	mov	r18,zero
    e384:	00bfffc4 	movi	r2,-1
    e388:	9089883a 	add	r4,r18,r2
    e38c:	988b883a 	add	r5,r19,r2
    e390:	248d803a 	cmpltu	r6,r4,r18
    e394:	314b883a 	add	r5,r6,r5
    e398:	b104703a 	and	r2,r22,r4
    e39c:	b946703a 	and	r3,r23,r5
    e3a0:	10c4b03a 	or	r2,r2,r3
    e3a4:	10000226 	beq	r2,zero,e3b0 <__floatunsidf+0x11c>
    e3a8:	01c00044 	movi	r7,1
    e3ac:	0011883a 	mov	r8,zero
    e3b0:	d9000217 	ldw	r4,8(sp)
    e3b4:	a1c4b03a 	or	r2,r20,r7
    e3b8:	aa06b03a 	or	r3,r21,r8
    e3bc:	2249c83a 	sub	r4,r4,r9
    e3c0:	d8c00415 	stw	r3,16(sp)
    e3c4:	d9000215 	stw	r4,8(sp)
    e3c8:	d8800315 	stw	r2,12(sp)
    e3cc:	003fbf06 	br	e2cc <__floatunsidf+0x38>
    e3d0:	bdc7883a 	add	r3,r23,r23
    e3d4:	008007c4 	movi	r2,31
    e3d8:	1285c83a 	sub	r2,r2,r10
    e3dc:	1886983a 	sll	r3,r3,r2
    e3e0:	b2a8d83a 	srl	r20,r22,r10
    e3e4:	baaad83a 	srl	r21,r23,r10
    e3e8:	1d28b03a 	or	r20,r3,r20
    e3ec:	003fdf06 	br	e36c <__floatunsidf+0xd8>
    e3f0:	b006d07a 	srli	r3,r22,1
    e3f4:	008007c4 	movi	r2,31
    e3f8:	1245c83a 	sub	r2,r2,r9
    e3fc:	1886d83a 	srl	r3,r3,r2
    e400:	ba62983a 	sll	r17,r23,r9
    e404:	b260983a 	sll	r16,r22,r9
    e408:	1c62b03a 	or	r17,r3,r17
    e40c:	003fcc06 	br	e340 <__floatunsidf+0xac>
    e410:	2006d07a 	srli	r3,r4,1
    e414:	008007c4 	movi	r2,31
    e418:	1285c83a 	sub	r2,r2,r10
    e41c:	18a6d83a 	srl	r19,r3,r2
    e420:	22a4983a 	sll	r18,r4,r10
    e424:	003fd706 	br	e384 <__floatunsidf+0xf0>

0000e428 <udivmodsi4>:
    e428:	29001b2e 	bgeu	r5,r4,e498 <udivmodsi4+0x70>
    e42c:	28001a16 	blt	r5,zero,e498 <udivmodsi4+0x70>
    e430:	00800044 	movi	r2,1
    e434:	0007883a 	mov	r3,zero
    e438:	01c007c4 	movi	r7,31
    e43c:	00000306 	br	e44c <udivmodsi4+0x24>
    e440:	19c01326 	beq	r3,r7,e490 <udivmodsi4+0x68>
    e444:	18c00044 	addi	r3,r3,1
    e448:	28000416 	blt	r5,zero,e45c <udivmodsi4+0x34>
    e44c:	294b883a 	add	r5,r5,r5
    e450:	1085883a 	add	r2,r2,r2
    e454:	293ffa36 	bltu	r5,r4,e440 <udivmodsi4+0x18>
    e458:	10000d26 	beq	r2,zero,e490 <udivmodsi4+0x68>
    e45c:	0007883a 	mov	r3,zero
    e460:	21400236 	bltu	r4,r5,e46c <udivmodsi4+0x44>
    e464:	2149c83a 	sub	r4,r4,r5
    e468:	1886b03a 	or	r3,r3,r2
    e46c:	1004d07a 	srli	r2,r2,1
    e470:	280ad07a 	srli	r5,r5,1
    e474:	103ffa1e 	bne	r2,zero,e460 <udivmodsi4+0x38>
    e478:	30000226 	beq	r6,zero,e484 <udivmodsi4+0x5c>
    e47c:	2005883a 	mov	r2,r4
    e480:	f800283a 	ret
    e484:	1809883a 	mov	r4,r3
    e488:	2005883a 	mov	r2,r4
    e48c:	f800283a 	ret
    e490:	0007883a 	mov	r3,zero
    e494:	003ff806 	br	e478 <udivmodsi4+0x50>
    e498:	00800044 	movi	r2,1
    e49c:	0007883a 	mov	r3,zero
    e4a0:	003fef06 	br	e460 <udivmodsi4+0x38>

0000e4a4 <__divsi3>:
    e4a4:	defffe04 	addi	sp,sp,-8
    e4a8:	dc000015 	stw	r16,0(sp)
    e4ac:	dfc00115 	stw	ra,4(sp)
    e4b0:	0021883a 	mov	r16,zero
    e4b4:	20000c16 	blt	r4,zero,e4e8 <__divsi3+0x44>
    e4b8:	000d883a 	mov	r6,zero
    e4bc:	28000e16 	blt	r5,zero,e4f8 <__divsi3+0x54>
    e4c0:	000e4280 	call	e428 <udivmodsi4>
    e4c4:	1007883a 	mov	r3,r2
    e4c8:	8005003a 	cmpeq	r2,r16,zero
    e4cc:	1000011e 	bne	r2,zero,e4d4 <__divsi3+0x30>
    e4d0:	00c7c83a 	sub	r3,zero,r3
    e4d4:	1805883a 	mov	r2,r3
    e4d8:	dfc00117 	ldw	ra,4(sp)
    e4dc:	dc000017 	ldw	r16,0(sp)
    e4e0:	dec00204 	addi	sp,sp,8
    e4e4:	f800283a 	ret
    e4e8:	0109c83a 	sub	r4,zero,r4
    e4ec:	04000044 	movi	r16,1
    e4f0:	000d883a 	mov	r6,zero
    e4f4:	283ff20e 	bge	r5,zero,e4c0 <__divsi3+0x1c>
    e4f8:	014bc83a 	sub	r5,zero,r5
    e4fc:	8021003a 	cmpeq	r16,r16,zero
    e500:	003fef06 	br	e4c0 <__divsi3+0x1c>

0000e504 <__modsi3>:
    e504:	deffff04 	addi	sp,sp,-4
    e508:	dfc00015 	stw	ra,0(sp)
    e50c:	01800044 	movi	r6,1
    e510:	2807883a 	mov	r3,r5
    e514:	20000416 	blt	r4,zero,e528 <__modsi3+0x24>
    e518:	28000c16 	blt	r5,zero,e54c <__modsi3+0x48>
    e51c:	dfc00017 	ldw	ra,0(sp)
    e520:	dec00104 	addi	sp,sp,4
    e524:	000e4281 	jmpi	e428 <udivmodsi4>
    e528:	0109c83a 	sub	r4,zero,r4
    e52c:	28000b16 	blt	r5,zero,e55c <__modsi3+0x58>
    e530:	180b883a 	mov	r5,r3
    e534:	01800044 	movi	r6,1
    e538:	000e4280 	call	e428 <udivmodsi4>
    e53c:	0085c83a 	sub	r2,zero,r2
    e540:	dfc00017 	ldw	ra,0(sp)
    e544:	dec00104 	addi	sp,sp,4
    e548:	f800283a 	ret
    e54c:	014bc83a 	sub	r5,zero,r5
    e550:	dfc00017 	ldw	ra,0(sp)
    e554:	dec00104 	addi	sp,sp,4
    e558:	000e4281 	jmpi	e428 <udivmodsi4>
    e55c:	0147c83a 	sub	r3,zero,r5
    e560:	003ff306 	br	e530 <__modsi3+0x2c>

0000e564 <__udivsi3>:
    e564:	000d883a 	mov	r6,zero
    e568:	000e4281 	jmpi	e428 <udivmodsi4>

0000e56c <__umodsi3>:
    e56c:	01800044 	movi	r6,1
    e570:	000e4281 	jmpi	e428 <udivmodsi4>

0000e574 <__mulsi3>:
    e574:	20000a26 	beq	r4,zero,e5a0 <__mulsi3+0x2c>
    e578:	0007883a 	mov	r3,zero
    e57c:	2080004c 	andi	r2,r4,1
    e580:	1005003a 	cmpeq	r2,r2,zero
    e584:	2008d07a 	srli	r4,r4,1
    e588:	1000011e 	bne	r2,zero,e590 <__mulsi3+0x1c>
    e58c:	1947883a 	add	r3,r3,r5
    e590:	294b883a 	add	r5,r5,r5
    e594:	203ff91e 	bne	r4,zero,e57c <__mulsi3+0x8>
    e598:	1805883a 	mov	r2,r3
    e59c:	f800283a 	ret
    e5a0:	0007883a 	mov	r3,zero
    e5a4:	1805883a 	mov	r2,r3
    e5a8:	f800283a 	ret

0000e5ac <__muldi3>:
    e5ac:	defff204 	addi	sp,sp,-56
    e5b0:	df000c15 	stw	fp,48(sp)
    e5b4:	3038d43a 	srli	fp,r6,16
    e5b8:	dd000815 	stw	r20,32(sp)
    e5bc:	dc400515 	stw	r17,20(sp)
    e5c0:	2028d43a 	srli	r20,r4,16
    e5c4:	247fffcc 	andi	r17,r4,65535
    e5c8:	dc000415 	stw	r16,16(sp)
    e5cc:	343fffcc 	andi	r16,r6,65535
    e5d0:	dcc00715 	stw	r19,28(sp)
    e5d4:	d9000015 	stw	r4,0(sp)
    e5d8:	2827883a 	mov	r19,r5
    e5dc:	8809883a 	mov	r4,r17
    e5e0:	d9400115 	stw	r5,4(sp)
    e5e4:	800b883a 	mov	r5,r16
    e5e8:	d9800215 	stw	r6,8(sp)
    e5ec:	dfc00d15 	stw	ra,52(sp)
    e5f0:	d9c00315 	stw	r7,12(sp)
    e5f4:	dd800a15 	stw	r22,40(sp)
    e5f8:	dd400915 	stw	r21,36(sp)
    e5fc:	302d883a 	mov	r22,r6
    e600:	ddc00b15 	stw	r23,44(sp)
    e604:	dc800615 	stw	r18,24(sp)
    e608:	000e5740 	call	e574 <__mulsi3>
    e60c:	8809883a 	mov	r4,r17
    e610:	e00b883a 	mov	r5,fp
    e614:	102b883a 	mov	r21,r2
    e618:	000e5740 	call	e574 <__mulsi3>
    e61c:	800b883a 	mov	r5,r16
    e620:	a009883a 	mov	r4,r20
    e624:	1023883a 	mov	r17,r2
    e628:	000e5740 	call	e574 <__mulsi3>
    e62c:	a009883a 	mov	r4,r20
    e630:	e00b883a 	mov	r5,fp
    e634:	1021883a 	mov	r16,r2
    e638:	000e5740 	call	e574 <__mulsi3>
    e63c:	a8ffffcc 	andi	r3,r21,65535
    e640:	a82ad43a 	srli	r21,r21,16
    e644:	8c23883a 	add	r17,r17,r16
    e648:	1011883a 	mov	r8,r2
    e64c:	ac6b883a 	add	r21,r21,r17
    e650:	a804943a 	slli	r2,r21,16
    e654:	b009883a 	mov	r4,r22
    e658:	980b883a 	mov	r5,r19
    e65c:	10c7883a 	add	r3,r2,r3
    e660:	a812d43a 	srli	r9,r21,16
    e664:	180d883a 	mov	r6,r3
    e668:	ac00022e 	bgeu	r21,r16,e674 <__muldi3+0xc8>
    e66c:	00800074 	movhi	r2,1
    e670:	4091883a 	add	r8,r8,r2
    e674:	4267883a 	add	r19,r8,r9
    e678:	302d883a 	mov	r22,r6
    e67c:	000e5740 	call	e574 <__mulsi3>
    e680:	d9400317 	ldw	r5,12(sp)
    e684:	d9000017 	ldw	r4,0(sp)
    e688:	1023883a 	mov	r17,r2
    e68c:	000e5740 	call	e574 <__mulsi3>
    e690:	14cb883a 	add	r5,r2,r19
    e694:	894b883a 	add	r5,r17,r5
    e698:	b005883a 	mov	r2,r22
    e69c:	2807883a 	mov	r3,r5
    e6a0:	dfc00d17 	ldw	ra,52(sp)
    e6a4:	df000c17 	ldw	fp,48(sp)
    e6a8:	ddc00b17 	ldw	r23,44(sp)
    e6ac:	dd800a17 	ldw	r22,40(sp)
    e6b0:	dd400917 	ldw	r21,36(sp)
    e6b4:	dd000817 	ldw	r20,32(sp)
    e6b8:	dcc00717 	ldw	r19,28(sp)
    e6bc:	dc800617 	ldw	r18,24(sp)
    e6c0:	dc400517 	ldw	r17,20(sp)
    e6c4:	dc000417 	ldw	r16,16(sp)
    e6c8:	dec00e04 	addi	sp,sp,56
    e6cc:	f800283a 	ret

0000e6d0 <__clzsi2>:
    e6d0:	00bfffd4 	movui	r2,65535
    e6d4:	11000e36 	bltu	r2,r4,e710 <__clzsi2+0x40>
    e6d8:	00803fc4 	movi	r2,255
    e6dc:	01400204 	movi	r5,8
    e6e0:	0007883a 	mov	r3,zero
    e6e4:	11001036 	bltu	r2,r4,e728 <__clzsi2+0x58>
    e6e8:	000b883a 	mov	r5,zero
    e6ec:	20c6d83a 	srl	r3,r4,r3
    e6f0:	00800074 	movhi	r2,1
    e6f4:	10bbb404 	addi	r2,r2,-4400
    e6f8:	1887883a 	add	r3,r3,r2
    e6fc:	18800003 	ldbu	r2,0(r3)
    e700:	00c00804 	movi	r3,32
    e704:	2885883a 	add	r2,r5,r2
    e708:	1885c83a 	sub	r2,r3,r2
    e70c:	f800283a 	ret
    e710:	01400404 	movi	r5,16
    e714:	00804034 	movhi	r2,256
    e718:	10bfffc4 	addi	r2,r2,-1
    e71c:	2807883a 	mov	r3,r5
    e720:	113ff22e 	bgeu	r2,r4,e6ec <__clzsi2+0x1c>
    e724:	01400604 	movi	r5,24
    e728:	2807883a 	mov	r3,r5
    e72c:	20c6d83a 	srl	r3,r4,r3
    e730:	00800074 	movhi	r2,1
    e734:	10bbb404 	addi	r2,r2,-4400
    e738:	1887883a 	add	r3,r3,r2
    e73c:	18800003 	ldbu	r2,0(r3)
    e740:	00c00804 	movi	r3,32
    e744:	2885883a 	add	r2,r5,r2
    e748:	1885c83a 	sub	r2,r3,r2
    e74c:	f800283a 	ret

0000e750 <__pack_d>:
    e750:	20c00017 	ldw	r3,0(r4)
    e754:	defffd04 	addi	sp,sp,-12
    e758:	dc000015 	stw	r16,0(sp)
    e75c:	dc800215 	stw	r18,8(sp)
    e760:	dc400115 	stw	r17,4(sp)
    e764:	00800044 	movi	r2,1
    e768:	22000317 	ldw	r8,12(r4)
    e76c:	001f883a 	mov	r15,zero
    e770:	22400417 	ldw	r9,16(r4)
    e774:	24000117 	ldw	r16,4(r4)
    e778:	10c0552e 	bgeu	r2,r3,e8d0 <__pack_d+0x180>
    e77c:	00800104 	movi	r2,4
    e780:	18804f26 	beq	r3,r2,e8c0 <__pack_d+0x170>
    e784:	00800084 	movi	r2,2
    e788:	18800226 	beq	r3,r2,e794 <__pack_d+0x44>
    e78c:	4244b03a 	or	r2,r8,r9
    e790:	10001a1e 	bne	r2,zero,e7fc <__pack_d+0xac>
    e794:	000d883a 	mov	r6,zero
    e798:	000f883a 	mov	r7,zero
    e79c:	0011883a 	mov	r8,zero
    e7a0:	00800434 	movhi	r2,16
    e7a4:	10bfffc4 	addi	r2,r2,-1
    e7a8:	301d883a 	mov	r14,r6
    e7ac:	3884703a 	and	r2,r7,r2
    e7b0:	400a953a 	slli	r5,r8,20
    e7b4:	79bffc2c 	andhi	r6,r15,65520
    e7b8:	308cb03a 	or	r6,r6,r2
    e7bc:	00e00434 	movhi	r3,32784
    e7c0:	18ffffc4 	addi	r3,r3,-1
    e7c4:	800497fa 	slli	r2,r16,31
    e7c8:	30c6703a 	and	r3,r6,r3
    e7cc:	1946b03a 	or	r3,r3,r5
    e7d0:	01600034 	movhi	r5,32768
    e7d4:	297fffc4 	addi	r5,r5,-1
    e7d8:	194a703a 	and	r5,r3,r5
    e7dc:	288ab03a 	or	r5,r5,r2
    e7e0:	2807883a 	mov	r3,r5
    e7e4:	7005883a 	mov	r2,r14
    e7e8:	dc800217 	ldw	r18,8(sp)
    e7ec:	dc400117 	ldw	r17,4(sp)
    e7f0:	dc000017 	ldw	r16,0(sp)
    e7f4:	dec00304 	addi	sp,sp,12
    e7f8:	f800283a 	ret
    e7fc:	21000217 	ldw	r4,8(r4)
    e800:	00bf0084 	movi	r2,-1022
    e804:	20803f16 	blt	r4,r2,e904 <__pack_d+0x1b4>
    e808:	0080ffc4 	movi	r2,1023
    e80c:	11002c16 	blt	r2,r4,e8c0 <__pack_d+0x170>
    e810:	00803fc4 	movi	r2,255
    e814:	408c703a 	and	r6,r8,r2
    e818:	00802004 	movi	r2,128
    e81c:	0007883a 	mov	r3,zero
    e820:	000f883a 	mov	r7,zero
    e824:	2280ffc4 	addi	r10,r4,1023
    e828:	30801e26 	beq	r6,r2,e8a4 <__pack_d+0x154>
    e82c:	00801fc4 	movi	r2,127
    e830:	4089883a 	add	r4,r8,r2
    e834:	220d803a 	cmpltu	r6,r4,r8
    e838:	324d883a 	add	r6,r6,r9
    e83c:	2011883a 	mov	r8,r4
    e840:	3013883a 	mov	r9,r6
    e844:	00880034 	movhi	r2,8192
    e848:	10bfffc4 	addi	r2,r2,-1
    e84c:	12400d36 	bltu	r2,r9,e884 <__pack_d+0x134>
    e850:	4804963a 	slli	r2,r9,24
    e854:	400cd23a 	srli	r6,r8,8
    e858:	480ed23a 	srli	r7,r9,8
    e85c:	013fffc4 	movi	r4,-1
    e860:	118cb03a 	or	r6,r2,r6
    e864:	01400434 	movhi	r5,16
    e868:	297fffc4 	addi	r5,r5,-1
    e86c:	3104703a 	and	r2,r6,r4
    e870:	3946703a 	and	r3,r7,r5
    e874:	5201ffcc 	andi	r8,r10,2047
    e878:	100d883a 	mov	r6,r2
    e87c:	180f883a 	mov	r7,r3
    e880:	003fc706 	br	e7a0 <__pack_d+0x50>
    e884:	480897fa 	slli	r4,r9,31
    e888:	4004d07a 	srli	r2,r8,1
    e88c:	4806d07a 	srli	r3,r9,1
    e890:	52800044 	addi	r10,r10,1
    e894:	2084b03a 	or	r2,r4,r2
    e898:	1011883a 	mov	r8,r2
    e89c:	1813883a 	mov	r9,r3
    e8a0:	003feb06 	br	e850 <__pack_d+0x100>
    e8a4:	383fe11e 	bne	r7,zero,e82c <__pack_d+0xdc>
    e8a8:	01004004 	movi	r4,256
    e8ac:	4104703a 	and	r2,r8,r4
    e8b0:	10c4b03a 	or	r2,r2,r3
    e8b4:	103fe326 	beq	r2,zero,e844 <__pack_d+0xf4>
    e8b8:	3005883a 	mov	r2,r6
    e8bc:	003fdc06 	br	e830 <__pack_d+0xe0>
    e8c0:	000d883a 	mov	r6,zero
    e8c4:	000f883a 	mov	r7,zero
    e8c8:	0201ffc4 	movi	r8,2047
    e8cc:	003fb406 	br	e7a0 <__pack_d+0x50>
    e8d0:	0005883a 	mov	r2,zero
    e8d4:	00c00234 	movhi	r3,8
    e8d8:	408cb03a 	or	r6,r8,r2
    e8dc:	48ceb03a 	or	r7,r9,r3
    e8e0:	013fffc4 	movi	r4,-1
    e8e4:	01400434 	movhi	r5,16
    e8e8:	297fffc4 	addi	r5,r5,-1
    e8ec:	3104703a 	and	r2,r6,r4
    e8f0:	3946703a 	and	r3,r7,r5
    e8f4:	100d883a 	mov	r6,r2
    e8f8:	180f883a 	mov	r7,r3
    e8fc:	0201ffc4 	movi	r8,2047
    e900:	003fa706 	br	e7a0 <__pack_d+0x50>
    e904:	1109c83a 	sub	r4,r2,r4
    e908:	00800e04 	movi	r2,56
    e90c:	11004316 	blt	r2,r4,ea1c <__pack_d+0x2cc>
    e910:	21fff804 	addi	r7,r4,-32
    e914:	38004516 	blt	r7,zero,ea2c <__pack_d+0x2dc>
    e918:	49d8d83a 	srl	r12,r9,r7
    e91c:	001b883a 	mov	r13,zero
    e920:	0023883a 	mov	r17,zero
    e924:	01400044 	movi	r5,1
    e928:	0025883a 	mov	r18,zero
    e92c:	38004716 	blt	r7,zero,ea4c <__pack_d+0x2fc>
    e930:	29d6983a 	sll	r11,r5,r7
    e934:	0015883a 	mov	r10,zero
    e938:	00bfffc4 	movi	r2,-1
    e93c:	5089883a 	add	r4,r10,r2
    e940:	588b883a 	add	r5,r11,r2
    e944:	228d803a 	cmpltu	r6,r4,r10
    e948:	314b883a 	add	r5,r6,r5
    e94c:	4104703a 	and	r2,r8,r4
    e950:	4946703a 	and	r3,r9,r5
    e954:	10c4b03a 	or	r2,r2,r3
    e958:	10000226 	beq	r2,zero,e964 <__pack_d+0x214>
    e95c:	04400044 	movi	r17,1
    e960:	0025883a 	mov	r18,zero
    e964:	00803fc4 	movi	r2,255
    e968:	644eb03a 	or	r7,r12,r17
    e96c:	3892703a 	and	r9,r7,r2
    e970:	00802004 	movi	r2,128
    e974:	6c90b03a 	or	r8,r13,r18
    e978:	0015883a 	mov	r10,zero
    e97c:	48801626 	beq	r9,r2,e9d8 <__pack_d+0x288>
    e980:	01001fc4 	movi	r4,127
    e984:	3905883a 	add	r2,r7,r4
    e988:	11cd803a 	cmpltu	r6,r2,r7
    e98c:	320d883a 	add	r6,r6,r8
    e990:	100f883a 	mov	r7,r2
    e994:	00840034 	movhi	r2,4096
    e998:	10bfffc4 	addi	r2,r2,-1
    e99c:	3011883a 	mov	r8,r6
    e9a0:	0007883a 	mov	r3,zero
    e9a4:	11801b36 	bltu	r2,r6,ea14 <__pack_d+0x2c4>
    e9a8:	4004963a 	slli	r2,r8,24
    e9ac:	3808d23a 	srli	r4,r7,8
    e9b0:	400ad23a 	srli	r5,r8,8
    e9b4:	1813883a 	mov	r9,r3
    e9b8:	1108b03a 	or	r4,r2,r4
    e9bc:	00bfffc4 	movi	r2,-1
    e9c0:	00c00434 	movhi	r3,16
    e9c4:	18ffffc4 	addi	r3,r3,-1
    e9c8:	208c703a 	and	r6,r4,r2
    e9cc:	28ce703a 	and	r7,r5,r3
    e9d0:	4a01ffcc 	andi	r8,r9,2047
    e9d4:	003f7206 	br	e7a0 <__pack_d+0x50>
    e9d8:	503fe91e 	bne	r10,zero,e980 <__pack_d+0x230>
    e9dc:	01004004 	movi	r4,256
    e9e0:	3904703a 	and	r2,r7,r4
    e9e4:	0007883a 	mov	r3,zero
    e9e8:	10c4b03a 	or	r2,r2,r3
    e9ec:	10000626 	beq	r2,zero,ea08 <__pack_d+0x2b8>
    e9f0:	3a45883a 	add	r2,r7,r9
    e9f4:	11cd803a 	cmpltu	r6,r2,r7
    e9f8:	320d883a 	add	r6,r6,r8
    e9fc:	100f883a 	mov	r7,r2
    ea00:	3011883a 	mov	r8,r6
    ea04:	0007883a 	mov	r3,zero
    ea08:	00840034 	movhi	r2,4096
    ea0c:	10bfffc4 	addi	r2,r2,-1
    ea10:	123fe52e 	bgeu	r2,r8,e9a8 <__pack_d+0x258>
    ea14:	00c00044 	movi	r3,1
    ea18:	003fe306 	br	e9a8 <__pack_d+0x258>
    ea1c:	0009883a 	mov	r4,zero
    ea20:	0013883a 	mov	r9,zero
    ea24:	000b883a 	mov	r5,zero
    ea28:	003fe406 	br	e9bc <__pack_d+0x26c>
    ea2c:	4a47883a 	add	r3,r9,r9
    ea30:	008007c4 	movi	r2,31
    ea34:	1105c83a 	sub	r2,r2,r4
    ea38:	1886983a 	sll	r3,r3,r2
    ea3c:	4118d83a 	srl	r12,r8,r4
    ea40:	491ad83a 	srl	r13,r9,r4
    ea44:	1b18b03a 	or	r12,r3,r12
    ea48:	003fb506 	br	e920 <__pack_d+0x1d0>
    ea4c:	2806d07a 	srli	r3,r5,1
    ea50:	008007c4 	movi	r2,31
    ea54:	1105c83a 	sub	r2,r2,r4
    ea58:	1896d83a 	srl	r11,r3,r2
    ea5c:	2914983a 	sll	r10,r5,r4
    ea60:	003fb506 	br	e938 <__pack_d+0x1e8>

0000ea64 <__unpack_d>:
    ea64:	20c00117 	ldw	r3,4(r4)
    ea68:	22400017 	ldw	r9,0(r4)
    ea6c:	00800434 	movhi	r2,16
    ea70:	10bfffc4 	addi	r2,r2,-1
    ea74:	1808d53a 	srli	r4,r3,20
    ea78:	180cd7fa 	srli	r6,r3,31
    ea7c:	1894703a 	and	r10,r3,r2
    ea80:	2201ffcc 	andi	r8,r4,2047
    ea84:	281b883a 	mov	r13,r5
    ea88:	4817883a 	mov	r11,r9
    ea8c:	29800115 	stw	r6,4(r5)
    ea90:	5019883a 	mov	r12,r10
    ea94:	40001e1e 	bne	r8,zero,eb10 <__unpack_d+0xac>
    ea98:	4a84b03a 	or	r2,r9,r10
    ea9c:	10001926 	beq	r2,zero,eb04 <__unpack_d+0xa0>
    eaa0:	4804d63a 	srli	r2,r9,24
    eaa4:	500c923a 	slli	r6,r10,8
    eaa8:	013f0084 	movi	r4,-1022
    eaac:	00c40034 	movhi	r3,4096
    eab0:	18ffffc4 	addi	r3,r3,-1
    eab4:	118cb03a 	or	r6,r2,r6
    eab8:	008000c4 	movi	r2,3
    eabc:	480a923a 	slli	r5,r9,8
    eac0:	68800015 	stw	r2,0(r13)
    eac4:	69000215 	stw	r4,8(r13)
    eac8:	19800b36 	bltu	r3,r6,eaf8 <__unpack_d+0x94>
    eacc:	200f883a 	mov	r7,r4
    ead0:	1811883a 	mov	r8,r3
    ead4:	2945883a 	add	r2,r5,r5
    ead8:	1149803a 	cmpltu	r4,r2,r5
    eadc:	3187883a 	add	r3,r6,r6
    eae0:	20c9883a 	add	r4,r4,r3
    eae4:	100b883a 	mov	r5,r2
    eae8:	200d883a 	mov	r6,r4
    eaec:	39ffffc4 	addi	r7,r7,-1
    eaf0:	413ff82e 	bgeu	r8,r4,ead4 <__unpack_d+0x70>
    eaf4:	69c00215 	stw	r7,8(r13)
    eaf8:	69800415 	stw	r6,16(r13)
    eafc:	69400315 	stw	r5,12(r13)
    eb00:	f800283a 	ret
    eb04:	00800084 	movi	r2,2
    eb08:	28800015 	stw	r2,0(r5)
    eb0c:	f800283a 	ret
    eb10:	0081ffc4 	movi	r2,2047
    eb14:	40800f26 	beq	r8,r2,eb54 <__unpack_d+0xf0>
    eb18:	480cd63a 	srli	r6,r9,24
    eb1c:	5006923a 	slli	r3,r10,8
    eb20:	4804923a 	slli	r2,r9,8
    eb24:	0009883a 	mov	r4,zero
    eb28:	30c6b03a 	or	r3,r6,r3
    eb2c:	01440034 	movhi	r5,4096
    eb30:	110cb03a 	or	r6,r2,r4
    eb34:	423f0044 	addi	r8,r8,-1023
    eb38:	194eb03a 	or	r7,r3,r5
    eb3c:	008000c4 	movi	r2,3
    eb40:	69c00415 	stw	r7,16(r13)
    eb44:	6a000215 	stw	r8,8(r13)
    eb48:	68800015 	stw	r2,0(r13)
    eb4c:	69800315 	stw	r6,12(r13)
    eb50:	f800283a 	ret
    eb54:	4a84b03a 	or	r2,r9,r10
    eb58:	1000031e 	bne	r2,zero,eb68 <__unpack_d+0x104>
    eb5c:	00800104 	movi	r2,4
    eb60:	28800015 	stw	r2,0(r5)
    eb64:	f800283a 	ret
    eb68:	0009883a 	mov	r4,zero
    eb6c:	01400234 	movhi	r5,8
    eb70:	4904703a 	and	r2,r9,r4
    eb74:	5146703a 	and	r3,r10,r5
    eb78:	10c4b03a 	or	r2,r2,r3
    eb7c:	10000526 	beq	r2,zero,eb94 <__unpack_d+0x130>
    eb80:	00800044 	movi	r2,1
    eb84:	68800015 	stw	r2,0(r13)
    eb88:	6b000415 	stw	r12,16(r13)
    eb8c:	6ac00315 	stw	r11,12(r13)
    eb90:	f800283a 	ret
    eb94:	68000015 	stw	zero,0(r13)
    eb98:	003ffb06 	br	eb88 <__unpack_d+0x124>

0000eb9c <__fpcmp_parts_d>:
    eb9c:	21800017 	ldw	r6,0(r4)
    eba0:	00c00044 	movi	r3,1
    eba4:	19800a2e 	bgeu	r3,r6,ebd0 <__fpcmp_parts_d+0x34>
    eba8:	28800017 	ldw	r2,0(r5)
    ebac:	1880082e 	bgeu	r3,r2,ebd0 <__fpcmp_parts_d+0x34>
    ebb0:	00c00104 	movi	r3,4
    ebb4:	30c02626 	beq	r6,r3,ec50 <__fpcmp_parts_d+0xb4>
    ebb8:	10c02226 	beq	r2,r3,ec44 <__fpcmp_parts_d+0xa8>
    ebbc:	00c00084 	movi	r3,2
    ebc0:	30c00526 	beq	r6,r3,ebd8 <__fpcmp_parts_d+0x3c>
    ebc4:	10c0071e 	bne	r2,r3,ebe4 <__fpcmp_parts_d+0x48>
    ebc8:	20800117 	ldw	r2,4(r4)
    ebcc:	1000091e 	bne	r2,zero,ebf4 <__fpcmp_parts_d+0x58>
    ebd0:	00800044 	movi	r2,1
    ebd4:	f800283a 	ret
    ebd8:	10c01a1e 	bne	r2,r3,ec44 <__fpcmp_parts_d+0xa8>
    ebdc:	0005883a 	mov	r2,zero
    ebe0:	f800283a 	ret
    ebe4:	22000117 	ldw	r8,4(r4)
    ebe8:	28800117 	ldw	r2,4(r5)
    ebec:	40800326 	beq	r8,r2,ebfc <__fpcmp_parts_d+0x60>
    ebf0:	403ff726 	beq	r8,zero,ebd0 <__fpcmp_parts_d+0x34>
    ebf4:	00bfffc4 	movi	r2,-1
    ebf8:	f800283a 	ret
    ebfc:	20c00217 	ldw	r3,8(r4)
    ec00:	28800217 	ldw	r2,8(r5)
    ec04:	10fffa16 	blt	r2,r3,ebf0 <__fpcmp_parts_d+0x54>
    ec08:	18800916 	blt	r3,r2,ec30 <__fpcmp_parts_d+0x94>
    ec0c:	21c00417 	ldw	r7,16(r4)
    ec10:	28c00417 	ldw	r3,16(r5)
    ec14:	21800317 	ldw	r6,12(r4)
    ec18:	28800317 	ldw	r2,12(r5)
    ec1c:	19fff436 	bltu	r3,r7,ebf0 <__fpcmp_parts_d+0x54>
    ec20:	38c00526 	beq	r7,r3,ec38 <__fpcmp_parts_d+0x9c>
    ec24:	38c00236 	bltu	r7,r3,ec30 <__fpcmp_parts_d+0x94>
    ec28:	19ffec1e 	bne	r3,r7,ebdc <__fpcmp_parts_d+0x40>
    ec2c:	30bfeb2e 	bgeu	r6,r2,ebdc <__fpcmp_parts_d+0x40>
    ec30:	403fe71e 	bne	r8,zero,ebd0 <__fpcmp_parts_d+0x34>
    ec34:	003fef06 	br	ebf4 <__fpcmp_parts_d+0x58>
    ec38:	11bffa2e 	bgeu	r2,r6,ec24 <__fpcmp_parts_d+0x88>
    ec3c:	403fe426 	beq	r8,zero,ebd0 <__fpcmp_parts_d+0x34>
    ec40:	003fec06 	br	ebf4 <__fpcmp_parts_d+0x58>
    ec44:	28800117 	ldw	r2,4(r5)
    ec48:	103fe11e 	bne	r2,zero,ebd0 <__fpcmp_parts_d+0x34>
    ec4c:	003fe906 	br	ebf4 <__fpcmp_parts_d+0x58>
    ec50:	11bfdd1e 	bne	r2,r6,ebc8 <__fpcmp_parts_d+0x2c>
    ec54:	28c00117 	ldw	r3,4(r5)
    ec58:	20800117 	ldw	r2,4(r4)
    ec5c:	1885c83a 	sub	r2,r3,r2
    ec60:	f800283a 	ret

0000ec64 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    ec64:	defffd04 	addi	sp,sp,-12
    ec68:	df000215 	stw	fp,8(sp)
    ec6c:	df000204 	addi	fp,sp,8
    ec70:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    ec74:	e0bfff17 	ldw	r2,-4(fp)
    ec78:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ec7c:	e0bffe17 	ldw	r2,-8(fp)
    ec80:	1005003a 	cmpeq	r2,r2,zero
    ec84:	1000021e 	bne	r2,zero,ec90 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    ec88:	002af070 	cmpltui	zero,zero,43969
    ec8c:	00000106 	br	ec94 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    ec90:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    ec94:	e037883a 	mov	sp,fp
    ec98:	df000017 	ldw	fp,0(sp)
    ec9c:	dec00104 	addi	sp,sp,4
    eca0:	f800283a 	ret

0000eca4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    eca4:	defffd04 	addi	sp,sp,-12
    eca8:	dfc00215 	stw	ra,8(sp)
    ecac:	df000115 	stw	fp,4(sp)
    ecb0:	df000104 	addi	fp,sp,4
    ecb4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ecb8:	00800074 	movhi	r2,1
    ecbc:	1082e244 	addi	r2,r2,2953
    ecc0:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ecc4:	e13fff17 	ldw	r4,-4(fp)
    ecc8:	000ec640 	call	ec64 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    eccc:	003fff06 	br	eccc <_exit+0x28>
    ecd0:	0000d3bc 	xorhi	zero,zero,846
